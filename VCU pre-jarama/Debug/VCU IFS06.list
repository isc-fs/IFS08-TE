
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018c34  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b3c  08018f08  08018f08  00019f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019a44  08019a44  0001aa44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019a4c  08019a4c  0001aa4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019a50  08019a50  0001aa50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  08019a54  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a58  240001ec  08019c40  0001b1ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c44  08019c40  0001bc44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b1ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029e71  00000000  00000000  0001b21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044e6  00000000  00000000  0004508b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002190  00000000  00000000  00049578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a17  00000000  00000000  0004b708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003afba  00000000  00000000  0004d11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002af51  00000000  00000000  000880d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017eff5  00000000  00000000  000b302a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023201f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a658  00000000  00000000  00232064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  0023c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001ec 	.word	0x240001ec
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018eec 	.word	0x08018eec

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f0 	.word	0x240001f0
 800030c:	08018eec 	.word	0x08018eec

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9c0 	b.w	8000ad0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	468e      	mov	lr, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	4688      	mov	r8, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4617      	mov	r7, r2
 80007ec:	d962      	bls.n	80008b4 <__udivmoddi4+0xdc>
 80007ee:	fab2 f682 	clz	r6, r2
 80007f2:	b14e      	cbz	r6, 8000808 <__udivmoddi4+0x30>
 80007f4:	f1c6 0320 	rsb	r3, r6, #32
 80007f8:	fa01 f806 	lsl.w	r8, r1, r6
 80007fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000800:	40b7      	lsls	r7, r6
 8000802:	ea43 0808 	orr.w	r8, r3, r8
 8000806:	40b4      	lsls	r4, r6
 8000808:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800080c:	fa1f fc87 	uxth.w	ip, r7
 8000810:	fbb8 f1fe 	udiv	r1, r8, lr
 8000814:	0c23      	lsrs	r3, r4, #16
 8000816:	fb0e 8811 	mls	r8, lr, r1, r8
 800081a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081e:	fb01 f20c 	mul.w	r2, r1, ip
 8000822:	429a      	cmp	r2, r3
 8000824:	d909      	bls.n	800083a <__udivmoddi4+0x62>
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	f101 30ff 	add.w	r0, r1, #4294967295
 800082c:	f080 80ea 	bcs.w	8000a04 <__udivmoddi4+0x22c>
 8000830:	429a      	cmp	r2, r3
 8000832:	f240 80e7 	bls.w	8000a04 <__udivmoddi4+0x22c>
 8000836:	3902      	subs	r1, #2
 8000838:	443b      	add	r3, r7
 800083a:	1a9a      	subs	r2, r3, r2
 800083c:	b2a3      	uxth	r3, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084a:	fb00 fc0c 	mul.w	ip, r0, ip
 800084e:	459c      	cmp	ip, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x8e>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f100 32ff 	add.w	r2, r0, #4294967295
 8000858:	f080 80d6 	bcs.w	8000a08 <__udivmoddi4+0x230>
 800085c:	459c      	cmp	ip, r3
 800085e:	f240 80d3 	bls.w	8000a08 <__udivmoddi4+0x230>
 8000862:	443b      	add	r3, r7
 8000864:	3802      	subs	r0, #2
 8000866:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086a:	eba3 030c 	sub.w	r3, r3, ip
 800086e:	2100      	movs	r1, #0
 8000870:	b11d      	cbz	r5, 800087a <__udivmoddi4+0xa2>
 8000872:	40f3      	lsrs	r3, r6
 8000874:	2200      	movs	r2, #0
 8000876:	e9c5 3200 	strd	r3, r2, [r5]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d905      	bls.n	800088e <__udivmoddi4+0xb6>
 8000882:	b10d      	cbz	r5, 8000888 <__udivmoddi4+0xb0>
 8000884:	e9c5 0100 	strd	r0, r1, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	4608      	mov	r0, r1
 800088c:	e7f5      	b.n	800087a <__udivmoddi4+0xa2>
 800088e:	fab3 f183 	clz	r1, r3
 8000892:	2900      	cmp	r1, #0
 8000894:	d146      	bne.n	8000924 <__udivmoddi4+0x14c>
 8000896:	4573      	cmp	r3, lr
 8000898:	d302      	bcc.n	80008a0 <__udivmoddi4+0xc8>
 800089a:	4282      	cmp	r2, r0
 800089c:	f200 8105 	bhi.w	8000aaa <__udivmoddi4+0x2d2>
 80008a0:	1a84      	subs	r4, r0, r2
 80008a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008a6:	2001      	movs	r0, #1
 80008a8:	4690      	mov	r8, r2
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d0e5      	beq.n	800087a <__udivmoddi4+0xa2>
 80008ae:	e9c5 4800 	strd	r4, r8, [r5]
 80008b2:	e7e2      	b.n	800087a <__udivmoddi4+0xa2>
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	f000 8090 	beq.w	80009da <__udivmoddi4+0x202>
 80008ba:	fab2 f682 	clz	r6, r2
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f040 80a4 	bne.w	8000a0c <__udivmoddi4+0x234>
 80008c4:	1a8a      	subs	r2, r1, r2
 80008c6:	0c03      	lsrs	r3, r0, #16
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	b280      	uxth	r0, r0
 80008ce:	b2bc      	uxth	r4, r7
 80008d0:	2101      	movs	r1, #1
 80008d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008de:	fb04 f20c 	mul.w	r2, r4, ip
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x11e>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x11c>
 80008ee:	429a      	cmp	r2, r3
 80008f0:	f200 80e0 	bhi.w	8000ab4 <__udivmoddi4+0x2dc>
 80008f4:	46c4      	mov	ip, r8
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000900:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000904:	fb02 f404 	mul.w	r4, r2, r4
 8000908:	429c      	cmp	r4, r3
 800090a:	d907      	bls.n	800091c <__udivmoddi4+0x144>
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x142>
 8000914:	429c      	cmp	r4, r3
 8000916:	f200 80ca 	bhi.w	8000aae <__udivmoddi4+0x2d6>
 800091a:	4602      	mov	r2, r0
 800091c:	1b1b      	subs	r3, r3, r4
 800091e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000922:	e7a5      	b.n	8000870 <__udivmoddi4+0x98>
 8000924:	f1c1 0620 	rsb	r6, r1, #32
 8000928:	408b      	lsls	r3, r1
 800092a:	fa22 f706 	lsr.w	r7, r2, r6
 800092e:	431f      	orrs	r7, r3
 8000930:	fa0e f401 	lsl.w	r4, lr, r1
 8000934:	fa20 f306 	lsr.w	r3, r0, r6
 8000938:	fa2e fe06 	lsr.w	lr, lr, r6
 800093c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000940:	4323      	orrs	r3, r4
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	fa1f fc87 	uxth.w	ip, r7
 800094a:	fbbe f0f9 	udiv	r0, lr, r9
 800094e:	0c1c      	lsrs	r4, r3, #16
 8000950:	fb09 ee10 	mls	lr, r9, r0, lr
 8000954:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000958:	fb00 fe0c 	mul.w	lr, r0, ip
 800095c:	45a6      	cmp	lr, r4
 800095e:	fa02 f201 	lsl.w	r2, r2, r1
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x1a0>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 3aff 	add.w	sl, r0, #4294967295
 800096a:	f080 809c 	bcs.w	8000aa6 <__udivmoddi4+0x2ce>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8099 	bls.w	8000aa6 <__udivmoddi4+0x2ce>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	eba4 040e 	sub.w	r4, r4, lr
 800097c:	fa1f fe83 	uxth.w	lr, r3
 8000980:	fbb4 f3f9 	udiv	r3, r4, r9
 8000984:	fb09 4413 	mls	r4, r9, r3, r4
 8000988:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800098c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000990:	45a4      	cmp	ip, r4
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x1ce>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f103 3eff 	add.w	lr, r3, #4294967295
 800099a:	f080 8082 	bcs.w	8000aa2 <__udivmoddi4+0x2ca>
 800099e:	45a4      	cmp	ip, r4
 80009a0:	d97f      	bls.n	8000aa2 <__udivmoddi4+0x2ca>
 80009a2:	3b02      	subs	r3, #2
 80009a4:	443c      	add	r4, r7
 80009a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009aa:	eba4 040c 	sub.w	r4, r4, ip
 80009ae:	fba0 ec02 	umull	lr, ip, r0, r2
 80009b2:	4564      	cmp	r4, ip
 80009b4:	4673      	mov	r3, lr
 80009b6:	46e1      	mov	r9, ip
 80009b8:	d362      	bcc.n	8000a80 <__udivmoddi4+0x2a8>
 80009ba:	d05f      	beq.n	8000a7c <__udivmoddi4+0x2a4>
 80009bc:	b15d      	cbz	r5, 80009d6 <__udivmoddi4+0x1fe>
 80009be:	ebb8 0203 	subs.w	r2, r8, r3
 80009c2:	eb64 0409 	sbc.w	r4, r4, r9
 80009c6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ca:	fa22 f301 	lsr.w	r3, r2, r1
 80009ce:	431e      	orrs	r6, r3
 80009d0:	40cc      	lsrs	r4, r1
 80009d2:	e9c5 6400 	strd	r6, r4, [r5]
 80009d6:	2100      	movs	r1, #0
 80009d8:	e74f      	b.n	800087a <__udivmoddi4+0xa2>
 80009da:	fbb1 fcf2 	udiv	ip, r1, r2
 80009de:	0c01      	lsrs	r1, r0, #16
 80009e0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009e4:	b280      	uxth	r0, r0
 80009e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ea:	463b      	mov	r3, r7
 80009ec:	4638      	mov	r0, r7
 80009ee:	463c      	mov	r4, r7
 80009f0:	46b8      	mov	r8, r7
 80009f2:	46be      	mov	lr, r7
 80009f4:	2620      	movs	r6, #32
 80009f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009fa:	eba2 0208 	sub.w	r2, r2, r8
 80009fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a02:	e766      	b.n	80008d2 <__udivmoddi4+0xfa>
 8000a04:	4601      	mov	r1, r0
 8000a06:	e718      	b.n	800083a <__udivmoddi4+0x62>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	e72c      	b.n	8000866 <__udivmoddi4+0x8e>
 8000a0c:	f1c6 0220 	rsb	r2, r6, #32
 8000a10:	fa2e f302 	lsr.w	r3, lr, r2
 8000a14:	40b7      	lsls	r7, r6
 8000a16:	40b1      	lsls	r1, r6
 8000a18:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a20:	430a      	orrs	r2, r1
 8000a22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a26:	b2bc      	uxth	r4, r7
 8000a28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a32:	fb08 f904 	mul.w	r9, r8, r4
 8000a36:	40b0      	lsls	r0, r6
 8000a38:	4589      	cmp	r9, r1
 8000a3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a3e:	b280      	uxth	r0, r0
 8000a40:	d93e      	bls.n	8000ac0 <__udivmoddi4+0x2e8>
 8000a42:	1879      	adds	r1, r7, r1
 8000a44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a48:	d201      	bcs.n	8000a4e <__udivmoddi4+0x276>
 8000a4a:	4589      	cmp	r9, r1
 8000a4c:	d81f      	bhi.n	8000a8e <__udivmoddi4+0x2b6>
 8000a4e:	eba1 0109 	sub.w	r1, r1, r9
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fb09 f804 	mul.w	r8, r9, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a64:	4542      	cmp	r2, r8
 8000a66:	d229      	bcs.n	8000abc <__udivmoddi4+0x2e4>
 8000a68:	18ba      	adds	r2, r7, r2
 8000a6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a6e:	d2c4      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a70:	4542      	cmp	r2, r8
 8000a72:	d2c2      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a74:	f1a9 0102 	sub.w	r1, r9, #2
 8000a78:	443a      	add	r2, r7
 8000a7a:	e7be      	b.n	80009fa <__udivmoddi4+0x222>
 8000a7c:	45f0      	cmp	r8, lr
 8000a7e:	d29d      	bcs.n	80009bc <__udivmoddi4+0x1e4>
 8000a80:	ebbe 0302 	subs.w	r3, lr, r2
 8000a84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a88:	3801      	subs	r0, #1
 8000a8a:	46e1      	mov	r9, ip
 8000a8c:	e796      	b.n	80009bc <__udivmoddi4+0x1e4>
 8000a8e:	eba7 0909 	sub.w	r9, r7, r9
 8000a92:	4449      	add	r1, r9
 8000a94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9c:	fb09 f804 	mul.w	r8, r9, r4
 8000aa0:	e7db      	b.n	8000a5a <__udivmoddi4+0x282>
 8000aa2:	4673      	mov	r3, lr
 8000aa4:	e77f      	b.n	80009a6 <__udivmoddi4+0x1ce>
 8000aa6:	4650      	mov	r0, sl
 8000aa8:	e766      	b.n	8000978 <__udivmoddi4+0x1a0>
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e6fd      	b.n	80008aa <__udivmoddi4+0xd2>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3a02      	subs	r2, #2
 8000ab2:	e733      	b.n	800091c <__udivmoddi4+0x144>
 8000ab4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ab8:	443b      	add	r3, r7
 8000aba:	e71c      	b.n	80008f6 <__udivmoddi4+0x11e>
 8000abc:	4649      	mov	r1, r9
 8000abe:	e79c      	b.n	80009fa <__udivmoddi4+0x222>
 8000ac0:	eba1 0109 	sub.w	r1, r1, r9
 8000ac4:	46c4      	mov	ip, r8
 8000ac6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aca:	fb09 f804 	mul.w	r8, r9, r4
 8000ace:	e7c4      	b.n	8000a5a <__udivmoddi4+0x282>

08000ad0 <__aeabi_idiv0>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	0000      	movs	r0, r0
	...

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ada:	f2ad 4d7c 	subw	sp, sp, #1148	@ 0x47c
 8000ade:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae0:	f003 fdbc 	bl	800465c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 fd06 	bl	80014f4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae8:	f000 fd72 	bl	80015d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f001 fa2c 	bl	8001f48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f001 fa0a 	bl	8001f08 <MX_DMA_Init>
  MX_ADC1_Init();
 8000af4:	f000 fd9e 	bl	8001634 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000af8:	f000 fe38 	bl	800176c <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000afc:	f000 fe9e 	bl	800183c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000b00:	f000 ff1a 	bl	8001938 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000b04:	f001 f888 	bl	8001c18 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000b08:	f001 f9b2 	bl	8001e70 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b0c:	f001 f93c 	bl	8001d88 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000b10:	f001 f962 	bl	8001dd8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000b14:	f001 f80c 	bl	8001b30 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000b18:	f013 fbde 	bl	80142d8 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 8000b1c:	f000 ff8a 	bl	8001a34 <MX_FDCAN3_Init>
  MX_SPI1_Init();
 8000b20:	f001 f824 	bl	8001b6c <MX_SPI1_Init>


  /* USER CODE BEGIN 2 */
	// Inicializar tarjeta microSD
  print_early("\r\n=== BOOT ===\r\n");
 8000b24:	48ca      	ldr	r0, [pc, #808]	@ (8000e50 <main+0x378>)
 8000b26:	f002 fab5 	bl	8003094 <print_early>
  dump_reset_cause();
 8000b2a:	f002 facb 	bl	80030c4 <dump_reset_cause>
  heartbeat_pin_init();
 8000b2e:	f002 fb67 	bl	8003200 <heartbeat_pin_init>
	//SDCard_start();
	//HAL_Delay(2000)
  /* USER CODE BEGIN 2 */
  HAL_Delay(5);  // let rails settle
 8000b32:	2005      	movs	r0, #5
 8000b34:	f003 fe24 	bl	8004780 <HAL_Delay>

  // --- Keep radio idle while configuring ---
  HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); // CE low
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2140      	movs	r1, #64	@ 0x40
 8000b3c:	48c5      	ldr	r0, [pc, #788]	@ (8000e54 <main+0x37c>)
 8000b3e:	f00a f803 	bl	800ab48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   // CSN high
 8000b42:	2201      	movs	r2, #1
 8000b44:	2108      	movs	r1, #8
 8000b46:	48c4      	ldr	r0, [pc, #784]	@ (8000e58 <main+0x380>)
 8000b48:	f009 fffe 	bl	800ab48 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f003 fe17 	bl	8004780 <HAL_Delay>


  //CHECK de float formatting
  char t[80];
  int n = snprintf(t, sizeof t, "[SMOKE] %.2f %.2f %.2f\r\n", 0.0f, 1.23f, 456.0f);
 8000b52:	f507 7073 	add.w	r0, r7, #972	@ 0x3cc
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	4bc0      	ldr	r3, [pc, #768]	@ (8000e5c <main+0x384>)
 8000b5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000b60:	a3b9      	add	r3, pc, #740	@ (adr r3, 8000e48 <main+0x370>)
 8000b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b6a:	f04f 0200 	mov.w	r2, #0
 8000b6e:	f04f 0300 	mov.w	r3, #0
 8000b72:	e9cd 2300 	strd	r2, r3, [sp]
 8000b76:	4aba      	ldr	r2, [pc, #744]	@ (8000e60 <main+0x388>)
 8000b78:	2150      	movs	r1, #80	@ 0x50
 8000b7a:	f014 fe03 	bl	8015784 <sniprintf>
 8000b7e:	f8c7 0430 	str.w	r0, [r7, #1072]	@ 0x430
  HAL_UART_Transmit(&huart2, (uint8_t*)t, n, 100);
 8000b82:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f507 7173 	add.w	r1, r7, #972	@ 0x3cc
 8000b8c:	2364      	movs	r3, #100	@ 0x64
 8000b8e:	48b5      	ldr	r0, [pc, #724]	@ (8000e64 <main+0x38c>)
 8000b90:	f011 fbba 	bl	8012308 <HAL_UART_Transmit>

  setvbuf(stdout, NULL, _IONBF, 0);
 8000b94:	4bb4      	ldr	r3, [pc, #720]	@ (8000e68 <main+0x390>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6898      	ldr	r0, [r3, #8]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f014 fd3c 	bl	801561c <setvbuf>



  // Sanity: write CONFIG=0x0B and read it back
  uint8_t w_cfg[2] = { (uint8_t)(0x20 | 0x00), 0x0B }; // W_REGISTER|CONFIG = 0x0B
 8000ba4:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 8000ba8:	f8a7 33c8 	strh.w	r3, [r7, #968]	@ 0x3c8
  uint8_t r_cfg[2] = { 0x00, 0xFF };                   // R_REGISTER|CONFIG, dummy
 8000bac:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000bb0:	f8a7 33c4 	strh.w	r3, [r7, #964]	@ 0x3c4
  uint8_t rxw[2] = {0}, rxr[2] = {0};
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8a7 33c0 	strh.w	r3, [r7, #960]	@ 0x3c0
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8a7 33bc 	strh.w	r3, [r7, #956]	@ 0x3bc

  CSN_LOW();  HAL_SPI_TransmitReceive(&hspi1, w_cfg, rxw, 2, 100);  CSN_HIGH();
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	48a4      	ldr	r0, [pc, #656]	@ (8000e58 <main+0x380>)
 8000bc6:	f009 ffbf 	bl	800ab48 <HAL_GPIO_WritePin>
 8000bca:	f507 7270 	add.w	r2, r7, #960	@ 0x3c0
 8000bce:	f507 7172 	add.w	r1, r7, #968	@ 0x3c8
 8000bd2:	2364      	movs	r3, #100	@ 0x64
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	48a4      	ldr	r0, [pc, #656]	@ (8000e6c <main+0x394>)
 8000bda:	f00f fd3d 	bl	8010658 <HAL_SPI_TransmitReceive>
 8000bde:	2201      	movs	r2, #1
 8000be0:	2108      	movs	r1, #8
 8000be2:	489d      	ldr	r0, [pc, #628]	@ (8000e58 <main+0x380>)
 8000be4:	f009 ffb0 	bl	800ab48 <HAL_GPIO_WritePin>
  CSN_LOW();  HAL_SPI_TransmitReceive(&hspi1, r_cfg, rxr, 2, 100);  CSN_HIGH();
 8000be8:	2200      	movs	r2, #0
 8000bea:	2108      	movs	r1, #8
 8000bec:	489a      	ldr	r0, [pc, #616]	@ (8000e58 <main+0x380>)
 8000bee:	f009 ffab 	bl	800ab48 <HAL_GPIO_WritePin>
 8000bf2:	f507 726f 	add.w	r2, r7, #956	@ 0x3bc
 8000bf6:	f507 7171 	add.w	r1, r7, #964	@ 0x3c4
 8000bfa:	2364      	movs	r3, #100	@ 0x64
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2302      	movs	r3, #2
 8000c00:	489a      	ldr	r0, [pc, #616]	@ (8000e6c <main+0x394>)
 8000c02:	f00f fd29 	bl	8010658 <HAL_SPI_TransmitReceive>
 8000c06:	2201      	movs	r2, #1
 8000c08:	2108      	movs	r1, #8
 8000c0a:	4893      	ldr	r0, [pc, #588]	@ (8000e58 <main+0x380>)
 8000c0c:	f009 ff9c 	bl	800ab48 <HAL_GPIO_WritePin>

  char dbg[96];
  snprintf(dbg, sizeof dbg, "[POST-ACTIVATE] status_w=%02X cfg=%02X\r\n", rxw[0], rxr[1]);
 8000c10:	f897 33c0 	ldrb.w	r3, [r7, #960]	@ 0x3c0
 8000c14:	461a      	mov	r2, r3
 8000c16:	f897 33bd 	ldrb.w	r3, [r7, #957]	@ 0x3bd
 8000c1a:	f507 7057 	add.w	r0, r7, #860	@ 0x35c
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	4a93      	ldr	r2, [pc, #588]	@ (8000e70 <main+0x398>)
 8000c24:	2160      	movs	r1, #96	@ 0x60
 8000c26:	f014 fdad 	bl	8015784 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000c2a:	f507 7357 	add.w	r3, r7, #860	@ 0x35c
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fbbe 	bl	80003b0 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	f507 7157 	add.w	r1, r7, #860	@ 0x35c
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	4888      	ldr	r0, [pc, #544]	@ (8000e64 <main+0x38c>)
 8000c42:	f011 fb61 	bl	8012308 <HAL_UART_Transmit>

  // ---- proceed with your driver now ----
  HAL_Delay(5);
 8000c46:	2005      	movs	r0, #5
 8000c48:	f003 fd9a 	bl	8004780 <HAL_Delay>
  uint8_t st = NRF24_StatusNOP();
 8000c4c:	f002 fe3c 	bl	80038c8 <NRF24_StatusNOP>
 8000c50:	4603      	mov	r3, r0
 8000c52:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f
  char m[64];
  snprintf(m,sizeof(m),"[NRF] STATUS via NOP = 0x%02X\r\n", st);
 8000c56:	f897 342f 	ldrb.w	r3, [r7, #1071]	@ 0x42f
 8000c5a:	f507 7047 	add.w	r0, r7, #796	@ 0x31c
 8000c5e:	4a85      	ldr	r2, [pc, #532]	@ (8000e74 <main+0x39c>)
 8000c60:	2140      	movs	r1, #64	@ 0x40
 8000c62:	f014 fd8f 	bl	8015784 <sniprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)m,strlen(m),HAL_MAX_DELAY);
 8000c66:	f507 7347 	add.w	r3, r7, #796	@ 0x31c
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fba0 	bl	80003b0 <strlen>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f507 7147 	add.w	r1, r7, #796	@ 0x31c
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	4879      	ldr	r0, [pc, #484]	@ (8000e64 <main+0x38c>)
 8000c7e:	f011 fb43 	bl	8012308 <HAL_UART_Transmit>
  NRF24_Init();
 8000c82:	f002 fce1 	bl	8003648 <NRF24_Init>
  NRF24_TxMode(rf_addr, TEL_CHAN);
 8000c86:	214c      	movs	r1, #76	@ 0x4c
 8000c88:	487b      	ldr	r0, [pc, #492]	@ (8000e78 <main+0x3a0>)
 8000c8a:	f002 fd29 	bl	80036e0 <NRF24_TxMode>
  nrf24_WriteReg(DYNPD, 0x00);        // all pipes DPL off
 8000c8e:	2100      	movs	r1, #0
 8000c90:	201c      	movs	r0, #28
 8000c92:	f002 fba7 	bl	80033e4 <nrf24_WriteReg>
  nrf24_WriteReg(FEATURE, 0x00);      // disable DPL/ACK pay/NoAck
 8000c96:	2100      	movs	r1, #0
 8000c98:	201d      	movs	r0, #29
 8000c9a:	f002 fba3 	bl	80033e4 <nrf24_WriteReg>
  nrf24_WriteReg(RX_PW_P0, 32);       // fixed 32 bytes on pipe 0
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	2011      	movs	r0, #17
 8000ca2:	f002 fb9f 	bl	80033e4 <nrf24_WriteReg>
  NRF24_Dump();
 8000ca6:	f002 fd89 	bl	80037bc <NRF24_Dump>
  // After NRF24_Init(); NRF24_TxMode(...); NRF24_Dump();
  uint8_t rd = nrf24_write_readback(RF_CH, TEL_CHAN);
 8000caa:	214c      	movs	r1, #76	@ 0x4c
 8000cac:	2005      	movs	r0, #5
 8000cae:	f002 f9b7 	bl	8003020 <nrf24_write_readback>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f887 342e 	strb.w	r3, [r7, #1070]	@ 0x42e
  (void)rd;// expect same
  rd = nrf24_write_readback(EN_AA, 0x00);                 // AutoAck OFF expected
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f002 f9b0 	bl	8003020 <nrf24_write_readback>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f887 342e 	strb.w	r3, [r7, #1070]	@ 0x42e
  rd = nrf24_write_readback(SETUP_RETR, 0x00);            // no auto-retry
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2004      	movs	r0, #4
 8000cca:	f002 f9a9 	bl	8003020 <nrf24_write_readback>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 342e 	strb.w	r3, [r7, #1070]	@ 0x42e
  uint8_t cfg = nrf24_ReadReg(CONFIG);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f002 fbd5 	bl	8003484 <nrf24_ReadReg>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f887 342d 	strb.w	r3, [r7, #1069]	@ 0x42d
  uint8_t rf  = nrf24_ReadReg(RF_SETUP);
 8000ce0:	2006      	movs	r0, #6
 8000ce2:	f002 fbcf 	bl	8003484 <nrf24_ReadReg>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f887 342c 	strb.w	r3, [r7, #1068]	@ 0x42c
  uint8_t ch  = nrf24_ReadReg(RF_CH);
 8000cec:	2005      	movs	r0, #5
 8000cee:	f002 fbc9 	bl	8003484 <nrf24_ReadReg>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 342b 	strb.w	r3, [r7, #1067]	@ 0x42b
  char info[64];
  snprintf(info, sizeof(info), "[NRF] CFG=%02X RF=%02X CH=%u\r\n", cfg, rf, ch);
 8000cf8:	f897 142d 	ldrb.w	r1, [r7, #1069]	@ 0x42d
 8000cfc:	f897 342c 	ldrb.w	r3, [r7, #1068]	@ 0x42c
 8000d00:	f897 242b 	ldrb.w	r2, [r7, #1067]	@ 0x42b
 8000d04:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8000e7c <main+0x3a4>)
 8000d10:	2140      	movs	r1, #64	@ 0x40
 8000d12:	f014 fd37 	bl	8015784 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000d16:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fb48 	bl	80003b0 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	484d      	ldr	r0, [pc, #308]	@ (8000e64 <main+0x38c>)
 8000d2e:	f011 faeb 	bl	8012308 <HAL_UART_Transmit>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000d32:	2203      	movs	r2, #3
 8000d34:	4952      	ldr	r1, [pc, #328]	@ (8000e80 <main+0x3a8>)
 8000d36:	4853      	ldr	r0, [pc, #332]	@ (8000e84 <main+0x3ac>)
 8000d38:	f004 fc7c 	bl	8005634 <HAL_ADC_Start_DMA>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d004      	beq.n	8000d4c <main+0x274>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000d42:	4851      	ldr	r0, [pc, #324]	@ (8000e88 <main+0x3b0>)
 8000d44:	f001 fa00 	bl	8002148 <print>
#endif
		Error_Handler();
 8000d48:	f002 fb0c 	bl	8003364 <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000d4c:	484f      	ldr	r0, [pc, #316]	@ (8000e8c <main+0x3b4>)
 8000d4e:	f008 fd7d 	bl	800984c <HAL_FDCAN_Start>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <main+0x28a>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000d58:	484d      	ldr	r0, [pc, #308]	@ (8000e90 <main+0x3b8>)
 8000d5a:	f001 f9f5 	bl	8002148 <print>
#endif
		Error_Handler();
 8000d5e:	f002 fb01 	bl	8003364 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d62:	2200      	movs	r2, #0
 8000d64:	2101      	movs	r1, #1
 8000d66:	4849      	ldr	r0, [pc, #292]	@ (8000e8c <main+0x3b4>)
 8000d68:	f008 ffb2 	bl	8009cd0 <HAL_FDCAN_ActivateNotification>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d004      	beq.n	8000d7c <main+0x2a4>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000d72:	4848      	ldr	r0, [pc, #288]	@ (8000e94 <main+0x3bc>)
 8000d74:	f001 f9e8 	bl	8002148 <print>
#endif
		Error_Handler();
 8000d78:	f002 faf4 	bl	8003364 <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8000d7c:	4846      	ldr	r0, [pc, #280]	@ (8000e98 <main+0x3c0>)
 8000d7e:	f008 fd65 	bl	800984c <HAL_FDCAN_Start>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d004      	beq.n	8000d92 <main+0x2ba>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000d88:	4844      	ldr	r0, [pc, #272]	@ (8000e9c <main+0x3c4>)
 8000d8a:	f001 f9dd 	bl	8002148 <print>

#endif
		Error_Handler();
 8000d8e:	f002 fae9 	bl	8003364 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d92:	2200      	movs	r2, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	4840      	ldr	r0, [pc, #256]	@ (8000e98 <main+0x3c0>)
 8000d98:	f008 ff9a 	bl	8009cd0 <HAL_FDCAN_ActivateNotification>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <main+0x2d4>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000da2:	483f      	ldr	r0, [pc, #252]	@ (8000ea0 <main+0x3c8>)
 8000da4:	f001 f9d0 	bl	8002148 <print>
#endif
		Error_Handler();
 8000da8:	f002 fadc 	bl	8003364 <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 8000dac:	483d      	ldr	r0, [pc, #244]	@ (8000ea4 <main+0x3cc>)
 8000dae:	f008 fd4d 	bl	800984c <HAL_FDCAN_Start>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <main+0x2ea>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 8000db8:	483b      	ldr	r0, [pc, #236]	@ (8000ea8 <main+0x3d0>)
 8000dba:	f001 f9c5 	bl	8002148 <print>

#endif
		Error_Handler();
 8000dbe:	f002 fad1 	bl	8003364 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4837      	ldr	r0, [pc, #220]	@ (8000ea4 <main+0x3cc>)
 8000dc8:	f008 ff82 	bl	8009cd0 <HAL_FDCAN_ActivateNotification>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <main+0x304>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 8000dd2:	4836      	ldr	r0, [pc, #216]	@ (8000eac <main+0x3d4>)
 8000dd4:	f001 f9b8 	bl	8002148 <print>
#endif
		Error_Handler();
 8000dd8:	f002 fac4 	bl	8003364 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 8000ddc:	4834      	ldr	r0, [pc, #208]	@ (8000eb0 <main+0x3d8>)
 8000dde:	f001 f9b3 	bl	8002148 <print>
	config_inv_lectura_v = 1;
#endif

	// Espera ACK inversor (DC bus)
	//Comentar para CAN ID
	HAL_TIM_Base_Start_IT(&htim16);
 8000de2:	4834      	ldr	r0, [pc, #208]	@ (8000eb4 <main+0x3dc>)
 8000de4:	f010 f8b2 	bl	8010f4c <HAL_TIM_Base_Start_IT>
	uint32_t _last_req_log = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
	while (config_inv_lectura_v == 0)
 8000dee:	e026      	b.n	8000e3e <main+0x366>
	{
		if ((HAL_GetTick() - _last_req_log) >= 1000) {
 8000df0:	f003 fcba 	bl	8004768 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e00:	d306      	bcc.n	8000e10 <main+0x338>
		        _last_req_log = HAL_GetTick();
 8000e02:	f003 fcb1 	bl	8004768 <HAL_GetTick>
 8000e06:	f8c7 0434 	str.w	r0, [r7, #1076]	@ 0x434
		        print("Solicitar tensión inversor");
 8000e0a:	4829      	ldr	r0, [pc, #164]	@ (8000eb0 <main+0x3d8>)
 8000e0c:	f001 f99c 	bl	8002148 <print>
		    }
		static uint32_t last = 0;
		    if (HAL_GetTick() - last >= 500) {
 8000e10:	f003 fcaa 	bl	8004768 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <main+0x3e0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e20:	d306      	bcc.n	8000e30 <main+0x358>
		        last = HAL_GetTick();
 8000e22:	f003 fca1 	bl	8004768 <HAL_GetTick>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a23      	ldr	r2, [pc, #140]	@ (8000eb8 <main+0x3e0>)
 8000e2a:	6013      	str	r3, [r2, #0]
		        tel_send_now();   // sends one 32-byte frame
 8000e2c:	f001 ffbc 	bl	8002da8 <tel_send_now>

		    }
		if (config_inv_lectura_v == 1)
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <main+0x3e4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d102      	bne.n	8000e3e <main+0x366>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 8000e38:	4821      	ldr	r0, [pc, #132]	@ (8000ec0 <main+0x3e8>)
 8000e3a:	f001 f985 	bl	8002148 <print>
	while (config_inv_lectura_v == 0)
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <main+0x3e4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0d4      	beq.n	8000df0 <main+0x318>
	}

#if !CALIBRATION

	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 8000e46:	e094      	b.n	8000f72 <main+0x49a>
 8000e48:	80000000 	.word	0x80000000
 8000e4c:	3ff3ae14 	.word	0x3ff3ae14
 8000e50:	08018f08 	.word	0x08018f08
 8000e54:	58020800 	.word	0x58020800
 8000e58:	58021800 	.word	0x58021800
 8000e5c:	407c8000 	.word	0x407c8000
 8000e60:	08018f1c 	.word	0x08018f1c
 8000e64:	2400077c 	.word	0x2400077c
 8000e68:	24000030 	.word	0x24000030
 8000e6c:	240005c8 	.word	0x240005c8
 8000e70:	08018f38 	.word	0x08018f38
 8000e74:	08018f64 	.word	0x08018f64
 8000e78:	24000008 	.word	0x24000008
 8000e7c:	08018f84 	.word	0x08018f84
 8000e80:	24000928 	.word	0x24000928
 8000e84:	24000214 	.word	0x24000214
 8000e88:	08018fa4 	.word	0x08018fa4
 8000e8c:	2400036c 	.word	0x2400036c
 8000e90:	08018fc4 	.word	0x08018fc4
 8000e94:	08018fe4 	.word	0x08018fe4
 8000e98:	2400040c 	.word	0x2400040c
 8000e9c:	0801900c 	.word	0x0801900c
 8000ea0:	0801902c 	.word	0x0801902c
 8000ea4:	240004ac 	.word	0x240004ac
 8000ea8:	08019054 	.word	0x08019054
 8000eac:	08019074 	.word	0x08019074
 8000eb0:	0801909c 	.word	0x0801909c
 8000eb4:	2400069c 	.word	0x2400069c
 8000eb8:	24000abc 	.word	0x24000abc
 8000ebc:	2400020c 	.word	0x2400020c
 8000ec0:	080190b8 	.word	0x080190b8
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000ec4:	4b9e      	ldr	r3, [pc, #632]	@ (8001140 <main+0x668>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	499e      	ldr	r1, [pc, #632]	@ (8001144 <main+0x66c>)
 8000ecc:	489e      	ldr	r0, [pc, #632]	@ (8001148 <main+0x670>)
 8000ece:	f014 fc8f 	bl	80157f0 <siprintf>
		//print(TxBuffer);
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000ed2:	4b9e      	ldr	r3, [pc, #632]	@ (800114c <main+0x674>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a9e      	ldr	r2, [pc, #632]	@ (8001150 <main+0x678>)
 8000ed8:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000eda:	4b9d      	ldr	r3, [pc, #628]	@ (8001150 <main+0x678>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000ee0:	4b9b      	ldr	r3, [pc, #620]	@ (8001150 <main+0x678>)
 8000ee2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ee6:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000ee8:	4b99      	ldr	r3, [pc, #612]	@ (8001150 <main+0x678>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000eee:	4b98      	ldr	r3, [pc, #608]	@ (8001150 <main+0x678>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000ef4:	4b92      	ldr	r3, [pc, #584]	@ (8001140 <main+0x668>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b96      	ldr	r3, [pc, #600]	@ (8001154 <main+0x67c>)
 8000efc:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000efe:	4b90      	ldr	r3, [pc, #576]	@ (8001140 <main+0x668>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	121b      	asrs	r3, r3, #8
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b93      	ldr	r3, [pc, #588]	@ (8001154 <main+0x67c>)
 8000f08:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000f0a:	4a92      	ldr	r2, [pc, #584]	@ (8001154 <main+0x67c>)
 8000f0c:	4990      	ldr	r1, [pc, #576]	@ (8001150 <main+0x678>)
 8000f0e:	4892      	ldr	r0, [pc, #584]	@ (8001158 <main+0x680>)
 8000f10:	f008 fcc7 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000f14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f18:	4890      	ldr	r0, [pc, #576]	@ (800115c <main+0x684>)
 8000f1a:	f009 fdfd 	bl	800ab18 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b8f      	ldr	r3, [pc, #572]	@ (8001160 <main+0x688>)
 8000f24:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8000f26:	4b8e      	ldr	r3, [pc, #568]	@ (8001160 <main+0x688>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d11a      	bne.n	8000f64 <main+0x48c>
			TxHeader_Acu.Identifier = 0x600;
 8000f2e:	4b88      	ldr	r3, [pc, #544]	@ (8001150 <main+0x678>)
 8000f30:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000f34:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8000f36:	4b86      	ldr	r3, [pc, #536]	@ (8001150 <main+0x678>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000f3c:	4b84      	ldr	r3, [pc, #528]	@ (8001150 <main+0x678>)
 8000f3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f42:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000f44:	4b82      	ldr	r3, [pc, #520]	@ (8001150 <main+0x678>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000f4a:	4b81      	ldr	r3, [pc, #516]	@ (8001150 <main+0x678>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = precharge_button;
 8000f50:	4b83      	ldr	r3, [pc, #524]	@ (8001160 <main+0x688>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b7f      	ldr	r3, [pc, #508]	@ (8001154 <main+0x67c>)
 8000f58:	701a      	strb	r2, [r3, #0]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001154 <main+0x67c>)
 8000f5c:	497c      	ldr	r1, [pc, #496]	@ (8001150 <main+0x678>)
 8000f5e:	487e      	ldr	r0, [pc, #504]	@ (8001158 <main+0x680>)
 8000f60:	f008 fc9f 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}



		if (precarga_inv == 1)
 8000f64:	4b7f      	ldr	r3, [pc, #508]	@ (8001164 <main+0x68c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d102      	bne.n	8000f72 <main+0x49a>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 8000f6c:	487e      	ldr	r0, [pc, #504]	@ (8001168 <main+0x690>)
 8000f6e:	f001 f8eb 	bl	8002148 <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 8000f72:	4b7c      	ldr	r3, [pc, #496]	@ (8001164 <main+0x68c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d104      	bne.n	8000f84 <main+0x4ac>
 8000f7a:	4b71      	ldr	r3, [pc, #452]	@ (8001140 <main+0x668>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000f82:	db9f      	blt.n	8000ec4 <main+0x3ec>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000f84:	4b71      	ldr	r3, [pc, #452]	@ (800114c <main+0x674>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a71      	ldr	r2, [pc, #452]	@ (8001150 <main+0x678>)
 8000f8a:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 8000f8c:	4b70      	ldr	r3, [pc, #448]	@ (8001150 <main+0x678>)
 8000f8e:	2202      	movs	r2, #2
 8000f90:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000f92:	4b6f      	ldr	r3, [pc, #444]	@ (8001150 <main+0x678>)
 8000f94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f98:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001150 <main+0x678>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8001150 <main+0x678>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000fa6:	4b66      	ldr	r3, [pc, #408]	@ (8001140 <main+0x668>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b69      	ldr	r3, [pc, #420]	@ (8001154 <main+0x67c>)
 8000fae:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000fb0:	4b63      	ldr	r3, [pc, #396]	@ (8001140 <main+0x668>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	121b      	asrs	r3, r3, #8
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b66      	ldr	r3, [pc, #408]	@ (8001154 <main+0x67c>)
 8000fba:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000fbc:	4a65      	ldr	r2, [pc, #404]	@ (8001154 <main+0x67c>)
 8000fbe:	4964      	ldr	r1, [pc, #400]	@ (8001150 <main+0x678>)
 8000fc0:	4865      	ldr	r0, [pc, #404]	@ (8001158 <main+0x680>)
 8000fc2:	f008 fc6e 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
	//HAL_TIM_Base_Start_IT(&htim16);
#endif

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000fc6:	e033      	b.n	8001030 <main+0x558>
	{

		HAL_ADC_Start(&hadc1);
 8000fc8:	4868      	ldr	r0, [pc, #416]	@ (800116c <main+0x694>)
 8000fca:	f004 f941 	bl	8005250 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fce:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd2:	4866      	ldr	r0, [pc, #408]	@ (800116c <main+0x694>)
 8000fd4:	f004 fa3a 	bl	800544c <HAL_ADC_PollForConversion>

		s_freno = HAL_ADC_GetValue(&hadc1);
 8000fd8:	4864      	ldr	r0, [pc, #400]	@ (800116c <main+0x694>)
 8000fda:	f004 fc07 	bl	80057ec <HAL_ADC_GetValue>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b63      	ldr	r3, [pc, #396]	@ (8001170 <main+0x698>)
 8000fe4:	601a      	str	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 8000fe6:	4861      	ldr	r0, [pc, #388]	@ (800116c <main+0x694>)
 8000fe8:	f004 f9fc 	bl	80053e4 <HAL_ADC_Stop>

		//printValue(s_freno);
		print("Pulsa botón");
 8000fec:	4861      	ldr	r0, [pc, #388]	@ (8001174 <main+0x69c>)
 8000fee:	f001 f8ab 	bl	8002148 <print>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000ff2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff6:	4859      	ldr	r0, [pc, #356]	@ (800115c <main+0x684>)
 8000ff8:	f009 fd8e 	bl	800ab18 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b5d      	ldr	r3, [pc, #372]	@ (8001178 <main+0x6a0>)
 8001002:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);

		if (start_button_act == 1)
 8001004:	4b5c      	ldr	r3, [pc, #368]	@ (8001178 <main+0x6a0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d111      	bne.n	8001030 <main+0x558>
		{

#if DEBUG
			//printValue(s_freno);
			print("Pulsa freno");
 800100c:	485b      	ldr	r0, [pc, #364]	@ (800117c <main+0x6a4>)
 800100e:	f001 f89b 	bl	8002148 <print>
#endif
			if (s_freno > 900)
 8001012:	4b57      	ldr	r3, [pc, #348]	@ (8001170 <main+0x698>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800101a:	dd06      	ble.n	800102a <main+0x552>
			{
				boton_arranque = 1;
 800101c:	4b58      	ldr	r3, [pc, #352]	@ (8001180 <main+0x6a8>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8001022:	4858      	ldr	r0, [pc, #352]	@ (8001184 <main+0x6ac>)
 8001024:	f001 f890 	bl	8002148 <print>
 8001028:	e002      	b.n	8001030 <main+0x558>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 800102a:	4857      	ldr	r0, [pc, #348]	@ (8001188 <main+0x6b0>)
 800102c:	f001 f88c 	bl	8002148 <print>
	while (boton_arranque == 0)
 8001030:	4b53      	ldr	r3, [pc, #332]	@ (8001180 <main+0x6a8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0c7      	beq.n	8000fc8 <main+0x4f0>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8001038:	4854      	ldr	r0, [pc, #336]	@ (800118c <main+0x6b4>)
 800103a:	f001 f885 	bl	8002148 <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 800103e:	4b54      	ldr	r3, [pc, #336]	@ (8001190 <main+0x6b8>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	4852      	ldr	r0, [pc, #328]	@ (8001194 <main+0x6bc>)
 800104a:	f009 fd7d 	bl	800ab48 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800104e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001052:	f003 fb95 	bl	8004780 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8001056:	2200      	movs	r2, #0
 8001058:	2102      	movs	r1, #2
 800105a:	484e      	ldr	r0, [pc, #312]	@ (8001194 <main+0x6bc>)
 800105c:	f009 fd74 	bl	800ab48 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 8001060:	484d      	ldr	r0, [pc, #308]	@ (8001198 <main+0x6c0>)
 8001062:	f001 f871 	bl	8002148 <print>
#endif

#if !CALIBRATION

	// Estado STAND BY inversor
	while (state != 3)
 8001066:	e006      	b.n	8001076 <main+0x59e>
	{
		if (state == 3)
 8001068:	4b4c      	ldr	r3, [pc, #304]	@ (800119c <main+0x6c4>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d102      	bne.n	8001076 <main+0x59e>
		{
#if DEBUG
			print("Precarga");
 8001070:	484b      	ldr	r0, [pc, #300]	@ (80011a0 <main+0x6c8>)
 8001072:	f001 f869 	bl	8002148 <print>
	while (state != 3)
 8001076:	4b49      	ldr	r3, [pc, #292]	@ (800119c <main+0x6c4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d1f4      	bne.n	8001068 <main+0x590>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 800107e:	4849      	ldr	r0, [pc, #292]	@ (80011a4 <main+0x6cc>)
 8001080:	f001 f862 	bl	8002148 <print>
#endif

	while (state != 4)
 8001084:	e037      	b.n	80010f6 <main+0x61e>
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001086:	4b48      	ldr	r3, [pc, #288]	@ (80011a8 <main+0x6d0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a48      	ldr	r2, [pc, #288]	@ (80011ac <main+0x6d4>)
 800108c:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 800108e:	4b47      	ldr	r3, [pc, #284]	@ (80011ac <main+0x6d4>)
 8001090:	2203      	movs	r2, #3
 8001092:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001094:	4b45      	ldr	r3, [pc, #276]	@ (80011ac <main+0x6d4>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 800109a:	4b45      	ldr	r3, [pc, #276]	@ (80011b0 <main+0x6d8>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 80010a0:	4b43      	ldr	r3, [pc, #268]	@ (80011b0 <main+0x6d8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 80010a6:	4b42      	ldr	r3, [pc, #264]	@ (80011b0 <main+0x6d8>)
 80010a8:	2204      	movs	r2, #4
 80010aa:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80010ac:	4a40      	ldr	r2, [pc, #256]	@ (80011b0 <main+0x6d8>)
 80010ae:	493f      	ldr	r1, [pc, #252]	@ (80011ac <main+0x6d4>)
 80010b0:	4840      	ldr	r0, [pc, #256]	@ (80011b4 <main+0x6dc>)
 80010b2:	f008 fbf6 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 80010b6:	4b3d      	ldr	r3, [pc, #244]	@ (80011ac <main+0x6d4>)
 80010b8:	f240 3262 	movw	r2, #866	@ 0x362
 80010bc:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 80010be:	4b3b      	ldr	r3, [pc, #236]	@ (80011ac <main+0x6d4>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 80010c4:	4b3c      	ldr	r3, [pc, #240]	@ (80011b8 <main+0x6e0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 80010ca:	4b39      	ldr	r3, [pc, #228]	@ (80011b0 <main+0x6d8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 80010d0:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <main+0x6d8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <main+0x6e0>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <main+0x6d8>)
 80010de:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 80010e0:	4b33      	ldr	r3, [pc, #204]	@ (80011b0 <main+0x6d8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80010e6:	4a32      	ldr	r2, [pc, #200]	@ (80011b0 <main+0x6d8>)
 80010e8:	4930      	ldr	r1, [pc, #192]	@ (80011ac <main+0x6d4>)
 80010ea:	4832      	ldr	r0, [pc, #200]	@ (80011b4 <main+0x6dc>)
 80010ec:	f008 fbd9 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f003 fb45 	bl	8004780 <HAL_Delay>
	while (state != 4)
 80010f6:	4b29      	ldr	r3, [pc, #164]	@ (800119c <main+0x6c4>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d1c3      	bne.n	8001086 <main+0x5ae>

	}
#endif

#if DEBUG
	print("state: ready");
 80010fe:	482f      	ldr	r0, [pc, #188]	@ (80011bc <main+0x6e4>)
 8001100:	f001 f822 	bl	8002148 <print>
	{

		// Envío datos telemetría
		static uint32_t last_1s = 0;
		static uint32_t last_irq_seen = 0;
		if (HAL_GetTick() - last_1s >= 1000) {
 8001104:	f003 fb30 	bl	8004768 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <main+0x6e8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001114:	f0c0 8090 	bcc.w	8001238 <main+0x760>
		    last_1s = HAL_GetTick();
 8001118:	f003 fb26 	bl	8004768 <HAL_GetTick>
 800111c:	4603      	mov	r3, r0
 800111e:	4a28      	ldr	r2, [pc, #160]	@ (80011c0 <main+0x6e8>)
 8001120:	6013      	str	r3, [r2, #0]
		    char hb[180];
		           snprintf(hb, sizeof(hb), // @suppress("Float formatting support")
 8001122:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <main+0x6ec>)
 8001124:	681e      	ldr	r6, [r3, #0]
 8001126:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <main+0x6f0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4a27      	ldr	r2, [pc, #156]	@ (80011cc <main+0x6f4>)
 800112e:	6812      	ldr	r2, [r2, #0]
		                    "[HB] irq=%lu sent=%lu fail=%lu%s  Vdc=%d rpm=%d state=%u vCellMin=%.0f\r\n",
		                    (unsigned long)tel_irq_cnt,
		                    (unsigned long)tel_sent_ok,
		                    (unsigned long)tel_sent_fail,
		                    (tel_irq_cnt == last_irq_seen) ? " (NO NEW IRQ!)" : "",
 8001130:	4924      	ldr	r1, [pc, #144]	@ (80011c4 <main+0x6ec>)
 8001132:	6808      	ldr	r0, [r1, #0]
 8001134:	4926      	ldr	r1, [pc, #152]	@ (80011d0 <main+0x6f8>)
 8001136:	6809      	ldr	r1, [r1, #0]
		           snprintf(hb, sizeof(hb), // @suppress("Float formatting support")
 8001138:	4288      	cmp	r0, r1
 800113a:	d14d      	bne.n	80011d8 <main+0x700>
 800113c:	4925      	ldr	r1, [pc, #148]	@ (80011d4 <main+0x6fc>)
 800113e:	e04c      	b.n	80011da <main+0x702>
 8001140:	2400090c 	.word	0x2400090c
 8001144:	080190ec 	.word	0x080190ec
 8001148:	240009bc 	.word	0x240009bc
 800114c:	24000004 	.word	0x24000004
 8001150:	2400086c 	.word	0x2400086c
 8001154:	240008f0 	.word	0x240008f0
 8001158:	2400040c 	.word	0x2400040c
 800115c:	58021400 	.word	0x58021400
 8001160:	24000954 	.word	0x24000954
 8001164:	24000208 	.word	0x24000208
 8001168:	08019104 	.word	0x08019104
 800116c:	24000214 	.word	0x24000214
 8001170:	24000938 	.word	0x24000938
 8001174:	08019120 	.word	0x08019120
 8001178:	24000908 	.word	0x24000908
 800117c:	08019130 	.word	0x08019130
 8001180:	24000210 	.word	0x24000210
 8001184:	0801913c 	.word	0x0801913c
 8001188:	0801915c 	.word	0x0801915c
 800118c:	08019178 	.word	0x08019178
 8001190:	24000ab8 	.word	0x24000ab8
 8001194:	58020800 	.word	0x58020800
 8001198:	08019188 	.word	0x08019188
 800119c:	24000946 	.word	0x24000946
 80011a0:	08019198 	.word	0x08019198
 80011a4:	080191a4 	.word	0x080191a4
 80011a8:	24000000 	.word	0x24000000
 80011ac:	24000820 	.word	0x24000820
 80011b0:	240008e0 	.word	0x240008e0
 80011b4:	2400036c 	.word	0x2400036c
 80011b8:	24000944 	.word	0x24000944
 80011bc:	080191b8 	.word	0x080191b8
 80011c0:	24000ac0 	.word	0x24000ac0
 80011c4:	24000814 	.word	0x24000814
 80011c8:	24000818 	.word	0x24000818
 80011cc:	2400081c 	.word	0x2400081c
 80011d0:	24000ac4 	.word	0x24000ac4
 80011d4:	080191c8 	.word	0x080191c8
 80011d8:	49b2      	ldr	r1, [pc, #712]	@ (80014a4 <main+0x9cc>)
 80011da:	48b3      	ldr	r0, [pc, #716]	@ (80014a8 <main+0x9d0>)
 80011dc:	6800      	ldr	r0, [r0, #0]
 80011de:	4cb3      	ldr	r4, [pc, #716]	@ (80014ac <main+0x9d4>)
 80011e0:	6824      	ldr	r4, [r4, #0]
 80011e2:	4db3      	ldr	r5, [pc, #716]	@ (80014b0 <main+0x9d8>)
 80011e4:	782d      	ldrb	r5, [r5, #0]
 80011e6:	462b      	mov	r3, r5
 80011e8:	4db2      	ldr	r5, [pc, #712]	@ (80014b4 <main+0x9dc>)
 80011ea:	edd5 7a00 	vldr	s15, [r5]
 80011ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f2:	f507 7500 	add.w	r5, r7, #512	@ 0x200
 80011f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80011fa:	9305      	str	r3, [sp, #20]
 80011fc:	9404      	str	r4, [sp, #16]
 80011fe:	9003      	str	r0, [sp, #12]
 8001200:	9102      	str	r1, [sp, #8]
 8001202:	9201      	str	r2, [sp, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	4633      	mov	r3, r6
 800120a:	4aab      	ldr	r2, [pc, #684]	@ (80014b8 <main+0x9e0>)
 800120c:	21b4      	movs	r1, #180	@ 0xb4
 800120e:	4628      	mov	r0, r5
 8001210:	f014 fab8 	bl	8015784 <sniprintf>
		                    inv_dc_bus_voltage, e_machine_rpm, state, v_celda_min);

		    HAL_UART_Transmit(&huart2, (uint8_t*)hb, strlen(hb), HAL_MAX_DELAY);
 8001214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f8c9 	bl	80003b0 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	48a4      	ldr	r0, [pc, #656]	@ (80014bc <main+0x9e4>)
 800122c:	f011 f86c 	bl	8012308 <HAL_UART_Transmit>
		    last_irq_seen = tel_irq_cnt;
 8001230:	4ba3      	ldr	r3, [pc, #652]	@ (80014c0 <main+0x9e8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4aa3      	ldr	r2, [pc, #652]	@ (80014c4 <main+0x9ec>)
 8001236:	6013      	str	r3, [r2, #0]

		}

		if (tel_tick >= 500) {
 8001238:	4ba3      	ldr	r3, [pc, #652]	@ (80014c8 <main+0x9f0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001240:	d304      	bcc.n	800124c <main+0x774>
		        tel_tick = 0;          // consume the tick
 8001242:	4ba1      	ldr	r3, [pc, #644]	@ (80014c8 <main+0x9f0>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
		        tel_send_now();        // SPI + UART OK here (foreground)
 8001248:	f001 fdae 	bl	8002da8 <tel_send_now>
		    }
        // (A) Core counters + a few key signals
        char hb[180];
        snprintf(hb, sizeof(hb), // @suppress("Float formatting support")
 800124c:	4b9c      	ldr	r3, [pc, #624]	@ (80014c0 <main+0x9e8>)
 800124e:	681e      	ldr	r6, [r3, #0]
 8001250:	4b9e      	ldr	r3, [pc, #632]	@ (80014cc <main+0x9f4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4a9e      	ldr	r2, [pc, #632]	@ (80014d0 <main+0x9f8>)
 8001258:	6812      	ldr	r2, [r2, #0]
                 "[HB] irq=%lu sent=%lu fail=%lu%s  Vdc=%d rpm=%d state=%u vCellMin=%.0f\r\n",
                 (unsigned long)tel_irq_cnt,
                 (unsigned long)tel_sent_ok,
                 (unsigned long)tel_sent_fail,
                 (tel_irq_cnt == last_irq_seen) ? " (NO NEW IRQ!)" : "",
 800125a:	4999      	ldr	r1, [pc, #612]	@ (80014c0 <main+0x9e8>)
 800125c:	6808      	ldr	r0, [r1, #0]
 800125e:	4999      	ldr	r1, [pc, #612]	@ (80014c4 <main+0x9ec>)
 8001260:	6809      	ldr	r1, [r1, #0]
        snprintf(hb, sizeof(hb), // @suppress("Float formatting support")
 8001262:	4288      	cmp	r0, r1
 8001264:	d101      	bne.n	800126a <main+0x792>
 8001266:	499b      	ldr	r1, [pc, #620]	@ (80014d4 <main+0x9fc>)
 8001268:	e000      	b.n	800126c <main+0x794>
 800126a:	498e      	ldr	r1, [pc, #568]	@ (80014a4 <main+0x9cc>)
 800126c:	488e      	ldr	r0, [pc, #568]	@ (80014a8 <main+0x9d0>)
 800126e:	6800      	ldr	r0, [r0, #0]
 8001270:	4c8e      	ldr	r4, [pc, #568]	@ (80014ac <main+0x9d4>)
 8001272:	6824      	ldr	r4, [r4, #0]
 8001274:	4d8e      	ldr	r5, [pc, #568]	@ (80014b0 <main+0x9d8>)
 8001276:	782d      	ldrb	r5, [r5, #0]
 8001278:	462b      	mov	r3, r5
 800127a:	4d8e      	ldr	r5, [pc, #568]	@ (80014b4 <main+0x9dc>)
 800127c:	edd5 7a00 	vldr	s15, [r5]
 8001280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001284:	f507 75a6 	add.w	r5, r7, #332	@ 0x14c
 8001288:	ed8d 7b06 	vstr	d7, [sp, #24]
 800128c:	9305      	str	r3, [sp, #20]
 800128e:	9404      	str	r4, [sp, #16]
 8001290:	9003      	str	r0, [sp, #12]
 8001292:	9102      	str	r1, [sp, #8]
 8001294:	9201      	str	r2, [sp, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4633      	mov	r3, r6
 800129c:	4a86      	ldr	r2, [pc, #536]	@ (80014b8 <main+0x9e0>)
 800129e:	21b4      	movs	r1, #180	@ 0xb4
 80012a0:	4628      	mov	r0, r5
 80012a2:	f014 fa6f 	bl	8015784 <sniprintf>
                 inv_dc_bus_voltage, e_machine_rpm, state, v_celda_min);
        HAL_UART_Transmit(&huart2, (uint8_t*)hb, strlen(hb), HAL_MAX_DELAY);
 80012a6:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f880 	bl	80003b0 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	487f      	ldr	r0, [pc, #508]	@ (80014bc <main+0x9e4>)
 80012be:	f011 f823 	bl	8012308 <HAL_UART_Transmit>
        last_irq_seen = tel_irq_cnt;
 80012c2:	4b7f      	ldr	r3, [pc, #508]	@ (80014c0 <main+0x9e8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7f      	ldr	r2, [pc, #508]	@ (80014c4 <main+0x9ec>)
 80012c8:	6013      	str	r3, [r2, #0]

        // (B) Quick GPIO view of the radio pins (power/wiring sanity)
        gpio_dump_once();
 80012ca:	f001 fe21 	bl	8002f10 <gpio_dump_once>

        // (C) nRF24 register snapshot
        nrf24_diag_once();
 80012ce:	f001 fe53 	bl	8002f78 <nrf24_diag_once>

        // (D) CAN liveness on all three buses
        FDCAN_ProtocolStatusTypeDef ps1, ps2, ps3;
        HAL_FDCAN_GetProtocolStatus(&hfdcan1, &ps1);
 80012d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d6:	4619      	mov	r1, r3
 80012d8:	487f      	ldr	r0, [pc, #508]	@ (80014d8 <main+0xa00>)
 80012da:	f008 fca9 	bl	8009c30 <HAL_FDCAN_GetProtocolStatus>
        HAL_FDCAN_GetProtocolStatus(&hfdcan2, &ps2);
 80012de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012e2:	4619      	mov	r1, r3
 80012e4:	487d      	ldr	r0, [pc, #500]	@ (80014dc <main+0xa04>)
 80012e6:	f008 fca3 	bl	8009c30 <HAL_FDCAN_GetProtocolStatus>
        HAL_FDCAN_GetProtocolStatus(&hfdcan3, &ps3);
 80012ea:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80012ee:	4619      	mov	r1, r3
 80012f0:	487b      	ldr	r0, [pc, #492]	@ (80014e0 <main+0xa08>)
 80012f2:	f008 fc9d 	bl	8009c30 <HAL_FDCAN_GetProtocolStatus>
        char cb[160];
        snprintf(cb, sizeof(cb),
            "[CAN] INV:LEC=%lu BOFF=%lu | ACU:LEC=%lu BOFF=%lu | DASH:LEC=%lu BOFF=%lu\r\n",
            (unsigned long)ps1.LastErrorCode, (unsigned long)ps1.BusOff,
 80012f6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80012fa:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80012fe:	681e      	ldr	r6, [r3, #0]
 8001300:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001304:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001308:	695b      	ldr	r3, [r3, #20]
            (unsigned long)ps2.LastErrorCode, (unsigned long)ps2.BusOff,
 800130a:	f507 6287 	add.w	r2, r7, #1080	@ 0x438
 800130e:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 8001318:	f5a1 7179 	sub.w	r1, r1, #996	@ 0x3e4
 800131c:	6949      	ldr	r1, [r1, #20]
            (unsigned long)ps3.LastErrorCode, (unsigned long)ps3.BusOff);
 800131e:	f507 6087 	add.w	r0, r7, #1080	@ 0x438
 8001322:	f5a0 706e 	sub.w	r0, r0, #952	@ 0x3b8
 8001326:	6800      	ldr	r0, [r0, #0]
 8001328:	f507 6487 	add.w	r4, r7, #1080	@ 0x438
 800132c:	f5a4 746e 	sub.w	r4, r4, #952	@ 0x3b8
 8001330:	6964      	ldr	r4, [r4, #20]
        snprintf(cb, sizeof(cb),
 8001332:	f107 05ac 	add.w	r5, r7, #172	@ 0xac
 8001336:	9404      	str	r4, [sp, #16]
 8001338:	9003      	str	r0, [sp, #12]
 800133a:	9102      	str	r1, [sp, #8]
 800133c:	9201      	str	r2, [sp, #4]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4633      	mov	r3, r6
 8001342:	4a68      	ldr	r2, [pc, #416]	@ (80014e4 <main+0xa0c>)
 8001344:	21a0      	movs	r1, #160	@ 0xa0
 8001346:	4628      	mov	r0, r5
 8001348:	f014 fa1c 	bl	8015784 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)cb, strlen(cb), HAL_MAX_DELAY);
 800134c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f82d 	bl	80003b0 <strlen>
 8001356:	4603      	mov	r3, r0
 8001358:	b29a      	uxth	r2, r3
 800135a:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	4856      	ldr	r0, [pc, #344]	@ (80014bc <main+0x9e4>)
 8001364:	f010 ffd0 	bl	8012308 <HAL_UART_Transmit>

        // (E) Peek the next telemetry payload (format sanity)
        TelFrame peek;
        tel_build_packet(&peek);
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fbdf 	bl	8002b30 <tel_build_packet>
        char txl[220];
        int n = snprintf(txl, sizeof(txl),
            "[TEL] next ID=0x%X seq=%u v1=%.1f v2=%.1f v3=%.1f v4=%.1f v5=%.1f v6=%.1f v7=%.1f\r\n",
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 8001372:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001376:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800137a:	881b      	ldrh	r3, [r3, #0]
        int n = snprintf(txl, sizeof(txl),
 800137c:	4619      	mov	r1, r3
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 800137e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001382:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8001386:	885b      	ldrh	r3, [r3, #2]
        int n = snprintf(txl, sizeof(txl),
 8001388:	461a      	mov	r2, r3
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 800138a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800138e:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8001392:	edd3 7a01 	vldr	s15, [r3, #4]
        int n = snprintf(txl, sizeof(txl),
 8001396:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 800139a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800139e:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013a2:	edd3 6a02 	vldr	s13, [r3, #8]
        int n = snprintf(txl, sizeof(txl),
 80013a6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 80013aa:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80013ae:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013b2:	edd3 5a03 	vldr	s11, [r3, #12]
        int n = snprintf(txl, sizeof(txl),
 80013b6:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 80013ba:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80013be:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013c2:	edd3 4a04 	vldr	s9, [r3, #16]
        int n = snprintf(txl, sizeof(txl),
 80013c6:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 80013ca:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80013ce:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013d2:	edd3 3a05 	vldr	s7, [r3, #20]
        int n = snprintf(txl, sizeof(txl),
 80013d6:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 80013da:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80013de:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013e2:	edd3 2a06 	vldr	s5, [r3, #24]
        int n = snprintf(txl, sizeof(txl),
 80013e6:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 80013ea:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80013ee:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013f2:	edd3 1a07 	vldr	s3, [r3, #28]
        int n = snprintf(txl, sizeof(txl),
 80013f6:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 80013fa:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 80013fe:	ed8d 1b0e 	vstr	d1, [sp, #56]	@ 0x38
 8001402:	ed8d 2b0c 	vstr	d2, [sp, #48]	@ 0x30
 8001406:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 800140a:	ed8d 4b08 	vstr	d4, [sp, #32]
 800140e:	ed8d 5b06 	vstr	d5, [sp, #24]
 8001412:	ed8d 6b04 	vstr	d6, [sp, #16]
 8001416:	ed8d 7b02 	vstr	d7, [sp, #8]
 800141a:	9200      	str	r2, [sp, #0]
 800141c:	460b      	mov	r3, r1
 800141e:	4a32      	ldr	r2, [pc, #200]	@ (80014e8 <main+0xa10>)
 8001420:	21dc      	movs	r1, #220	@ 0xdc
 8001422:	f014 f9af 	bl	8015784 <sniprintf>
 8001426:	f8c7 0424 	str.w	r0, [r7, #1060]	@ 0x424
        if (n > 0) HAL_UART_Transmit(&huart2, (uint8_t*)txl, (uint16_t)n, HAL_MAX_DELAY);
 800142a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 800142e:	2b00      	cmp	r3, #0
 8001430:	dd09      	ble.n	8001446 <main+0x96e>
 8001432:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8001436:	b29a      	uxth	r2, r3
 8001438:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	481e      	ldr	r0, [pc, #120]	@ (80014bc <main+0x9e4>)
 8001442:	f010 ff61 	bl	8012308 <HAL_UART_Transmit>

        // (F) Self-heal if radio settings look off (brownout recovery)
        uint8_t cfg_now = nrf24_ReadReg(CONFIG);
 8001446:	2000      	movs	r0, #0
 8001448:	f002 f81c 	bl	8003484 <nrf24_ReadReg>
 800144c:	4603      	mov	r3, r0
 800144e:	f887 3423 	strb.w	r3, [r7, #1059]	@ 0x423
        uint8_t ch_now  = nrf24_ReadReg(RF_CH);
 8001452:	2005      	movs	r0, #5
 8001454:	f002 f816 	bl	8003484 <nrf24_ReadReg>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 3422 	strb.w	r3, [r7, #1058]	@ 0x422
        if ( ((cfg_now & 0x0A) != 0x0A) || (ch_now != TEL_CHAN) ) {
 800145e:	f897 3423 	ldrb.w	r3, [r7, #1059]	@ 0x423
 8001462:	f003 030a 	and.w	r3, r3, #10
 8001466:	2b0a      	cmp	r3, #10
 8001468:	d104      	bne.n	8001474 <main+0x99c>
 800146a:	f897 3422 	ldrb.w	r3, [r7, #1058]	@ 0x422
 800146e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001470:	f43f ae48 	beq.w	8001104 <main+0x62c>
            const char *rx = "[NRF] Reinit (PWR_UP/EN_CRC/CH)\r\n";
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <main+0xa14>)
 8001476:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
            HAL_UART_Transmit(&huart2, (uint8_t*)rx, strlen(rx), HAL_MAX_DELAY);
 800147a:	f8d7 041c 	ldr.w	r0, [r7, #1052]	@ 0x41c
 800147e:	f7fe ff97 	bl	80003b0 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	f8d7 141c 	ldr.w	r1, [r7, #1052]	@ 0x41c
 800148e:	480b      	ldr	r0, [pc, #44]	@ (80014bc <main+0x9e4>)
 8001490:	f010 ff3a 	bl	8012308 <HAL_UART_Transmit>
            NRF24_Init();
 8001494:	f002 f8d8 	bl	8003648 <NRF24_Init>
            NRF24_TxMode(rf_addr, TEL_CHAN);
 8001498:	214c      	movs	r1, #76	@ 0x4c
 800149a:	4815      	ldr	r0, [pc, #84]	@ (80014f0 <main+0xa18>)
 800149c:	f002 f920 	bl	80036e0 <NRF24_TxMode>
	{
 80014a0:	e630      	b.n	8001104 <main+0x62c>
 80014a2:	bf00      	nop
 80014a4:	080191d8 	.word	0x080191d8
 80014a8:	2400090c 	.word	0x2400090c
 80014ac:	24000910 	.word	0x24000910
 80014b0:	24000946 	.word	0x24000946
 80014b4:	24000010 	.word	0x24000010
 80014b8:	080191dc 	.word	0x080191dc
 80014bc:	2400077c 	.word	0x2400077c
 80014c0:	24000814 	.word	0x24000814
 80014c4:	24000ac4 	.word	0x24000ac4
 80014c8:	24000810 	.word	0x24000810
 80014cc:	24000818 	.word	0x24000818
 80014d0:	2400081c 	.word	0x2400081c
 80014d4:	080191c8 	.word	0x080191c8
 80014d8:	2400036c 	.word	0x2400036c
 80014dc:	2400040c 	.word	0x2400040c
 80014e0:	240004ac 	.word	0x240004ac
 80014e4:	08019228 	.word	0x08019228
 80014e8:	08019274 	.word	0x08019274
 80014ec:	080192c8 	.word	0x080192c8
 80014f0:	24000008 	.word	0x24000008

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b09c      	sub	sp, #112	@ 0x70
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fe:	224c      	movs	r2, #76	@ 0x4c
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f014 f9d9 	bl	80158ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2220      	movs	r2, #32
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f014 f9d3 	bl	80158ba <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001514:	2002      	movs	r0, #2
 8001516:	f009 fb31 	bl	800ab7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <SystemClock_Config+0xd8>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a2a      	ldr	r2, [pc, #168]	@ (80015cc <SystemClock_Config+0xd8>)
 8001524:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <SystemClock_Config+0xd8>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001536:	bf00      	nop
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <SystemClock_Config+0xd8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001544:	d1f8      	bne.n	8001538 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001546:	2301      	movs	r3, #1
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001554:	2302      	movs	r3, #2
 8001556:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001558:	2302      	movs	r3, #2
 800155a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800155c:	232c      	movs	r3, #44	@ 0x2c
 800155e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001564:	2304      	movs	r3, #4
 8001566:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001568:	2302      	movs	r3, #2
 800156a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800156c:	230c      	movs	r3, #12
 800156e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001570:	2300      	movs	r3, #0
 8001572:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157c:	4618      	mov	r0, r3
 800157e:	f009 fb37 	bl	800abf0 <HAL_RCC_OscConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001588:	f001 feec 	bl	8003364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158c:	233f      	movs	r3, #63	@ 0x3f
 800158e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001590:	2303      	movs	r3, #3
 8001592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001598:	2308      	movs	r3, #8
 800159a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800159c:	2340      	movs	r3, #64	@ 0x40
 800159e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015a0:	2340      	movs	r3, #64	@ 0x40
 80015a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015aa:	2340      	movs	r3, #64	@ 0x40
 80015ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2103      	movs	r1, #3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f009 fef6 	bl	800b3a4 <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80015be:	f001 fed1 	bl	8003364 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3770      	adds	r7, #112	@ 0x70
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	58024800 	.word	0x58024800

080015d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0ae      	sub	sp, #184	@ 0xb8
 80015d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d6:	463b      	mov	r3, r7
 80015d8:	22b8      	movs	r2, #184	@ 0xb8
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f014 f96c 	bl	80158ba <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 80015e2:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80015f2:	2310      	movs	r3, #16
 80015f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001602:	23c0      	movs	r3, #192	@ 0xc0
 8001604:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800160e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001612:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161a:	463b      	mov	r3, r7
 800161c:	4618      	mov	r0, r3
 800161e:	f00a fa4d 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001628:	f001 fe9c 	bl	8003364 <Error_Handler>
  }
}
 800162c:	bf00      	nop
 800162e:	37b8      	adds	r7, #184	@ 0xb8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	@ 0x30
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800163a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001646:	463b      	mov	r3, r7
 8001648:	2224      	movs	r2, #36	@ 0x24
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f014 f934 	bl	80158ba <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001654:	4a41      	ldr	r2, [pc, #260]	@ (800175c <MX_ADC1_Init+0x128>)
 8001656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001658:	4b3f      	ldr	r3, [pc, #252]	@ (8001758 <MX_ADC1_Init+0x124>)
 800165a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800165e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001660:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001662:	2208      	movs	r2, #8
 8001664:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001666:	4b3c      	ldr	r3, [pc, #240]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001668:	2201      	movs	r2, #1
 800166a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800166c:	4b3a      	ldr	r3, [pc, #232]	@ (8001758 <MX_ADC1_Init+0x124>)
 800166e:	2208      	movs	r2, #8
 8001670:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001672:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001674:	2200      	movs	r2, #0
 8001676:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001678:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <MX_ADC1_Init+0x124>)
 800167a:	2201      	movs	r2, #1
 800167c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800167e:	4b36      	ldr	r3, [pc, #216]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001680:	2203      	movs	r2, #3
 8001682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001684:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <MX_ADC1_Init+0x124>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001692:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001694:	2200      	movs	r2, #0
 8001696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001698:	4b2f      	ldr	r3, [pc, #188]	@ (8001758 <MX_ADC1_Init+0x124>)
 800169a:	2203      	movs	r2, #3
 800169c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800169e:	4b2e      	ldr	r3, [pc, #184]	@ (8001758 <MX_ADC1_Init+0x124>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80016a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <MX_ADC1_Init+0x124>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80016aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <MX_ADC1_Init+0x124>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80016b2:	4b29      	ldr	r3, [pc, #164]	@ (8001758 <MX_ADC1_Init+0x124>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b8:	4827      	ldr	r0, [pc, #156]	@ (8001758 <MX_ADC1_Init+0x124>)
 80016ba:	f003 fbc1 	bl	8004e40 <HAL_ADC_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80016c4:	f001 fe4e 	bl	8003364 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	4821      	ldr	r0, [pc, #132]	@ (8001758 <MX_ADC1_Init+0x124>)
 80016d4:	f005 fba0 	bl	8006e18 <HAL_ADCEx_MultiModeConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80016de:	f001 fe41 	bl	8003364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <MX_ADC1_Init+0x12c>)
 80016e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016e6:	2306      	movs	r3, #6
 80016e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80016ea:	2305      	movs	r3, #5
 80016ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016ee:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016f4:	2304      	movs	r3, #4
 80016f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	4619      	mov	r1, r3
 8001706:	4814      	ldr	r0, [pc, #80]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001708:	f004 fad6 	bl	8005cb8 <HAL_ADC_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001712:	f001 fe27 	bl	8003364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <MX_ADC1_Init+0x130>)
 8001718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800171a:	230c      	movs	r3, #12
 800171c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001724:	f004 fac8 	bl	8005cb8 <HAL_ADC_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800172e:	f001 fe19 	bl	8003364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <MX_ADC1_Init+0x134>)
 8001734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001736:	2312      	movs	r3, #18
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	@ (8001758 <MX_ADC1_Init+0x124>)
 8001740:	f004 faba 	bl	8005cb8 <HAL_ADC_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800174a:	f001 fe0b 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3730      	adds	r7, #48	@ 0x30
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	24000214 	.word	0x24000214
 800175c:	40022000 	.word	0x40022000
 8001760:	10c00010 	.word	0x10c00010
 8001764:	14f00020 	.word	0x14f00020
 8001768:	08600004 	.word	0x08600004

0800176c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2224      	movs	r2, #36	@ 0x24
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f014 f89e 	bl	80158ba <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800177e:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <MX_ADC2_Init+0xc4>)
 8001780:	4a2c      	ldr	r2, [pc, #176]	@ (8001834 <MX_ADC2_Init+0xc8>)
 8001782:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001784:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <MX_ADC2_Init+0xc4>)
 8001786:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800178a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <MX_ADC2_Init+0xc4>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001792:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <MX_ADC2_Init+0xc4>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <MX_ADC2_Init+0xc4>)
 800179a:	2204      	movs	r2, #4
 800179c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017e4:	4812      	ldr	r0, [pc, #72]	@ (8001830 <MX_ADC2_Init+0xc4>)
 80017e6:	f003 fb2b 	bl	8004e40 <HAL_ADC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80017f0:	f001 fdb8 	bl	8003364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017f4:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_ADC2_Init+0xcc>)
 80017f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f8:	2306      	movs	r3, #6
 80017fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001800:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001804:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001806:	2304      	movs	r3, #4
 8001808:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_ADC2_Init+0xc4>)
 800181a:	f004 fa4d 	bl	8005cb8 <HAL_ADC_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8001824:	f001 fd9e 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	@ 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	24000284 	.word	0x24000284
 8001834:	40022100 	.word	0x40022100
 8001838:	25b00200 	.word	0x25b00200

0800183c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001842:	4b3b      	ldr	r3, [pc, #236]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001844:	4a3b      	ldr	r2, [pc, #236]	@ (8001934 <MX_FDCAN1_Init+0xf8>)
 8001846:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001848:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800184e:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001854:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001856:	2201      	movs	r2, #1
 8001858:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800185a:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 800185c:	2200      	movs	r2, #0
 800185e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001860:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001862:	2200      	movs	r2, #0
 8001864:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8001866:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001868:	2206      	movs	r2, #6
 800186a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800186c:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 800186e:	2201      	movs	r2, #1
 8001870:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001874:	2202      	movs	r2, #2
 8001876:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001878:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 800187a:	2205      	movs	r2, #5
 800187c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800187e:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001880:	2201      	movs	r2, #1
 8001882:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001884:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001886:	2201      	movs	r2, #1
 8001888:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800188a:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 800188c:	2201      	movs	r2, #1
 800188e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001890:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001892:	2201      	movs	r2, #1
 8001894:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001898:	2200      	movs	r2, #0
 800189a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 800189e:	2201      	movs	r2, #1
 80018a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 80018a2:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018aa:	2220      	movs	r2, #32
 80018ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018b0:	2204      	movs	r2, #4
 80018b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018b6:	2220      	movs	r2, #32
 80018b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018bc:	2204      	movs	r2, #4
 80018be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018c8:	2204      	movs	r2, #4
 80018ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80018d8:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018da:	2220      	movs	r2, #32
 80018dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018de:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018e6:	2204      	movs	r2, #4
 80018e8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80018ea:	4811      	ldr	r0, [pc, #68]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 80018ec:	f007 fd5a 	bl	80093a4 <HAL_FDCAN_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80018f6:	f001 fd35 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001902:	2302      	movs	r3, #2
 8001904:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001906:	2301      	movs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001912:	463b      	mov	r3, r7
 8001914:	4619      	mov	r1, r3
 8001916:	4806      	ldr	r0, [pc, #24]	@ (8001930 <MX_FDCAN1_Init+0xf4>)
 8001918:	f007 ff22 	bl	8009760 <HAL_FDCAN_ConfigFilter>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8001922:	f001 fd1f 	bl	8003364 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2400036c 	.word	0x2400036c
 8001934:	4000a000 	.word	0x4000a000

08001938 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800193e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001940:	4a3b      	ldr	r2, [pc, #236]	@ (8001a30 <MX_FDCAN2_Init+0xf8>)
 8001942:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001944:	4b39      	ldr	r3, [pc, #228]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800194a:	4b38      	ldr	r3, [pc, #224]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001950:	4b36      	ldr	r3, [pc, #216]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001952:	2200      	movs	r2, #0
 8001954:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001956:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001958:	2200      	movs	r2, #0
 800195a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800195c:	4b33      	ldr	r3, [pc, #204]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 800195e:	2200      	movs	r2, #0
 8001960:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8001962:	4b32      	ldr	r3, [pc, #200]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001964:	2206      	movs	r2, #6
 8001966:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001968:	4b30      	ldr	r3, [pc, #192]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 800196a:	2201      	movs	r2, #1
 800196c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800196e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001970:	2202      	movs	r2, #2
 8001972:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001974:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001976:	2205      	movs	r2, #5
 8001978:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800197a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 800197c:	2201      	movs	r2, #1
 800197e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001980:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001982:	2201      	movs	r2, #1
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001986:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001988:	2201      	movs	r2, #1
 800198a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 800198e:	2201      	movs	r2, #1
 8001990:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001992:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001994:	2200      	movs	r2, #0
 8001996:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 800199a:	2201      	movs	r2, #1
 800199c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 800199e:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 80019a4:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019a6:	2210      	movs	r2, #16
 80019a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80019aa:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019ac:	2204      	movs	r2, #4
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019b2:	2210      	movs	r2, #16
 80019b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019b8:	2204      	movs	r2, #4
 80019ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019c4:	2204      	movs	r2, #4
 80019c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80019c8:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80019ce:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 80019d4:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019d6:	2210      	movs	r2, #16
 80019d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019da:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019e2:	2204      	movs	r2, #4
 80019e4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80019e6:	4811      	ldr	r0, [pc, #68]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 80019e8:	f007 fcdc 	bl	80093a4 <HAL_FDCAN_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 80019f2:	f001 fcb7 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80019f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019fa:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001a00:	2302      	movs	r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a04:	2301      	movs	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001a10:	463b      	mov	r3, r7
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_FDCAN2_Init+0xf4>)
 8001a16:	f007 fea3 	bl	8009760 <HAL_FDCAN_ConfigFilter>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8001a20:	f001 fca0 	bl	8003364 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2400040c 	.word	0x2400040c
 8001a30:	4000a400 	.word	0x4000a400

08001a34 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b2c <MX_FDCAN3_Init+0xf8>)
 8001a3e:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a40:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001a46:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001a4c:	4b36      	ldr	r3, [pc, #216]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001a52:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001a58:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8001a5e:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a60:	2206      	movs	r2, #6
 8001a62:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001a64:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a72:	2205      	movs	r2, #5
 8001a74:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001a76:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001a82:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001a88:	4b27      	ldr	r3, [pc, #156]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8001a94:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8001a9a:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8001aa0:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001aae:	2210      	movs	r2, #16
 8001ab0:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001ade:	2204      	movs	r2, #4
 8001ae0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001ae2:	4811      	ldr	r0, [pc, #68]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001ae4:	f007 fc5e 	bl	80093a4 <HAL_FDCAN_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 8001aee:	f001 fc39 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001af2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001af6:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001afc:	2302      	movs	r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b00:	2301      	movs	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <MX_FDCAN3_Init+0xf4>)
 8001b12:	f007 fe25 	bl	8009760 <HAL_FDCAN_ConfigFilter>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 8001b1c:	f001 fc22 	bl	8003364 <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	240004ac 	.word	0x240004ac
 8001b2c:	4000d400 	.word	0x4000d400

08001b30 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <MX_SDMMC1_SD_Init+0x34>)
 8001b36:	4a0c      	ldr	r2, [pc, #48]	@ (8001b68 <MX_SDMMC1_SD_Init+0x38>)
 8001b38:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_SDMMC1_SD_Init+0x34>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <MX_SDMMC1_SD_Init+0x34>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_SDMMC1_SD_Init+0x34>)
 8001b48:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b4c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <MX_SDMMC1_SD_Init+0x34>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <MX_SDMMC1_SD_Init+0x34>)
 8001b56:	2202      	movs	r2, #2
 8001b58:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	2400054c 	.word	0x2400054c
 8001b68:	52007000 	.word	0x52007000

08001b6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b70:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001b72:	4a28      	ldr	r2, [pc, #160]	@ (8001c14 <MX_SPI1_Init+0xa8>)
 8001b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b76:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001b78:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7e:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b84:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001b86:	2207      	movs	r2, #7
 8001b88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001b98:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001ba0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ba4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001be8:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_SPI1_Init+0xa4>)
 8001bfc:	f00d ffa8 	bl	800fb50 <HAL_SPI_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001c06:	f001 fbad 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	240005c8 	.word	0x240005c8
 8001c14:	40013000 	.word	0x40013000

08001c18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b09c      	sub	sp, #112	@ 0x70
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	615a      	str	r2, [r3, #20]
 8001c4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2234      	movs	r2, #52	@ 0x34
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f013 fe31 	bl	80158ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c58:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d84 <MX_TIM1_Init+0x16c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c5e:	4b48      	ldr	r3, [pc, #288]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c64:	4b46      	ldr	r3, [pc, #280]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c6a:	4b45      	ldr	r3, [pc, #276]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001c6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c72:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c78:	4b41      	ldr	r3, [pc, #260]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c7e:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c84:	483e      	ldr	r0, [pc, #248]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001c86:	f00f f90a 	bl	8010e9e <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c90:	f001 fb68 	bl	8003364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c98:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c9a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4837      	ldr	r0, [pc, #220]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001ca2:	f00f fc55 	bl	8011550 <HAL_TIM_ConfigClockSource>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001cac:	f001 fb5a 	bl	8003364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cb0:	4833      	ldr	r0, [pc, #204]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001cb2:	f00f f9d1 	bl	8011058 <HAL_TIM_PWM_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001cbc:	f001 fb52 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ccc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	482b      	ldr	r0, [pc, #172]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001cd4:	f010 f982 	bl	8011fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001cde:	f001 fb41 	bl	8003364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce2:	2360      	movs	r3, #96	@ 0x60
 8001ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cea:	2300      	movs	r3, #0
 8001cec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	481e      	ldr	r0, [pc, #120]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001d08:	f00f fb0e 	bl	8011328 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d12:	f001 fb27 	bl	8003364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4818      	ldr	r0, [pc, #96]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001d20:	f00f fb02 	bl	8011328 <HAL_TIM_PWM_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d2a:	f001 fb1b 	bl	8003364 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4807      	ldr	r0, [pc, #28]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001d64:	f010 f9d6 	bl	8012114 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001d6e:	f001 faf9 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d72:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <MX_TIM1_Init+0x168>)
 8001d74:	f002 f99c 	bl	80040b0 <HAL_TIM_MspPostInit>

}
 8001d78:	bf00      	nop
 8001d7a:	3770      	adds	r7, #112	@ 0x70
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	24000650 	.word	0x24000650
 8001d84:	40010000 	.word	0x40010000

08001d88 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d8c:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <MX_TIM16_Init+0x48>)
 8001d8e:	4a11      	ldr	r2, [pc, #68]	@ (8001dd4 <MX_TIM16_Init+0x4c>)
 8001d90:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_TIM16_Init+0x48>)
 8001d94:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8001d98:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <MX_TIM16_Init+0x48>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <MX_TIM16_Init+0x48>)
 8001da2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001da6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_TIM16_Init+0x48>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <MX_TIM16_Init+0x48>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_TIM16_Init+0x48>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_TIM16_Init+0x48>)
 8001dbc:	f00f f86f 	bl	8010e9e <HAL_TIM_Base_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001dc6:	f001 facd 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2400069c 	.word	0x2400069c
 8001dd4:	40014400 	.word	0x40014400

08001dd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001dde:	4a23      	ldr	r2, [pc, #140]	@ (8001e6c <MX_USART1_UART_Init+0x94>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001de2:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e20:	4811      	ldr	r0, [pc, #68]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e22:	f010 fa21 	bl	8012268 <HAL_UART_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f001 fa9a 	bl	8003364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e34:	f011 fbbb 	bl	80135ae <HAL_UARTEx_SetTxFifoThreshold>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f001 fa91 	bl	8003364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e46:	f011 fbf0 	bl	801362a <HAL_UARTEx_SetRxFifoThreshold>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e50:	f001 fa88 	bl	8003364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e56:	f011 fb71 	bl	801353c <HAL_UARTEx_DisableFifoMode>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e60:	f001 fa80 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	240006e8 	.word	0x240006e8
 8001e6c:	40011000 	.word	0x40011000

08001e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e74:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb8:	4811      	ldr	r0, [pc, #68]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eba:	f010 f9d5 	bl	8012268 <HAL_UART_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ec4:	f001 fa4e 	bl	8003364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ecc:	f011 fb6f 	bl	80135ae <HAL_UARTEx_SetTxFifoThreshold>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ed6:	f001 fa45 	bl	8003364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ede:	f011 fba4 	bl	801362a <HAL_UARTEx_SetRxFifoThreshold>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f001 fa3c 	bl	8003364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eee:	f011 fb25 	bl	801353c <HAL_UARTEx_DisableFifoMode>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ef8:	f001 fa34 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2400077c 	.word	0x2400077c
 8001f04:	40004400 	.word	0x40004400

08001f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <MX_DMA_Init+0x3c>)
 8001f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f14:	4a0b      	ldr	r2, [pc, #44]	@ (8001f44 <MX_DMA_Init+0x3c>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f1e:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <MX_DMA_Init+0x3c>)
 8001f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	200b      	movs	r0, #11
 8001f32:	f005 f92e 	bl	8007192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001f36:	200b      	movs	r0, #11
 8001f38:	f005 f945 	bl	80071c6 <HAL_NVIC_EnableIRQ>

}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	58024400 	.word	0x58024400

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	@ 0x38
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5e:	4b75      	ldr	r3, [pc, #468]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f64:	4a73      	ldr	r2, [pc, #460]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f6e:	4b71      	ldr	r3, [pc, #452]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f82:	4a6c      	ldr	r2, [pc, #432]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f8c:	4b69      	ldr	r3, [pc, #420]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b66      	ldr	r3, [pc, #408]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa0:	4a64      	ldr	r2, [pc, #400]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001faa:	4b62      	ldr	r3, [pc, #392]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbe:	4a5d      	ldr	r2, [pc, #372]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd6:	4b57      	ldr	r3, [pc, #348]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fdc:	4a55      	ldr	r2, [pc, #340]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fe6:	4b53      	ldr	r3, [pc, #332]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8001ffc:	f043 0310 	orr.w	r3, r3, #16
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002004:	4b4b      	ldr	r3, [pc, #300]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002012:	4b48      	ldr	r3, [pc, #288]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002018:	4a46      	ldr	r2, [pc, #280]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 800201a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800201e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002022:	4b44      	ldr	r3, [pc, #272]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002030:	4b40      	ldr	r3, [pc, #256]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002036:	4a3f      	ldr	r2, [pc, #252]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002040:	4b3c      	ldr	r3, [pc, #240]	@ (8002134 <MX_GPIO_Init+0x1ec>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	2103      	movs	r1, #3
 8002052:	4839      	ldr	r0, [pc, #228]	@ (8002138 <MX_GPIO_Init+0x1f0>)
 8002054:	f008 fd78 	bl	800ab48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8002058:	2200      	movs	r2, #0
 800205a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800205e:	4837      	ldr	r0, [pc, #220]	@ (800213c <MX_GPIO_Init+0x1f4>)
 8002060:	f008 fd72 	bl	800ab48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8002064:	2303      	movs	r3, #3
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002068:	2301      	movs	r3, #1
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002078:	4619      	mov	r1, r3
 800207a:	482f      	ldr	r0, [pc, #188]	@ (8002138 <MX_GPIO_Init+0x1f0>)
 800207c:	f008 fba4 	bl	800a7c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8002080:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800208a:	2302      	movs	r3, #2
 800208c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002092:	4619      	mov	r1, r3
 8002094:	482a      	ldr	r0, [pc, #168]	@ (8002140 <MX_GPIO_Init+0x1f8>)
 8002096:	f008 fb97 	bl	800a7c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 800209a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	4824      	ldr	r0, [pc, #144]	@ (8002140 <MX_GPIO_Init+0x1f8>)
 80020b0:	f008 fb8a 	bl	800a7c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80020b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	481b      	ldr	r0, [pc, #108]	@ (800213c <MX_GPIO_Init+0x1f4>)
 80020ce:	f008 fb7b 	bl	800a7c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON1_Pin */
  GPIO_InitStruct.Pin = START_BUTTON1_Pin;
 80020d2:	2380      	movs	r3, #128	@ 0x80
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020da:	2302      	movs	r3, #2
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	4817      	ldr	r0, [pc, #92]	@ (8002144 <MX_GPIO_Init+0x1fc>)
 80020e6:	f008 fb6f 	bl	800a7c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* --- nRF24 CE/CSN pins (PG3=CSN idle HIGH, PC6=CE idle LOW) --- */

  // Idle levels
  HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   // CSN idle HIGH
 80020ea:	2201      	movs	r2, #1
 80020ec:	2108      	movs	r1, #8
 80020ee:	4815      	ldr	r0, [pc, #84]	@ (8002144 <MX_GPIO_Init+0x1fc>)
 80020f0:	f008 fd2a 	bl	800ab48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); // CE  idle LOW
 80020f4:	2200      	movs	r2, #0
 80020f6:	2140      	movs	r1, #64	@ 0x40
 80020f8:	480f      	ldr	r0, [pc, #60]	@ (8002138 <MX_GPIO_Init+0x1f0>)
 80020fa:	f008 fd25 	bl	800ab48 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30

  GPIO_InitStruct.Pin = NRF24_CSN_PIN;
 800210a:	2308      	movs	r3, #8
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CSN_PORT, &GPIO_InitStruct);
 800210e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002112:	4619      	mov	r1, r3
 8002114:	480b      	ldr	r0, [pc, #44]	@ (8002144 <MX_GPIO_Init+0x1fc>)
 8002116:	f008 fb57 	bl	800a7c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = NRF24_CE_PIN;
 800211a:	2340      	movs	r3, #64	@ 0x40
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CE_PORT, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	4804      	ldr	r0, [pc, #16]	@ (8002138 <MX_GPIO_Init+0x1f0>)
 8002126:	f008 fb4f 	bl	800a7c8 <HAL_GPIO_Init>



/* USER CODE END MX_GPIO_Init_2 */
}
 800212a:	bf00      	nop
 800212c:	3738      	adds	r7, #56	@ 0x38
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	58024400 	.word	0x58024400
 8002138:	58020800 	.word	0x58020800
 800213c:	58021000 	.word	0x58021000
 8002140:	58021400 	.word	0x58021400
 8002144:	58021800 	.word	0x58021800

08002148 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4909      	ldr	r1, [pc, #36]	@ (8002178 <print+0x30>)
 8002154:	4809      	ldr	r0, [pc, #36]	@ (800217c <print+0x34>)
 8002156:	f013 fb4b 	bl	80157f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800215a:	4808      	ldr	r0, [pc, #32]	@ (800217c <print+0x34>)
 800215c:	f7fe f928 	bl	80003b0 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	b29a      	uxth	r2, r3
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	4904      	ldr	r1, [pc, #16]	@ (800217c <print+0x34>)
 800216a:	4805      	ldr	r0, [pc, #20]	@ (8002180 <print+0x38>)
 800216c:	f010 f8cc 	bl	8012308 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	080192ec 	.word	0x080192ec
 800217c:	24000958 	.word	0x24000958
 8002180:	2400077c 	.word	0x2400077c

08002184 <printValue>:

void printValue(int value)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4909      	ldr	r1, [pc, #36]	@ (80021b4 <printValue+0x30>)
 8002190:	4809      	ldr	r0, [pc, #36]	@ (80021b8 <printValue+0x34>)
 8002192:	f013 fb2d 	bl	80157f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8002196:	4808      	ldr	r0, [pc, #32]	@ (80021b8 <printValue+0x34>)
 8002198:	f7fe f90a 	bl	80003b0 <strlen>
 800219c:	4603      	mov	r3, r0
 800219e:	b29a      	uxth	r2, r3
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	4904      	ldr	r1, [pc, #16]	@ (80021b8 <printValue+0x34>)
 80021a6:	4805      	ldr	r0, [pc, #20]	@ (80021bc <printValue+0x38>)
 80021a8:	f010 f8ae 	bl	8012308 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	080192f4 	.word	0x080192f4
 80021b8:	24000958 	.word	0x24000958
 80021bc:	2400077c 	.word	0x2400077c

080021c0 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8104 	beq.w	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a83      	ldr	r2, [pc, #524]	@ (80023fc <HAL_FDCAN_RxFifo0Callback+0x228>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	f040 8098 	bne.w	8002326 <HAL_FDCAN_RxFifo0Callback+0x152>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80021f6:	4b82      	ldr	r3, [pc, #520]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 80021f8:	4a82      	ldr	r2, [pc, #520]	@ (8002404 <HAL_FDCAN_RxFifo0Callback+0x230>)
 80021fa:	2140      	movs	r1, #64	@ 0x40
 80021fc:	4882      	ldr	r0, [pc, #520]	@ (8002408 <HAL_FDCAN_RxFifo0Callback+0x234>)
 80021fe:	f007 fbab 	bl	8009958 <HAL_FDCAN_GetRxMessage>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 80f4 	bne.w	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 800220a:	4b7e      	ldr	r3, [pc, #504]	@ (8002404 <HAL_FDCAN_RxFifo0Callback+0x230>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f2a3 4361 	subw	r3, r3, #1121	@ 0x461
 8002212:	2b05      	cmp	r3, #5
 8002214:	f200 80ed 	bhi.w	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
 8002218:	a201      	add	r2, pc, #4	@ (adr r2, 8002220 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002239 	.word	0x08002239
 8002224:	080023f3 	.word	0x080023f3
 8002228:	08002263 	.word	0x08002263
 800222c:	080022a1 	.word	0x080022a1
 8002230:	080022cb 	.word	0x080022cb
 8002234:	080022f7 	.word	0x080022f7
				{
				case TX_STATE_2:
					state = RxData_Inv[4] & 0xF;
 8002238:	4b71      	ldr	r3, [pc, #452]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4b72      	ldr	r3, [pc, #456]	@ (800240c <HAL_FDCAN_RxFifo0Callback+0x238>)
 8002244:	701a      	strb	r2, [r3, #0]

					if (state == 10 || state == 11)
 8002246:	4b71      	ldr	r3, [pc, #452]	@ (800240c <HAL_FDCAN_RxFifo0Callback+0x238>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b0a      	cmp	r3, #10
 800224c:	d004      	beq.n	8002258 <HAL_FDCAN_RxFifo0Callback+0x84>
 800224e:	4b6f      	ldr	r3, [pc, #444]	@ (800240c <HAL_FDCAN_RxFifo0Callback+0x238>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b0b      	cmp	r3, #11
 8002254:	f040 80c2 	bne.w	80023dc <HAL_FDCAN_RxFifo0Callback+0x208>
					{
						error = RxData_Inv[2];
 8002258:	4b69      	ldr	r3, [pc, #420]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 800225a:	789a      	ldrb	r2, [r3, #2]
 800225c:	4b6c      	ldr	r3, [pc, #432]	@ (8002410 <HAL_FDCAN_RxFifo0Callback+0x23c>)
 800225e:	701a      	strb	r2, [r3, #0]
						//printHex(error);
					}
					break;
 8002260:	e0bc      	b.n	80023dc <HAL_FDCAN_RxFifo0Callback+0x208>

				case TX_STATE_4:
				  if (RxHeader_Inv.DataLength == FDCAN_DLC_BYTES_8) {
 8002262:	4b68      	ldr	r3, [pc, #416]	@ (8002404 <HAL_FDCAN_RxFifo0Callback+0x230>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b08      	cmp	r3, #8
 8002268:	f040 80ba 	bne.w	80023e0 <HAL_FDCAN_RxFifo0Callback+0x20c>
				      uint32_t raw = ((uint32_t)(RxData_Inv[7] & 0x0F) << 16) |
 800226c:	4b64      	ldr	r3, [pc, #400]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 800226e:	79db      	ldrb	r3, [r3, #7]
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
				                     ((uint32_t)RxData_Inv[6] << 8) |
 8002276:	4b62      	ldr	r3, [pc, #392]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8002278:	799b      	ldrb	r3, [r3, #6]
 800227a:	021b      	lsls	r3, r3, #8
				      uint32_t raw = ((uint32_t)(RxData_Inv[7] & 0x0F) << 16) |
 800227c:	4313      	orrs	r3, r2
				                     ((uint32_t)RxData_Inv[5]);
 800227e:	4a60      	ldr	r2, [pc, #384]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8002280:	7952      	ldrb	r2, [r2, #5]
				      uint32_t raw = ((uint32_t)(RxData_Inv[7] & 0x0F) << 16) |
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
				      // sign-extend 20-bit if needed
				      if (raw & 0x80000u) raw |= 0xFFF00000u;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_FDCAN_RxFifo0Callback+0xc4>
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4b60      	ldr	r3, [pc, #384]	@ (8002414 <HAL_FDCAN_RxFifo0Callback+0x240>)
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
				      e_machine_rpm = (int)raw;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a5f      	ldr	r2, [pc, #380]	@ (8002418 <HAL_FDCAN_RxFifo0Callback+0x244>)
 800229c:	6013      	str	r3, [r2, #0]
				  }
				  break;
 800229e:	e09f      	b.n	80023e0 <HAL_FDCAN_RxFifo0Callback+0x20c>

				case TX_STATE_5:  //Temperaturas
				  if (RxHeader_Inv.DataLength == FDCAN_DLC_BYTES_8) {
 80022a0:	4b58      	ldr	r3, [pc, #352]	@ (8002404 <HAL_FDCAN_RxFifo0Callback+0x230>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	f040 809d 	bne.w	80023e4 <HAL_FDCAN_RxFifo0Callback+0x210>
				      inv_t_motor = RxData_Inv[0];  // REPLACE with real byte mapping
 80022aa:	4b55      	ldr	r3, [pc, #340]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <HAL_FDCAN_RxFifo0Callback+0x248>)
 80022b2:	601a      	str	r2, [r3, #0]
				      inv_t_igbt  = RxData_Inv[1];  // REPLACE
 80022b4:	4b52      	ldr	r3, [pc, #328]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_FDCAN_RxFifo0Callback+0x24c>)
 80022bc:	601a      	str	r2, [r3, #0]
				      inv_t_air   = RxData_Inv[2];  // REPLACE
 80022be:	4b50      	ldr	r3, [pc, #320]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 80022c0:	789b      	ldrb	r3, [r3, #2]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b57      	ldr	r3, [pc, #348]	@ (8002424 <HAL_FDCAN_RxFifo0Callback+0x250>)
 80022c6:	601a      	str	r2, [r3, #0]
				  }
				  break;
 80022c8:	e08c      	b.n	80023e4 <HAL_FDCAN_RxFifo0Callback+0x210>

				case TX_STATE_6:  //Movidas inversor
				  if (RxHeader_Inv.DataLength == FDCAN_DLC_BYTES_8) {
 80022ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002404 <HAL_FDCAN_RxFifo0Callback+0x230>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	f040 808a 	bne.w	80023e8 <HAL_FDCAN_RxFifo0Callback+0x214>
				      inv_n_actual = (RxData_Inv[3] << 8) | RxData_Inv[2];   // REPLACE mapping
 80022d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 80022d6:	78db      	ldrb	r3, [r3, #3]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	4a49      	ldr	r2, [pc, #292]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 80022dc:	7892      	ldrb	r2, [r2, #2]
 80022de:	4313      	orrs	r3, r2
 80022e0:	4a51      	ldr	r2, [pc, #324]	@ (8002428 <HAL_FDCAN_RxFifo0Callback+0x254>)
 80022e2:	6013      	str	r3, [r2, #0]
				      inv_i_actual = (RxData_Inv[5] << 8) | RxData_Inv[4];   // REPLACE mapping
 80022e4:	4b46      	ldr	r3, [pc, #280]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 80022e6:	795b      	ldrb	r3, [r3, #5]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	4a45      	ldr	r2, [pc, #276]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 80022ec:	7912      	ldrb	r2, [r2, #4]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	4a4e      	ldr	r2, [pc, #312]	@ (800242c <HAL_FDCAN_RxFifo0Callback+0x258>)
 80022f2:	6013      	str	r3, [r2, #0]
				  }
				  break;
 80022f4:	e078      	b.n	80023e8 <HAL_FDCAN_RxFifo0Callback+0x214>

				case TX_STATE_7:
					if (RxHeader_Inv.DataLength == 6)
 80022f6:	4b43      	ldr	r3, [pc, #268]	@ (8002404 <HAL_FDCAN_RxFifo0Callback+0x230>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d176      	bne.n	80023ec <HAL_FDCAN_RxFifo0Callback+0x218>
					{
						if (config_inv_lectura_v == 0)
 80022fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002430 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <HAL_FDCAN_RxFifo0Callback+0x138>
						{
							config_inv_lectura_v = 1;
 8002306:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]
						}
						if (config_inv_lectura_v == 1)
 800230c:	4b48      	ldr	r3, [pc, #288]	@ (8002430 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d16b      	bne.n	80023ec <HAL_FDCAN_RxFifo0Callback+0x218>
						{
							//inv_dc_bus_voltage = (int)RxData_Inv[1] << 8 | (int)RxData_Inv[0];
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 8002314:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8002316:	78db      	ldrb	r3, [r3, #3]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	4a39      	ldr	r2, [pc, #228]	@ (8002400 <HAL_FDCAN_RxFifo0Callback+0x22c>)
 800231c:	7892      	ldrb	r2, [r2, #2]
 800231e:	4313      	orrs	r3, r2
 8002320:	4a44      	ldr	r2, [pc, #272]	@ (8002434 <HAL_FDCAN_RxFifo0Callback+0x260>)
 8002322:	6013      	str	r3, [r2, #0]
							//}
							//inv_dc_bus_power = inv_dc_bus_power * 32767; // Scale factor
						}
					}

					break;
 8002324:	e062      	b.n	80023ec <HAL_FDCAN_RxFifo0Callback+0x218>
				}
			}
		}
		else if (hfdcan->Instance == FDCAN2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a43      	ldr	r2, [pc, #268]	@ (8002438 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d126      	bne.n	800237e <HAL_FDCAN_RxFifo0Callback+0x1aa>
		{
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 8002330:	4b42      	ldr	r3, [pc, #264]	@ (800243c <HAL_FDCAN_RxFifo0Callback+0x268>)
 8002332:	4a43      	ldr	r2, [pc, #268]	@ (8002440 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8002334:	2140      	movs	r1, #64	@ 0x40
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f007 fb0e 	bl	8009958 <HAL_FDCAN_GetRxMessage>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d157      	bne.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
									   RxData_Acu) == HAL_OK)
			{
				switch (RxHeader_Acu.Identifier)
 8002342:	4b3f      	ldr	r3, [pc, #252]	@ (8002440 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b20      	cmp	r3, #32
 8002348:	d003      	beq.n	8002352 <HAL_FDCAN_RxFifo0Callback+0x17e>
 800234a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800234e:	d008      	beq.n	8002362 <HAL_FDCAN_RxFifo0Callback+0x18e>

				}
			}
		}
	}
}
 8002350:	e04f      	b.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
					if (RxData_Acu[0] == 0)
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <HAL_FDCAN_RxFifo0Callback+0x268>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d14a      	bne.n	80023f0 <HAL_FDCAN_RxFifo0Callback+0x21c>
						precarga_inv = 1;
 800235a:	4b3a      	ldr	r3, [pc, #232]	@ (8002444 <HAL_FDCAN_RxFifo0Callback+0x270>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
					break;
 8002360:	e046      	b.n	80023f0 <HAL_FDCAN_RxFifo0Callback+0x21c>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 8002362:	4b36      	ldr	r3, [pc, #216]	@ (800243c <HAL_FDCAN_RxFifo0Callback+0x268>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	4a34      	ldr	r2, [pc, #208]	@ (800243c <HAL_FDCAN_RxFifo0Callback+0x268>)
 800236a:	7852      	ldrb	r2, [r2, #1]
 800236c:	4313      	orrs	r3, r2
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002376:	4b34      	ldr	r3, [pc, #208]	@ (8002448 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8002378:	edc3 7a00 	vstr	s15, [r3]
					break;
 800237c:	e039      	b.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
		else if (hfdcan->Instance == FDCAN3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a32      	ldr	r2, [pc, #200]	@ (800244c <HAL_FDCAN_RxFifo0Callback+0x278>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d134      	bne.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 8002388:	4b31      	ldr	r3, [pc, #196]	@ (8002450 <HAL_FDCAN_RxFifo0Callback+0x27c>)
 800238a:	4a32      	ldr	r2, [pc, #200]	@ (8002454 <HAL_FDCAN_RxFifo0Callback+0x280>)
 800238c:	2140      	movs	r1, #64	@ 0x40
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f007 fae2 	bl	8009958 <HAL_FDCAN_GetRxMessage>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d12b      	bne.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
				switch (RxHeader_Dash.Identifier)
 800239a:	4b2e      	ldr	r3, [pc, #184]	@ (8002454 <HAL_FDCAN_RxFifo0Callback+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f240 1233 	movw	r2, #307	@ 0x133
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d125      	bne.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 80023a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <HAL_FDCAN_RxFifo0Callback+0x27c>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <HAL_FDCAN_RxFifo0Callback+0x27c>)
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	4b26      	ldr	r3, [pc, #152]	@ (8002458 <HAL_FDCAN_RxFifo0Callback+0x284>)
 80023be:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 80023c0:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <HAL_FDCAN_RxFifo0Callback+0x27c>)
 80023c2:	789b      	ldrb	r3, [r3, #2]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <HAL_FDCAN_RxFifo0Callback+0x27c>)
 80023cc:	78db      	ldrb	r3, [r3, #3]
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	4313      	orrs	r3, r2
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <HAL_FDCAN_RxFifo0Callback+0x288>)
 80023d8:	801a      	strh	r2, [r3, #0]
}
 80023da:	e00a      	b.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
					break;
 80023dc:	bf00      	nop
 80023de:	e008      	b.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
				  break;
 80023e0:	bf00      	nop
 80023e2:	e006      	b.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
				  break;
 80023e4:	bf00      	nop
 80023e6:	e004      	b.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
				  break;
 80023e8:	bf00      	nop
 80023ea:	e002      	b.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
					break;
 80023ec:	bf00      	nop
 80023ee:	e000      	b.n	80023f2 <HAL_FDCAN_RxFifo0Callback+0x21e>
					break;
 80023f0:	bf00      	nop
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	4000a000 	.word	0x4000a000
 8002400:	240008e8 	.word	0x240008e8
 8002404:	24000844 	.word	0x24000844
 8002408:	2400036c 	.word	0x2400036c
 800240c:	24000946 	.word	0x24000946
 8002410:	24000ab6 	.word	0x24000ab6
 8002414:	fff00000 	.word	0xfff00000
 8002418:	24000910 	.word	0x24000910
 800241c:	24000914 	.word	0x24000914
 8002420:	24000918 	.word	0x24000918
 8002424:	2400091c 	.word	0x2400091c
 8002428:	24000920 	.word	0x24000920
 800242c:	24000924 	.word	0x24000924
 8002430:	2400020c 	.word	0x2400020c
 8002434:	2400090c 	.word	0x2400090c
 8002438:	4000a400 	.word	0x4000a400
 800243c:	240008f8 	.word	0x240008f8
 8002440:	24000890 	.word	0x24000890
 8002444:	24000208 	.word	0x24000208
 8002448:	24000010 	.word	0x24000010
 800244c:	4000d400 	.word	0x4000d400
 8002450:	24000900 	.word	0x24000900
 8002454:	240008b8 	.word	0x240008b8
 8002458:	2400092e 	.word	0x2400092e
 800245c:	24000930 	.word	0x24000930

08002460 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a03      	ldr	r2, [pc, #12]	@ (800247c <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 800246e:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	2400040c 	.word	0x2400040c

08002480 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 8002486:	4b90      	ldr	r3, [pc, #576]	@ (80026c8 <setTorque+0x248>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002496:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 800249a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800249e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024a2:	ee17 3a90 	vmov	r3, s15
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	4b88      	ldr	r3, [pc, #544]	@ (80026cc <setTorque+0x24c>)
 80024aa:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 80024ac:	4b87      	ldr	r3, [pc, #540]	@ (80026cc <setTorque+0x24c>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	2b64      	cmp	r3, #100	@ 0x64
 80024b2:	d902      	bls.n	80024ba <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 80024b4:	4b85      	ldr	r3, [pc, #532]	@ (80026cc <setTorque+0x24c>)
 80024b6:	2264      	movs	r2, #100	@ 0x64
 80024b8:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 80024ba:	4b85      	ldr	r3, [pc, #532]	@ (80026d0 <setTorque+0x250>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80024ca:	ed9f 5b75 	vldr	d5, [pc, #468]	@ 80026a0 <setTorque+0x220>
 80024ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024d6:	ee17 3a90 	vmov	r3, s15
 80024da:	b29a      	uxth	r2, r3
 80024dc:	4b7d      	ldr	r3, [pc, #500]	@ (80026d4 <setTorque+0x254>)
 80024de:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 80024e0:	4b7c      	ldr	r3, [pc, #496]	@ (80026d4 <setTorque+0x254>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b64      	cmp	r3, #100	@ 0x64
 80024e6:	d902      	bls.n	80024ee <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 80024e8:	4b7a      	ldr	r3, [pc, #488]	@ (80026d4 <setTorque+0x254>)
 80024ea:	2264      	movs	r2, #100	@ 0x64
 80024ec:	801a      	strh	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 80024ee:	4b77      	ldr	r3, [pc, #476]	@ (80026cc <setTorque+0x24c>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d911      	bls.n	800251a <setTorque+0x9a>
 80024f6:	4b77      	ldr	r3, [pc, #476]	@ (80026d4 <setTorque+0x254>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d90d      	bls.n	800251a <setTorque+0x9a>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 80024fe:	4b73      	ldr	r3, [pc, #460]	@ (80026cc <setTorque+0x24c>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	4b73      	ldr	r3, [pc, #460]	@ (80026d4 <setTorque+0x254>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	4413      	add	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	da00      	bge.n	8002510 <setTorque+0x90>
 800250e:	3301      	adds	r3, #1
 8002510:	105b      	asrs	r3, r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b70      	ldr	r3, [pc, #448]	@ (80026d8 <setTorque+0x258>)
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	e002      	b.n	8002520 <setTorque+0xa0>
	}
	else
	{
		torque_total = 0;
 800251a:	4b6f      	ldr	r3, [pc, #444]	@ (80026d8 <setTorque+0x258>)
 800251c:	2200      	movs	r2, #0
 800251e:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 8002520:	4b6d      	ldr	r3, [pc, #436]	@ (80026d8 <setTorque+0x258>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	2b09      	cmp	r3, #9
 8002526:	d803      	bhi.n	8002530 <setTorque+0xb0>
	{
		torque_total = 0;
 8002528:	4b6b      	ldr	r3, [pc, #428]	@ (80026d8 <setTorque+0x258>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e006      	b.n	800253e <setTorque+0xbe>
	}
	else if (torque_total > 90)
 8002530:	4b69      	ldr	r3, [pc, #420]	@ (80026d8 <setTorque+0x258>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	2b5a      	cmp	r3, #90	@ 0x5a
 8002536:	d902      	bls.n	800253e <setTorque+0xbe>
	{
		torque_total = 100;
 8002538:	4b67      	ldr	r3, [pc, #412]	@ (80026d8 <setTorque+0x258>)
 800253a:	2264      	movs	r2, #100	@ 0x64
 800253c:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 800253e:	4b67      	ldr	r3, [pc, #412]	@ (80026dc <setTorque+0x25c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002546:	4293      	cmp	r3, r2
 8002548:	dd0a      	ble.n	8002560 <setTorque+0xe0>
 800254a:	4b63      	ldr	r3, [pc, #396]	@ (80026d8 <setTorque+0x258>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	2b19      	cmp	r3, #25
 8002550:	d906      	bls.n	8002560 <setTorque+0xe0>
	{
		print("EV_2_3");
 8002552:	4863      	ldr	r0, [pc, #396]	@ (80026e0 <setTorque+0x260>)
 8002554:	f7ff fdf8 	bl	8002148 <print>
		flag_EV_2_3 = 1;
 8002558:	4b62      	ldr	r3, [pc, #392]	@ (80026e4 <setTorque+0x264>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e00c      	b.n	800257a <setTorque+0xfa>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 8002560:	4b5e      	ldr	r3, [pc, #376]	@ (80026dc <setTorque+0x25c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002568:	4293      	cmp	r3, r2
 800256a:	dc06      	bgt.n	800257a <setTorque+0xfa>
 800256c:	4b5a      	ldr	r3, [pc, #360]	@ (80026d8 <setTorque+0x258>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d802      	bhi.n	800257a <setTorque+0xfa>
	{
		flag_EV_2_3 = 0;
 8002574:	4b5b      	ldr	r3, [pc, #364]	@ (80026e4 <setTorque+0x264>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 800257a:	4b54      	ldr	r3, [pc, #336]	@ (80026cc <setTorque+0x24c>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4b54      	ldr	r3, [pc, #336]	@ (80026d4 <setTorque+0x254>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	bfb8      	it	lt
 800258a:	425b      	neglt	r3, r3
 800258c:	2b0a      	cmp	r3, #10
 800258e:	dd06      	ble.n	800259e <setTorque+0x11e>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8002590:	4855      	ldr	r0, [pc, #340]	@ (80026e8 <setTorque+0x268>)
 8002592:	f7ff fdd9 	bl	8002148 <print>
		flag_T11_8_9 = 1;
 8002596:	4b55      	ldr	r3, [pc, #340]	@ (80026ec <setTorque+0x26c>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e007      	b.n	80025ae <setTorque+0x12e>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 800259e:	f002 f8e3 	bl	8004768 <HAL_GetTick>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <setTorque+0x270>)
 80025a6:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 80025a8:	4b50      	ldr	r3, [pc, #320]	@ (80026ec <setTorque+0x26c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 80025ae:	4b4d      	ldr	r3, [pc, #308]	@ (80026e4 <setTorque+0x264>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <setTorque+0x13e>
 80025b6:	4b4d      	ldr	r3, [pc, #308]	@ (80026ec <setTorque+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <setTorque+0x144>
	{
		torque_total = 0;
 80025be:	4b46      	ldr	r3, [pc, #280]	@ (80026d8 <setTorque+0x258>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 80025c4:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <setTorque+0x274>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80026f8 <setTorque+0x278>
 80025ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d6:	d53a      	bpl.n	800264e <setTorque+0x1ce>
	{
		if (v_celda_min > 2800)
 80025d8:	4b46      	ldr	r3, [pc, #280]	@ (80026f4 <setTorque+0x274>)
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80026fc <setTorque+0x27c>
 80025e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	dd1f      	ble.n	800262c <setTorque+0x1ac>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 80025ec:	4b3a      	ldr	r3, [pc, #232]	@ (80026d8 <setTorque+0x258>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80025f8:	4b3e      	ldr	r3, [pc, #248]	@ (80026f4 <setTorque+0x274>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002602:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 80026a8 <setTorque+0x228>
 8002606:	ee27 7b05 	vmul.f64	d7, d7, d5
 800260a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 80026b0 <setTorque+0x230>
 800260e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8002612:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002616:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 80026b8 <setTorque+0x238>
 800261a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800261e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002622:	ee17 2a90 	vmov	r2, s15
 8002626:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <setTorque+0x280>)
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e015      	b.n	8002658 <setTorque+0x1d8>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 800262c:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <setTorque+0x258>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002638:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 80026c0 <setTorque+0x240>
 800263c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002640:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002644:	ee17 2a90 	vmov	r2, s15
 8002648:	4b2d      	ldr	r3, [pc, #180]	@ (8002700 <setTorque+0x280>)
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e004      	b.n	8002658 <setTorque+0x1d8>
		}
	}
	else
	{
		torque_limitado = torque_total;
 800264e:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <setTorque+0x258>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4b2a      	ldr	r3, [pc, #168]	@ (8002700 <setTorque+0x280>)
 8002656:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8002658:	4b1f      	ldr	r3, [pc, #124]	@ (80026d8 <setTorque+0x258>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	2b09      	cmp	r3, #9
 800265e:	d912      	bls.n	8002686 <setTorque+0x206>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8002660:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <setTorque+0x258>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	4a25      	ldr	r2, [pc, #148]	@ (8002704 <setTorque+0x284>)
 8002670:	fb82 1203 	smull	r1, r2, r2, r3
 8002674:	441a      	add	r2, r3
 8002676:	1192      	asrs	r2, r2, #6
 8002678:	17db      	asrs	r3, r3, #31
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b1a      	subs	r3, #26
 8002680:	b29a      	uxth	r2, r3
 8002682:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <setTorque+0x258>)
 8002684:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8002686:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <setTorque+0x258>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	43db      	mvns	r3, r3
 800268c:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	3301      	adds	r3, #1
 8002692:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8002694:	88bb      	ldrh	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	33333334 	.word	0x33333334
 80026a4:	401a3333 	.word	0x401a3333
 80026a8:	a1cac083 	.word	0xa1cac083
 80026ac:	3ff5b645 	.word	0x3ff5b645
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40ad4c00 	.word	0x40ad4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	408f4000 	.word	0x408f4000
 80026c0:	9999999a 	.word	0x9999999a
 80026c4:	3fa99999 	.word	0x3fa99999
 80026c8:	2400092e 	.word	0x2400092e
 80026cc:	24000932 	.word	0x24000932
 80026d0:	24000930 	.word	0x24000930
 80026d4:	24000934 	.word	0x24000934
 80026d8:	2400093c 	.word	0x2400093c
 80026dc:	24000938 	.word	0x24000938
 80026e0:	08019308 	.word	0x08019308
 80026e4:	2400094c 	.word	0x2400094c
 80026e8:	08019310 	.word	0x08019310
 80026ec:	24000950 	.word	0x24000950
 80026f0:	24000948 	.word	0x24000948
 80026f4:	24000010 	.word	0x24000010
 80026f8:	455ac000 	.word	0x455ac000
 80026fc:	452f0000 	.word	0x452f0000
 8002700:	24000940 	.word	0x24000940
 8002704:	b60b60b7 	.word	0xb60b60b7

08002708 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

	if (htim == &htim16)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4aa0      	ldr	r2, [pc, #640]	@ (8002994 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	f040 81ed 	bne.w	8002af4 <HAL_TIM_PeriodElapsedCallback+0x3ec>
	{
		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800271a:	4b9f      	ldr	r3, [pc, #636]	@ (8002998 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a9f      	ldr	r2, [pc, #636]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002720:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8002722:	4b9e      	ldr	r3, [pc, #632]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002724:	2202      	movs	r2, #2
 8002726:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8002728:	4b9c      	ldr	r3, [pc, #624]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800272a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800272e:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8002730:	4b9a      	ldr	r3, [pc, #616]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002732:	2200      	movs	r2, #0
 8002734:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8002736:	4b99      	ldr	r3, [pc, #612]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 800273c:	4b98      	ldr	r3, [pc, #608]	@ (80029a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b98      	ldr	r3, [pc, #608]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002744:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8002746:	4b96      	ldr	r3, [pc, #600]	@ (80029a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	121b      	asrs	r3, r3, #8
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4b95      	ldr	r3, [pc, #596]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002750:	705a      	strb	r2, [r3, #1]
		//printValue(inv_dc_bus_voltage);
		/* --- Telemetry tick: 10ms base --- */
		    tel_irq_cnt++;                // <--- ADD
 8002752:	4b95      	ldr	r3, [pc, #596]	@ (80029a8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	4a93      	ldr	r2, [pc, #588]	@ (80029a8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800275a:	6013      	str	r3, [r2, #0]
		    tel_tick += 10;
 800275c:	4b93      	ldr	r3, [pc, #588]	@ (80029ac <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	330a      	adds	r3, #10
 8002762:	4a92      	ldr	r2, [pc, #584]	@ (80029ac <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002764:	6013      	str	r3, [r2, #0]

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8002766:	4a8f      	ldr	r2, [pc, #572]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002768:	498c      	ldr	r1, [pc, #560]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800276a:	4891      	ldr	r0, [pc, #580]	@ (80029b0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800276c:	f007 f899 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>

		    precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 8002770:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002774:	488f      	ldr	r0, [pc, #572]	@ (80029b4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002776:	f008 f9cf 	bl	800ab18 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	4b8e      	ldr	r3, [pc, #568]	@ (80029b8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002780:	601a      	str	r2, [r3, #0]

		    TxHeader_Acu.Identifier = 0x600;
 8002782:	4b86      	ldr	r3, [pc, #536]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002784:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8002788:	601a      	str	r2, [r3, #0]
		    TxHeader_Acu.DataLength = 2;
 800278a:	4b84      	ldr	r3, [pc, #528]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800278c:	2202      	movs	r2, #2
 800278e:	60da      	str	r2, [r3, #12]
		    TxHeader_Acu.IdType     = FDCAN_EXTENDED_ID;
 8002790:	4b82      	ldr	r3, [pc, #520]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002792:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002796:	605a      	str	r2, [r3, #4]
		    TxHeader_Acu.FDFormat   = FDCAN_CLASSIC_CAN;
 8002798:	4b80      	ldr	r3, [pc, #512]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]
		    TxHeader_Acu.TxFrameType= FDCAN_DATA_FRAME;
 800279e:	4b7f      	ldr	r3, [pc, #508]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
		    TxData_Acu[0] = precharge_button;
 80027a4:	4b84      	ldr	r3, [pc, #528]	@ (80029b8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b7e      	ldr	r3, [pc, #504]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80027ac:	701a      	strb	r2, [r3, #0]

		    /* REMOVE noisy ISR print:
		       printValue(TxData_Acu[0]);  // <-- delete this (no UART in ISR) */

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 80027ae:	4a7d      	ldr	r2, [pc, #500]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80027b0:	497a      	ldr	r1, [pc, #488]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80027b2:	487f      	ldr	r0, [pc, #508]	@ (80029b0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80027b4:	f007 f875 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80027b8:	4a7a      	ldr	r2, [pc, #488]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80027ba:	4978      	ldr	r1, [pc, #480]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80027bc:	487c      	ldr	r0, [pc, #496]	@ (80029b0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80027be:	f007 f870 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 80027c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027c6:	487b      	ldr	r0, [pc, #492]	@ (80029b4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80027c8:	f008 f9a6 	bl	800ab18 <HAL_GPIO_ReadPin>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b79      	ldr	r3, [pc, #484]	@ (80029b8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80027d2:	601a      	str	r2, [r3, #0]

		TxHeader_Acu.Identifier = 0x600;
 80027d4:	4b71      	ldr	r3, [pc, #452]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80027d6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80027da:	601a      	str	r2, [r3, #0]
		TxHeader_Acu.DataLength = 2;
 80027dc:	4b6f      	ldr	r3, [pc, #444]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80027de:	2202      	movs	r2, #2
 80027e0:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80027e2:	4b6e      	ldr	r3, [pc, #440]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80027e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027e8:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80027ea:	4b6c      	ldr	r3, [pc, #432]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80027f0:	4b6a      	ldr	r3, [pc, #424]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]


		TxData_Acu[0] = precharge_button;
 80027f6:	4b70      	ldr	r3, [pc, #448]	@ (80029b8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	4b69      	ldr	r3, [pc, #420]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80027fe:	701a      	strb	r2, [r3, #0]
		//printValue(TxData_Acu[0]);

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8002800:	4a68      	ldr	r2, [pc, #416]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002802:	4966      	ldr	r1, [pc, #408]	@ (800299c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002804:	486a      	ldr	r0, [pc, #424]	@ (80029b0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002806:	f007 f84c 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 800280a:	4b6c      	ldr	r3, [pc, #432]	@ (80029bc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b04      	cmp	r3, #4
 8002810:	d003      	beq.n	800281a <HAL_TIM_PeriodElapsedCallback+0x112>
 8002812:	4b6a      	ldr	r3, [pc, #424]	@ (80029bc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b06      	cmp	r3, #6
 8002818:	d11b      	bne.n	8002852 <HAL_TIM_PeriodElapsedCallback+0x14a>
 800281a:	4b69      	ldr	r3, [pc, #420]	@ (80029c0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d117      	bne.n	8002852 <HAL_TIM_PeriodElapsedCallback+0x14a>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002822:	4b68      	ldr	r3, [pc, #416]	@ (80029c4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a68      	ldr	r2, [pc, #416]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002828:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 800282a:	4b67      	ldr	r3, [pc, #412]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800282c:	2203      	movs	r2, #3
 800282e:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8002830:	4b65      	ldr	r3, [pc, #404]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002832:	2200      	movs	r2, #0
 8002834:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8002836:	4b65      	ldr	r3, [pc, #404]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 800283c:	4b63      	ldr	r3, [pc, #396]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800283e:	2200      	movs	r2, #0
 8002840:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8002842:	4b62      	ldr	r3, [pc, #392]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002844:	2206      	movs	r2, #6
 8002846:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002848:	4a60      	ldr	r2, [pc, #384]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800284a:	495f      	ldr	r1, [pc, #380]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800284c:	4860      	ldr	r0, [pc, #384]	@ (80029d0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800284e:	f007 f828 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		if(flag_r2d == 1){
 8002852:	4b5b      	ldr	r3, [pc, #364]	@ (80029c0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	f040 814c 	bne.w	8002af4 <HAL_TIM_PeriodElapsedCallback+0x3ec>
			switch (state)
 800285c:	4b57      	ldr	r3, [pc, #348]	@ (80029bc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b0d      	cmp	r3, #13
 8002862:	f200 8147 	bhi.w	8002af4 <HAL_TIM_PeriodElapsedCallback+0x3ec>
 8002866:	a201      	add	r2, pc, #4	@ (adr r2, 800286c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	080028a5 	.word	0x080028a5
 8002870:	08002af5 	.word	0x08002af5
 8002874:	08002af5 	.word	0x08002af5
 8002878:	080028d5 	.word	0x080028d5
 800287c:	0800290b 	.word	0x0800290b
 8002880:	08002af5 	.word	0x08002af5
 8002884:	080029e1 	.word	0x080029e1
 8002888:	08002af5 	.word	0x08002af5
 800288c:	08002af5 	.word	0x08002af5
 8002890:	08002af5 	.word	0x08002af5
 8002894:	08002a41 	.word	0x08002a41
 8002898:	08002a81 	.word	0x08002a81
 800289c:	08002af5 	.word	0x08002af5
 80028a0:	08002abd 	.word	0x08002abd
			{
			case 0:
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 80028a4:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a47      	ldr	r2, [pc, #284]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028aa:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 80028ac:	4b46      	ldr	r3, [pc, #280]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028ae:	2203      	movs	r2, #3
 80028b0:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80028b2:	4b45      	ldr	r3, [pc, #276]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 80028b8:	4b44      	ldr	r3, [pc, #272]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 80028be:	4b43      	ldr	r3, [pc, #268]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 80028c4:	4b41      	ldr	r3, [pc, #260]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80028ca:	4a40      	ldr	r2, [pc, #256]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80028cc:	493e      	ldr	r1, [pc, #248]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028ce:	4840      	ldr	r0, [pc, #256]	@ (80029d0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80028d0:	f006 ffe7 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>

			case 3:
	#if DEBUG
				//print("state: standby");
	#endif
				flag_react = 0;
 80028d4:	4b3f      	ldr	r3, [pc, #252]	@ (80029d4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 80028da:	4b3a      	ldr	r3, [pc, #232]	@ (80029c4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a3a      	ldr	r2, [pc, #232]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028e0:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 80028e2:	4b39      	ldr	r3, [pc, #228]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028e4:	2203      	movs	r2, #3
 80028e6:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80028e8:	4b37      	ldr	r3, [pc, #220]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 80028ee:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 80028f4:	4b35      	ldr	r3, [pc, #212]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 80028fa:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80028fc:	2204      	movs	r2, #4
 80028fe:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002900:	4a32      	ldr	r2, [pc, #200]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002902:	4931      	ldr	r1, [pc, #196]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002904:	4832      	ldr	r0, [pc, #200]	@ (80029d0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002906:	f006 ffcc 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
				//}

			case 4:

	#if DEBUG
				print("state: ready");
 800290a:	4833      	ldr	r0, [pc, #204]	@ (80029d8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800290c:	f7ff fc1c 	bl	8002148 <print>
	#endif
				if (flag_r2d == 1){
 8002910:	4b2b      	ldr	r3, [pc, #172]	@ (80029c0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d120      	bne.n	800295a <HAL_TIM_PeriodElapsedCallback+0x252>
					TxHeader_Inv.Identifier = 0x362;
 8002918:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800291a:	f240 3262 	movw	r2, #866	@ 0x362
 800291e:	601a      	str	r2, [r3, #0]
					TxHeader_Inv.DataLength = 4;
 8002920:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002922:	2204      	movs	r2, #4
 8002924:	60da      	str	r2, [r3, #12]

					real_torque = 0;
 8002926:	4b2d      	ldr	r3, [pc, #180]	@ (80029dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002928:	2200      	movs	r2, #0
 800292a:	801a      	strh	r2, [r3, #0]

					TxData_Inv[0] = 0x0;
 800292c:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8002932:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002934:	2200      	movs	r2, #0
 8002936:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = real_torque;
 8002938:	4b28      	ldr	r3, [pc, #160]	@ (80029dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b23      	ldr	r3, [pc, #140]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002940:	709a      	strb	r2, [r3, #2]
					TxData_Inv[3] = 0x0;
 8002942:	4b22      	ldr	r3, [pc, #136]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002944:	2200      	movs	r2, #0
 8002946:	70da      	strb	r2, [r3, #3]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002948:	4a20      	ldr	r2, [pc, #128]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800294a:	491f      	ldr	r1, [pc, #124]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800294c:	4820      	ldr	r0, [pc, #128]	@ (80029d0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800294e:	f006 ffa8 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
					flag_react = 0; // Reactivado
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
					TxData_Inv[2] = 0x4;
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
				}

				break;
 8002958:	e0cc      	b.n	8002af4 <HAL_TIM_PeriodElapsedCallback+0x3ec>
					flag_react = 0;
 800295a:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002960:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002966:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8002968:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800296a:	2203      	movs	r2, #3
 800296c:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800296e:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
					TxData_Inv[0] = 0x0;
 8002974:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 800297a:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800297c:	2200      	movs	r2, #0
 800297e:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x4;
 8002980:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002982:	2204      	movs	r2, #4
 8002984:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002986:	4a11      	ldr	r2, [pc, #68]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002988:	490f      	ldr	r1, [pc, #60]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800298a:	4811      	ldr	r0, [pc, #68]	@ (80029d0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800298c:	f006 ff89 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
				break;
 8002990:	e0b0      	b.n	8002af4 <HAL_TIM_PeriodElapsedCallback+0x3ec>
 8002992:	bf00      	nop
 8002994:	2400069c 	.word	0x2400069c
 8002998:	24000004 	.word	0x24000004
 800299c:	2400086c 	.word	0x2400086c
 80029a0:	2400090c 	.word	0x2400090c
 80029a4:	240008f0 	.word	0x240008f0
 80029a8:	24000814 	.word	0x24000814
 80029ac:	24000810 	.word	0x24000810
 80029b0:	2400040c 	.word	0x2400040c
 80029b4:	58021400 	.word	0x58021400
 80029b8:	24000954 	.word	0x24000954
 80029bc:	24000946 	.word	0x24000946
 80029c0:	24000ab8 	.word	0x24000ab8
 80029c4:	24000000 	.word	0x24000000
 80029c8:	24000820 	.word	0x24000820
 80029cc:	240008e0 	.word	0x240008e0
 80029d0:	2400036c 	.word	0x2400036c
 80029d4:	24000ab7 	.word	0x24000ab7
 80029d8:	080191b8 	.word	0x080191b8
 80029dc:	24000944 	.word	0x24000944
			case 6:
				print("state: torque");
 80029e0:	4846      	ldr	r0, [pc, #280]	@ (8002afc <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80029e2:	f7ff fbb1 	bl	8002148 <print>

				// Request TORQUE inversor

				// flag_react = 1;

				real_torque = setTorque();
 80029e6:	f7ff fd4b 	bl	8002480 <setTorque>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b44      	ldr	r3, [pc, #272]	@ (8002b00 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80029f0:	801a      	strh	r2, [r3, #0]

				TxHeader_Inv.Identifier = 0x362;
 80029f2:	4b44      	ldr	r3, [pc, #272]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80029f4:	f240 3262 	movw	r2, #866	@ 0x362
 80029f8:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 80029fa:	4b42      	ldr	r3, [pc, #264]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80029fc:	2204      	movs	r2, #4
 80029fe:	60da      	str	r2, [r3, #12]

				// real_torque = 0;
				byte_torque_1 = real_torque & 0xFF;
 8002a00:	4b3f      	ldr	r3, [pc, #252]	@ (8002b00 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4b40      	ldr	r3, [pc, #256]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002a08:	701a      	strb	r2, [r3, #0]
				byte_torque_2 = (real_torque >> 8) & 0xFF;
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b00 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b3d      	ldr	r3, [pc, #244]	@ (8002b0c <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002a16:	701a      	strb	r2, [r3, #0]
				TxData_Inv[0] = 0x00;
 8002a18:	4b3d      	ldr	r3, [pc, #244]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x00;
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	705a      	strb	r2, [r3, #1]
					if(frena > 500){
						acelera = 1;
						frena = 0;
					}
				}*/
				TxData_Inv[2] = byte_torque_1;
 8002a24:	4b38      	ldr	r3, [pc, #224]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002a2a:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = byte_torque_2;
 8002a2c:	4b37      	ldr	r3, [pc, #220]	@ (8002b0c <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	4b37      	ldr	r3, [pc, #220]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002a32:	70da      	strb	r2, [r3, #3]
				// TxData_Inv[2] = 0xFE;
				// TxData_Inv[3] = 0xFF;
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002a34:	4a36      	ldr	r2, [pc, #216]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002a36:	4933      	ldr	r1, [pc, #204]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002a38:	4836      	ldr	r0, [pc, #216]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002a3a:	f006 ff32 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
				//CAN_bus_off_check_reset(&hfdcan1);

				break;
 8002a3e:	e059      	b.n	8002af4 <HAL_TIM_PeriodElapsedCallback+0x3ec>

			case 10:
				print("state: soft fault");
 8002a40:	4835      	ldr	r0, [pc, #212]	@ (8002b18 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002a42:	f7ff fb81 	bl	8002148 <print>
				printValue(error);
 8002a46:	4b35      	ldr	r3, [pc, #212]	@ (8002b1c <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fb9a 	bl	8002184 <printValue>

				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002a50:	4b33      	ldr	r3, [pc, #204]	@ (8002b20 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2b      	ldr	r2, [pc, #172]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002a56:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002a58:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8002a5e:	4b29      	ldr	r3, [pc, #164]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002a64:	4b2a      	ldr	r3, [pc, #168]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8002a6a:	4b29      	ldr	r3, [pc, #164]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x13;
 8002a70:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002a72:	2213      	movs	r2, #19
 8002a74:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002a76:	4a26      	ldr	r2, [pc, #152]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002a78:	4922      	ldr	r1, [pc, #136]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002a7a:	4826      	ldr	r0, [pc, #152]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002a7c:	f006 ff11 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>
						HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
													  TxData_Inv);
					}*/

			case 11:
				print("state: hard fault");
 8002a80:	4828      	ldr	r0, [pc, #160]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002a82:	f7ff fb61 	bl	8002148 <print>
				flag_react = 1;
 8002a86:	4b28      	ldr	r3, [pc, #160]	@ (8002b28 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002a8c:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002a92:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002a96:	2203      	movs	r2, #3
 8002a98:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 13;
 8002aac:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002aae:	220d      	movs	r2, #13
 8002ab0:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002ab2:	4a17      	ldr	r2, [pc, #92]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002ab4:	4913      	ldr	r1, [pc, #76]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002ab6:	4817      	ldr	r0, [pc, #92]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002ab8:	f006 fef3 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>

			case 13:
				print("state: shutdown");
 8002abc:	481b      	ldr	r0, [pc, #108]	@ (8002b2c <HAL_TIM_PeriodElapsedCallback+0x424>)
 8002abe:	f7ff fb43 	bl	8002148 <print>
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002ac8:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002acc:	2203      	movs	r2, #3
 8002ace:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002ae8:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002aea:	4906      	ldr	r1, [pc, #24]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002aec:	4809      	ldr	r0, [pc, #36]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002aee:	f006 fed8 	bl	80098a2 <HAL_FDCAN_AddMessageToTxFifoQ>


				break;
 8002af2:	bf00      	nop
			}
		}
#endif
	}
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	08019318 	.word	0x08019318
 8002b00:	24000944 	.word	0x24000944
 8002b04:	24000820 	.word	0x24000820
 8002b08:	2400093e 	.word	0x2400093e
 8002b0c:	2400093f 	.word	0x2400093f
 8002b10:	240008e0 	.word	0x240008e0
 8002b14:	2400036c 	.word	0x2400036c
 8002b18:	08019328 	.word	0x08019328
 8002b1c:	24000ab6 	.word	0x24000ab6
 8002b20:	24000000 	.word	0x24000000
 8002b24:	0801933c 	.word	0x0801933c
 8002b28:	24000ab7 	.word	0x24000ab7
 8002b2c:	08019350 	.word	0x08019350

08002b30 <tel_build_packet>:

// Packs 8 floats (32 bytes). f[0] is the "frame ID".
static void tel_build_packet(TelFrame *p)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    static uint16_t seq   = 0;
    static uint8_t  which = 0;  // 0:0x600, 1:0x610, 2:0x620, 3:0x630

    p->seq = seq++;
 8002b38:	4b8a      	ldr	r3, [pc, #552]	@ (8002d64 <tel_build_packet+0x234>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	b291      	uxth	r1, r2
 8002b40:	4a88      	ldr	r2, [pc, #544]	@ (8002d64 <tel_build_packet+0x234>)
 8002b42:	8011      	strh	r1, [r2, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	8053      	strh	r3, [r2, #2]
        p->v5 = 0.0f; p->v6 = 0.0f; p->v7 = 0.0f;
        break;
    }
#else
    // ---------- REAL DATA ----------
    switch (which) {
 8002b48:	4b87      	ldr	r3, [pc, #540]	@ (8002d68 <tel_build_packet+0x238>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	f000 80ca 	beq.w	8002ce6 <tel_build_packet+0x1b6>
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	dc03      	bgt.n	8002b5e <tel_build_packet+0x2e>
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d03d      	beq.n	8002bd6 <tel_build_packet+0xa6>
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d07f      	beq.n	8002c5e <tel_build_packet+0x12e>
    default:
    case 0: // 0x600 Powertrain basic
        p->id = 0x600;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f042 0206 	orr.w	r2, r2, #6
 8002b6a:	705a      	strb	r2, [r3, #1]
        p->v1 = (float)inv_dc_bus_voltage;
 8002b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d6c <tel_build_packet+0x23c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	ee17 2a90 	vmov	r2, s15
 8002b7e:	605a      	str	r2, [r3, #4]
        p->v2 = (float)e_machine_rpm;
 8002b80:	4b7b      	ldr	r3, [pc, #492]	@ (8002d70 <tel_build_packet+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	ee17 2a90 	vmov	r2, s15
 8002b92:	609a      	str	r2, [r3, #8]
        p->v3 = (float)torque_total;
 8002b94:	4b77      	ldr	r3, [pc, #476]	@ (8002d74 <tel_build_packet+0x244>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	ee17 2a90 	vmov	r2, s15
 8002ba6:	60da      	str	r2, [r3, #12]
        p->v4 = (float)v_celda_min;
 8002ba8:	4b73      	ldr	r3, [pc, #460]	@ (8002d78 <tel_build_packet+0x248>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	611a      	str	r2, [r3, #16]
        p->v5 = (float)state;
 8002bb0:	4b72      	ldr	r3, [pc, #456]	@ (8002d7c <tel_build_packet+0x24c>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	ee17 2a90 	vmov	r2, s15
 8002bc2:	615a      	str	r2, [r3, #20]
        p->v6 = 0.0f;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
        p->v7 = 0.0f;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	61da      	str	r2, [r3, #28]
        break;
 8002bd4:	e0b3      	b.n	8002d3e <tel_build_packet+0x20e>

    case 1: // 0x610 Inverter temps & currents
        p->id = 0x610;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f042 0210 	orr.w	r2, r2, #16
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f042 0206 	orr.w	r2, r2, #6
 8002be6:	705a      	strb	r2, [r3, #1]
        p->v1 = (float)inv_t_motor;
 8002be8:	4b65      	ldr	r3, [pc, #404]	@ (8002d80 <tel_build_packet+0x250>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	ee17 2a90 	vmov	r2, s15
 8002bfa:	605a      	str	r2, [r3, #4]
        p->v2 = (float)inv_t_igbt;
 8002bfc:	4b61      	ldr	r3, [pc, #388]	@ (8002d84 <tel_build_packet+0x254>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	ee17 2a90 	vmov	r2, s15
 8002c0e:	609a      	str	r2, [r3, #8]
        p->v3 = (float)inv_t_air;
 8002c10:	4b5d      	ldr	r3, [pc, #372]	@ (8002d88 <tel_build_packet+0x258>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	ee17 2a90 	vmov	r2, s15
 8002c22:	60da      	str	r2, [r3, #12]
        p->v4 = (float)inv_n_actual;
 8002c24:	4b59      	ldr	r3, [pc, #356]	@ (8002d8c <tel_build_packet+0x25c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	ee17 2a90 	vmov	r2, s15
 8002c36:	611a      	str	r2, [r3, #16]
        p->v5 = (float)inv_i_actual;
 8002c38:	4b55      	ldr	r3, [pc, #340]	@ (8002d90 <tel_build_packet+0x260>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	ee17 2a90 	vmov	r2, s15
 8002c4a:	615a      	str	r2, [r3, #20]
        p->v6 = 0.0f;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
        p->v7 = 0.0f;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	61da      	str	r2, [r3, #28]
        break;
 8002c5c:	e06f      	b.n	8002d3e <tel_build_packet+0x20e>

    case 2: // 0x620 Driver inputs
        p->id = 0x620;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f042 0220 	orr.w	r2, r2, #32
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f042 0206 	orr.w	r2, r2, #6
 8002c6e:	705a      	strb	r2, [r3, #1]
        p->v1 = (float)s1_aceleracion;
 8002c70:	4b48      	ldr	r3, [pc, #288]	@ (8002d94 <tel_build_packet+0x264>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	ee17 2a90 	vmov	r2, s15
 8002c82:	605a      	str	r2, [r3, #4]
        p->v2 = (float)s2_aceleracion;
 8002c84:	4b44      	ldr	r3, [pc, #272]	@ (8002d98 <tel_build_packet+0x268>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	ee17 2a90 	vmov	r2, s15
 8002c96:	609a      	str	r2, [r3, #8]
        p->v3 = (float)s_freno;
 8002c98:	4b40      	ldr	r3, [pc, #256]	@ (8002d9c <tel_build_packet+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	ee17 2a90 	vmov	r2, s15
 8002caa:	60da      	str	r2, [r3, #12]
        p->v4 = (float)precharge_button;
 8002cac:	4b3c      	ldr	r3, [pc, #240]	@ (8002da0 <tel_build_packet+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	ee17 2a90 	vmov	r2, s15
 8002cbe:	611a      	str	r2, [r3, #16]
        p->v5 = (float)start_button_act;
 8002cc0:	4b38      	ldr	r3, [pc, #224]	@ (8002da4 <tel_build_packet+0x274>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	ee17 2a90 	vmov	r2, s15
 8002cd2:	615a      	str	r2, [r3, #20]
        #ifdef DINPUT1_GPIO_Port
            p->v6 = (float)HAL_GPIO_ReadPin(DINPUT1_GPIO_Port, DINPUT1_Pin);
        #else
            p->v6 = 0.0f;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
        #endif
        #ifdef DINPUT2_GPIO_Port
            p->v7 = (float)HAL_GPIO_ReadPin(DINPUT2_GPIO_Port, DINPUT2_Pin);
        #else
            p->v7 = 0.0f;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	61da      	str	r2, [r3, #28]
        #endif
        break;
 8002ce4:	e02b      	b.n	8002d3e <tel_build_packet+0x20e>

    case 3: // 0x630 Accumulator/HV summary
        p->id = 0x630;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f042 0206 	orr.w	r2, r2, #6
 8002cf6:	705a      	strb	r2, [r3, #1]
        p->v1 = (float)inv_dc_bus_voltage;
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d6c <tel_build_packet+0x23c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	ee17 2a90 	vmov	r2, s15
 8002d0a:	605a      	str	r2, [r3, #4]
        p->v2 = 0.0f; p->v3 = 0.0f; p->v4 = 0.0f;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	60da      	str	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
        p->v5 = 0.0f; p->v6 = 0.0f; p->v7 = 0.0f;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	61da      	str	r2, [r3, #28]
        break;
 8002d3c:	bf00      	nop
    }
#endif

    if (++which > 3) which = 0;
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d68 <tel_build_packet+0x238>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <tel_build_packet+0x238>)
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	4b07      	ldr	r3, [pc, #28]	@ (8002d68 <tel_build_packet+0x238>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d902      	bls.n	8002d58 <tel_build_packet+0x228>
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <tel_build_packet+0x238>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	24000ac8 	.word	0x24000ac8
 8002d68:	24000aca 	.word	0x24000aca
 8002d6c:	2400090c 	.word	0x2400090c
 8002d70:	24000910 	.word	0x24000910
 8002d74:	2400093c 	.word	0x2400093c
 8002d78:	24000010 	.word	0x24000010
 8002d7c:	24000946 	.word	0x24000946
 8002d80:	24000914 	.word	0x24000914
 8002d84:	24000918 	.word	0x24000918
 8002d88:	2400091c 	.word	0x2400091c
 8002d8c:	24000920 	.word	0x24000920
 8002d90:	24000924 	.word	0x24000924
 8002d94:	2400092e 	.word	0x2400092e
 8002d98:	24000930 	.word	0x24000930
 8002d9c:	24000938 	.word	0x24000938
 8002da0:	24000954 	.word	0x24000954
 8002da4:	24000908 	.word	0x24000908

08002da8 <tel_send_now>:



static void tel_send_now(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b0d4      	sub	sp, #336	@ 0x150
 8002dac:	af10      	add	r7, sp, #64	@ 0x40
    TelFrame pkt;
    tel_build_packet(&pkt);
 8002dae:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff febc 	bl	8002b30 <tel_build_packet>

#if DEBUG
    char msg[220];
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
        "\r\n[TX] ID: 0x%X seq:%u, V1:%.2f, V2:%.2f, V3:%.2f, V4:%.2f, V5:%.2f, V6:%.2f, V7:%.2f\r\n",
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002db8:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002dbc:	461a      	mov	r2, r3
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002dbe:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8002dc2:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002dca:	edd7 6a3a 	vldr	s13, [r7, #232]	@ 0xe8
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002dce:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002dd2:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002dd6:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002dda:	edd7 4a3c 	vldr	s9, [r7, #240]	@ 0xf0
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002dde:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002de2:	edd7 3a3d 	vldr	s7, [r7, #244]	@ 0xf4
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002de6:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002dea:	edd7 2a3e 	vldr	s5, [r7, #248]	@ 0xf8
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002dee:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002df2:	edd7 1a3f 	vldr	s3, [r7, #252]	@ 0xfc
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002df6:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8002dfa:	1d38      	adds	r0, r7, #4
 8002dfc:	ed8d 1b0e 	vstr	d1, [sp, #56]	@ 0x38
 8002e00:	ed8d 2b0c 	vstr	d2, [sp, #48]	@ 0x30
 8002e04:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 8002e08:	ed8d 4b08 	vstr	d4, [sp, #32]
 8002e0c:	ed8d 5b06 	vstr	d5, [sp, #24]
 8002e10:	ed8d 6b04 	vstr	d6, [sp, #16]
 8002e14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	4a35      	ldr	r2, [pc, #212]	@ (8002ef4 <tel_send_now+0x14c>)
 8002e1e:	21dc      	movs	r1, #220	@ 0xdc
 8002e20:	f012 fcb0 	bl	8015784 <sniprintf>
 8002e24:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    if (n > 0) HAL_UART_Transmit(&huart2, (uint8_t*)msg, (uint16_t)n, HAL_MAX_DELAY);
 8002e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	dd08      	ble.n	8002e42 <tel_send_now+0x9a>
 8002e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	1d39      	adds	r1, r7, #4
 8002e38:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3c:	482e      	ldr	r0, [pc, #184]	@ (8002ef8 <tel_send_now+0x150>)
 8002e3e:	f00f fa63 	bl	8012308 <HAL_UART_Transmit>
#endif

    // Raw 32-byte TX (nRF24 payload)
    uint8_t ok = nrf24_tx32(&pkt);
 8002e42:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fa28 	bl	800329c <nrf24_tx32>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

#if DEBUG
    uint8_t st = nrf24_ReadReg(STATUS);
 8002e52:	2007      	movs	r0, #7
 8002e54:	f000 fb16 	bl	8003484 <nrf24_ReadReg>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    uint8_t ob = nrf24_ReadReg(OBSERVE_TX);
 8002e5e:	2008      	movs	r0, #8
 8002e60:	f000 fb10 	bl	8003484 <nrf24_ReadReg>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    const char *tag = ok ? "[TX] OK " : "[TX] FAIL ";
 8002e6a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <tel_send_now+0xce>
 8002e72:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <tel_send_now+0x154>)
 8002e74:	e000      	b.n	8002e78 <tel_send_now+0xd0>
 8002e76:	4b22      	ldr	r3, [pc, #136]	@ (8002f00 <tel_send_now+0x158>)
 8002e78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_UART_Transmit(&huart2, (uint8_t*)tag, (uint16_t)strlen(tag), HAL_MAX_DELAY);
 8002e7c:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8002e80:	f7fd fa96 	bl	80003b0 <strlen>
 8002e84:	4603      	mov	r3, r0
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8002e90:	4819      	ldr	r0, [pc, #100]	@ (8002ef8 <tel_send_now+0x150>)
 8002e92:	f00f fa39 	bl	8012308 <HAL_UART_Transmit>
    int n2 = snprintf(msg, sizeof(msg), "STATUS=%02X OBSERVE_TX=%02X\r\n", st, ob);
 8002e96:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 8002e9a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8002e9e:	1d38      	adds	r0, r7, #4
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	4a17      	ldr	r2, [pc, #92]	@ (8002f04 <tel_send_now+0x15c>)
 8002ea6:	21dc      	movs	r1, #220	@ 0xdc
 8002ea8:	f012 fc6c 	bl	8015784 <sniprintf>
 8002eac:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
    if (n2 > 0) HAL_UART_Transmit(&huart2, (uint8_t*)msg, (uint16_t)n2, HAL_MAX_DELAY);
 8002eb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	dd08      	ble.n	8002eca <tel_send_now+0x122>
 8002eb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	1d39      	adds	r1, r7, #4
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec4:	480c      	ldr	r0, [pc, #48]	@ (8002ef8 <tel_send_now+0x150>)
 8002ec6:	f00f fa1f 	bl	8012308 <HAL_UART_Transmit>
#endif

    if (ok) tel_sent_ok++; else tel_sent_fail++;
 8002eca:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <tel_send_now+0x136>
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <tel_send_now+0x160>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8002f08 <tel_send_now+0x160>)
 8002eda:	6013      	str	r3, [r2, #0]
}
 8002edc:	e004      	b.n	8002ee8 <tel_send_now+0x140>
    if (ok) tel_sent_ok++; else tel_sent_fail++;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <tel_send_now+0x164>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	4a09      	ldr	r2, [pc, #36]	@ (8002f0c <tel_send_now+0x164>)
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	08019360 	.word	0x08019360
 8002ef8:	2400077c 	.word	0x2400077c
 8002efc:	080193b8 	.word	0x080193b8
 8002f00:	080193c4 	.word	0x080193c4
 8002f04:	080193d0 	.word	0x080193d0
 8002f08:	24000818 	.word	0x24000818
 8002f0c:	2400081c 	.word	0x2400081c

08002f10 <gpio_dump_once>:


//----- Debugging Telemetry con LVB
static void gpio_dump_once(void) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b09e      	sub	sp, #120	@ 0x78
 8002f14:	af02      	add	r7, sp, #8
    // Read CE/CSN/IRQ pins to detect wiring/power issues
    int ce  = HAL_GPIO_ReadPin(NRF24_CE_PORT,  NRF24_CE_PIN);
 8002f16:	2140      	movs	r1, #64	@ 0x40
 8002f18:	4813      	ldr	r0, [pc, #76]	@ (8002f68 <gpio_dump_once+0x58>)
 8002f1a:	f007 fdfd 	bl	800ab18 <HAL_GPIO_ReadPin>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int csn = HAL_GPIO_ReadPin(NRF24_CSN_PORT, NRF24_CSN_PIN);
 8002f22:	2108      	movs	r1, #8
 8002f24:	4811      	ldr	r0, [pc, #68]	@ (8002f6c <gpio_dump_once+0x5c>)
 8002f26:	f007 fdf7 	bl	800ab18 <HAL_GPIO_ReadPin>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
#ifdef NRF24_IRQ_PORT
    int irq = HAL_GPIO_ReadPin(NRF24_IRQ_PORT, NRF24_IRQ_PIN);
#else
    int irq = -1; // not wired
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f32:	667b      	str	r3, [r7, #100]	@ 0x64
#endif
    char b[96];
    snprintf(b,sizeof(b),"[GPIO] CE=%d CSN=%d IRQ=%d\r\n", ce, csn, irq);
 8002f34:	1d38      	adds	r0, r7, #4
 8002f36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f40:	4a0b      	ldr	r2, [pc, #44]	@ (8002f70 <gpio_dump_once+0x60>)
 8002f42:	2160      	movs	r1, #96	@ 0x60
 8002f44:	f012 fc1e 	bl	8015784 <sniprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)b,strlen(b),HAL_MAX_DELAY);
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fa30 	bl	80003b0 <strlen>
 8002f50:	4603      	mov	r3, r0
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	1d39      	adds	r1, r7, #4
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	4806      	ldr	r0, [pc, #24]	@ (8002f74 <gpio_dump_once+0x64>)
 8002f5c:	f00f f9d4 	bl	8012308 <HAL_UART_Transmit>
}
 8002f60:	bf00      	nop
 8002f62:	3770      	adds	r7, #112	@ 0x70
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	58020800 	.word	0x58020800
 8002f6c:	58021800 	.word	0x58021800
 8002f70:	080193f0 	.word	0x080193f0
 8002f74:	2400077c 	.word	0x2400077c

08002f78 <nrf24_diag_once>:

static void nrf24_diag_once(void) {
 8002f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7a:	b0a9      	sub	sp, #164	@ 0xa4
 8002f7c:	af06      	add	r7, sp, #24
    uint8_t status = nrf24_ReadReg(STATUS);
 8002f7e:	2007      	movs	r0, #7
 8002f80:	f000 fa80 	bl	8003484 <nrf24_ReadReg>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t cfg    = nrf24_ReadReg(CONFIG);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f000 fa7a 	bl	8003484 <nrf24_ReadReg>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
    uint8_t rf     = nrf24_ReadReg(RF_SETUP);
 8002f96:	2006      	movs	r0, #6
 8002f98:	f000 fa74 	bl	8003484 <nrf24_ReadReg>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
    uint8_t ch     = nrf24_ReadReg(RF_CH);
 8002fa2:	2005      	movs	r0, #5
 8002fa4:	f000 fa6e 	bl	8003484 <nrf24_ReadReg>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
    uint8_t fifo   = nrf24_ReadReg(FIFO_STATUS);
 8002fae:	2017      	movs	r0, #23
 8002fb0:	f000 fa68 	bl	8003484 <nrf24_ReadReg>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
    uint8_t obs    = nrf24_ReadReg(OBSERVE_TX);
 8002fba:	2008      	movs	r0, #8
 8002fbc:	f000 fa62 	bl	8003484 <nrf24_ReadReg>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    char b[128];
    snprintf(b,sizeof(b),
 8002fc6:	f897 6087 	ldrb.w	r6, [r7, #135]	@ 0x87
 8002fca:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002fce:	f897 2085 	ldrb.w	r2, [r7, #133]	@ 0x85
 8002fd2:	f897 1084 	ldrb.w	r1, [r7, #132]	@ 0x84
 8002fd6:	f897 0083 	ldrb.w	r0, [r7, #131]	@ 0x83
 8002fda:	f897 4082 	ldrb.w	r4, [r7, #130]	@ 0x82
 8002fde:	463d      	mov	r5, r7
 8002fe0:	9404      	str	r4, [sp, #16]
 8002fe2:	9003      	str	r0, [sp, #12]
 8002fe4:	9102      	str	r1, [sp, #8]
 8002fe6:	9201      	str	r2, [sp, #4]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	4633      	mov	r3, r6
 8002fec:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <nrf24_diag_once+0xa0>)
 8002fee:	2180      	movs	r1, #128	@ 0x80
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	f012 fbc7 	bl	8015784 <sniprintf>
        "[NRF] ST=%02X CFG=%02X RF=%02X CH=%u FIFO=%02X OBS=%02X\r\n",
        status,cfg,rf,ch,fifo,obs);
    HAL_UART_Transmit(&huart2,(uint8_t*)b,strlen(b),HAL_MAX_DELAY);
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd f9d9 	bl	80003b0 <strlen>
 8002ffe:	4603      	mov	r3, r0
 8003000:	b29a      	uxth	r2, r3
 8003002:	4639      	mov	r1, r7
 8003004:	f04f 33ff 	mov.w	r3, #4294967295
 8003008:	4804      	ldr	r0, [pc, #16]	@ (800301c <nrf24_diag_once+0xa4>)
 800300a:	f00f f97d 	bl	8012308 <HAL_UART_Transmit>
}
 800300e:	bf00      	nop
 8003010:	378c      	adds	r7, #140	@ 0x8c
 8003012:	46bd      	mov	sp, r7
 8003014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003016:	bf00      	nop
 8003018:	08019410 	.word	0x08019410
 800301c:	2400077c 	.word	0x2400077c

08003020 <nrf24_write_readback>:

static uint8_t nrf24_write_readback(uint8_t reg, uint8_t val) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b096      	sub	sp, #88	@ 0x58
 8003024:	af02      	add	r7, sp, #8
 8003026:	4603      	mov	r3, r0
 8003028:	460a      	mov	r2, r1
 800302a:	71fb      	strb	r3, [r7, #7]
 800302c:	4613      	mov	r3, r2
 800302e:	71bb      	strb	r3, [r7, #6]
    nrf24_WriteReg(reg, val);
 8003030:	79ba      	ldrb	r2, [r7, #6]
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f9d4 	bl	80033e4 <nrf24_WriteReg>
    uint8_t rd = nrf24_ReadReg(reg);
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fa20 	bl	8003484 <nrf24_ReadReg>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    char b[64];
    snprintf(b,sizeof(b),"[NRF] WR/RD reg %02X -> %02X/%02X\r\n", reg, val, rd);
 800304a:	79f9      	ldrb	r1, [r7, #7]
 800304c:	79bb      	ldrb	r3, [r7, #6]
 800304e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003052:	f107 000c 	add.w	r0, r7, #12
 8003056:	9201      	str	r2, [sp, #4]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	460b      	mov	r3, r1
 800305c:	4a0b      	ldr	r2, [pc, #44]	@ (800308c <nrf24_write_readback+0x6c>)
 800305e:	2140      	movs	r1, #64	@ 0x40
 8003060:	f012 fb90 	bl	8015784 <sniprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)b,strlen(b),HAL_MAX_DELAY);
 8003064:	f107 030c 	add.w	r3, r7, #12
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd f9a1 	bl	80003b0 <strlen>
 800306e:	4603      	mov	r3, r0
 8003070:	b29a      	uxth	r2, r3
 8003072:	f107 010c 	add.w	r1, r7, #12
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	4805      	ldr	r0, [pc, #20]	@ (8003090 <nrf24_write_readback+0x70>)
 800307c:	f00f f944 	bl	8012308 <HAL_UART_Transmit>
    return rd;
 8003080:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8003084:	4618      	mov	r0, r3
 8003086:	3750      	adds	r7, #80	@ 0x50
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	0801944c 	.word	0x0801944c
 8003090:	2400077c 	.word	0x2400077c

08003094 <print_early>:
    snprintf(b,sizeof(b),"[NRF] TX test: %s  STATUS=%02X FIFO=%02X\r\n",
             ok ? "OK" : "FAIL", st, fi);
    HAL_UART_Transmit(&huart2,(uint8_t*)b,strlen(b),HAL_MAX_DELAY);
}

static void print_early(const char *s) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
    // Safe, blocking TX on USART2 if already init'd; otherwise no-op
    if (huart2.Instance) {
 800309c:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <print_early+0x2c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <print_early+0x24>
        HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 100);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fd f983 	bl	80003b0 <strlen>
 80030aa:	4603      	mov	r3, r0
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	2364      	movs	r3, #100	@ 0x64
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4803      	ldr	r0, [pc, #12]	@ (80030c0 <print_early+0x2c>)
 80030b4:	f00f f928 	bl	8012308 <HAL_UART_Transmit>
    }
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2400077c 	.word	0x2400077c

080030c4 <dump_reset_cause>:

static void dump_reset_cause(void) {
 80030c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c6:	b0a1      	sub	sp, #132	@ 0x84
 80030c8:	af06      	add	r7, sp, #24
    uint32_t csr = __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)   ? 1u<<0 : 0;
 80030ca:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <dump_reset_cause+0x130>)
 80030cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80030d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <dump_reset_cause+0x18>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <dump_reset_cause+0x1a>
 80030dc:	2300      	movs	r3, #0
 80030de:	667b      	str	r3, [r7, #100]	@ 0x64
    csr |= __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)  ? 1u<<1 : 0;
 80030e0:	4b44      	ldr	r3, [pc, #272]	@ (80031f4 <dump_reset_cause+0x130>)
 80030e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80030e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <dump_reset_cause+0x2e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e000      	b.n	80030f4 <dump_reset_cause+0x30>
 80030f2:	2300      	movs	r3, #0
 80030f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80030f6:	4313      	orrs	r3, r2
 80030f8:	667b      	str	r3, [r7, #100]	@ 0x64
    csr |= __HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)  ? 1u<<2 : 0;
 80030fa:	4b3e      	ldr	r3, [pc, #248]	@ (80031f4 <dump_reset_cause+0x130>)
 80030fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003100:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <dump_reset_cause+0x48>
 8003108:	2304      	movs	r3, #4
 800310a:	e000      	b.n	800310e <dump_reset_cause+0x4a>
 800310c:	2300      	movs	r3, #0
 800310e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003110:	4313      	orrs	r3, r2
 8003112:	667b      	str	r3, [r7, #100]	@ 0x64
    csr |= __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)  ? 1u<<3 : 0;
 8003114:	4b37      	ldr	r3, [pc, #220]	@ (80031f4 <dump_reset_cause+0x130>)
 8003116:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800311a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <dump_reset_cause+0x62>
 8003122:	2308      	movs	r3, #8
 8003124:	e000      	b.n	8003128 <dump_reset_cause+0x64>
 8003126:	2300      	movs	r3, #0
 8003128:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800312a:	4313      	orrs	r3, r2
 800312c:	667b      	str	r3, [r7, #100]	@ 0x64

    char msg[96];
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
        !!(csr&(1u<<0)), !!(csr&(1u<<1)), !!(csr&(1u<<2)),
 800312e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003130:	f003 0301 	and.w	r3, r3, #1
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	469c      	mov	ip, r3
        !!(csr&(1u<<0)), !!(csr&(1u<<1)), !!(csr&(1u<<2)),
 8003140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003142:	f003 0302 	and.w	r3, r3, #2
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
        !!(csr&(1u<<0)), !!(csr&(1u<<1)), !!(csr&(1u<<2)),
 8003152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003154:	f003 0304 	and.w	r3, r3, #4
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	4619      	mov	r1, r3
        !!(csr&(1u<<3)), !!(csr&(1u<<4)), !!(csr&(1u<<5)), !!(csr&(1u<<6)));
 8003164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003166:	f003 0308 	and.w	r3, r3, #8
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461c      	mov	r4, r3
        !!(csr&(1u<<3)), !!(csr&(1u<<4)), !!(csr&(1u<<5)), !!(csr&(1u<<6)));
 8003176:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003178:	f003 0310 	and.w	r3, r3, #16
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461d      	mov	r5, r3
        !!(csr&(1u<<3)), !!(csr&(1u<<4)), !!(csr&(1u<<5)), !!(csr&(1u<<6)));
 8003188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800318a:	f003 0320 	and.w	r3, r3, #32
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461e      	mov	r6, r3
        !!(csr&(1u<<3)), !!(csr&(1u<<4)), !!(csr&(1u<<5)), !!(csr&(1u<<6)));
 800319a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	1d38      	adds	r0, r7, #4
 80031ac:	9305      	str	r3, [sp, #20]
 80031ae:	9604      	str	r6, [sp, #16]
 80031b0:	9503      	str	r5, [sp, #12]
 80031b2:	9402      	str	r4, [sp, #8]
 80031b4:	9101      	str	r1, [sp, #4]
 80031b6:	9200      	str	r2, [sp, #0]
 80031b8:	4663      	mov	r3, ip
 80031ba:	4a0f      	ldr	r2, [pc, #60]	@ (80031f8 <dump_reset_cause+0x134>)
 80031bc:	2160      	movs	r1, #96	@ 0x60
 80031be:	f012 fae1 	bl	8015784 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd f8f3 	bl	80003b0 <strlen>
 80031ca:	4603      	mov	r3, r0
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	1d39      	adds	r1, r7, #4
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295
 80031d4:	4809      	ldr	r0, [pc, #36]	@ (80031fc <dump_reset_cause+0x138>)
 80031d6:	f00f f897 	bl	8012308 <HAL_UART_Transmit>

    __HAL_RCC_CLEAR_RESET_FLAGS();
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <dump_reset_cause+0x130>)
 80031dc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80031e0:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <dump_reset_cause+0x130>)
 80031e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
}
 80031ea:	bf00      	nop
 80031ec:	376c      	adds	r7, #108	@ 0x6c
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f2:	bf00      	nop
 80031f4:	58024400 	.word	0x58024400
 80031f8:	080194a8 	.word	0x080194a8
 80031fc:	2400077c 	.word	0x2400077c

08003200 <heartbeat_pin_init>:

static void heartbeat_pin_init(void) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003206:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <heartbeat_pin_init+0x58>)
 8003208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800320c:	4a12      	ldr	r2, [pc, #72]	@ (8003258 <heartbeat_pin_init+0x58>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003216:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <heartbeat_pin_init+0x58>)
 8003218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef g = {0};
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	60da      	str	r2, [r3, #12]
 8003230:	611a      	str	r2, [r3, #16]
    g.Pin = GPIO_PIN_13;               // pick a free LED/pin you can probe
 8003232:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003236:	607b      	str	r3, [r7, #4]
    g.Mode = GPIO_MODE_OUTPUT_PP;
 8003238:	2301      	movs	r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
    g.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
    g.Speed = GPIO_SPEED_FREQ_LOW;
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &g);
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	4619      	mov	r1, r3
 8003248:	4804      	ldr	r0, [pc, #16]	@ (800325c <heartbeat_pin_init+0x5c>)
 800324a:	f007 fabd 	bl	800a7c8 <HAL_GPIO_Init>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	58024400 	.word	0x58024400
 800325c:	58020800 	.word	0x58020800

08003260 <nrf24_flush_tx>:
    }
}

// Local FLUSH_TX (no dependency on external driver symbol)
static void nrf24_flush_tx(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
    CSN_LOW();
 8003266:	2200      	movs	r2, #0
 8003268:	2108      	movs	r1, #8
 800326a:	480a      	ldr	r0, [pc, #40]	@ (8003294 <nrf24_flush_tx+0x34>)
 800326c:	f007 fc6c 	bl	800ab48 <HAL_GPIO_WritePin>
    uint8_t cmd = 0xE1; // FLUSH_TX
 8003270:	23e1      	movs	r3, #225	@ 0xe1
 8003272:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8003274:	1df9      	adds	r1, r7, #7
 8003276:	2364      	movs	r3, #100	@ 0x64
 8003278:	2201      	movs	r2, #1
 800327a:	4807      	ldr	r0, [pc, #28]	@ (8003298 <nrf24_flush_tx+0x38>)
 800327c:	f00c fd8c 	bl	800fd98 <HAL_SPI_Transmit>
    CSN_HIGH();
 8003280:	2201      	movs	r2, #1
 8003282:	2108      	movs	r1, #8
 8003284:	4803      	ldr	r0, [pc, #12]	@ (8003294 <nrf24_flush_tx+0x34>)
 8003286:	f007 fc5f 	bl	800ab48 <HAL_GPIO_WritePin>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	58021800 	.word	0x58021800
 8003298:	240005c8 	.word	0x240005c8

0800329c <nrf24_tx32>:


// Write a 32B payload and transmit, waiting for TX_DS or MAX_RT
static uint8_t nrf24_tx32(const void *buf32)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    // Clear IRQs: RX_DR | TX_DS | MAX_RT
    nrf24_WriteReg(STATUS, (1u<<6)|(1u<<5)|(1u<<4));
 80032a4:	2170      	movs	r1, #112	@ 0x70
 80032a6:	2007      	movs	r0, #7
 80032a8:	f000 f89c 	bl	80033e4 <nrf24_WriteReg>

    // Load payload
    CSN_LOW();
 80032ac:	2200      	movs	r2, #0
 80032ae:	2108      	movs	r1, #8
 80032b0:	4829      	ldr	r0, [pc, #164]	@ (8003358 <nrf24_tx32+0xbc>)
 80032b2:	f007 fc49 	bl	800ab48 <HAL_GPIO_WritePin>
    uint8_t cmd = 0xA0; // W_TX_PAYLOAD
 80032b6:	23a0      	movs	r3, #160	@ 0xa0
 80032b8:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80032ba:	f107 010a 	add.w	r1, r7, #10
 80032be:	2364      	movs	r3, #100	@ 0x64
 80032c0:	2201      	movs	r2, #1
 80032c2:	4826      	ldr	r0, [pc, #152]	@ (800335c <nrf24_tx32+0xc0>)
 80032c4:	f00c fd68 	bl	800fd98 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buf32, 32, 100);
 80032c8:	2364      	movs	r3, #100	@ 0x64
 80032ca:	2220      	movs	r2, #32
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4823      	ldr	r0, [pc, #140]	@ (800335c <nrf24_tx32+0xc0>)
 80032d0:	f00c fd62 	bl	800fd98 <HAL_SPI_Transmit>
    CSN_HIGH();
 80032d4:	2201      	movs	r2, #1
 80032d6:	2108      	movs	r1, #8
 80032d8:	481f      	ldr	r0, [pc, #124]	@ (8003358 <nrf24_tx32+0xbc>)
 80032da:	f007 fc35 	bl	800ab48 <HAL_GPIO_WritePin>

    // Pulse CE to start the transmit. Spec says >10 µs; 1 ms is fine here.
    HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80032de:	2201      	movs	r2, #1
 80032e0:	2140      	movs	r1, #64	@ 0x40
 80032e2:	481f      	ldr	r0, [pc, #124]	@ (8003360 <nrf24_tx32+0xc4>)
 80032e4:	f007 fc30 	bl	800ab48 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80032e8:	2001      	movs	r0, #1
 80032ea:	f001 fa49 	bl	8004780 <HAL_Delay>
    HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2140      	movs	r1, #64	@ 0x40
 80032f2:	481b      	ldr	r0, [pc, #108]	@ (8003360 <nrf24_tx32+0xc4>)
 80032f4:	f007 fc28 	bl	800ab48 <HAL_GPIO_WritePin>

    // Wait up to ~5 ms for completion
    uint32_t t0 = HAL_GetTick();
 80032f8:	f001 fa36 	bl	8004768 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - t0) < 5) {
 80032fe:	e01c      	b.n	800333a <nrf24_tx32+0x9e>
        uint8_t st = nrf24_ReadReg(STATUS);
 8003300:	2007      	movs	r0, #7
 8003302:	f000 f8bf 	bl	8003484 <nrf24_ReadReg>
 8003306:	4603      	mov	r3, r0
 8003308:	72fb      	strb	r3, [r7, #11]

        if (st & (1u<<5)) {                 // TX_DS set
 800330a:	7afb      	ldrb	r3, [r7, #11]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <nrf24_tx32+0x84>
            nrf24_WriteReg(STATUS, (1u<<5));
 8003314:	2120      	movs	r1, #32
 8003316:	2007      	movs	r0, #7
 8003318:	f000 f864 	bl	80033e4 <nrf24_WriteReg>
            return 1;
 800331c:	2301      	movs	r3, #1
 800331e:	e016      	b.n	800334e <nrf24_tx32+0xb2>
        }
        if (st & (1u<<4)) {                 // MAX_RT set
 8003320:	7afb      	ldrb	r3, [r7, #11]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <nrf24_tx32+0x9e>
            nrf24_WriteReg(STATUS, (1u<<4));
 800332a:	2110      	movs	r1, #16
 800332c:	2007      	movs	r0, #7
 800332e:	f000 f859 	bl	80033e4 <nrf24_WriteReg>
            nrf24_flush_tx();               // use our local flush
 8003332:	f7ff ff95 	bl	8003260 <nrf24_flush_tx>
            return 0;
 8003336:	2300      	movs	r3, #0
 8003338:	e009      	b.n	800334e <nrf24_tx32+0xb2>
    while ((HAL_GetTick() - t0) < 5) {
 800333a:	f001 fa15 	bl	8004768 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b04      	cmp	r3, #4
 8003346:	d9db      	bls.n	8003300 <nrf24_tx32+0x64>
        }
    }

    // Timeout — clean up
    nrf24_flush_tx();
 8003348:	f7ff ff8a 	bl	8003260 <nrf24_flush_tx>
    return 0;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	58021800 	.word	0x58021800
 800335c:	240005c8 	.word	0x240005c8
 8003360:	58020800 	.word	0x58020800

08003364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003368:	b672      	cpsid	i
}
 800336a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <Error_Handler+0x8>

08003370 <CS_Select>:
#define NRF24_CE_PIN     GPIO_PIN_6
#define NRF24_CSN_PORT   GPIOG
#define NRF24_CSN_PIN    GPIO_PIN_3

/* ==== Local helpers ====================================================== */
static inline void CS_Select(void)   { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET); }
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
 8003374:	2200      	movs	r2, #0
 8003376:	2108      	movs	r1, #8
 8003378:	4802      	ldr	r0, [pc, #8]	@ (8003384 <CS_Select+0x14>)
 800337a:	f007 fbe5 	bl	800ab48 <HAL_GPIO_WritePin>
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	58021800 	.word	0x58021800

08003388 <CS_UnSelect>:
static inline void CS_UnSelect(void) { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   }
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
 800338c:	2201      	movs	r2, #1
 800338e:	2108      	movs	r1, #8
 8003390:	4802      	ldr	r0, [pc, #8]	@ (800339c <CS_UnSelect+0x14>)
 8003392:	f007 fbd9 	bl	800ab48 <HAL_GPIO_WritePin>
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	58021800 	.word	0x58021800

080033a0 <CE_Disable>:
static inline void CE_Enable(void)   { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_SET);   }
static inline void CE_Disable(void)  { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); }
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	2200      	movs	r2, #0
 80033a6:	2140      	movs	r1, #64	@ 0x40
 80033a8:	4802      	ldr	r0, [pc, #8]	@ (80033b4 <CE_Disable+0x14>)
 80033aa:	f007 fbcd 	bl	800ab48 <HAL_GPIO_WritePin>
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	58020800 	.word	0x58020800

080033b8 <uputs>:

static void uputs(const char *s){ HAL_UART_Transmit(NRF24_UART, (uint8_t*)s, strlen(s), HAL_MAX_DELAY); }
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7fc fff5 	bl	80003b0 <strlen>
 80033c6:	4603      	mov	r3, r0
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4803      	ldr	r0, [pc, #12]	@ (80033e0 <uputs+0x28>)
 80033d2:	f00e ff99 	bl	8012308 <HAL_UART_Transmit>
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2400077c 	.word	0x2400077c

080033e4 <nrf24_WriteReg>:
#define T_SHORT   100U
#define T_LONG   1000U

/* ==== Low-level SPI access ============================================== */
void nrf24_WriteReg(uint8_t reg, uint8_t val)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	460a      	mov	r2, r1
 80033ee:	71fb      	strb	r3, [r7, #7]
 80033f0:	4613      	mov	r3, r2
 80033f2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	f043 0320 	orr.w	r3, r3, #32
 8003402:	b25b      	sxtb	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	733b      	strb	r3, [r7, #12]
    buf[1] = val;
 8003408:	79bb      	ldrb	r3, [r7, #6]
 800340a:	737b      	strb	r3, [r7, #13]
    CS_Select();
 800340c:	f7ff ffb0 	bl	8003370 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, buf, 2, T_SHORT);
 8003410:	f107 010c 	add.w	r1, r7, #12
 8003414:	2364      	movs	r3, #100	@ 0x64
 8003416:	2202      	movs	r2, #2
 8003418:	4804      	ldr	r0, [pc, #16]	@ (800342c <nrf24_WriteReg+0x48>)
 800341a:	f00c fcbd 	bl	800fd98 <HAL_SPI_Transmit>
    CS_UnSelect();
 800341e:	f7ff ffb3 	bl	8003388 <CS_UnSelect>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	240005c8 	.word	0x240005c8

08003430 <nrf24_WriteRegMulti>:
void nrf24_WriteRegMulti(uint8_t reg, const uint8_t *data, int size)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 800343e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	b25b      	sxtb	r3, r3
 8003448:	f043 0320 	orr.w	r3, r3, #32
 800344c:	b25b      	sxtb	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 8003452:	f7ff ff8d 	bl	8003370 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 8003456:	f107 0117 	add.w	r1, r7, #23
 800345a:	2364      	movs	r3, #100	@ 0x64
 800345c:	2201      	movs	r2, #1
 800345e:	4808      	ldr	r0, [pc, #32]	@ (8003480 <nrf24_WriteRegMulti+0x50>)
 8003460:	f00c fc9a 	bl	800fd98 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, (uint8_t*)data, size, T_LONG);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	b29a      	uxth	r2, r3
 8003468:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	4804      	ldr	r0, [pc, #16]	@ (8003480 <nrf24_WriteRegMulti+0x50>)
 8003470:	f00c fc92 	bl	800fd98 <HAL_SPI_Transmit>
    CS_UnSelect();
 8003474:	f7ff ff88 	bl	8003388 <CS_UnSelect>
}
 8003478:	bf00      	nop
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	240005c8 	.word	0x240005c8

08003484 <nrf24_ReadReg>:

 uint8_t nrf24_ReadReg(uint8_t reg)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	b2db      	uxtb	r3, r3
 8003496:	73fb      	strb	r3, [r7, #15]
    uint8_t val = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	73bb      	strb	r3, [r7, #14]
    CS_Select();
 800349c:	f7ff ff68 	bl	8003370 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 80034a0:	f107 010f 	add.w	r1, r7, #15
 80034a4:	2364      	movs	r3, #100	@ 0x64
 80034a6:	2201      	movs	r2, #1
 80034a8:	4808      	ldr	r0, [pc, #32]	@ (80034cc <nrf24_ReadReg+0x48>)
 80034aa:	f00c fc75 	bl	800fd98 <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, &val, 1, T_SHORT);
 80034ae:	f107 010e 	add.w	r1, r7, #14
 80034b2:	2364      	movs	r3, #100	@ 0x64
 80034b4:	2201      	movs	r2, #1
 80034b6:	4805      	ldr	r0, [pc, #20]	@ (80034cc <nrf24_ReadReg+0x48>)
 80034b8:	f00c fe5c 	bl	8010174 <HAL_SPI_Receive>
    CS_UnSelect();
 80034bc:	f7ff ff64 	bl	8003388 <CS_UnSelect>
    return val;
 80034c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	240005c8 	.word	0x240005c8

080034d0 <nrf24_ReadRegMulti>:

static void nrf24_ReadRegMulti(uint8_t reg, uint8_t *data, int size)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 80034e8:	f7ff ff42 	bl	8003370 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 80034ec:	f107 0117 	add.w	r1, r7, #23
 80034f0:	2364      	movs	r3, #100	@ 0x64
 80034f2:	2201      	movs	r2, #1
 80034f4:	4808      	ldr	r0, [pc, #32]	@ (8003518 <nrf24_ReadRegMulti+0x48>)
 80034f6:	f00c fc4f 	bl	800fd98 <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, data, size, T_LONG);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	4804      	ldr	r0, [pc, #16]	@ (8003518 <nrf24_ReadRegMulti+0x48>)
 8003506:	f00c fe35 	bl	8010174 <HAL_SPI_Receive>
    CS_UnSelect();
 800350a:	f7ff ff3d 	bl	8003388 <CS_UnSelect>
}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	240005c8 	.word	0x240005c8

0800351c <nrf24_reset>:
    CS_UnSelect();
}

/* ==== Soft reset (subset) =============================================== */
static void nrf24_reset(uint8_t reg)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
    if (reg == STATUS) {
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	2b07      	cmp	r3, #7
 800352a:	d104      	bne.n	8003536 <nrf24_reset+0x1a>
        /* clear IRQs (RX_DR | TX_DS | MAX_RT) */
        nrf24_WriteReg(STATUS, 0x70);
 800352c:	2170      	movs	r1, #112	@ 0x70
 800352e:	2007      	movs	r0, #7
 8003530:	f7ff ff58 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
        nrf24_WriteReg(RX_PW_P3, 0);
        nrf24_WriteReg(RX_PW_P4, 0);
        nrf24_WriteReg(RX_PW_P5, 0);
    }
}
 8003534:	e080      	b.n	8003638 <nrf24_reset+0x11c>
    else if (reg == FIFO_STATUS) {
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	2b17      	cmp	r3, #23
 800353a:	d104      	bne.n	8003546 <nrf24_reset+0x2a>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 800353c:	2111      	movs	r1, #17
 800353e:	2017      	movs	r0, #23
 8003540:	f7ff ff50 	bl	80033e4 <nrf24_WriteReg>
}
 8003544:	e078      	b.n	8003638 <nrf24_reset+0x11c>
        nrf24_WriteReg(CONFIG,      0x08);  /* CRC off, PWR_DOWN */
 8003546:	2108      	movs	r1, #8
 8003548:	2000      	movs	r0, #0
 800354a:	f7ff ff4b 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(EN_AA,       0x00);  /* no Auto-ACK */
 800354e:	2100      	movs	r1, #0
 8003550:	2001      	movs	r0, #1
 8003552:	f7ff ff47 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(EN_RXADDR,   0x03);  /* P0,P1 enabled */
 8003556:	2103      	movs	r1, #3
 8003558:	2002      	movs	r0, #2
 800355a:	f7ff ff43 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_AW,    0x03);  /* 5-byte addr */
 800355e:	2103      	movs	r1, #3
 8003560:	2003      	movs	r0, #3
 8003562:	f7ff ff3f 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_RETR,  0x00);  /* no retries */
 8003566:	2100      	movs	r1, #0
 8003568:	2004      	movs	r0, #4
 800356a:	f7ff ff3b 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(RF_CH,       76);    /* ch=76 */
 800356e:	214c      	movs	r1, #76	@ 0x4c
 8003570:	2005      	movs	r0, #5
 8003572:	f7ff ff37 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(RF_SETUP,    0x06);  /* 1 Mbps, 0 dBm */
 8003576:	2106      	movs	r1, #6
 8003578:	2006      	movs	r0, #6
 800357a:	f7ff ff33 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(FEATURE,     0x00);  /* no dyn payloads */
 800357e:	2100      	movs	r1, #0
 8003580:	201d      	movs	r0, #29
 8003582:	f7ff ff2f 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(DYNPD,       0x00);
 8003586:	2100      	movs	r1, #0
 8003588:	201c      	movs	r0, #28
 800358a:	f7ff ff2b 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 800358e:	2111      	movs	r1, #17
 8003590:	2017      	movs	r0, #23
 8003592:	f7ff ff27 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(STATUS,      0x70);  /* clear IRQs */
 8003596:	2170      	movs	r1, #112	@ 0x70
 8003598:	2007      	movs	r0, #7
 800359a:	f7ff ff23 	bl	80033e4 <nrf24_WriteReg>
        uint8_t def0[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 800359e:	4a28      	ldr	r2, [pc, #160]	@ (8003640 <nrf24_reset+0x124>)
 80035a0:	f107 0310 	add.w	r3, r7, #16
 80035a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035a8:	6018      	str	r0, [r3, #0]
 80035aa:	3304      	adds	r3, #4
 80035ac:	7019      	strb	r1, [r3, #0]
        uint8_t def1[5] = {0xC2,0xC2,0xC2,0xC2,0xC2};
 80035ae:	4a25      	ldr	r2, [pc, #148]	@ (8003644 <nrf24_reset+0x128>)
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035b8:	6018      	str	r0, [r3, #0]
 80035ba:	3304      	adds	r3, #4
 80035bc:	7019      	strb	r1, [r3, #0]
        nrf24_WriteRegMulti(RX_ADDR_P0, def0, 5);
 80035be:	f107 0310 	add.w	r3, r7, #16
 80035c2:	2205      	movs	r2, #5
 80035c4:	4619      	mov	r1, r3
 80035c6:	200a      	movs	r0, #10
 80035c8:	f7ff ff32 	bl	8003430 <nrf24_WriteRegMulti>
        nrf24_WriteRegMulti(RX_ADDR_P1, def1, 5);
 80035cc:	f107 0308 	add.w	r3, r7, #8
 80035d0:	2205      	movs	r2, #5
 80035d2:	4619      	mov	r1, r3
 80035d4:	200b      	movs	r0, #11
 80035d6:	f7ff ff2b 	bl	8003430 <nrf24_WriteRegMulti>
        nrf24_WriteReg    (RX_ADDR_P2, 0xC3);
 80035da:	21c3      	movs	r1, #195	@ 0xc3
 80035dc:	200c      	movs	r0, #12
 80035de:	f7ff ff01 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P3, 0xC4);
 80035e2:	21c4      	movs	r1, #196	@ 0xc4
 80035e4:	200d      	movs	r0, #13
 80035e6:	f7ff fefd 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P4, 0xC5);
 80035ea:	21c5      	movs	r1, #197	@ 0xc5
 80035ec:	200e      	movs	r0, #14
 80035ee:	f7ff fef9 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P5, 0xC6);
 80035f2:	21c6      	movs	r1, #198	@ 0xc6
 80035f4:	200f      	movs	r0, #15
 80035f6:	f7ff fef5 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteRegMulti(TX_ADDR,    def0, 5);
 80035fa:	f107 0310 	add.w	r3, r7, #16
 80035fe:	2205      	movs	r2, #5
 8003600:	4619      	mov	r1, r3
 8003602:	2010      	movs	r0, #16
 8003604:	f7ff ff14 	bl	8003430 <nrf24_WriteRegMulti>
        nrf24_WriteReg(RX_PW_P0, 0);
 8003608:	2100      	movs	r1, #0
 800360a:	2011      	movs	r0, #17
 800360c:	f7ff feea 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P1, 0);
 8003610:	2100      	movs	r1, #0
 8003612:	2012      	movs	r0, #18
 8003614:	f7ff fee6 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
 8003618:	2100      	movs	r1, #0
 800361a:	2013      	movs	r0, #19
 800361c:	f7ff fee2 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P3, 0);
 8003620:	2100      	movs	r1, #0
 8003622:	2014      	movs	r0, #20
 8003624:	f7ff fede 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P4, 0);
 8003628:	2100      	movs	r1, #0
 800362a:	2015      	movs	r0, #21
 800362c:	f7ff feda 	bl	80033e4 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P5, 0);
 8003630:	2100      	movs	r1, #0
 8003632:	2016      	movs	r0, #22
 8003634:	f7ff fed6 	bl	80033e4 <nrf24_WriteReg>
}
 8003638:	bf00      	nop
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	080194ec 	.word	0x080194ec
 8003644:	080194f4 	.word	0x080194f4

08003648 <NRF24_Init>:

/* ==== Public API ========================================================= */

void NRF24_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
	CE_Disable();
 800364e:	f7ff fea7 	bl	80033a0 <CE_Disable>
	CS_UnSelect();
 8003652:	f7ff fe99 	bl	8003388 <CS_UnSelect>
	HAL_Delay(1);
 8003656:	2001      	movs	r0, #1
 8003658:	f001 f892 	bl	8004780 <HAL_Delay>

	// ACTIVATE 0x73 (needed by many BK24xx/nRF24 clones)
	uint8_t act[2] = { ACTIVATE, 0x73 };
 800365c:	f247 3350 	movw	r3, #29520	@ 0x7350
 8003660:	80bb      	strh	r3, [r7, #4]
	CS_Select(); HAL_SPI_Transmit(NRF24_SPI, act, 2, T_SHORT); CS_UnSelect();
 8003662:	f7ff fe85 	bl	8003370 <CS_Select>
 8003666:	1d39      	adds	r1, r7, #4
 8003668:	2364      	movs	r3, #100	@ 0x64
 800366a:	2202      	movs	r2, #2
 800366c:	481b      	ldr	r0, [pc, #108]	@ (80036dc <NRF24_Init+0x94>)
 800366e:	f00c fb93 	bl	800fd98 <HAL_SPI_Transmit>
 8003672:	f7ff fe89 	bl	8003388 <CS_UnSelect>
	HAL_Delay(1);
 8003676:	2001      	movs	r0, #1
 8003678:	f001 f882 	bl	8004780 <HAL_Delay>

    nrf24_reset(0);
 800367c:	2000      	movs	r0, #0
 800367e:	f7ff ff4d 	bl	800351c <nrf24_reset>

    /* fixed settings for link bring-up */
    nrf24_WriteReg(EN_AA,        0x00);  /* NO ACK */
 8003682:	2100      	movs	r1, #0
 8003684:	2001      	movs	r0, #1
 8003686:	f7ff fead 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_RETR,   0x00);  /* NO retries */
 800368a:	2100      	movs	r1, #0
 800368c:	2004      	movs	r0, #4
 800368e:	f7ff fea9 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteReg(EN_RXADDR,    0x03);  /* P0,P1 */
 8003692:	2103      	movs	r1, #3
 8003694:	2002      	movs	r0, #2
 8003696:	f7ff fea5 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_AW,     0x03);  /* 5-byte */
 800369a:	2103      	movs	r1, #3
 800369c:	2003      	movs	r0, #3
 800369e:	f7ff fea1 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteReg(RF_CH,        76);    /* channel 76 */
 80036a2:	214c      	movs	r1, #76	@ 0x4c
 80036a4:	2005      	movs	r0, #5
 80036a6:	f7ff fe9d 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteReg(RF_SETUP,     0x06);  /* 1 Mbps, 0 dBm */
 80036aa:	2106      	movs	r1, #6
 80036ac:	2006      	movs	r0, #6
 80036ae:	f7ff fe99 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteReg(FEATURE,      0x00);
 80036b2:	2100      	movs	r1, #0
 80036b4:	201d      	movs	r0, #29
 80036b6:	f7ff fe95 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteReg(DYNPD,        0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	201c      	movs	r0, #28
 80036be:	f7ff fe91 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteReg(FIFO_STATUS,  0x11);
 80036c2:	2111      	movs	r1, #17
 80036c4:	2017      	movs	r0, #23
 80036c6:	f7ff fe8d 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteReg(STATUS,       0x70);  /* clear IRQs */
 80036ca:	2170      	movs	r1, #112	@ 0x70
 80036cc:	2007      	movs	r0, #7
 80036ce:	f7ff fe89 	bl	80033e4 <nrf24_WriteReg>

    //CE_Enable();    /* power state will be set in TxMode/RxMode */
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	240005c8 	.word	0x240005c8

080036e0 <NRF24_TxMode>:

void NRF24_TxMode(uint8_t *Address, uint8_t channel)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
    CE_Disable();
 80036ec:	f7ff fe58 	bl	80033a0 <CE_Disable>

    nrf24_WriteReg(RF_CH, channel);
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	4619      	mov	r1, r3
 80036f4:	2005      	movs	r0, #5
 80036f6:	f7ff fe75 	bl	80033e4 <nrf24_WriteReg>
    nrf24_WriteRegMulti(TX_ADDR,    Address, 5);
 80036fa:	2205      	movs	r2, #5
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	2010      	movs	r0, #16
 8003700:	f7ff fe96 	bl	8003430 <nrf24_WriteRegMulti>
    nrf24_WriteRegMulti(RX_ADDR_P0, Address, 5);  /* ACK return path if enabled later */
 8003704:	2205      	movs	r2, #5
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	200a      	movs	r0, #10
 800370a:	f7ff fe91 	bl	8003430 <nrf24_WriteRegMulti>

    /* CONFIG: PWR_UP(1) | EN_CRC(1) | CRCO(1=16bit) | PRIM_RX(0) */
    uint8_t cfg = (1<<1) | (1<<3) | (1<<2);   /* 0x0E */
 800370e:	230e      	movs	r3, #14
 8003710:	73fb      	strb	r3, [r7, #15]
    nrf24_WriteReg(CONFIG, cfg);
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	4619      	mov	r1, r3
 8003716:	2000      	movs	r0, #0
 8003718:	f7ff fe64 	bl	80033e4 <nrf24_WriteReg>
    HAL_Delay(3);
 800371c:	2003      	movs	r0, #3
 800371e:	f001 f82f 	bl	8004780 <HAL_Delay>

    //CE_Enable();
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <hex1>:

    for (int i = 29; i < 38; i++) data[i] = nrf24_ReadReg(i - 12);
}

/* ===== Simple UART dump ================================================== */
static void hex1(const char *name, uint8_t v){
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	@ 0x30
 8003730:	af02      	add	r7, sp, #8
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
    char s[32];
    snprintf(s, sizeof(s), "%s=%02X ", name, v);
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f107 0008 	add.w	r0, r7, #8
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a06      	ldr	r2, [pc, #24]	@ (800375c <hex1+0x30>)
 8003744:	2120      	movs	r1, #32
 8003746:	f012 f81d 	bl	8015784 <sniprintf>
    uputs(s);
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fe32 	bl	80033b8 <uputs>
}
 8003754:	bf00      	nop
 8003756:	3728      	adds	r7, #40	@ 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	080194fc 	.word	0x080194fc

08003760 <dump_hex5>:

static void dump_hex5(const char *name, const uint8_t *v){
 8003760:	b5b0      	push	{r4, r5, r7, lr}
 8003762:	b098      	sub	sp, #96	@ 0x60
 8003764:	af06      	add	r7, sp, #24
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
    char s[64];
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
            name, v[0], v[1], v[2], v[3], v[4]);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 800376e:	461a      	mov	r2, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8003776:	4619      	mov	r1, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3302      	adds	r3, #2
 800377c:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 800377e:	461c      	mov	r4, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	3303      	adds	r3, #3
 8003784:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8003786:	461d      	mov	r5, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	3304      	adds	r3, #4
 800378c:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 800378e:	f107 0008 	add.w	r0, r7, #8
 8003792:	9304      	str	r3, [sp, #16]
 8003794:	9503      	str	r5, [sp, #12]
 8003796:	9402      	str	r4, [sp, #8]
 8003798:	9101      	str	r1, [sp, #4]
 800379a:	9200      	str	r2, [sp, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a06      	ldr	r2, [pc, #24]	@ (80037b8 <dump_hex5+0x58>)
 80037a0:	2140      	movs	r1, #64	@ 0x40
 80037a2:	f011 ffef 	bl	8015784 <sniprintf>
    uputs(s);
 80037a6:	f107 0308 	add.w	r3, r7, #8
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fe04 	bl	80033b8 <uputs>
}
 80037b0:	bf00      	nop
 80037b2:	3748      	adds	r7, #72	@ 0x48
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bdb0      	pop	{r4, r5, r7, pc}
 80037b8:	08019508 	.word	0x08019508

080037bc <NRF24_Dump>:

void NRF24_Dump(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
    uint8_t v, addr[5];
    v = nrf24_ReadReg(CONFIG);     hex1("CFG",   v);
 80037c2:	2000      	movs	r0, #0
 80037c4:	f7ff fe5e 	bl	8003484 <nrf24_ReadReg>
 80037c8:	4603      	mov	r3, r0
 80037ca:	71fb      	strb	r3, [r7, #7]
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	4619      	mov	r1, r3
 80037d0:	4832      	ldr	r0, [pc, #200]	@ (800389c <NRF24_Dump+0xe0>)
 80037d2:	f7ff ffab 	bl	800372c <hex1>
    v = nrf24_ReadReg(EN_AA);      hex1("EN_AA", v);
 80037d6:	2001      	movs	r0, #1
 80037d8:	f7ff fe54 	bl	8003484 <nrf24_ReadReg>
 80037dc:	4603      	mov	r3, r0
 80037de:	71fb      	strb	r3, [r7, #7]
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	4619      	mov	r1, r3
 80037e4:	482e      	ldr	r0, [pc, #184]	@ (80038a0 <NRF24_Dump+0xe4>)
 80037e6:	f7ff ffa1 	bl	800372c <hex1>
    v = nrf24_ReadReg(SETUP_RETR); hex1("RETR",  v);
 80037ea:	2004      	movs	r0, #4
 80037ec:	f7ff fe4a 	bl	8003484 <nrf24_ReadReg>
 80037f0:	4603      	mov	r3, r0
 80037f2:	71fb      	strb	r3, [r7, #7]
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	4619      	mov	r1, r3
 80037f8:	482a      	ldr	r0, [pc, #168]	@ (80038a4 <NRF24_Dump+0xe8>)
 80037fa:	f7ff ff97 	bl	800372c <hex1>
    v = nrf24_ReadReg(RF_CH);      hex1("CH",    v);
 80037fe:	2005      	movs	r0, #5
 8003800:	f7ff fe40 	bl	8003484 <nrf24_ReadReg>
 8003804:	4603      	mov	r3, r0
 8003806:	71fb      	strb	r3, [r7, #7]
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	4619      	mov	r1, r3
 800380c:	4826      	ldr	r0, [pc, #152]	@ (80038a8 <NRF24_Dump+0xec>)
 800380e:	f7ff ff8d 	bl	800372c <hex1>
    v = nrf24_ReadReg(RF_SETUP);   hex1("RF",    v);
 8003812:	2006      	movs	r0, #6
 8003814:	f7ff fe36 	bl	8003484 <nrf24_ReadReg>
 8003818:	4603      	mov	r3, r0
 800381a:	71fb      	strb	r3, [r7, #7]
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	4619      	mov	r1, r3
 8003820:	4822      	ldr	r0, [pc, #136]	@ (80038ac <NRF24_Dump+0xf0>)
 8003822:	f7ff ff83 	bl	800372c <hex1>
    v = nrf24_ReadReg(FEATURE);    hex1("FEAT",  v);
 8003826:	201d      	movs	r0, #29
 8003828:	f7ff fe2c 	bl	8003484 <nrf24_ReadReg>
 800382c:	4603      	mov	r3, r0
 800382e:	71fb      	strb	r3, [r7, #7]
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	4619      	mov	r1, r3
 8003834:	481e      	ldr	r0, [pc, #120]	@ (80038b0 <NRF24_Dump+0xf4>)
 8003836:	f7ff ff79 	bl	800372c <hex1>
    v = nrf24_ReadReg(DYNPD);      hex1("DYNPD", v);
 800383a:	201c      	movs	r0, #28
 800383c:	f7ff fe22 	bl	8003484 <nrf24_ReadReg>
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	4619      	mov	r1, r3
 8003848:	481a      	ldr	r0, [pc, #104]	@ (80038b4 <NRF24_Dump+0xf8>)
 800384a:	f7ff ff6f 	bl	800372c <hex1>

    nrf24_ReadRegMulti(TX_ADDR,    addr, 5); dump_hex5("TX",  addr);
 800384e:	463b      	mov	r3, r7
 8003850:	2205      	movs	r2, #5
 8003852:	4619      	mov	r1, r3
 8003854:	2010      	movs	r0, #16
 8003856:	f7ff fe3b 	bl	80034d0 <nrf24_ReadRegMulti>
 800385a:	463b      	mov	r3, r7
 800385c:	4619      	mov	r1, r3
 800385e:	4816      	ldr	r0, [pc, #88]	@ (80038b8 <NRF24_Dump+0xfc>)
 8003860:	f7ff ff7e 	bl	8003760 <dump_hex5>
    nrf24_ReadRegMulti(RX_ADDR_P0, addr, 5); dump_hex5("RX0", addr);
 8003864:	463b      	mov	r3, r7
 8003866:	2205      	movs	r2, #5
 8003868:	4619      	mov	r1, r3
 800386a:	200a      	movs	r0, #10
 800386c:	f7ff fe30 	bl	80034d0 <nrf24_ReadRegMulti>
 8003870:	463b      	mov	r3, r7
 8003872:	4619      	mov	r1, r3
 8003874:	4811      	ldr	r0, [pc, #68]	@ (80038bc <NRF24_Dump+0x100>)
 8003876:	f7ff ff73 	bl	8003760 <dump_hex5>

    v = nrf24_ReadReg(STATUS);     hex1("STAT",  v);
 800387a:	2007      	movs	r0, #7
 800387c:	f7ff fe02 	bl	8003484 <nrf24_ReadReg>
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	4619      	mov	r1, r3
 8003888:	480d      	ldr	r0, [pc, #52]	@ (80038c0 <NRF24_Dump+0x104>)
 800388a:	f7ff ff4f 	bl	800372c <hex1>
    uputs("\r\n");
 800388e:	480d      	ldr	r0, [pc, #52]	@ (80038c4 <NRF24_Dump+0x108>)
 8003890:	f7ff fd92 	bl	80033b8 <uputs>
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	08019528 	.word	0x08019528
 80038a0:	0801952c 	.word	0x0801952c
 80038a4:	08019534 	.word	0x08019534
 80038a8:	0801953c 	.word	0x0801953c
 80038ac:	08019540 	.word	0x08019540
 80038b0:	08019544 	.word	0x08019544
 80038b4:	0801954c 	.word	0x0801954c
 80038b8:	08019554 	.word	0x08019554
 80038bc:	08019558 	.word	0x08019558
 80038c0:	0801955c 	.word	0x0801955c
 80038c4:	08019564 	.word	0x08019564

080038c8 <NRF24_StatusNOP>:
uint8_t NRF24_StatusNOP(void) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af02      	add	r7, sp, #8
    uint8_t cmd = NOP, st = 0x00;
 80038ce:	23ff      	movs	r3, #255	@ 0xff
 80038d0:	71fb      	strb	r3, [r7, #7]
 80038d2:	2300      	movs	r3, #0
 80038d4:	71bb      	strb	r3, [r7, #6]
    CS_Select();
 80038d6:	f7ff fd4b 	bl	8003370 <CS_Select>
    HAL_SPI_TransmitReceive(NRF24_SPI, &cmd, &st, 1, 100);
 80038da:	1dba      	adds	r2, r7, #6
 80038dc:	1df9      	adds	r1, r7, #7
 80038de:	2364      	movs	r3, #100	@ 0x64
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2301      	movs	r3, #1
 80038e4:	4804      	ldr	r0, [pc, #16]	@ (80038f8 <NRF24_StatusNOP+0x30>)
 80038e6:	f00c feb7 	bl	8010658 <HAL_SPI_TransmitReceive>
    CS_UnSelect();
 80038ea:	f7ff fd4d 	bl	8003388 <CS_UnSelect>
    return st;
 80038ee:	79bb      	ldrb	r3, [r7, #6]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	240005c8 	.word	0x240005c8

080038fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003902:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <HAL_MspInit+0x30>)
 8003904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003908:	4a08      	ldr	r2, [pc, #32]	@ (800392c <HAL_MspInit+0x30>)
 800390a:	f043 0302 	orr.w	r3, r3, #2
 800390e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_MspInit+0x30>)
 8003914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	58024400 	.word	0x58024400

08003930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b090      	sub	sp, #64	@ 0x40
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a90      	ldr	r2, [pc, #576]	@ (8003b90 <HAL_ADC_MspInit+0x260>)
 800394e:	4293      	cmp	r3, r2
 8003950:	f040 80a3 	bne.w	8003a9a <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003954:	4b8f      	ldr	r3, [pc, #572]	@ (8003b94 <HAL_ADC_MspInit+0x264>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	4a8e      	ldr	r2, [pc, #568]	@ (8003b94 <HAL_ADC_MspInit+0x264>)
 800395c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800395e:	4b8d      	ldr	r3, [pc, #564]	@ (8003b94 <HAL_ADC_MspInit+0x264>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d10e      	bne.n	8003984 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003966:	4b8c      	ldr	r3, [pc, #560]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800396c:	4a8a      	ldr	r2, [pc, #552]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 800396e:	f043 0320 	orr.w	r3, r3, #32
 8003972:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003976:	4b88      	ldr	r3, [pc, #544]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003984:	4b84      	ldr	r3, [pc, #528]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800398a:	4a83      	ldr	r2, [pc, #524]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 800398c:	f043 0304 	orr.w	r3, r3, #4
 8003990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003994:	4b80      	ldr	r3, [pc, #512]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 80039a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039a8:	4a7b      	ldr	r2, [pc, #492]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039b2:	4b79      	ldr	r3, [pc, #484]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 80039b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80039c0:	4b75      	ldr	r3, [pc, #468]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 80039c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039c6:	4a74      	ldr	r2, [pc, #464]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 80039c8:	f043 0320 	orr.w	r3, r3, #32
 80039cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039d0:	4b71      	ldr	r3, [pc, #452]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 80039d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 80039de:	2330      	movs	r3, #48	@ 0x30
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e2:	2303      	movs	r3, #3
 80039e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039ee:	4619      	mov	r1, r3
 80039f0:	486a      	ldr	r0, [pc, #424]	@ (8003b9c <HAL_ADC_MspInit+0x26c>)
 80039f2:	f006 fee9 	bl	800a7c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 80039f6:	2303      	movs	r3, #3
 80039f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fa:	2303      	movs	r3, #3
 80039fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a06:	4619      	mov	r1, r3
 8003a08:	4865      	ldr	r0, [pc, #404]	@ (8003ba0 <HAL_ADC_MspInit+0x270>)
 8003a0a:	f006 fedd 	bl	800a7c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8003a0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a14:	2303      	movs	r3, #3
 8003a16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8003a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a20:	4619      	mov	r1, r3
 8003a22:	4860      	ldr	r0, [pc, #384]	@ (8003ba4 <HAL_ADC_MspInit+0x274>)
 8003a24:	f006 fed0 	bl	800a7c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003a28:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a2a:	4a60      	ldr	r2, [pc, #384]	@ (8003bac <HAL_ADC_MspInit+0x27c>)
 8003a2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003a2e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a30:	2209      	movs	r2, #9
 8003a32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a34:	4b5c      	ldr	r3, [pc, #368]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a40:	4b59      	ldr	r3, [pc, #356]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a48:	4b57      	ldr	r3, [pc, #348]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a50:	4b55      	ldr	r3, [pc, #340]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a58:	4b53      	ldr	r3, [pc, #332]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003a60:	4b51      	ldr	r3, [pc, #324]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a66:	4b50      	ldr	r3, [pc, #320]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a6c:	484e      	ldr	r0, [pc, #312]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a6e:	f003 fbc5 	bl	80071fc <HAL_DMA_Init>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8003a78:	f7ff fc74 	bl	8003364 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a80:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a82:	4a49      	ldr	r2, [pc, #292]	@ (8003ba8 <HAL_ADC_MspInit+0x278>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	2012      	movs	r0, #18
 8003a8e:	f003 fb80 	bl	8007192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003a92:	2012      	movs	r0, #18
 8003a94:	f003 fb97 	bl	80071c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a98:	e076      	b.n	8003b88 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a44      	ldr	r2, [pc, #272]	@ (8003bb0 <HAL_ADC_MspInit+0x280>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d171      	bne.n	8003b88 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8003b94 <HAL_ADC_MspInit+0x264>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8003b94 <HAL_ADC_MspInit+0x264>)
 8003aac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003aae:	4b39      	ldr	r3, [pc, #228]	@ (8003b94 <HAL_ADC_MspInit+0x264>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003ab6:	4b38      	ldr	r3, [pc, #224]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003abc:	4a36      	ldr	r2, [pc, #216]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003abe:	f043 0320 	orr.w	r3, r3, #32
 8003ac2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003ac6:	4b34      	ldr	r3, [pc, #208]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003ac8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad4:	4b30      	ldr	r3, [pc, #192]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ada:	4a2f      	ldr	r2, [pc, #188]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af2:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003af8:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b02:	4b25      	ldr	r3, [pc, #148]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b10:	4b21      	ldr	r3, [pc, #132]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b16:	4a20      	ldr	r2, [pc, #128]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003b18:	f043 0320 	orr.w	r3, r3, #32
 8003b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b20:	4b1d      	ldr	r3, [pc, #116]	@ (8003b98 <HAL_ADC_MspInit+0x268>)
 8003b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b32:	2303      	movs	r3, #3
 8003b34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8003b3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4816      	ldr	r0, [pc, #88]	@ (8003b9c <HAL_ADC_MspInit+0x26c>)
 8003b42:	f006 fe41 	bl	800a7c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8003b46:	2301      	movs	r3, #1
 8003b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8003b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b56:	4619      	mov	r1, r3
 8003b58:	4811      	ldr	r0, [pc, #68]	@ (8003ba0 <HAL_ADC_MspInit+0x270>)
 8003b5a:	f006 fe35 	bl	800a7c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FR_Pin;
 8003b5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b64:	2303      	movs	r3, #3
 8003b66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_FR_GPIO_Port, &GPIO_InitStruct);
 8003b6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b70:	4619      	mov	r1, r3
 8003b72:	480c      	ldr	r0, [pc, #48]	@ (8003ba4 <HAL_ADC_MspInit+0x274>)
 8003b74:	f006 fe28 	bl	800a7c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	2012      	movs	r0, #18
 8003b7e:	f003 fb08 	bl	8007192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003b82:	2012      	movs	r0, #18
 8003b84:	f003 fb1f 	bl	80071c6 <HAL_NVIC_EnableIRQ>
}
 8003b88:	bf00      	nop
 8003b8a:	3740      	adds	r7, #64	@ 0x40
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40022000 	.word	0x40022000
 8003b94:	24000acc 	.word	0x24000acc
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	58020800 	.word	0x58020800
 8003ba0:	58020400 	.word	0x58020400
 8003ba4:	58021400 	.word	0x58021400
 8003ba8:	240002f4 	.word	0x240002f4
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40022100 	.word	0x40022100

08003bb4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b0bc      	sub	sp, #240	@ 0xf0
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bcc:	f107 0320 	add.w	r3, r7, #32
 8003bd0:	22b8      	movs	r2, #184	@ 0xb8
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f011 fe70 	bl	80158ba <memset>
  if(hfdcan->Instance==FDCAN1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a8d      	ldr	r2, [pc, #564]	@ (8003e14 <HAL_FDCAN_MspInit+0x260>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d157      	bne.n	8003c94 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003be4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bf6:	f107 0320 	add.w	r3, r7, #32
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f007 ff5e 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8003c06:	f7ff fbad 	bl	8003364 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003c0a:	4b83      	ldr	r3, [pc, #524]	@ (8003e18 <HAL_FDCAN_MspInit+0x264>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	4a81      	ldr	r2, [pc, #516]	@ (8003e18 <HAL_FDCAN_MspInit+0x264>)
 8003c12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003c14:	4b80      	ldr	r3, [pc, #512]	@ (8003e18 <HAL_FDCAN_MspInit+0x264>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10e      	bne.n	8003c3a <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003c1c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003c22:	4a7e      	ldr	r2, [pc, #504]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c28:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003c2c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003c2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c3a:	4b78      	ldr	r3, [pc, #480]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c40:	4a76      	ldr	r2, [pc, #472]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003c42:	f043 0308 	orr.w	r3, r3, #8
 8003c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c4a:	4b74      	ldr	r3, [pc, #464]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003c70:	2309      	movs	r3, #9
 8003c72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c76:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4868      	ldr	r0, [pc, #416]	@ (8003e20 <HAL_FDCAN_MspInit+0x26c>)
 8003c7e:	f006 fda3 	bl	800a7c8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8003c82:	2200      	movs	r2, #0
 8003c84:	2101      	movs	r1, #1
 8003c86:	2013      	movs	r0, #19
 8003c88:	f003 fa83 	bl	8007192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003c8c:	2013      	movs	r0, #19
 8003c8e:	f003 fa9a 	bl	80071c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8003c92:	e0ba      	b.n	8003e0a <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a62      	ldr	r2, [pc, #392]	@ (8003e24 <HAL_FDCAN_MspInit+0x270>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d158      	bne.n	8003d50 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003c9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cb0:	f107 0320 	add.w	r3, r7, #32
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f007 ff01 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8003cc0:	f7ff fb50 	bl	8003364 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003cc4:	4b54      	ldr	r3, [pc, #336]	@ (8003e18 <HAL_FDCAN_MspInit+0x264>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	4a53      	ldr	r2, [pc, #332]	@ (8003e18 <HAL_FDCAN_MspInit+0x264>)
 8003ccc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003cce:	4b52      	ldr	r3, [pc, #328]	@ (8003e18 <HAL_FDCAN_MspInit+0x264>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003cd6:	4b51      	ldr	r3, [pc, #324]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003cd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003ce8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf4:	4b49      	ldr	r3, [pc, #292]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cfa:	4a48      	ldr	r2, [pc, #288]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d04:	4b45      	ldr	r3, [pc, #276]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003d12:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003d16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003d2c:	2309      	movs	r3, #9
 8003d2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d32:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003d36:	4619      	mov	r1, r3
 8003d38:	483b      	ldr	r0, [pc, #236]	@ (8003e28 <HAL_FDCAN_MspInit+0x274>)
 8003d3a:	f006 fd45 	bl	800a7c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2102      	movs	r1, #2
 8003d42:	2014      	movs	r0, #20
 8003d44:	f003 fa25 	bl	8007192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8003d48:	2014      	movs	r0, #20
 8003d4a:	f003 fa3c 	bl	80071c6 <HAL_NVIC_EnableIRQ>
}
 8003d4e:	e05c      	b.n	8003e0a <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a35      	ldr	r2, [pc, #212]	@ (8003e2c <HAL_FDCAN_MspInit+0x278>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d157      	bne.n	8003e0a <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003d5a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d6c:	f107 0320 	add.w	r3, r7, #32
 8003d70:	4618      	mov	r0, r3
 8003d72:	f007 fea3 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 8003d7c:	f7ff faf2 	bl	8003364 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003d80:	4b25      	ldr	r3, [pc, #148]	@ (8003e18 <HAL_FDCAN_MspInit+0x264>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	4a24      	ldr	r2, [pc, #144]	@ (8003e18 <HAL_FDCAN_MspInit+0x264>)
 8003d88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003d8a:	4b23      	ldr	r3, [pc, #140]	@ (8003e18 <HAL_FDCAN_MspInit+0x264>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d10e      	bne.n	8003db0 <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003d92:	4b22      	ldr	r3, [pc, #136]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003d94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003d98:	4a20      	ldr	r2, [pc, #128]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003da2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003da4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003db0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003db6:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003dc0:	4b16      	ldr	r3, [pc, #88]	@ (8003e1c <HAL_FDCAN_MspInit+0x268>)
 8003dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003dce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8003de8:	2302      	movs	r3, #2
 8003dea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003df2:	4619      	mov	r1, r3
 8003df4:	480e      	ldr	r0, [pc, #56]	@ (8003e30 <HAL_FDCAN_MspInit+0x27c>)
 8003df6:	f006 fce7 	bl	800a7c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	209f      	movs	r0, #159	@ 0x9f
 8003e00:	f003 f9c7 	bl	8007192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8003e04:	209f      	movs	r0, #159	@ 0x9f
 8003e06:	f003 f9de 	bl	80071c6 <HAL_NVIC_EnableIRQ>
}
 8003e0a:	bf00      	nop
 8003e0c:	37f0      	adds	r7, #240	@ 0xf0
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	4000a000 	.word	0x4000a000
 8003e18:	24000ad0 	.word	0x24000ad0
 8003e1c:	58024400 	.word	0x58024400
 8003e20:	58020c00 	.word	0x58020c00
 8003e24:	4000a400 	.word	0x4000a400
 8003e28:	58020400 	.word	0x58020400
 8003e2c:	4000d400 	.word	0x4000d400
 8003e30:	58021800 	.word	0x58021800

08003e34 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08c      	sub	sp, #48	@ 0x30
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	f107 031c 	add.w	r3, r7, #28
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a3e      	ldr	r2, [pc, #248]	@ (8003f4c <HAL_SD_MspInit+0x118>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d175      	bne.n	8003f42 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003e56:	4b3e      	ldr	r3, [pc, #248]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003e58:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003e5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e62:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003e66:	4b3a      	ldr	r3, [pc, #232]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003e68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e74:	4b36      	ldr	r3, [pc, #216]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e7a:	4a35      	ldr	r2, [pc, #212]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e84:	4b32      	ldr	r3, [pc, #200]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e92:	4b2f      	ldr	r3, [pc, #188]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e98:	4a2d      	ldr	r2, [pc, #180]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003e9a:	f043 0308 	orr.w	r3, r3, #8
 8003e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb0:	4b27      	ldr	r3, [pc, #156]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003eb6:	4a26      	ldr	r2, [pc, #152]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ec0:	4b23      	ldr	r3, [pc, #140]	@ (8003f50 <HAL_SD_MspInit+0x11c>)
 8003ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003ece:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003ed2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003edc:	2303      	movs	r3, #3
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003ee0:	230c      	movs	r3, #12
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee4:	f107 031c 	add.w	r3, r7, #28
 8003ee8:	4619      	mov	r1, r3
 8003eea:	481a      	ldr	r0, [pc, #104]	@ (8003f54 <HAL_SD_MspInit+0x120>)
 8003eec:	f006 fc6c 	bl	800a7c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efc:	2303      	movs	r3, #3
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f00:	230c      	movs	r3, #12
 8003f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f04:	f107 031c 	add.w	r3, r7, #28
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4813      	ldr	r0, [pc, #76]	@ (8003f58 <HAL_SD_MspInit+0x124>)
 8003f0c:	f006 fc5c 	bl	800a7c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 8003f22:	2307      	movs	r3, #7
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f26:	f107 031c 	add.w	r3, r7, #28
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	480b      	ldr	r0, [pc, #44]	@ (8003f5c <HAL_SD_MspInit+0x128>)
 8003f2e:	f006 fc4b 	bl	800a7c8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2100      	movs	r1, #0
 8003f36:	2031      	movs	r0, #49	@ 0x31
 8003f38:	f003 f92b 	bl	8007192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003f3c:	2031      	movs	r0, #49	@ 0x31
 8003f3e:	f003 f942 	bl	80071c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003f42:	bf00      	nop
 8003f44:	3730      	adds	r7, #48	@ 0x30
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	52007000 	.word	0x52007000
 8003f50:	58024400 	.word	0x58024400
 8003f54:	58020800 	.word	0x58020800
 8003f58:	58020c00 	.word	0x58020c00
 8003f5c:	58020400 	.word	0x58020400

08003f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b0b8      	sub	sp, #224	@ 0xe0
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f78:	f107 0310 	add.w	r3, r7, #16
 8003f7c:	22b8      	movs	r2, #184	@ 0xb8
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f011 fc9a 	bl	80158ba <memset>
  if(hspi->Instance==SPI1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a26      	ldr	r2, [pc, #152]	@ (8004024 <HAL_SPI_MspInit+0xc4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d144      	bne.n	800401a <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003f90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f007 fd89 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003fb0:	f7ff f9d8 	bl	8003364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004028 <HAL_SPI_MspInit+0xc8>)
 8003fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fba:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <HAL_SPI_MspInit+0xc8>)
 8003fbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fc4:	4b18      	ldr	r3, [pc, #96]	@ (8004028 <HAL_SPI_MspInit+0xc8>)
 8003fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd2:	4b15      	ldr	r3, [pc, #84]	@ (8004028 <HAL_SPI_MspInit+0xc8>)
 8003fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fd8:	4a13      	ldr	r2, [pc, #76]	@ (8004028 <HAL_SPI_MspInit+0xc8>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fe2:	4b11      	ldr	r3, [pc, #68]	@ (8004028 <HAL_SPI_MspInit+0xc8>)
 8003fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ff0:	23e0      	movs	r3, #224	@ 0xe0
 8003ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004008:	2305      	movs	r3, #5
 800400a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004012:	4619      	mov	r1, r3
 8004014:	4805      	ldr	r0, [pc, #20]	@ (800402c <HAL_SPI_MspInit+0xcc>)
 8004016:	f006 fbd7 	bl	800a7c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800401a:	bf00      	nop
 800401c:	37e0      	adds	r7, #224	@ 0xe0
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40013000 	.word	0x40013000
 8004028:	58024400 	.word	0x58024400
 800402c:	58020000 	.word	0x58020000

08004030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a19      	ldr	r2, [pc, #100]	@ (80040a4 <HAL_TIM_Base_MspInit+0x74>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10f      	bne.n	8004062 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004042:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <HAL_TIM_Base_MspInit+0x78>)
 8004044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004048:	4a17      	ldr	r2, [pc, #92]	@ (80040a8 <HAL_TIM_Base_MspInit+0x78>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004052:	4b15      	ldr	r3, [pc, #84]	@ (80040a8 <HAL_TIM_Base_MspInit+0x78>)
 8004054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004060:	e01b      	b.n	800409a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a11      	ldr	r2, [pc, #68]	@ (80040ac <HAL_TIM_Base_MspInit+0x7c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d116      	bne.n	800409a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800406c:	4b0e      	ldr	r3, [pc, #56]	@ (80040a8 <HAL_TIM_Base_MspInit+0x78>)
 800406e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004072:	4a0d      	ldr	r2, [pc, #52]	@ (80040a8 <HAL_TIM_Base_MspInit+0x78>)
 8004074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004078:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800407c:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <HAL_TIM_Base_MspInit+0x78>)
 800407e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800408a:	2200      	movs	r2, #0
 800408c:	2100      	movs	r1, #0
 800408e:	2075      	movs	r0, #117	@ 0x75
 8004090:	f003 f87f 	bl	8007192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004094:	2075      	movs	r0, #117	@ 0x75
 8004096:	f003 f896 	bl	80071c6 <HAL_NVIC_EnableIRQ>
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40010000 	.word	0x40010000
 80040a8:	58024400 	.word	0x58024400
 80040ac:	40014400 	.word	0x40014400

080040b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b8:	f107 030c 	add.w	r3, r7, #12
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a13      	ldr	r2, [pc, #76]	@ (800411c <HAL_TIM_MspPostInit+0x6c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d11f      	bne.n	8004112 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040d2:	4b13      	ldr	r3, [pc, #76]	@ (8004120 <HAL_TIM_MspPostInit+0x70>)
 80040d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040d8:	4a11      	ldr	r2, [pc, #68]	@ (8004120 <HAL_TIM_MspPostInit+0x70>)
 80040da:	f043 0310 	orr.w	r3, r3, #16
 80040de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004120 <HAL_TIM_MspPostInit+0x70>)
 80040e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 80040f0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80040f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f6:	2302      	movs	r3, #2
 80040f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fe:	2300      	movs	r3, #0
 8004100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004102:	2301      	movs	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004106:	f107 030c 	add.w	r3, r7, #12
 800410a:	4619      	mov	r1, r3
 800410c:	4805      	ldr	r0, [pc, #20]	@ (8004124 <HAL_TIM_MspPostInit+0x74>)
 800410e:	f006 fb5b 	bl	800a7c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004112:	bf00      	nop
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000
 8004120:	58024400 	.word	0x58024400
 8004124:	58021000 	.word	0x58021000

08004128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b0ba      	sub	sp, #232	@ 0xe8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004130:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004140:	f107 0318 	add.w	r3, r7, #24
 8004144:	22b8      	movs	r2, #184	@ 0xb8
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f011 fbb6 	bl	80158ba <memset>
  if(huart->Instance==USART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a4d      	ldr	r2, [pc, #308]	@ (8004288 <HAL_UART_MspInit+0x160>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d147      	bne.n	80041e8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004158:	f04f 0201 	mov.w	r2, #1
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004164:	2300      	movs	r3, #0
 8004166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800416a:	f107 0318 	add.w	r3, r7, #24
 800416e:	4618      	mov	r0, r3
 8004170:	f007 fca4 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800417a:	f7ff f8f3 	bl	8003364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800417e:	4b43      	ldr	r3, [pc, #268]	@ (800428c <HAL_UART_MspInit+0x164>)
 8004180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004184:	4a41      	ldr	r2, [pc, #260]	@ (800428c <HAL_UART_MspInit+0x164>)
 8004186:	f043 0310 	orr.w	r3, r3, #16
 800418a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800418e:	4b3f      	ldr	r3, [pc, #252]	@ (800428c <HAL_UART_MspInit+0x164>)
 8004190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419c:	4b3b      	ldr	r3, [pc, #236]	@ (800428c <HAL_UART_MspInit+0x164>)
 800419e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041a2:	4a3a      	ldr	r2, [pc, #232]	@ (800428c <HAL_UART_MspInit+0x164>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041ac:	4b37      	ldr	r3, [pc, #220]	@ (800428c <HAL_UART_MspInit+0x164>)
 80041ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 80041ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80041be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c2:	2302      	movs	r3, #2
 80041c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041d4:	2307      	movs	r3, #7
 80041d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80041de:	4619      	mov	r1, r3
 80041e0:	482b      	ldr	r0, [pc, #172]	@ (8004290 <HAL_UART_MspInit+0x168>)
 80041e2:	f006 faf1 	bl	800a7c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041e6:	e04a      	b.n	800427e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a29      	ldr	r2, [pc, #164]	@ (8004294 <HAL_UART_MspInit+0x16c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d145      	bne.n	800427e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80041f2:	f04f 0202 	mov.w	r2, #2
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80041fe:	2300      	movs	r3, #0
 8004200:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004204:	f107 0318 	add.w	r3, r7, #24
 8004208:	4618      	mov	r0, r3
 800420a:	f007 fc57 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8004214:	f7ff f8a6 	bl	8003364 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004218:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <HAL_UART_MspInit+0x164>)
 800421a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800421e:	4a1b      	ldr	r2, [pc, #108]	@ (800428c <HAL_UART_MspInit+0x164>)
 8004220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004224:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004228:	4b18      	ldr	r3, [pc, #96]	@ (800428c <HAL_UART_MspInit+0x164>)
 800422a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004236:	4b15      	ldr	r3, [pc, #84]	@ (800428c <HAL_UART_MspInit+0x164>)
 8004238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800423c:	4a13      	ldr	r2, [pc, #76]	@ (800428c <HAL_UART_MspInit+0x164>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004246:	4b11      	ldr	r3, [pc, #68]	@ (800428c <HAL_UART_MspInit+0x164>)
 8004248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004254:	230c      	movs	r3, #12
 8004256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800426c:	2307      	movs	r3, #7
 800426e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004272:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004276:	4619      	mov	r1, r3
 8004278:	4805      	ldr	r0, [pc, #20]	@ (8004290 <HAL_UART_MspInit+0x168>)
 800427a:	f006 faa5 	bl	800a7c8 <HAL_GPIO_Init>
}
 800427e:	bf00      	nop
 8004280:	37e8      	adds	r7, #232	@ 0xe8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40011000 	.word	0x40011000
 800428c:	58024400 	.word	0x58024400
 8004290:	58020000 	.word	0x58020000
 8004294:	40004400 	.word	0x40004400

08004298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800429c:	bf00      	nop
 800429e:	e7fd      	b.n	800429c <NMI_Handler+0x4>

080042a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042a4:	bf00      	nop
 80042a6:	e7fd      	b.n	80042a4 <HardFault_Handler+0x4>

080042a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <MemManage_Handler+0x4>

080042b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <BusFault_Handler+0x4>

080042b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <UsageFault_Handler+0x4>

080042c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042ce:	b480      	push	{r7}
 80042d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042ee:	f000 fa27 	bl	8004740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042fc:	4802      	ldr	r0, [pc, #8]	@ (8004308 <DMA1_Stream0_IRQHandler+0x10>)
 80042fe:	f003 fd3f 	bl	8007d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	240002f4 	.word	0x240002f4

0800430c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004310:	4803      	ldr	r0, [pc, #12]	@ (8004320 <ADC_IRQHandler+0x14>)
 8004312:	f001 fa79 	bl	8005808 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004316:	4803      	ldr	r0, [pc, #12]	@ (8004324 <ADC_IRQHandler+0x18>)
 8004318:	f001 fa76 	bl	8005808 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}
 8004320:	24000214 	.word	0x24000214
 8004324:	24000284 	.word	0x24000284

08004328 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800432c:	4802      	ldr	r0, [pc, #8]	@ (8004338 <FDCAN1_IT0_IRQHandler+0x10>)
 800432e:	f005 fd49 	bl	8009dc4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	2400036c 	.word	0x2400036c

0800433c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004340:	4802      	ldr	r0, [pc, #8]	@ (800434c <FDCAN2_IT0_IRQHandler+0x10>)
 8004342:	f005 fd3f 	bl	8009dc4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	2400040c 	.word	0x2400040c

08004350 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004354:	4802      	ldr	r0, [pc, #8]	@ (8004360 <SDMMC1_IRQHandler+0x10>)
 8004356:	f00a fa07 	bl	800e768 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	2400054c 	.word	0x2400054c

08004364 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004368:	4802      	ldr	r0, [pc, #8]	@ (8004374 <TIM16_IRQHandler+0x10>)
 800436a:	f00c fed6 	bl	801111a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2400069c 	.word	0x2400069c

08004378 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 800437c:	4802      	ldr	r0, [pc, #8]	@ (8004388 <FDCAN3_IT0_IRQHandler+0x10>)
 800437e:	f005 fd21 	bl	8009dc4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	240004ac 	.word	0x240004ac

0800438c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  return 1;
 8004390:	2301      	movs	r3, #1
}
 8004392:	4618      	mov	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <_kill>:

int _kill(int pid, int sig)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043a6:	f011 fadb 	bl	8015960 <__errno>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2216      	movs	r2, #22
 80043ae:	601a      	str	r2, [r3, #0]
  return -1;
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_exit>:

void _exit (int status)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043c4:	f04f 31ff 	mov.w	r1, #4294967295
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff ffe7 	bl	800439c <_kill>
  while (1) {}    /* Make sure we hang here */
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <_exit+0x12>

080043d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e00a      	b.n	80043fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043e4:	f3af 8000 	nop.w
 80043e8:	4601      	mov	r1, r0
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	60ba      	str	r2, [r7, #8]
 80043f0:	b2ca      	uxtb	r2, r1
 80043f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	3301      	adds	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	429a      	cmp	r2, r3
 8004400:	dbf0      	blt.n	80043e4 <_read+0x12>
  }

  return len;
 8004402:	687b      	ldr	r3, [r7, #4]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e009      	b.n	8004432 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	60ba      	str	r2, [r7, #8]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3301      	adds	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	dbf1      	blt.n	800441e <_write+0x12>
  }
  return len;
 800443a:	687b      	ldr	r3, [r7, #4]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_close>:

int _close(int file)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800446c:	605a      	str	r2, [r3, #4]
  return 0;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <_isatty>:

int _isatty(int file)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004484:	2301      	movs	r3, #1
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044b4:	4a14      	ldr	r2, [pc, #80]	@ (8004508 <_sbrk+0x5c>)
 80044b6:	4b15      	ldr	r3, [pc, #84]	@ (800450c <_sbrk+0x60>)
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044c0:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <_sbrk+0x64>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044c8:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <_sbrk+0x64>)
 80044ca:	4a12      	ldr	r2, [pc, #72]	@ (8004514 <_sbrk+0x68>)
 80044cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ce:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <_sbrk+0x64>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4413      	add	r3, r2
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d207      	bcs.n	80044ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044dc:	f011 fa40 	bl	8015960 <__errno>
 80044e0:	4603      	mov	r3, r0
 80044e2:	220c      	movs	r2, #12
 80044e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044e6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ea:	e009      	b.n	8004500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044ec:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <_sbrk+0x64>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044f2:	4b07      	ldr	r3, [pc, #28]	@ (8004510 <_sbrk+0x64>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	4a05      	ldr	r2, [pc, #20]	@ (8004510 <_sbrk+0x64>)
 80044fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044fe:	68fb      	ldr	r3, [r7, #12]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	24050000 	.word	0x24050000
 800450c:	00000400 	.word	0x00000400
 8004510:	24000ad4 	.word	0x24000ad4
 8004514:	24000c48 	.word	0x24000c48

08004518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800451c:	4b32      	ldr	r3, [pc, #200]	@ (80045e8 <SystemInit+0xd0>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	4a31      	ldr	r2, [pc, #196]	@ (80045e8 <SystemInit+0xd0>)
 8004524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800452c:	4b2f      	ldr	r3, [pc, #188]	@ (80045ec <SystemInit+0xd4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	2b06      	cmp	r3, #6
 8004536:	d807      	bhi.n	8004548 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004538:	4b2c      	ldr	r3, [pc, #176]	@ (80045ec <SystemInit+0xd4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f023 030f 	bic.w	r3, r3, #15
 8004540:	4a2a      	ldr	r2, [pc, #168]	@ (80045ec <SystemInit+0xd4>)
 8004542:	f043 0307 	orr.w	r3, r3, #7
 8004546:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004548:	4b29      	ldr	r3, [pc, #164]	@ (80045f0 <SystemInit+0xd8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a28      	ldr	r2, [pc, #160]	@ (80045f0 <SystemInit+0xd8>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004554:	4b26      	ldr	r3, [pc, #152]	@ (80045f0 <SystemInit+0xd8>)
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800455a:	4b25      	ldr	r3, [pc, #148]	@ (80045f0 <SystemInit+0xd8>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4924      	ldr	r1, [pc, #144]	@ (80045f0 <SystemInit+0xd8>)
 8004560:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <SystemInit+0xdc>)
 8004562:	4013      	ands	r3, r2
 8004564:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004566:	4b21      	ldr	r3, [pc, #132]	@ (80045ec <SystemInit+0xd4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004572:	4b1e      	ldr	r3, [pc, #120]	@ (80045ec <SystemInit+0xd4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 030f 	bic.w	r3, r3, #15
 800457a:	4a1c      	ldr	r2, [pc, #112]	@ (80045ec <SystemInit+0xd4>)
 800457c:	f043 0307 	orr.w	r3, r3, #7
 8004580:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004582:	4b1b      	ldr	r3, [pc, #108]	@ (80045f0 <SystemInit+0xd8>)
 8004584:	2200      	movs	r2, #0
 8004586:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004588:	4b19      	ldr	r3, [pc, #100]	@ (80045f0 <SystemInit+0xd8>)
 800458a:	2200      	movs	r2, #0
 800458c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800458e:	4b18      	ldr	r3, [pc, #96]	@ (80045f0 <SystemInit+0xd8>)
 8004590:	2200      	movs	r2, #0
 8004592:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004594:	4b16      	ldr	r3, [pc, #88]	@ (80045f0 <SystemInit+0xd8>)
 8004596:	4a18      	ldr	r2, [pc, #96]	@ (80045f8 <SystemInit+0xe0>)
 8004598:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800459a:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <SystemInit+0xd8>)
 800459c:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <SystemInit+0xe4>)
 800459e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80045a0:	4b13      	ldr	r3, [pc, #76]	@ (80045f0 <SystemInit+0xd8>)
 80045a2:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <SystemInit+0xe8>)
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80045a6:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <SystemInit+0xd8>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80045ac:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <SystemInit+0xd8>)
 80045ae:	4a14      	ldr	r2, [pc, #80]	@ (8004600 <SystemInit+0xe8>)
 80045b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80045b2:	4b0f      	ldr	r3, [pc, #60]	@ (80045f0 <SystemInit+0xd8>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80045b8:	4b0d      	ldr	r3, [pc, #52]	@ (80045f0 <SystemInit+0xd8>)
 80045ba:	4a11      	ldr	r2, [pc, #68]	@ (8004600 <SystemInit+0xe8>)
 80045bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80045be:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <SystemInit+0xd8>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045c4:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <SystemInit+0xd8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a09      	ldr	r2, [pc, #36]	@ (80045f0 <SystemInit+0xd8>)
 80045ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80045d0:	4b07      	ldr	r3, [pc, #28]	@ (80045f0 <SystemInit+0xd8>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <SystemInit+0xec>)
 80045d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80045dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80045de:	bf00      	nop
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	e000ed00 	.word	0xe000ed00
 80045ec:	52002000 	.word	0x52002000
 80045f0:	58024400 	.word	0x58024400
 80045f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80045f8:	02020200 	.word	0x02020200
 80045fc:	01ff0000 	.word	0x01ff0000
 8004600:	01010280 	.word	0x01010280
 8004604:	52004000 	.word	0x52004000

08004608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800460c:	f7ff ff84 	bl	8004518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004610:	480c      	ldr	r0, [pc, #48]	@ (8004644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004612:	490d      	ldr	r1, [pc, #52]	@ (8004648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004614:	4a0d      	ldr	r2, [pc, #52]	@ (800464c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004618:	e002      	b.n	8004620 <LoopCopyDataInit>

0800461a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800461a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800461c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800461e:	3304      	adds	r3, #4

08004620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004624:	d3f9      	bcc.n	800461a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004626:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004628:	4c0a      	ldr	r4, [pc, #40]	@ (8004654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800462a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800462c:	e001      	b.n	8004632 <LoopFillZerobss>

0800462e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800462e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004630:	3204      	adds	r2, #4

08004632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004634:	d3fb      	bcc.n	800462e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004636:	f011 f999 	bl	801596c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800463a:	f7fc fa4d 	bl	8000ad8 <main>
  bx  lr
 800463e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004640:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004644:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004648:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 800464c:	08019a54 	.word	0x08019a54
  ldr r2, =_sbss
 8004650:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8004654:	24000c44 	.word	0x24000c44

08004658 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004658:	e7fe      	b.n	8004658 <ADC3_IRQHandler>
	...

0800465c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004662:	2003      	movs	r0, #3
 8004664:	f002 fd8a 	bl	800717c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004668:	f007 f852 	bl	800b710 <HAL_RCC_GetSysClockFreq>
 800466c:	4602      	mov	r2, r0
 800466e:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <HAL_Init+0x68>)
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	4913      	ldr	r1, [pc, #76]	@ (80046c8 <HAL_Init+0x6c>)
 800467a:	5ccb      	ldrb	r3, [r1, r3]
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
 8004684:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004686:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <HAL_Init+0x68>)
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	4a0e      	ldr	r2, [pc, #56]	@ (80046c8 <HAL_Init+0x6c>)
 8004690:	5cd3      	ldrb	r3, [r2, r3]
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
 800469c:	4a0b      	ldr	r2, [pc, #44]	@ (80046cc <HAL_Init+0x70>)
 800469e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046a0:	4a0b      	ldr	r2, [pc, #44]	@ (80046d0 <HAL_Init+0x74>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046a6:	200f      	movs	r0, #15
 80046a8:	f000 f814 	bl	80046d4 <HAL_InitTick>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e002      	b.n	80046bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046b6:	f7ff f921 	bl	80038fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	58024400 	.word	0x58024400
 80046c8:	080195b4 	.word	0x080195b4
 80046cc:	24000018 	.word	0x24000018
 80046d0:	24000014 	.word	0x24000014

080046d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80046dc:	4b15      	ldr	r3, [pc, #84]	@ (8004734 <HAL_InitTick+0x60>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e021      	b.n	800472c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80046e8:	4b13      	ldr	r3, [pc, #76]	@ (8004738 <HAL_InitTick+0x64>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b11      	ldr	r3, [pc, #68]	@ (8004734 <HAL_InitTick+0x60>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	4619      	mov	r1, r3
 80046f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	4618      	mov	r0, r3
 8004700:	f002 fd6f 	bl	80071e2 <HAL_SYSTICK_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e00e      	b.n	800472c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b0f      	cmp	r3, #15
 8004712:	d80a      	bhi.n	800472a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004714:	2200      	movs	r2, #0
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	f002 fd39 	bl	8007192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004720:	4a06      	ldr	r2, [pc, #24]	@ (800473c <HAL_InitTick+0x68>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e000      	b.n	800472c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	24000020 	.word	0x24000020
 8004738:	24000014 	.word	0x24000014
 800473c:	2400001c 	.word	0x2400001c

08004740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004744:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <HAL_IncTick+0x20>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <HAL_IncTick+0x24>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4413      	add	r3, r2
 8004750:	4a04      	ldr	r2, [pc, #16]	@ (8004764 <HAL_IncTick+0x24>)
 8004752:	6013      	str	r3, [r2, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	24000020 	.word	0x24000020
 8004764:	24000ad8 	.word	0x24000ad8

08004768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return uwTick;
 800476c:	4b03      	ldr	r3, [pc, #12]	@ (800477c <HAL_GetTick+0x14>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	24000ad8 	.word	0x24000ad8

08004780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004788:	f7ff ffee 	bl	8004768 <HAL_GetTick>
 800478c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d005      	beq.n	80047a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800479a:	4b0a      	ldr	r3, [pc, #40]	@ (80047c4 <HAL_Delay+0x44>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047a6:	bf00      	nop
 80047a8:	f7ff ffde 	bl	8004768 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d8f7      	bhi.n	80047a8 <HAL_Delay+0x28>
  {
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	24000020 	.word	0x24000020

080047c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	609a      	str	r2, [r3, #8]
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	609a      	str	r2, [r3, #8]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3360      	adds	r3, #96	@ 0x60
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a10      	ldr	r2, [pc, #64]	@ (8004890 <LL_ADC_SetOffset+0x60>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d10b      	bne.n	800486c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	4313      	orrs	r3, r2
 8004862:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800486a:	e00b      	b.n	8004884 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	430b      	orrs	r3, r1
 800487e:	431a      	orrs	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	58026000 	.word	0x58026000

08004894 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3360      	adds	r3, #96	@ 0x60
 80048a2:	461a      	mov	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	611a      	str	r2, [r3, #16]
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a0c      	ldr	r2, [pc, #48]	@ (8004934 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3360      	adds	r3, #96	@ 0x60
 800490c:	461a      	mov	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	431a      	orrs	r2, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	601a      	str	r2, [r3, #0]
  }
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	58026000 	.word	0x58026000

08004938 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a0c      	ldr	r2, [pc, #48]	@ (8004978 <LL_ADC_SetOffsetSaturation+0x40>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d10e      	bne.n	800496a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3360      	adds	r3, #96	@ 0x60
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	431a      	orrs	r2, r3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	58026000 	.word	0x58026000

0800497c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a0c      	ldr	r2, [pc, #48]	@ (80049bc <LL_ADC_SetOffsetSign+0x40>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d10e      	bne.n	80049ae <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3360      	adds	r3, #96	@ 0x60
 8004994:	461a      	mov	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	58026000 	.word	0x58026000

080049c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3360      	adds	r3, #96	@ 0x60
 80049d0:	461a      	mov	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004a10 <LL_ADC_SetOffsetState+0x50>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80049f2:	e007      	b.n	8004a04 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	601a      	str	r2, [r3, #0]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	58026000 	.word	0x58026000

08004a14 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b087      	sub	sp, #28
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3330      	adds	r3, #48	@ 0x30
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	4413      	add	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	211f      	movs	r1, #31
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0e9b      	lsrs	r3, r3, #26
 8004a72:	f003 011f 	and.w	r1, r3, #31
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	431a      	orrs	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f023 0203 	bic.w	r2, r3, #3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a08      	ldr	r2, [pc, #32]	@ (8004b08 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d107      	bne.n	8004afa <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f023 0203 	bic.w	r2, r3, #3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60da      	str	r2, [r3, #12]
  }
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	58026000 	.word	0x58026000

08004b0c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b18:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b087      	sub	sp, #28
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3314      	adds	r3, #20
 8004b42:	461a      	mov	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	0e5b      	lsrs	r3, r3, #25
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	4413      	add	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	0d1b      	lsrs	r3, r3, #20
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2107      	movs	r1, #7
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	0d1b      	lsrs	r3, r3, #20
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	fa01 f303 	lsl.w	r3, r1, r3
 8004b76:	431a      	orrs	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a1a      	ldr	r2, [pc, #104]	@ (8004c00 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d115      	bne.n	8004bc8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	401a      	ands	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f003 0318 	and.w	r3, r3, #24
 8004bb2:	4914      	ldr	r1, [pc, #80]	@ (8004c04 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004bb4:	40d9      	lsrs	r1, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	400b      	ands	r3, r1
 8004bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004bc6:	e014      	b.n	8004bf2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f003 0318 	and.w	r3, r3, #24
 8004bde:	4909      	ldr	r1, [pc, #36]	@ (8004c04 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004be0:	40d9      	lsrs	r1, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	400b      	ands	r3, r1
 8004be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bea:	431a      	orrs	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	58026000 	.word	0x58026000
 8004c04:	000fffff 	.word	0x000fffff

08004c08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 031f 	and.w	r3, r3, #31
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6093      	str	r3, [r2, #8]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	5fffffc0 	.word	0x5fffffc0

08004c64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c78:	d101      	bne.n	8004c7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <LL_ADC_EnableInternalRegulator+0x24>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	6fffffc0 	.word	0x6fffffc0

08004cb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cc8:	d101      	bne.n	8004cce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <LL_ADC_Enable+0x24>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	f043 0201 	orr.w	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	7fffffc0 	.word	0x7fffffc0

08004d04 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	4b05      	ldr	r3, [pc, #20]	@ (8004d28 <LL_ADC_Disable+0x24>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	f043 0202 	orr.w	r2, r3, #2
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	7fffffc0 	.word	0x7fffffc0

08004d2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <LL_ADC_IsEnabled+0x18>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <LL_ADC_IsEnabled+0x1a>
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d101      	bne.n	8004d6a <LL_ADC_IsDisableOngoing+0x18>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <LL_ADC_IsDisableOngoing+0x1a>
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <LL_ADC_REG_StartConversion+0x24>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	f043 0204 	orr.w	r2, r3, #4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	7fffffc0 	.word	0x7fffffc0

08004da0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <LL_ADC_REG_StopConversion+0x24>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	f043 0210 	orr.w	r2, r3, #16
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	7fffffc0 	.word	0x7fffffc0

08004dc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d101      	bne.n	8004de0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	4b05      	ldr	r3, [pc, #20]	@ (8004e14 <LL_ADC_INJ_StopConversion+0x24>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	f043 0220 	orr.w	r2, r3, #32
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	7fffffc0 	.word	0x7fffffc0

08004e18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d101      	bne.n	8004e30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b089      	sub	sp, #36	@ 0x24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e1ee      	b.n	8005238 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fe fd61 	bl	8003930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff feef 	bl	8004c64 <LL_ADC_IsDeepPowerDownEnabled>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fed5 	bl	8004c40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff ff0a 	bl	8004cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d114      	bne.n	8004ed0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff feee 	bl	8004c8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eb0:	4b8e      	ldr	r3, [pc, #568]	@ (80050ec <HAL_ADC_Init+0x2ac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	099b      	lsrs	r3, r3, #6
 8004eb6:	4a8e      	ldr	r2, [pc, #568]	@ (80050f0 <HAL_ADC_Init+0x2b0>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	099b      	lsrs	r3, r3, #6
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ec2:	e002      	b.n	8004eca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f9      	bne.n	8004ec4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff feed 	bl	8004cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10d      	bne.n	8004efc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee4:	f043 0210 	orr.w	r2, r3, #16
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef0:	f043 0201 	orr.w	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff ff61 	bl	8004dc8 <LL_ADC_REG_IsConversionOngoing>
 8004f06:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 8188 	bne.w	8005226 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f040 8184 	bne.w	8005226 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f22:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004f26:	f043 0202 	orr.w	r2, r3, #2
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fefa 	bl	8004d2c <LL_ADC_IsEnabled>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d136      	bne.n	8004fac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a6c      	ldr	r2, [pc, #432]	@ (80050f4 <HAL_ADC_Init+0x2b4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_ADC_Init+0x112>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80050f8 <HAL_ADC_Init+0x2b8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10e      	bne.n	8004f70 <HAL_ADC_Init+0x130>
 8004f52:	4868      	ldr	r0, [pc, #416]	@ (80050f4 <HAL_ADC_Init+0x2b4>)
 8004f54:	f7ff feea 	bl	8004d2c <LL_ADC_IsEnabled>
 8004f58:	4604      	mov	r4, r0
 8004f5a:	4867      	ldr	r0, [pc, #412]	@ (80050f8 <HAL_ADC_Init+0x2b8>)
 8004f5c:	f7ff fee6 	bl	8004d2c <LL_ADC_IsEnabled>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4323      	orrs	r3, r4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e008      	b.n	8004f82 <HAL_ADC_Init+0x142>
 8004f70:	4862      	ldr	r0, [pc, #392]	@ (80050fc <HAL_ADC_Init+0x2bc>)
 8004f72:	f7ff fedb 	bl	8004d2c <LL_ADC_IsEnabled>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d012      	beq.n	8004fac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a5a      	ldr	r2, [pc, #360]	@ (80050f4 <HAL_ADC_Init+0x2b4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_ADC_Init+0x15a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a58      	ldr	r2, [pc, #352]	@ (80050f8 <HAL_ADC_Init+0x2b8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_ADC_Init+0x15e>
 8004f9a:	4a59      	ldr	r2, [pc, #356]	@ (8005100 <HAL_ADC_Init+0x2c0>)
 8004f9c:	e000      	b.n	8004fa0 <HAL_ADC_Init+0x160>
 8004f9e:	4a59      	ldr	r2, [pc, #356]	@ (8005104 <HAL_ADC_Init+0x2c4>)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f7ff fc0e 	bl	80047c8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a52      	ldr	r2, [pc, #328]	@ (80050fc <HAL_ADC_Init+0x2bc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d129      	bne.n	800500a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	7e5b      	ldrb	r3, [r3, #25]
 8004fba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004fc0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004fc6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d013      	beq.n	8004ff8 <HAL_ADC_Init+0x1b8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b0c      	cmp	r3, #12
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_ADC_Init+0x1b4>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b1c      	cmp	r3, #28
 8004fde:	d007      	beq.n	8004ff0 <HAL_ADC_Init+0x1b0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b18      	cmp	r3, #24
 8004fe6:	d101      	bne.n	8004fec <HAL_ADC_Init+0x1ac>
 8004fe8:	2318      	movs	r3, #24
 8004fea:	e006      	b.n	8004ffa <HAL_ADC_Init+0x1ba>
 8004fec:	2300      	movs	r3, #0
 8004fee:	e004      	b.n	8004ffa <HAL_ADC_Init+0x1ba>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	e002      	b.n	8004ffa <HAL_ADC_Init+0x1ba>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	e000      	b.n	8004ffa <HAL_ADC_Init+0x1ba>
 8004ff8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004ffa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005002:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e00e      	b.n	8005028 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	7e5b      	ldrb	r3, [r3, #25]
 800500e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005014:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800501a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005022:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005024:	4313      	orrs	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d106      	bne.n	8005040 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	3b01      	subs	r3, #1
 8005038:	045b      	lsls	r3, r3, #17
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d009      	beq.n	800505c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a26      	ldr	r2, [pc, #152]	@ (80050fc <HAL_ADC_Init+0x2bc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d115      	bne.n	8005092 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	4b26      	ldr	r3, [pc, #152]	@ (8005108 <HAL_ADC_Init+0x2c8>)
 800506e:	4013      	ands	r3, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	430b      	orrs	r3, r1
 8005078:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	611a      	str	r2, [r3, #16]
 8005090:	e009      	b.n	80050a6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	4b1c      	ldr	r3, [pc, #112]	@ (800510c <HAL_ADC_Init+0x2cc>)
 800509a:	4013      	ands	r3, r2
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	69b9      	ldr	r1, [r7, #24]
 80050a2:	430b      	orrs	r3, r1
 80050a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fe8c 	bl	8004dc8 <LL_ADC_REG_IsConversionOngoing>
 80050b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff feae 	bl	8004e18 <LL_ADC_INJ_IsConversionOngoing>
 80050bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f040 808e 	bne.w	80051e2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f040 808a 	bne.w	80051e2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a0a      	ldr	r2, [pc, #40]	@ (80050fc <HAL_ADC_Init+0x2bc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d11b      	bne.n	8005110 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	7e1b      	ldrb	r3, [r3, #24]
 80050dc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050e4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e018      	b.n	800511e <HAL_ADC_Init+0x2de>
 80050ec:	24000014 	.word	0x24000014
 80050f0:	053e2d63 	.word	0x053e2d63
 80050f4:	40022000 	.word	0x40022000
 80050f8:	40022100 	.word	0x40022100
 80050fc:	58026000 	.word	0x58026000
 8005100:	40022300 	.word	0x40022300
 8005104:	58026300 	.word	0x58026300
 8005108:	fff04007 	.word	0xfff04007
 800510c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	7e1b      	ldrb	r3, [r3, #24]
 8005114:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	4b46      	ldr	r3, [pc, #280]	@ (8005240 <HAL_ADC_Init+0x400>)
 8005126:	4013      	ands	r3, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	430b      	orrs	r3, r1
 8005130:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005138:	2b01      	cmp	r3, #1
 800513a:	d137      	bne.n	80051ac <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005140:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a3f      	ldr	r2, [pc, #252]	@ (8005244 <HAL_ADC_Init+0x404>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d116      	bne.n	800517a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	4b3d      	ldr	r3, [pc, #244]	@ (8005248 <HAL_ADC_Init+0x408>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800515e:	4311      	orrs	r1, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005164:	4311      	orrs	r1, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800516a:	430a      	orrs	r2, r1
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	611a      	str	r2, [r3, #16]
 8005178:	e020      	b.n	80051bc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	4b32      	ldr	r3, [pc, #200]	@ (800524c <HAL_ADC_Init+0x40c>)
 8005182:	4013      	ands	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005188:	3a01      	subs	r2, #1
 800518a:	0411      	lsls	r1, r2, #16
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005190:	4311      	orrs	r1, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005196:	4311      	orrs	r1, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800519c:	430a      	orrs	r2, r1
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	611a      	str	r2, [r3, #16]
 80051aa:	e007      	b.n	80051bc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005244 <HAL_ADC_Init+0x404>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d002      	beq.n	80051e2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 fcd5 	bl	8006b8c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d10c      	bne.n	8005204 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f0:	f023 010f 	bic.w	r1, r3, #15
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	1e5a      	subs	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	631a      	str	r2, [r3, #48]	@ 0x30
 8005202:	e007      	b.n	8005214 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 020f 	bic.w	r2, r2, #15
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005218:	f023 0303 	bic.w	r3, r3, #3
 800521c:	f043 0201 	orr.w	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	661a      	str	r2, [r3, #96]	@ 0x60
 8005224:	e007      	b.n	8005236 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800522a:	f043 0210 	orr.w	r2, r3, #16
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005236:	7ffb      	ldrb	r3, [r7, #31]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3724      	adds	r7, #36	@ 0x24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd90      	pop	{r4, r7, pc}
 8005240:	ffffbffc 	.word	0xffffbffc
 8005244:	58026000 	.word	0x58026000
 8005248:	fc00f81f 	.word	0xfc00f81f
 800524c:	fc00f81e 	.word	0xfc00f81e

08005250 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a5c      	ldr	r2, [pc, #368]	@ (80053d0 <HAL_ADC_Start+0x180>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_ADC_Start+0x1c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a5b      	ldr	r2, [pc, #364]	@ (80053d4 <HAL_ADC_Start+0x184>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d101      	bne.n	8005270 <HAL_ADC_Start+0x20>
 800526c:	4b5a      	ldr	r3, [pc, #360]	@ (80053d8 <HAL_ADC_Start+0x188>)
 800526e:	e000      	b.n	8005272 <HAL_ADC_Start+0x22>
 8005270:	4b5a      	ldr	r3, [pc, #360]	@ (80053dc <HAL_ADC_Start+0x18c>)
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fcc8 	bl	8004c08 <LL_ADC_GetMultimode>
 8005278:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fda2 	bl	8004dc8 <LL_ADC_REG_IsConversionOngoing>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	f040 809a 	bne.w	80053c0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_ADC_Start+0x4a>
 8005296:	2302      	movs	r3, #2
 8005298:	e095      	b.n	80053c6 <HAL_ADC_Start+0x176>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 faf4 	bl	8006890 <ADC_Enable>
 80052a8:	4603      	mov	r3, r0
 80052aa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80052ac:	7dfb      	ldrb	r3, [r7, #23]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 8081 	bne.w	80053b6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052b8:	4b49      	ldr	r3, [pc, #292]	@ (80053e0 <HAL_ADC_Start+0x190>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a42      	ldr	r2, [pc, #264]	@ (80053d4 <HAL_ADC_Start+0x184>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d002      	beq.n	80052d4 <HAL_ADC_Start+0x84>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	e000      	b.n	80052d6 <HAL_ADC_Start+0x86>
 80052d4:	4b3e      	ldr	r3, [pc, #248]	@ (80053d0 <HAL_ADC_Start+0x180>)
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	4293      	cmp	r3, r2
 80052dc:	d002      	beq.n	80052e4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d105      	bne.n	80052f0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fc:	d106      	bne.n	800530c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005302:	f023 0206 	bic.w	r2, r3, #6
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	665a      	str	r2, [r3, #100]	@ 0x64
 800530a:	e002      	b.n	8005312 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	221c      	movs	r2, #28
 8005318:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2b      	ldr	r2, [pc, #172]	@ (80053d4 <HAL_ADC_Start+0x184>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d002      	beq.n	8005332 <HAL_ADC_Start+0xe2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	e000      	b.n	8005334 <HAL_ADC_Start+0xe4>
 8005332:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <HAL_ADC_Start+0x180>)
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	4293      	cmp	r3, r2
 800533a:	d008      	beq.n	800534e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b05      	cmp	r3, #5
 8005346:	d002      	beq.n	800534e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b09      	cmp	r3, #9
 800534c:	d114      	bne.n	8005378 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005360:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005364:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fd01 	bl	8004d78 <LL_ADC_REG_StartConversion>
 8005376:	e025      	b.n	80053c4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a12      	ldr	r2, [pc, #72]	@ (80053d4 <HAL_ADC_Start+0x184>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d002      	beq.n	8005394 <HAL_ADC_Start+0x144>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	e000      	b.n	8005396 <HAL_ADC_Start+0x146>
 8005394:	4b0e      	ldr	r3, [pc, #56]	@ (80053d0 <HAL_ADC_Start+0x180>)
 8005396:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00f      	beq.n	80053c4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80053ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80053b4:	e006      	b.n	80053c4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80053be:	e001      	b.n	80053c4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80053c0:	2302      	movs	r3, #2
 80053c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40022000 	.word	0x40022000
 80053d4:	40022100 	.word	0x40022100
 80053d8:	40022300 	.word	0x40022300
 80053dc:	58026300 	.word	0x58026300
 80053e0:	fffff0fe 	.word	0xfffff0fe

080053e4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_ADC_Stop+0x16>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e021      	b.n	800543e <HAL_ADC_Stop+0x5a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005402:	2103      	movs	r1, #3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 f987 	bl	8006718 <ADC_ConversionStop>
 800540a:	4603      	mov	r3, r0
 800540c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10f      	bne.n	8005434 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 fac5 	bl	80069a4 <ADC_Disable>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005428:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <HAL_ADC_Stop+0x64>)
 800542a:	4013      	ands	r3, r2
 800542c:	f043 0201 	orr.w	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	ffffeefe 	.word	0xffffeefe

0800544c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a72      	ldr	r2, [pc, #456]	@ (8005624 <HAL_ADC_PollForConversion+0x1d8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_ADC_PollForConversion+0x1e>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a70      	ldr	r2, [pc, #448]	@ (8005628 <HAL_ADC_PollForConversion+0x1dc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d101      	bne.n	800546e <HAL_ADC_PollForConversion+0x22>
 800546a:	4b70      	ldr	r3, [pc, #448]	@ (800562c <HAL_ADC_PollForConversion+0x1e0>)
 800546c:	e000      	b.n	8005470 <HAL_ADC_PollForConversion+0x24>
 800546e:	4b70      	ldr	r3, [pc, #448]	@ (8005630 <HAL_ADC_PollForConversion+0x1e4>)
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff fbc9 	bl	8004c08 <LL_ADC_GetMultimode>
 8005476:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d102      	bne.n	8005486 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005480:	2308      	movs	r3, #8
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	e037      	b.n	80054f6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b05      	cmp	r3, #5
 8005490:	d002      	beq.n	8005498 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b09      	cmp	r3, #9
 8005496:	d111      	bne.n	80054bc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0b1      	b.n	800561a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80054b6:	2304      	movs	r3, #4
 80054b8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80054ba:	e01c      	b.n	80054f6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a58      	ldr	r2, [pc, #352]	@ (8005624 <HAL_ADC_PollForConversion+0x1d8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_ADC_PollForConversion+0x84>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a57      	ldr	r2, [pc, #348]	@ (8005628 <HAL_ADC_PollForConversion+0x1dc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <HAL_ADC_PollForConversion+0x88>
 80054d0:	4b56      	ldr	r3, [pc, #344]	@ (800562c <HAL_ADC_PollForConversion+0x1e0>)
 80054d2:	e000      	b.n	80054d6 <HAL_ADC_PollForConversion+0x8a>
 80054d4:	4b56      	ldr	r3, [pc, #344]	@ (8005630 <HAL_ADC_PollForConversion+0x1e4>)
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff fba4 	bl	8004c24 <LL_ADC_GetMultiDMATransfer>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e093      	b.n	800561a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80054f2:	2304      	movs	r3, #4
 80054f4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80054f6:	f7ff f937 	bl	8004768 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80054fc:	e021      	b.n	8005542 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d01d      	beq.n	8005542 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005506:	f7ff f92f 	bl	8004768 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d302      	bcc.n	800551c <HAL_ADC_PollForConversion+0xd0>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d112      	bne.n	8005542 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4013      	ands	r3, r2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800552e:	f043 0204 	orr.w	r2, r3, #4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e06b      	b.n	800561a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4013      	ands	r3, r2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0d6      	beq.n	80054fe <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005554:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fa57 	bl	8004a14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01c      	beq.n	80055a6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7e5b      	ldrb	r3, [r3, #25]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d118      	bne.n	80055a6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b08      	cmp	r3, #8
 8005580:	d111      	bne.n	80055a6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005586:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800559e:	f043 0201 	orr.w	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005628 <HAL_ADC_PollForConversion+0x1dc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d002      	beq.n	80055b6 <HAL_ADC_PollForConversion+0x16a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	e000      	b.n	80055b8 <HAL_ADC_PollForConversion+0x16c>
 80055b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005624 <HAL_ADC_PollForConversion+0x1d8>)
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	4293      	cmp	r3, r2
 80055be:	d008      	beq.n	80055d2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	d002      	beq.n	80055d2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b09      	cmp	r3, #9
 80055d0:	d104      	bne.n	80055dc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	e00c      	b.n	80055f6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a11      	ldr	r2, [pc, #68]	@ (8005628 <HAL_ADC_PollForConversion+0x1dc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d002      	beq.n	80055ec <HAL_ADC_PollForConversion+0x1a0>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	e000      	b.n	80055ee <HAL_ADC_PollForConversion+0x1a2>
 80055ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005624 <HAL_ADC_PollForConversion+0x1d8>)
 80055ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d104      	bne.n	8005606 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2208      	movs	r2, #8
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e008      	b.n	8005618 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d103      	bne.n	8005618 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	220c      	movs	r2, #12
 8005616:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40022000 	.word	0x40022000
 8005628:	40022100 	.word	0x40022100
 800562c:	40022300 	.word	0x40022300
 8005630:	58026300 	.word	0x58026300

08005634 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a60      	ldr	r2, [pc, #384]	@ (80057c8 <HAL_ADC_Start_DMA+0x194>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_ADC_Start_DMA+0x20>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a5f      	ldr	r2, [pc, #380]	@ (80057cc <HAL_ADC_Start_DMA+0x198>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <HAL_ADC_Start_DMA+0x24>
 8005654:	4b5e      	ldr	r3, [pc, #376]	@ (80057d0 <HAL_ADC_Start_DMA+0x19c>)
 8005656:	e000      	b.n	800565a <HAL_ADC_Start_DMA+0x26>
 8005658:	4b5e      	ldr	r3, [pc, #376]	@ (80057d4 <HAL_ADC_Start_DMA+0x1a0>)
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fad4 	bl	8004c08 <LL_ADC_GetMultimode>
 8005660:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff fbae 	bl	8004dc8 <LL_ADC_REG_IsConversionOngoing>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 80a2 	bne.w	80057b8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_ADC_Start_DMA+0x4e>
 800567e:	2302      	movs	r3, #2
 8005680:	e09d      	b.n	80057be <HAL_ADC_Start_DMA+0x18a>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d003      	beq.n	800569e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b09      	cmp	r3, #9
 800569a:	f040 8086 	bne.w	80057aa <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f001 f8f6 	bl	8006890 <ADC_Enable>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d178      	bne.n	80057a0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80056b2:	4b49      	ldr	r3, [pc, #292]	@ (80057d8 <HAL_ADC_Start_DMA+0x1a4>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a42      	ldr	r2, [pc, #264]	@ (80057cc <HAL_ADC_Start_DMA+0x198>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d002      	beq.n	80056ce <HAL_ADC_Start_DMA+0x9a>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	e000      	b.n	80056d0 <HAL_ADC_Start_DMA+0x9c>
 80056ce:	4b3e      	ldr	r3, [pc, #248]	@ (80057c8 <HAL_ADC_Start_DMA+0x194>)
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d002      	beq.n	80056de <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d105      	bne.n	80056ea <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d006      	beq.n	8005704 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056fa:	f023 0206 	bic.w	r2, r3, #6
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	665a      	str	r2, [r3, #100]	@ 0x64
 8005702:	e002      	b.n	800570a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	4a33      	ldr	r2, [pc, #204]	@ (80057dc <HAL_ADC_Start_DMA+0x1a8>)
 8005710:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	4a32      	ldr	r2, [pc, #200]	@ (80057e0 <HAL_ADC_Start_DMA+0x1ac>)
 8005718:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571e:	4a31      	ldr	r2, [pc, #196]	@ (80057e4 <HAL_ADC_Start_DMA+0x1b0>)
 8005720:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	221c      	movs	r2, #28
 8005728:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0210 	orr.w	r2, r2, #16
 8005740:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a28      	ldr	r2, [pc, #160]	@ (80057e8 <HAL_ADC_Start_DMA+0x1b4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d10f      	bne.n	800576c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f7ff f9bc 	bl	8004ad8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff f9a7 	bl	8004ab8 <LL_ADC_EnableDMAReq>
 800576a:	e007      	b.n	800577c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f7ff f98b 	bl	8004a92 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3340      	adds	r3, #64	@ 0x40
 8005786:	4619      	mov	r1, r3
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f002 f88e 	bl	80078ac <HAL_DMA_Start_IT>
 8005790:	4603      	mov	r3, r0
 8005792:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff faed 	bl	8004d78 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800579e:	e00d      	b.n	80057bc <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80057a8:	e008      	b.n	80057bc <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80057b6:	e001      	b.n	80057bc <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80057b8:	2302      	movs	r3, #2
 80057ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40022000 	.word	0x40022000
 80057cc:	40022100 	.word	0x40022100
 80057d0:	40022300 	.word	0x40022300
 80057d4:	58026300 	.word	0x58026300
 80057d8:	fffff0fe 	.word	0xfffff0fe
 80057dc:	08006a63 	.word	0x08006a63
 80057e0:	08006b3b 	.word	0x08006b3b
 80057e4:	08006b57 	.word	0x08006b57
 80057e8:	58026000 	.word	0x58026000

080057ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005810:	2300      	movs	r3, #0
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a87      	ldr	r2, [pc, #540]	@ (8005a48 <HAL_ADC_IRQHandler+0x240>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_ADC_IRQHandler+0x30>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a86      	ldr	r2, [pc, #536]	@ (8005a4c <HAL_ADC_IRQHandler+0x244>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d101      	bne.n	800583c <HAL_ADC_IRQHandler+0x34>
 8005838:	4b85      	ldr	r3, [pc, #532]	@ (8005a50 <HAL_ADC_IRQHandler+0x248>)
 800583a:	e000      	b.n	800583e <HAL_ADC_IRQHandler+0x36>
 800583c:	4b85      	ldr	r3, [pc, #532]	@ (8005a54 <HAL_ADC_IRQHandler+0x24c>)
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f9e2 	bl	8004c08 <LL_ADC_GetMultimode>
 8005844:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d017      	beq.n	8005880 <HAL_ADC_IRQHandler+0x78>
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d012      	beq.n	8005880 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b00      	cmp	r3, #0
 8005864:	d105      	bne.n	8005872 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 fac6 	bl	8006e04 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2202      	movs	r2, #2
 800587e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <HAL_ADC_IRQHandler+0x8c>
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 8083 	beq.w	80059a6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d07d      	beq.n	80059a6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d105      	bne.n	80058c2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff f8a4 	bl	8004a14 <LL_ADC_REG_IsTriggerSourceSWStart>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d062      	beq.n	8005998 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a5d      	ldr	r2, [pc, #372]	@ (8005a4c <HAL_ADC_IRQHandler+0x244>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d002      	beq.n	80058e2 <HAL_ADC_IRQHandler+0xda>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	e000      	b.n	80058e4 <HAL_ADC_IRQHandler+0xdc>
 80058e2:	4b59      	ldr	r3, [pc, #356]	@ (8005a48 <HAL_ADC_IRQHandler+0x240>)
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d008      	beq.n	80058fe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b05      	cmp	r3, #5
 80058f6:	d002      	beq.n	80058fe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2b09      	cmp	r3, #9
 80058fc:	d104      	bne.n	8005908 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	623b      	str	r3, [r7, #32]
 8005906:	e00c      	b.n	8005922 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a4f      	ldr	r2, [pc, #316]	@ (8005a4c <HAL_ADC_IRQHandler+0x244>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d002      	beq.n	8005918 <HAL_ADC_IRQHandler+0x110>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	e000      	b.n	800591a <HAL_ADC_IRQHandler+0x112>
 8005918:	4b4b      	ldr	r3, [pc, #300]	@ (8005a48 <HAL_ADC_IRQHandler+0x240>)
 800591a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d135      	bne.n	8005998 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b08      	cmp	r3, #8
 8005938:	d12e      	bne.n	8005998 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fa42 	bl	8004dc8 <LL_ADC_REG_IsConversionOngoing>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11a      	bne.n	8005980 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 020c 	bic.w	r2, r2, #12
 8005958:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800595e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d112      	bne.n	8005998 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	661a      	str	r2, [r3, #96]	@ 0x60
 800597e:	e00b      	b.n	8005998 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005984:	f043 0210 	orr.w	r2, r3, #16
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005990:	f043 0201 	orr.w	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fc fc11 	bl	80021c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	220c      	movs	r2, #12
 80059a4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <HAL_ADC_IRQHandler+0x1b2>
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80a0 	beq.w	8005b06 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 809a 	beq.w	8005b06 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff f88c 	bl	8004b0c <LL_ADC_INJ_IsTriggerSourceSWStart>
 80059f4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff f80a 	bl	8004a14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a00:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a11      	ldr	r2, [pc, #68]	@ (8005a4c <HAL_ADC_IRQHandler+0x244>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d002      	beq.n	8005a12 <HAL_ADC_IRQHandler+0x20a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	e000      	b.n	8005a14 <HAL_ADC_IRQHandler+0x20c>
 8005a12:	4b0d      	ldr	r3, [pc, #52]	@ (8005a48 <HAL_ADC_IRQHandler+0x240>)
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d008      	beq.n	8005a2e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b06      	cmp	r3, #6
 8005a26:	d002      	beq.n	8005a2e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b07      	cmp	r3, #7
 8005a2c:	d104      	bne.n	8005a38 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	e014      	b.n	8005a62 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a03      	ldr	r2, [pc, #12]	@ (8005a4c <HAL_ADC_IRQHandler+0x244>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00a      	beq.n	8005a58 <HAL_ADC_IRQHandler+0x250>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	e008      	b.n	8005a5a <HAL_ADC_IRQHandler+0x252>
 8005a48:	40022000 	.word	0x40022000
 8005a4c:	40022100 	.word	0x40022100
 8005a50:	40022300 	.word	0x40022300
 8005a54:	58026300 	.word	0x58026300
 8005a58:	4b84      	ldr	r3, [pc, #528]	@ (8005c6c <HAL_ADC_IRQHandler+0x464>)
 8005a5a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d047      	beq.n	8005af8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_ADC_IRQHandler+0x27a>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d03f      	beq.n	8005af8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d13a      	bne.n	8005af8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8c:	2b40      	cmp	r3, #64	@ 0x40
 8005a8e:	d133      	bne.n	8005af8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d12e      	bne.n	8005af8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff f9ba 	bl	8004e18 <LL_ADC_INJ_IsConversionOngoing>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11a      	bne.n	8005ae0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ab8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005abe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d112      	bne.n	8005af8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad6:	f043 0201 	orr.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	661a      	str	r2, [r3, #96]	@ 0x60
 8005ade:	e00b      	b.n	8005af8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae4:	f043 0210 	orr.w	r2, r3, #16
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af0:	f043 0201 	orr.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f001 f95b 	bl	8006db4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2260      	movs	r2, #96	@ 0x60
 8005b04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d011      	beq.n	8005b34 <HAL_ADC_IRQHandler+0x32c>
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8b2 	bl	8005c90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2280      	movs	r2, #128	@ 0x80
 8005b32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <HAL_ADC_IRQHandler+0x35c>
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00d      	beq.n	8005b64 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 f941 	bl	8006ddc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d012      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x38c>
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00d      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 f933 	bl	8006df0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f003 0310 	and.w	r3, r3, #16
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d043      	beq.n	8005c26 <HAL_ADC_IRQHandler+0x41e>
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d03e      	beq.n	8005c26 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb4:	e021      	b.n	8005bfa <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d015      	beq.n	8005be8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c6c <HAL_ADC_IRQHandler+0x464>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_ADC_IRQHandler+0x3c8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a29      	ldr	r2, [pc, #164]	@ (8005c70 <HAL_ADC_IRQHandler+0x468>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d101      	bne.n	8005bd4 <HAL_ADC_IRQHandler+0x3cc>
 8005bd0:	4b28      	ldr	r3, [pc, #160]	@ (8005c74 <HAL_ADC_IRQHandler+0x46c>)
 8005bd2:	e000      	b.n	8005bd6 <HAL_ADC_IRQHandler+0x3ce>
 8005bd4:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <HAL_ADC_IRQHandler+0x470>)
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff f824 	bl	8004c24 <LL_ADC_GetMultiDMATransfer>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005be2:	2301      	movs	r3, #1
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be6:	e008      	b.n	8005bfa <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d10e      	bne.n	8005c1e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c04:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c10:	f043 0202 	orr.w	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f843 	bl	8005ca4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2210      	movs	r2, #16
 8005c24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d018      	beq.n	8005c62 <HAL_ADC_IRQHandler+0x45a>
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d013      	beq.n	8005c62 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c3e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c4a:	f043 0208 	orr.w	r2, r3, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c5a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f8b3 	bl	8006dc8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005c62:	bf00      	nop
 8005c64:	3728      	adds	r7, #40	@ 0x28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40022000 	.word	0x40022000
 8005c70:	40022100 	.word	0x40022100
 8005c74:	40022300 	.word	0x40022300
 8005c78:	58026300 	.word	0x58026300

08005c7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005cb8:	b590      	push	{r4, r7, lr}
 8005cba:	b0b9      	sub	sp, #228	@ 0xe4
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cd2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4aab      	ldr	r2, [pc, #684]	@ (8005f88 <HAL_ADC_ConfigChannel+0x2d0>)
 8005cda:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d102      	bne.n	8005cec <HAL_ADC_ConfigChannel+0x34>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	f000 bcfe 	b.w	80066e8 <HAL_ADC_ConfigChannel+0xa30>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff f865 	bl	8004dc8 <LL_ADC_REG_IsConversionOngoing>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f040 84e2 	bne.w	80066ca <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	db38      	blt.n	8005d80 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a9e      	ldr	r2, [pc, #632]	@ (8005f8c <HAL_ADC_ConfigChannel+0x2d4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d033      	beq.n	8005d80 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d108      	bne.n	8005d36 <HAL_ADC_ConfigChannel+0x7e>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	0e9b      	lsrs	r3, r3, #26
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2201      	movs	r2, #1
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	e01d      	b.n	8005d72 <HAL_ADC_ConfigChannel+0xba>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d42:	fa93 f3a3 	rbit	r3, r3
 8005d46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005d52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8005d5a:	2320      	movs	r3, #32
 8005d5c:	e004      	b.n	8005d68 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8005d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d62:	fab3 f383 	clz	r3, r3
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	69d1      	ldr	r1, [r2, #28]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	6859      	ldr	r1, [r3, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f7fe fe54 	bl	8004a3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff f816 	bl	8004dc8 <LL_ADC_REG_IsConversionOngoing>
 8005d9c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff f837 	bl	8004e18 <LL_ADC_INJ_IsConversionOngoing>
 8005daa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 8270 	bne.w	8006298 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005db8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f040 826b 	bne.w	8006298 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6819      	ldr	r1, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f7fe feaf 	bl	8004b32 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a6c      	ldr	r2, [pc, #432]	@ (8005f8c <HAL_ADC_ConfigChannel+0x2d4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d10d      	bne.n	8005dfa <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005df8:	e032      	b.n	8005e60 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005dfa:	4b65      	ldr	r3, [pc, #404]	@ (8005f90 <HAL_ADC_ConfigChannel+0x2d8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e06:	d10b      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x168>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	695a      	ldr	r2, [r3, #20]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	e01d      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x1a4>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <HAL_ADC_ConfigChannel+0x18e>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695a      	ldr	r2, [r3, #20]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	089b      	lsrs	r3, r3, #2
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	e00a      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x1a4>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	089b      	lsrs	r3, r3, #2
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d048      	beq.n	8005efa <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	6919      	ldr	r1, [r3, #16]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e78:	f7fe fcda 	bl	8004830 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a42      	ldr	r2, [pc, #264]	@ (8005f8c <HAL_ADC_ConfigChannel+0x2d4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d119      	bne.n	8005eba <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6919      	ldr	r1, [r3, #16]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	461a      	mov	r2, r3
 8005e94:	f7fe fd72 	bl	800497c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6919      	ldr	r1, [r3, #16]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d102      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x1f8>
 8005eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005eae:	e000      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1fa>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f7fe fd40 	bl	8004938 <LL_ADC_SetOffsetSaturation>
 8005eb8:	e1ee      	b.n	8006298 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6919      	ldr	r1, [r3, #16]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d102      	bne.n	8005ed2 <HAL_ADC_ConfigChannel+0x21a>
 8005ecc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ed0:	e000      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x21c>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f7fe fd0d 	bl	80048f4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6919      	ldr	r1, [r3, #16]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	7e1b      	ldrb	r3, [r3, #24]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d102      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x238>
 8005eea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005eee:	e000      	b.n	8005ef2 <HAL_ADC_ConfigChannel+0x23a>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f7fe fce4 	bl	80048c0 <LL_ADC_SetDataRightShift>
 8005ef8:	e1ce      	b.n	8006298 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a23      	ldr	r2, [pc, #140]	@ (8005f8c <HAL_ADC_ConfigChannel+0x2d4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	f040 8181 	bne.w	8006208 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe fcc1 	bl	8004894 <LL_ADC_GetOffsetChannel>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <HAL_ADC_ConfigChannel+0x27a>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fcb6 	bl	8004894 <LL_ADC_GetOffsetChannel>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	0e9b      	lsrs	r3, r3, #26
 8005f2c:	f003 021f 	and.w	r2, r3, #31
 8005f30:	e01e      	b.n	8005f70 <HAL_ADC_ConfigChannel+0x2b8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2100      	movs	r1, #0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe fcab 	bl	8004894 <LL_ADC_GetOffsetChannel>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f48:	fa93 f3a3 	rbit	r3, r3
 8005f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8005f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8005f60:	2320      	movs	r3, #32
 8005f62:	e004      	b.n	8005f6e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8005f64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f68:	fab3 f383 	clz	r3, r3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10b      	bne.n	8005f94 <HAL_ADC_ConfigChannel+0x2dc>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	0e9b      	lsrs	r3, r3, #26
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	e01e      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x30e>
 8005f88:	47ff0000 	.word	0x47ff0000
 8005f8c:	58026000 	.word	0x58026000
 8005f90:	5c001000 	.word	0x5c001000
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fa0:	fa93 f3a3 	rbit	r3, r3
 8005fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005fa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005fb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005fb8:	2320      	movs	r3, #32
 8005fba:	e004      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8005fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fc0:	fab3 f383 	clz	r3, r3
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d106      	bne.n	8005fd8 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fcf4 	bl	80049c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2101      	movs	r1, #1
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fc58 	bl	8004894 <LL_ADC_GetOffsetChannel>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <HAL_ADC_ConfigChannel+0x34c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe fc4d 	bl	8004894 <LL_ADC_GetOffsetChannel>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	0e9b      	lsrs	r3, r3, #26
 8005ffe:	f003 021f 	and.w	r2, r3, #31
 8006002:	e01e      	b.n	8006042 <HAL_ADC_ConfigChannel+0x38a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2101      	movs	r1, #1
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fc42 	bl	8004894 <LL_ADC_GetOffsetChannel>
 8006010:	4603      	mov	r3, r0
 8006012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800601a:	fa93 f3a3 	rbit	r3, r3
 800601e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006022:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800602a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8006032:	2320      	movs	r3, #32
 8006034:	e004      	b.n	8006040 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8006036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800603a:	fab3 f383 	clz	r3, r3
 800603e:	b2db      	uxtb	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <HAL_ADC_ConfigChannel+0x3a2>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	0e9b      	lsrs	r3, r3, #26
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	e018      	b.n	800608c <HAL_ADC_ConfigChannel+0x3d4>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006062:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006066:	fa93 f3a3 	rbit	r3, r3
 800606a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800606e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006072:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006076:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800607e:	2320      	movs	r3, #32
 8006080:	e004      	b.n	800608c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8006082:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006086:	fab3 f383 	clz	r3, r3
 800608a:	b2db      	uxtb	r3, r3
 800608c:	429a      	cmp	r2, r3
 800608e:	d106      	bne.n	800609e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2200      	movs	r2, #0
 8006096:	2101      	movs	r1, #1
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fc91 	bl	80049c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2102      	movs	r1, #2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe fbf5 	bl	8004894 <LL_ADC_GetOffsetChannel>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x412>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2102      	movs	r1, #2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fbea 	bl	8004894 <LL_ADC_GetOffsetChannel>
 80060c0:	4603      	mov	r3, r0
 80060c2:	0e9b      	lsrs	r3, r3, #26
 80060c4:	f003 021f 	and.w	r2, r3, #31
 80060c8:	e01e      	b.n	8006108 <HAL_ADC_ConfigChannel+0x450>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe fbdf 	bl	8004894 <LL_ADC_GetOffsetChannel>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060e0:	fa93 f3a3 	rbit	r3, r3
 80060e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80060e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80060f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80060f8:	2320      	movs	r3, #32
 80060fa:	e004      	b.n	8006106 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80060fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006100:	fab3 f383 	clz	r3, r3
 8006104:	b2db      	uxtb	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006110:	2b00      	cmp	r3, #0
 8006112:	d105      	bne.n	8006120 <HAL_ADC_ConfigChannel+0x468>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	0e9b      	lsrs	r3, r3, #26
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	e014      	b.n	800614a <HAL_ADC_ConfigChannel+0x492>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006126:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006128:	fa93 f3a3 	rbit	r3, r3
 800612c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800612e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006130:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006134:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800613c:	2320      	movs	r3, #32
 800613e:	e004      	b.n	800614a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8006140:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006144:	fab3 f383 	clz	r3, r3
 8006148:	b2db      	uxtb	r3, r3
 800614a:	429a      	cmp	r2, r3
 800614c:	d106      	bne.n	800615c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2200      	movs	r2, #0
 8006154:	2102      	movs	r1, #2
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fc32 	bl	80049c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2103      	movs	r1, #3
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fb96 	bl	8004894 <LL_ADC_GetOffsetChannel>
 8006168:	4603      	mov	r3, r0
 800616a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <HAL_ADC_ConfigChannel+0x4d0>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2103      	movs	r1, #3
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe fb8b 	bl	8004894 <LL_ADC_GetOffsetChannel>
 800617e:	4603      	mov	r3, r0
 8006180:	0e9b      	lsrs	r3, r3, #26
 8006182:	f003 021f 	and.w	r2, r3, #31
 8006186:	e017      	b.n	80061b8 <HAL_ADC_ConfigChannel+0x500>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2103      	movs	r1, #3
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fb80 	bl	8004894 <LL_ADC_GetOffsetChannel>
 8006194:	4603      	mov	r3, r0
 8006196:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006198:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800619a:	fa93 f3a3 	rbit	r3, r3
 800619e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80061a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80061a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80061aa:	2320      	movs	r3, #32
 80061ac:	e003      	b.n	80061b6 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80061ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061b0:	fab3 f383 	clz	r3, r3
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <HAL_ADC_ConfigChannel+0x518>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	0e9b      	lsrs	r3, r3, #26
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	e011      	b.n	80061f4 <HAL_ADC_ConfigChannel+0x53c>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061d8:	fa93 f3a3 	rbit	r3, r3
 80061dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80061de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80061e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80061e8:	2320      	movs	r3, #32
 80061ea:	e003      	b.n	80061f4 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80061ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061ee:	fab3 f383 	clz	r3, r3
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d14f      	bne.n	8006298 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2200      	movs	r2, #0
 80061fe:	2103      	movs	r1, #3
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fbdd 	bl	80049c0 <LL_ADC_SetOffsetState>
 8006206:	e047      	b.n	8006298 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800620e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	069b      	lsls	r3, r3, #26
 8006218:	429a      	cmp	r2, r3
 800621a:	d107      	bne.n	800622c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800622a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006232:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	069b      	lsls	r3, r3, #26
 800623c:	429a      	cmp	r2, r3
 800623e:	d107      	bne.n	8006250 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800624e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006256:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	069b      	lsls	r3, r3, #26
 8006260:	429a      	cmp	r2, r3
 8006262:	d107      	bne.n	8006274 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006272:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800627a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	069b      	lsls	r3, r3, #26
 8006284:	429a      	cmp	r2, r3
 8006286:	d107      	bne.n	8006298 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006296:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fd45 	bl	8004d2c <LL_ADC_IsEnabled>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 8219 	bne.w	80066dc <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f7fe fc66 	bl	8004b88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	4aa1      	ldr	r2, [pc, #644]	@ (8006548 <HAL_ADC_ConfigChannel+0x890>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	f040 812e 	bne.w	8006524 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10b      	bne.n	80062f0 <HAL_ADC_ConfigChannel+0x638>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	0e9b      	lsrs	r3, r3, #26
 80062de:	3301      	adds	r3, #1
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	2b09      	cmp	r3, #9
 80062e6:	bf94      	ite	ls
 80062e8:	2301      	movls	r3, #1
 80062ea:	2300      	movhi	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	e019      	b.n	8006324 <HAL_ADC_ConfigChannel+0x66c>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062f8:	fa93 f3a3 	rbit	r3, r3
 80062fc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80062fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006300:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8006308:	2320      	movs	r3, #32
 800630a:	e003      	b.n	8006314 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800630c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800630e:	fab3 f383 	clz	r3, r3
 8006312:	b2db      	uxtb	r3, r3
 8006314:	3301      	adds	r3, #1
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2b09      	cmp	r3, #9
 800631c:	bf94      	ite	ls
 800631e:	2301      	movls	r3, #1
 8006320:	2300      	movhi	r3, #0
 8006322:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006324:	2b00      	cmp	r3, #0
 8006326:	d079      	beq.n	800641c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006330:	2b00      	cmp	r3, #0
 8006332:	d107      	bne.n	8006344 <HAL_ADC_ConfigChannel+0x68c>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	0e9b      	lsrs	r3, r3, #26
 800633a:	3301      	adds	r3, #1
 800633c:	069b      	lsls	r3, r3, #26
 800633e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006342:	e015      	b.n	8006370 <HAL_ADC_ConfigChannel+0x6b8>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800634c:	fa93 f3a3 	rbit	r3, r3
 8006350:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006354:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800635c:	2320      	movs	r3, #32
 800635e:	e003      	b.n	8006368 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8006360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006362:	fab3 f383 	clz	r3, r3
 8006366:	b2db      	uxtb	r3, r3
 8006368:	3301      	adds	r3, #1
 800636a:	069b      	lsls	r3, r3, #26
 800636c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006378:	2b00      	cmp	r3, #0
 800637a:	d109      	bne.n	8006390 <HAL_ADC_ConfigChannel+0x6d8>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	0e9b      	lsrs	r3, r3, #26
 8006382:	3301      	adds	r3, #1
 8006384:	f003 031f 	and.w	r3, r3, #31
 8006388:	2101      	movs	r1, #1
 800638a:	fa01 f303 	lsl.w	r3, r1, r3
 800638e:	e017      	b.n	80063c0 <HAL_ADC_ConfigChannel+0x708>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006398:	fa93 f3a3 	rbit	r3, r3
 800639c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800639e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80063a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80063a8:	2320      	movs	r3, #32
 80063aa:	e003      	b.n	80063b4 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80063ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ae:	fab3 f383 	clz	r3, r3
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	3301      	adds	r3, #1
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	2101      	movs	r1, #1
 80063bc:	fa01 f303 	lsl.w	r3, r1, r3
 80063c0:	ea42 0103 	orr.w	r1, r2, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <HAL_ADC_ConfigChannel+0x72e>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	0e9b      	lsrs	r3, r3, #26
 80063d6:	3301      	adds	r3, #1
 80063d8:	f003 021f 	and.w	r2, r3, #31
 80063dc:	4613      	mov	r3, r2
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	4413      	add	r3, r2
 80063e2:	051b      	lsls	r3, r3, #20
 80063e4:	e018      	b.n	8006418 <HAL_ADC_ConfigChannel+0x760>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80063f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80063fe:	2320      	movs	r3, #32
 8006400:	e003      	b.n	800640a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8006402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006404:	fab3 f383 	clz	r3, r3
 8006408:	b2db      	uxtb	r3, r3
 800640a:	3301      	adds	r3, #1
 800640c:	f003 021f 	and.w	r2, r3, #31
 8006410:	4613      	mov	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	4413      	add	r3, r2
 8006416:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006418:	430b      	orrs	r3, r1
 800641a:	e07e      	b.n	800651a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006424:	2b00      	cmp	r3, #0
 8006426:	d107      	bne.n	8006438 <HAL_ADC_ConfigChannel+0x780>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	0e9b      	lsrs	r3, r3, #26
 800642e:	3301      	adds	r3, #1
 8006430:	069b      	lsls	r3, r3, #26
 8006432:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006436:	e015      	b.n	8006464 <HAL_ADC_ConfigChannel+0x7ac>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	fa93 f3a3 	rbit	r3, r3
 8006444:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8006450:	2320      	movs	r3, #32
 8006452:	e003      	b.n	800645c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8006454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006456:	fab3 f383 	clz	r3, r3
 800645a:	b2db      	uxtb	r3, r3
 800645c:	3301      	adds	r3, #1
 800645e:	069b      	lsls	r3, r3, #26
 8006460:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800646c:	2b00      	cmp	r3, #0
 800646e:	d109      	bne.n	8006484 <HAL_ADC_ConfigChannel+0x7cc>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	0e9b      	lsrs	r3, r3, #26
 8006476:	3301      	adds	r3, #1
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	2101      	movs	r1, #1
 800647e:	fa01 f303 	lsl.w	r3, r1, r3
 8006482:	e017      	b.n	80064b4 <HAL_ADC_ConfigChannel+0x7fc>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	fa93 f3a3 	rbit	r3, r3
 8006490:	61bb      	str	r3, [r7, #24]
  return result;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800649c:	2320      	movs	r3, #32
 800649e:	e003      	b.n	80064a8 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	fab3 f383 	clz	r3, r3
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	3301      	adds	r3, #1
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	2101      	movs	r1, #1
 80064b0:	fa01 f303 	lsl.w	r3, r1, r3
 80064b4:	ea42 0103 	orr.w	r1, r2, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10d      	bne.n	80064e0 <HAL_ADC_ConfigChannel+0x828>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	0e9b      	lsrs	r3, r3, #26
 80064ca:	3301      	adds	r3, #1
 80064cc:	f003 021f 	and.w	r2, r3, #31
 80064d0:	4613      	mov	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	4413      	add	r3, r2
 80064d6:	3b1e      	subs	r3, #30
 80064d8:	051b      	lsls	r3, r3, #20
 80064da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80064de:	e01b      	b.n	8006518 <HAL_ADC_ConfigChannel+0x860>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	fa93 f3a3 	rbit	r3, r3
 80064ec:	60fb      	str	r3, [r7, #12]
  return result;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80064f8:	2320      	movs	r3, #32
 80064fa:	e003      	b.n	8006504 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	fab3 f383 	clz	r3, r3
 8006502:	b2db      	uxtb	r3, r3
 8006504:	3301      	adds	r3, #1
 8006506:	f003 021f 	and.w	r2, r3, #31
 800650a:	4613      	mov	r3, r2
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	4413      	add	r3, r2
 8006510:	3b1e      	subs	r3, #30
 8006512:	051b      	lsls	r3, r3, #20
 8006514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006518:	430b      	orrs	r3, r1
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	6892      	ldr	r2, [r2, #8]
 800651e:	4619      	mov	r1, r3
 8006520:	f7fe fb07 	bl	8004b32 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f280 80d7 	bge.w	80066dc <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a06      	ldr	r2, [pc, #24]	@ (800654c <HAL_ADC_ConfigChannel+0x894>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_ADC_ConfigChannel+0x88a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a04      	ldr	r2, [pc, #16]	@ (8006550 <HAL_ADC_ConfigChannel+0x898>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d10a      	bne.n	8006558 <HAL_ADC_ConfigChannel+0x8a0>
 8006542:	4b04      	ldr	r3, [pc, #16]	@ (8006554 <HAL_ADC_ConfigChannel+0x89c>)
 8006544:	e009      	b.n	800655a <HAL_ADC_ConfigChannel+0x8a2>
 8006546:	bf00      	nop
 8006548:	47ff0000 	.word	0x47ff0000
 800654c:	40022000 	.word	0x40022000
 8006550:	40022100 	.word	0x40022100
 8006554:	40022300 	.word	0x40022300
 8006558:	4b65      	ldr	r3, [pc, #404]	@ (80066f0 <HAL_ADC_ConfigChannel+0xa38>)
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe f95a 	bl	8004814 <LL_ADC_GetCommonPathInternalCh>
 8006560:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a62      	ldr	r2, [pc, #392]	@ (80066f4 <HAL_ADC_ConfigChannel+0xa3c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_ADC_ConfigChannel+0x8c0>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a61      	ldr	r2, [pc, #388]	@ (80066f8 <HAL_ADC_ConfigChannel+0xa40>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d10e      	bne.n	8006596 <HAL_ADC_ConfigChannel+0x8de>
 8006578:	485e      	ldr	r0, [pc, #376]	@ (80066f4 <HAL_ADC_ConfigChannel+0xa3c>)
 800657a:	f7fe fbd7 	bl	8004d2c <LL_ADC_IsEnabled>
 800657e:	4604      	mov	r4, r0
 8006580:	485d      	ldr	r0, [pc, #372]	@ (80066f8 <HAL_ADC_ConfigChannel+0xa40>)
 8006582:	f7fe fbd3 	bl	8004d2c <LL_ADC_IsEnabled>
 8006586:	4603      	mov	r3, r0
 8006588:	4323      	orrs	r3, r4
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	e008      	b.n	80065a8 <HAL_ADC_ConfigChannel+0x8f0>
 8006596:	4859      	ldr	r0, [pc, #356]	@ (80066fc <HAL_ADC_ConfigChannel+0xa44>)
 8006598:	f7fe fbc8 	bl	8004d2c <LL_ADC_IsEnabled>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf0c      	ite	eq
 80065a2:	2301      	moveq	r3, #1
 80065a4:	2300      	movne	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8084 	beq.w	80066b6 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a53      	ldr	r2, [pc, #332]	@ (8006700 <HAL_ADC_ConfigChannel+0xa48>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d132      	bne.n	800661e <HAL_ADC_ConfigChannel+0x966>
 80065b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d12c      	bne.n	800661e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a4c      	ldr	r2, [pc, #304]	@ (80066fc <HAL_ADC_ConfigChannel+0xa44>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	f040 8086 	bne.w	80066dc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a47      	ldr	r2, [pc, #284]	@ (80066f4 <HAL_ADC_ConfigChannel+0xa3c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_ADC_ConfigChannel+0x92c>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a46      	ldr	r2, [pc, #280]	@ (80066f8 <HAL_ADC_ConfigChannel+0xa40>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d101      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x930>
 80065e4:	4a47      	ldr	r2, [pc, #284]	@ (8006704 <HAL_ADC_ConfigChannel+0xa4c>)
 80065e6:	e000      	b.n	80065ea <HAL_ADC_ConfigChannel+0x932>
 80065e8:	4a41      	ldr	r2, [pc, #260]	@ (80066f0 <HAL_ADC_ConfigChannel+0xa38>)
 80065ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80065f2:	4619      	mov	r1, r3
 80065f4:	4610      	mov	r0, r2
 80065f6:	f7fe f8fa 	bl	80047ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065fa:	4b43      	ldr	r3, [pc, #268]	@ (8006708 <HAL_ADC_ConfigChannel+0xa50>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	099b      	lsrs	r3, r3, #6
 8006600:	4a42      	ldr	r2, [pc, #264]	@ (800670c <HAL_ADC_ConfigChannel+0xa54>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	099b      	lsrs	r3, r3, #6
 8006608:	3301      	adds	r3, #1
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800660e:	e002      	b.n	8006616 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	3b01      	subs	r3, #1
 8006614:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f9      	bne.n	8006610 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800661c:	e05e      	b.n	80066dc <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a3b      	ldr	r2, [pc, #236]	@ (8006710 <HAL_ADC_ConfigChannel+0xa58>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d120      	bne.n	800666a <HAL_ADC_ConfigChannel+0x9b2>
 8006628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800662c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d11a      	bne.n	800666a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a30      	ldr	r2, [pc, #192]	@ (80066fc <HAL_ADC_ConfigChannel+0xa44>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d14e      	bne.n	80066dc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a2c      	ldr	r2, [pc, #176]	@ (80066f4 <HAL_ADC_ConfigChannel+0xa3c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_ADC_ConfigChannel+0x99a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a2a      	ldr	r2, [pc, #168]	@ (80066f8 <HAL_ADC_ConfigChannel+0xa40>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d101      	bne.n	8006656 <HAL_ADC_ConfigChannel+0x99e>
 8006652:	4a2c      	ldr	r2, [pc, #176]	@ (8006704 <HAL_ADC_ConfigChannel+0xa4c>)
 8006654:	e000      	b.n	8006658 <HAL_ADC_ConfigChannel+0x9a0>
 8006656:	4a26      	ldr	r2, [pc, #152]	@ (80066f0 <HAL_ADC_ConfigChannel+0xa38>)
 8006658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800665c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f7fe f8c3 	bl	80047ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006668:	e038      	b.n	80066dc <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a29      	ldr	r2, [pc, #164]	@ (8006714 <HAL_ADC_ConfigChannel+0xa5c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d133      	bne.n	80066dc <HAL_ADC_ConfigChannel+0xa24>
 8006674:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d12d      	bne.n	80066dc <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a1d      	ldr	r2, [pc, #116]	@ (80066fc <HAL_ADC_ConfigChannel+0xa44>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d128      	bne.n	80066dc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a19      	ldr	r2, [pc, #100]	@ (80066f4 <HAL_ADC_ConfigChannel+0xa3c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <HAL_ADC_ConfigChannel+0x9e6>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a17      	ldr	r2, [pc, #92]	@ (80066f8 <HAL_ADC_ConfigChannel+0xa40>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d101      	bne.n	80066a2 <HAL_ADC_ConfigChannel+0x9ea>
 800669e:	4a19      	ldr	r2, [pc, #100]	@ (8006704 <HAL_ADC_ConfigChannel+0xa4c>)
 80066a0:	e000      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x9ec>
 80066a2:	4a13      	ldr	r2, [pc, #76]	@ (80066f0 <HAL_ADC_ConfigChannel+0xa38>)
 80066a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066ac:	4619      	mov	r1, r3
 80066ae:	4610      	mov	r0, r2
 80066b0:	f7fe f89d 	bl	80047ee <LL_ADC_SetCommonPathInternalCh>
 80066b4:	e012      	b.n	80066dc <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ba:	f043 0220 	orr.w	r2, r3, #32
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80066c8:	e008      	b.n	80066dc <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ce:	f043 0220 	orr.w	r2, r3, #32
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80066e4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	37e4      	adds	r7, #228	@ 0xe4
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd90      	pop	{r4, r7, pc}
 80066f0:	58026300 	.word	0x58026300
 80066f4:	40022000 	.word	0x40022000
 80066f8:	40022100 	.word	0x40022100
 80066fc:	58026000 	.word	0x58026000
 8006700:	c7520000 	.word	0xc7520000
 8006704:	40022300 	.word	0x40022300
 8006708:	24000014 	.word	0x24000014
 800670c:	053e2d63 	.word	0x053e2d63
 8006710:	c3210000 	.word	0xc3210000
 8006714:	cb840000 	.word	0xcb840000

08006718 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fb4a 	bl	8004dc8 <LL_ADC_REG_IsConversionOngoing>
 8006734:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe fb6c 	bl	8004e18 <LL_ADC_INJ_IsConversionOngoing>
 8006740:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d103      	bne.n	8006750 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8098 	beq.w	8006880 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d02a      	beq.n	80067b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7e5b      	ldrb	r3, [r3, #25]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d126      	bne.n	80067b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7e1b      	ldrb	r3, [r3, #24]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d122      	bne.n	80067b4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800676e:	2301      	movs	r3, #1
 8006770:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006772:	e014      	b.n	800679e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4a45      	ldr	r2, [pc, #276]	@ (800688c <ADC_ConversionStop+0x174>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d90d      	bls.n	8006798 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006780:	f043 0210 	orr.w	r2, r3, #16
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800678c:	f043 0201 	orr.w	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e074      	b.n	8006882 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	3301      	adds	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a8:	2b40      	cmp	r3, #64	@ 0x40
 80067aa:	d1e3      	bne.n	8006774 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2240      	movs	r2, #64	@ 0x40
 80067b2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d014      	beq.n	80067e4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe fb02 	bl	8004dc8 <LL_ADC_REG_IsConversionOngoing>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00c      	beq.n	80067e4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe fabf 	bl	8004d52 <LL_ADC_IsDisableOngoing>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fade 	bl	8004da0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d014      	beq.n	8006814 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fb12 	bl	8004e18 <LL_ADC_INJ_IsConversionOngoing>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00c      	beq.n	8006814 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe faa7 	bl	8004d52 <LL_ADC_IsDisableOngoing>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe faee 	bl	8004df0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d005      	beq.n	8006826 <ADC_ConversionStop+0x10e>
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b03      	cmp	r3, #3
 800681e:	d105      	bne.n	800682c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006820:	230c      	movs	r3, #12
 8006822:	617b      	str	r3, [r7, #20]
        break;
 8006824:	e005      	b.n	8006832 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006826:	2308      	movs	r3, #8
 8006828:	617b      	str	r3, [r7, #20]
        break;
 800682a:	e002      	b.n	8006832 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800682c:	2304      	movs	r3, #4
 800682e:	617b      	str	r3, [r7, #20]
        break;
 8006830:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006832:	f7fd ff99 	bl	8004768 <HAL_GetTick>
 8006836:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006838:	e01b      	b.n	8006872 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800683a:	f7fd ff95 	bl	8004768 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b05      	cmp	r3, #5
 8006846:	d914      	bls.n	8006872 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	4013      	ands	r3, r2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00d      	beq.n	8006872 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800685a:	f043 0210 	orr.w	r2, r3, #16
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006866:	f043 0201 	orr.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e007      	b.n	8006882 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4013      	ands	r3, r2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1dc      	bne.n	800683a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	000cdbff 	.word	0x000cdbff

08006890 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe fa45 	bl	8004d2c <LL_ADC_IsEnabled>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d16e      	bne.n	8006986 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	4b38      	ldr	r3, [pc, #224]	@ (8006990 <ADC_Enable+0x100>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00d      	beq.n	80068d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ba:	f043 0210 	orr.w	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068c6:	f043 0201 	orr.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e05a      	b.n	8006988 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fa00 	bl	8004cdc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80068dc:	f7fd ff44 	bl	8004768 <HAL_GetTick>
 80068e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006994 <ADC_Enable+0x104>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <ADC_Enable+0x66>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a29      	ldr	r2, [pc, #164]	@ (8006998 <ADC_Enable+0x108>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d101      	bne.n	80068fa <ADC_Enable+0x6a>
 80068f6:	4b29      	ldr	r3, [pc, #164]	@ (800699c <ADC_Enable+0x10c>)
 80068f8:	e000      	b.n	80068fc <ADC_Enable+0x6c>
 80068fa:	4b29      	ldr	r3, [pc, #164]	@ (80069a0 <ADC_Enable+0x110>)
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe f983 	bl	8004c08 <LL_ADC_GetMultimode>
 8006902:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a23      	ldr	r2, [pc, #140]	@ (8006998 <ADC_Enable+0x108>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d002      	beq.n	8006914 <ADC_Enable+0x84>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	e000      	b.n	8006916 <ADC_Enable+0x86>
 8006914:	4b1f      	ldr	r3, [pc, #124]	@ (8006994 <ADC_Enable+0x104>)
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	4293      	cmp	r3, r2
 800691c:	d02c      	beq.n	8006978 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d130      	bne.n	8006986 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006924:	e028      	b.n	8006978 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe f9fe 	bl	8004d2c <LL_ADC_IsEnabled>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe f9ce 	bl	8004cdc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006940:	f7fd ff12 	bl	8004768 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d914      	bls.n	8006978 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b01      	cmp	r3, #1
 800695a:	d00d      	beq.n	8006978 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006960:	f043 0210 	orr.w	r2, r3, #16
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800696c:	f043 0201 	orr.w	r2, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e007      	b.n	8006988 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b01      	cmp	r3, #1
 8006984:	d1cf      	bne.n	8006926 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	8000003f 	.word	0x8000003f
 8006994:	40022000 	.word	0x40022000
 8006998:	40022100 	.word	0x40022100
 800699c:	40022300 	.word	0x40022300
 80069a0:	58026300 	.word	0x58026300

080069a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe f9ce 	bl	8004d52 <LL_ADC_IsDisableOngoing>
 80069b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe f9b5 	bl	8004d2c <LL_ADC_IsEnabled>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d047      	beq.n	8006a58 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d144      	bne.n	8006a58 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 030d 	and.w	r3, r3, #13
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d10c      	bne.n	80069f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe f98f 	bl	8004d04 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2203      	movs	r2, #3
 80069ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069ee:	f7fd febb 	bl	8004768 <HAL_GetTick>
 80069f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069f4:	e029      	b.n	8006a4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069fa:	f043 0210 	orr.w	r2, r3, #16
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a06:	f043 0201 	orr.w	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e023      	b.n	8006a5a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a12:	f7fd fea9 	bl	8004768 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d914      	bls.n	8006a4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00d      	beq.n	8006a4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a32:	f043 0210 	orr.w	r2, r3, #16
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a3e:	f043 0201 	orr.w	r2, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e007      	b.n	8006a5a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1dc      	bne.n	8006a12 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a74:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d14b      	bne.n	8006b14 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d021      	beq.n	8006ada <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fd ffba 	bl	8004a14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d032      	beq.n	8006b0c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d12b      	bne.n	8006b0c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ab8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11f      	bne.n	8006b0c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ad0:	f043 0201 	orr.w	r2, r3, #1
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	661a      	str	r2, [r3, #96]	@ 0x60
 8006ad8:	e018      	b.n	8006b0c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f003 0303 	and.w	r3, r3, #3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d111      	bne.n	8006b0c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d105      	bne.n	8006b0c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b04:	f043 0201 	orr.w	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7fb fb57 	bl	80021c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b12:	e00e      	b.n	8006b32 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff f8bf 	bl	8005ca4 <HAL_ADC_ErrorCallback>
}
 8006b26:	e004      	b.n	8006b32 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7ff f897 	bl	8005c7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b74:	f043 0204 	orr.w	r2, r3, #4
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7ff f891 	bl	8005ca4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6c      	ldr	r2, [pc, #432]	@ (8006d4c <ADC_ConfigureBoostMode+0x1c0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d004      	beq.n	8006ba8 <ADC_ConfigureBoostMode+0x1c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a6b      	ldr	r2, [pc, #428]	@ (8006d50 <ADC_ConfigureBoostMode+0x1c4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d109      	bne.n	8006bbc <ADC_ConfigureBoostMode+0x30>
 8006ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8006d54 <ADC_ConfigureBoostMode+0x1c8>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bf14      	ite	ne
 8006bb4:	2301      	movne	r3, #1
 8006bb6:	2300      	moveq	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e008      	b.n	8006bce <ADC_ConfigureBoostMode+0x42>
 8006bbc:	4b66      	ldr	r3, [pc, #408]	@ (8006d58 <ADC_ConfigureBoostMode+0x1cc>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bf14      	ite	ne
 8006bc8:	2301      	movne	r3, #1
 8006bca:	2300      	moveq	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01c      	beq.n	8006c0c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006bd2:	f004 ff17 	bl	800ba04 <HAL_RCC_GetHCLKFreq>
 8006bd6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006be0:	d010      	beq.n	8006c04 <ADC_ConfigureBoostMode+0x78>
 8006be2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006be6:	d873      	bhi.n	8006cd0 <ADC_ConfigureBoostMode+0x144>
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bec:	d002      	beq.n	8006bf4 <ADC_ConfigureBoostMode+0x68>
 8006bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bf2:	d16d      	bne.n	8006cd0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	0c1b      	lsrs	r3, r3, #16
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c00:	60fb      	str	r3, [r7, #12]
        break;
 8006c02:	e068      	b.n	8006cd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	089b      	lsrs	r3, r3, #2
 8006c08:	60fb      	str	r3, [r7, #12]
        break;
 8006c0a:	e064      	b.n	8006cd6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006c0c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006c10:	f04f 0100 	mov.w	r1, #0
 8006c14:	f006 f8f2 	bl	800cdfc <HAL_RCCEx_GetPeriphCLKFreq>
 8006c18:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006c22:	d051      	beq.n	8006cc8 <ADC_ConfigureBoostMode+0x13c>
 8006c24:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006c28:	d854      	bhi.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
 8006c2a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006c2e:	d047      	beq.n	8006cc0 <ADC_ConfigureBoostMode+0x134>
 8006c30:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006c34:	d84e      	bhi.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
 8006c36:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006c3a:	d03d      	beq.n	8006cb8 <ADC_ConfigureBoostMode+0x12c>
 8006c3c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006c40:	d848      	bhi.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
 8006c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c46:	d033      	beq.n	8006cb0 <ADC_ConfigureBoostMode+0x124>
 8006c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c4c:	d842      	bhi.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
 8006c4e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c52:	d029      	beq.n	8006ca8 <ADC_ConfigureBoostMode+0x11c>
 8006c54:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c58:	d83c      	bhi.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
 8006c5a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c5e:	d01a      	beq.n	8006c96 <ADC_ConfigureBoostMode+0x10a>
 8006c60:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c64:	d836      	bhi.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
 8006c66:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c6a:	d014      	beq.n	8006c96 <ADC_ConfigureBoostMode+0x10a>
 8006c6c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c70:	d830      	bhi.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
 8006c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c76:	d00e      	beq.n	8006c96 <ADC_ConfigureBoostMode+0x10a>
 8006c78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c7c:	d82a      	bhi.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
 8006c7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c82:	d008      	beq.n	8006c96 <ADC_ConfigureBoostMode+0x10a>
 8006c84:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c88:	d824      	bhi.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
 8006c8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c8e:	d002      	beq.n	8006c96 <ADC_ConfigureBoostMode+0x10a>
 8006c90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c94:	d11e      	bne.n	8006cd4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	0c9b      	lsrs	r3, r3, #18
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca4:	60fb      	str	r3, [r7, #12]
        break;
 8006ca6:	e016      	b.n	8006cd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	091b      	lsrs	r3, r3, #4
 8006cac:	60fb      	str	r3, [r7, #12]
        break;
 8006cae:	e012      	b.n	8006cd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	60fb      	str	r3, [r7, #12]
        break;
 8006cb6:	e00e      	b.n	8006cd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	099b      	lsrs	r3, r3, #6
 8006cbc:	60fb      	str	r3, [r7, #12]
        break;
 8006cbe:	e00a      	b.n	8006cd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	09db      	lsrs	r3, r3, #7
 8006cc4:	60fb      	str	r3, [r7, #12]
        break;
 8006cc6:	e006      	b.n	8006cd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	0a1b      	lsrs	r3, r3, #8
 8006ccc:	60fb      	str	r3, [r7, #12]
        break;
 8006cce:	e002      	b.n	8006cd6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006cd0:	bf00      	nop
 8006cd2:	e000      	b.n	8006cd6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006cd4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <ADC_ConfigureBoostMode+0x1d0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d808      	bhi.n	8006cf6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006cf2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006cf4:	e025      	b.n	8006d42 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a19      	ldr	r2, [pc, #100]	@ (8006d60 <ADC_ConfigureBoostMode+0x1d4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d80a      	bhi.n	8006d14 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d10:	609a      	str	r2, [r3, #8]
}
 8006d12:	e016      	b.n	8006d42 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4a13      	ldr	r2, [pc, #76]	@ (8006d64 <ADC_ConfigureBoostMode+0x1d8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d80a      	bhi.n	8006d32 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d2e:	609a      	str	r2, [r3, #8]
}
 8006d30:	e007      	b.n	8006d42 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006d40:	609a      	str	r2, [r3, #8]
}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40022000 	.word	0x40022000
 8006d50:	40022100 	.word	0x40022100
 8006d54:	40022300 	.word	0x40022300
 8006d58:	58026300 	.word	0x58026300
 8006d5c:	005f5e10 	.word	0x005f5e10
 8006d60:	00bebc20 	.word	0x00bebc20
 8006d64:	017d7840 	.word	0x017d7840

08006d68 <LL_ADC_IsEnabled>:
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <LL_ADC_IsEnabled+0x18>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <LL_ADC_IsEnabled+0x1a>
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <LL_ADC_REG_IsConversionOngoing>:
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d101      	bne.n	8006da6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b0a3      	sub	sp, #140	@ 0x8c
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e0c1      	b.n	8006fba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8006fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d102      	bne.n	8006e56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e50:	4b5d      	ldr	r3, [pc, #372]	@ (8006fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e001      	b.n	8006e5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10b      	bne.n	8006e78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e64:	f043 0220 	orr.w	r2, r3, #32
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0a0      	b.n	8006fba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff ff87 	bl	8006d8e <LL_ADC_REG_IsConversionOngoing>
 8006e80:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff ff80 	bl	8006d8e <LL_ADC_REG_IsConversionOngoing>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 8081 	bne.w	8006f98 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d17c      	bne.n	8006f98 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a48      	ldr	r2, [pc, #288]	@ (8006fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d004      	beq.n	8006eb2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a46      	ldr	r2, [pc, #280]	@ (8006fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d101      	bne.n	8006eb6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006eb2:	4b46      	ldr	r3, [pc, #280]	@ (8006fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006eb4:	e000      	b.n	8006eb8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006eb6:	4b46      	ldr	r3, [pc, #280]	@ (8006fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d039      	beq.n	8006f36 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006ec2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ed2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a3a      	ldr	r2, [pc, #232]	@ (8006fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a39      	ldr	r2, [pc, #228]	@ (8006fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d10e      	bne.n	8006f06 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006ee8:	4836      	ldr	r0, [pc, #216]	@ (8006fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006eea:	f7ff ff3d 	bl	8006d68 <LL_ADC_IsEnabled>
 8006eee:	4604      	mov	r4, r0
 8006ef0:	4835      	ldr	r0, [pc, #212]	@ (8006fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006ef2:	f7ff ff39 	bl	8006d68 <LL_ADC_IsEnabled>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4323      	orrs	r3, r4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	e008      	b.n	8006f18 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006f06:	4833      	ldr	r0, [pc, #204]	@ (8006fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006f08:	f7ff ff2e 	bl	8006d68 <LL_ADC_IsEnabled>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bf0c      	ite	eq
 8006f12:	2301      	moveq	r3, #1
 8006f14:	2300      	movne	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d047      	beq.n	8006fac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	4b2d      	ldr	r3, [pc, #180]	@ (8006fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	6811      	ldr	r1, [r2, #0]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	6892      	ldr	r2, [r2, #8]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f32:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f34:	e03a      	b.n	8006fac <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006f36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f40:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d10e      	bne.n	8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006f56:	481b      	ldr	r0, [pc, #108]	@ (8006fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f58:	f7ff ff06 	bl	8006d68 <LL_ADC_IsEnabled>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	481a      	ldr	r0, [pc, #104]	@ (8006fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f60:	f7ff ff02 	bl	8006d68 <LL_ADC_IsEnabled>
 8006f64:	4603      	mov	r3, r0
 8006f66:	4323      	orrs	r3, r4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf0c      	ite	eq
 8006f6c:	2301      	moveq	r3, #1
 8006f6e:	2300      	movne	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	e008      	b.n	8006f86 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006f74:	4817      	ldr	r0, [pc, #92]	@ (8006fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006f76:	f7ff fef7 	bl	8006d68 <LL_ADC_IsEnabled>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bf0c      	ite	eq
 8006f80:	2301      	moveq	r3, #1
 8006f82:	2300      	movne	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d010      	beq.n	8006fac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	4b12      	ldr	r3, [pc, #72]	@ (8006fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006f94:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f96:	e009      	b.n	8006fac <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f9c:	f043 0220 	orr.w	r2, r3, #32
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006faa:	e000      	b.n	8006fae <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006fb6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	378c      	adds	r7, #140	@ 0x8c
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd90      	pop	{r4, r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40022000 	.word	0x40022000
 8006fc8:	40022100 	.word	0x40022100
 8006fcc:	40022300 	.word	0x40022300
 8006fd0:	58026300 	.word	0x58026300
 8006fd4:	58026000 	.word	0x58026000
 8006fd8:	fffff0e0 	.word	0xfffff0e0

08006fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fec:	4b0b      	ldr	r3, [pc, #44]	@ (800701c <__NVIC_SetPriorityGrouping+0x40>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007004:	4b06      	ldr	r3, [pc, #24]	@ (8007020 <__NVIC_SetPriorityGrouping+0x44>)
 8007006:	4313      	orrs	r3, r2
 8007008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800700a:	4a04      	ldr	r2, [pc, #16]	@ (800701c <__NVIC_SetPriorityGrouping+0x40>)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	60d3      	str	r3, [r2, #12]
}
 8007010:	bf00      	nop
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	e000ed00 	.word	0xe000ed00
 8007020:	05fa0000 	.word	0x05fa0000

08007024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007028:	4b04      	ldr	r3, [pc, #16]	@ (800703c <__NVIC_GetPriorityGrouping+0x18>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	0a1b      	lsrs	r3, r3, #8
 800702e:	f003 0307 	and.w	r3, r3, #7
}
 8007032:	4618      	mov	r0, r3
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	e000ed00 	.word	0xe000ed00

08007040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800704a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800704e:	2b00      	cmp	r3, #0
 8007050:	db0b      	blt.n	800706a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	f003 021f 	and.w	r2, r3, #31
 8007058:	4907      	ldr	r1, [pc, #28]	@ (8007078 <__NVIC_EnableIRQ+0x38>)
 800705a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	2001      	movs	r0, #1
 8007062:	fa00 f202 	lsl.w	r2, r0, r2
 8007066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	e000e100 	.word	0xe000e100

0800707c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	6039      	str	r1, [r7, #0]
 8007086:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800708c:	2b00      	cmp	r3, #0
 800708e:	db0a      	blt.n	80070a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	490c      	ldr	r1, [pc, #48]	@ (80070c8 <__NVIC_SetPriority+0x4c>)
 8007096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800709a:	0112      	lsls	r2, r2, #4
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	440b      	add	r3, r1
 80070a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070a4:	e00a      	b.n	80070bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	4908      	ldr	r1, [pc, #32]	@ (80070cc <__NVIC_SetPriority+0x50>)
 80070ac:	88fb      	ldrh	r3, [r7, #6]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	3b04      	subs	r3, #4
 80070b4:	0112      	lsls	r2, r2, #4
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	440b      	add	r3, r1
 80070ba:	761a      	strb	r2, [r3, #24]
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	e000e100 	.word	0xe000e100
 80070cc:	e000ed00 	.word	0xe000ed00

080070d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b089      	sub	sp, #36	@ 0x24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f1c3 0307 	rsb	r3, r3, #7
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	bf28      	it	cs
 80070ee:	2304      	movcs	r3, #4
 80070f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	3304      	adds	r3, #4
 80070f6:	2b06      	cmp	r3, #6
 80070f8:	d902      	bls.n	8007100 <NVIC_EncodePriority+0x30>
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	3b03      	subs	r3, #3
 80070fe:	e000      	b.n	8007102 <NVIC_EncodePriority+0x32>
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007104:	f04f 32ff 	mov.w	r2, #4294967295
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	fa02 f303 	lsl.w	r3, r2, r3
 800710e:	43da      	mvns	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	401a      	ands	r2, r3
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007118:	f04f 31ff 	mov.w	r1, #4294967295
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	fa01 f303 	lsl.w	r3, r1, r3
 8007122:	43d9      	mvns	r1, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007128:	4313      	orrs	r3, r2
         );
}
 800712a:	4618      	mov	r0, r3
 800712c:	3724      	adds	r7, #36	@ 0x24
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3b01      	subs	r3, #1
 8007144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007148:	d301      	bcc.n	800714e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800714a:	2301      	movs	r3, #1
 800714c:	e00f      	b.n	800716e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800714e:	4a0a      	ldr	r2, [pc, #40]	@ (8007178 <SysTick_Config+0x40>)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3b01      	subs	r3, #1
 8007154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007156:	210f      	movs	r1, #15
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	f7ff ff8e 	bl	800707c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007160:	4b05      	ldr	r3, [pc, #20]	@ (8007178 <SysTick_Config+0x40>)
 8007162:	2200      	movs	r2, #0
 8007164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007166:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <SysTick_Config+0x40>)
 8007168:	2207      	movs	r2, #7
 800716a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	e000e010 	.word	0xe000e010

0800717c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff ff29 	bl	8006fdc <__NVIC_SetPriorityGrouping>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b086      	sub	sp, #24
 8007196:	af00      	add	r7, sp, #0
 8007198:	4603      	mov	r3, r0
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	607a      	str	r2, [r7, #4]
 800719e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80071a0:	f7ff ff40 	bl	8007024 <__NVIC_GetPriorityGrouping>
 80071a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	6978      	ldr	r0, [r7, #20]
 80071ac:	f7ff ff90 	bl	80070d0 <NVIC_EncodePriority>
 80071b0:	4602      	mov	r2, r0
 80071b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80071b6:	4611      	mov	r1, r2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff ff5f 	bl	800707c <__NVIC_SetPriority>
}
 80071be:	bf00      	nop
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	4603      	mov	r3, r0
 80071ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff ff33 	bl	8007040 <__NVIC_EnableIRQ>
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff ffa4 	bl	8007138 <SysTick_Config>
 80071f0:	4603      	mov	r3, r0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007204:	f7fd fab0 	bl	8004768 <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e312      	b.n	800783a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a66      	ldr	r2, [pc, #408]	@ (80073b4 <HAL_DMA_Init+0x1b8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d04a      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a65      	ldr	r2, [pc, #404]	@ (80073b8 <HAL_DMA_Init+0x1bc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d045      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a63      	ldr	r2, [pc, #396]	@ (80073bc <HAL_DMA_Init+0x1c0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d040      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a62      	ldr	r2, [pc, #392]	@ (80073c0 <HAL_DMA_Init+0x1c4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d03b      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a60      	ldr	r2, [pc, #384]	@ (80073c4 <HAL_DMA_Init+0x1c8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d036      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5f      	ldr	r2, [pc, #380]	@ (80073c8 <HAL_DMA_Init+0x1cc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d031      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5d      	ldr	r2, [pc, #372]	@ (80073cc <HAL_DMA_Init+0x1d0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d02c      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a5c      	ldr	r2, [pc, #368]	@ (80073d0 <HAL_DMA_Init+0x1d4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d027      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a5a      	ldr	r2, [pc, #360]	@ (80073d4 <HAL_DMA_Init+0x1d8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d022      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a59      	ldr	r2, [pc, #356]	@ (80073d8 <HAL_DMA_Init+0x1dc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d01d      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a57      	ldr	r2, [pc, #348]	@ (80073dc <HAL_DMA_Init+0x1e0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d018      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a56      	ldr	r2, [pc, #344]	@ (80073e0 <HAL_DMA_Init+0x1e4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d013      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a54      	ldr	r2, [pc, #336]	@ (80073e4 <HAL_DMA_Init+0x1e8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00e      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a53      	ldr	r2, [pc, #332]	@ (80073e8 <HAL_DMA_Init+0x1ec>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a51      	ldr	r2, [pc, #324]	@ (80073ec <HAL_DMA_Init+0x1f0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_DMA_Init+0xb8>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a50      	ldr	r2, [pc, #320]	@ (80073f0 <HAL_DMA_Init+0x1f4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d101      	bne.n	80072b8 <HAL_DMA_Init+0xbc>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <HAL_DMA_Init+0xbe>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 813c 	beq.w	8007538 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a37      	ldr	r2, [pc, #220]	@ (80073b4 <HAL_DMA_Init+0x1b8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d04a      	beq.n	8007370 <HAL_DMA_Init+0x174>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a36      	ldr	r2, [pc, #216]	@ (80073b8 <HAL_DMA_Init+0x1bc>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d045      	beq.n	8007370 <HAL_DMA_Init+0x174>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a34      	ldr	r2, [pc, #208]	@ (80073bc <HAL_DMA_Init+0x1c0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d040      	beq.n	8007370 <HAL_DMA_Init+0x174>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a33      	ldr	r2, [pc, #204]	@ (80073c0 <HAL_DMA_Init+0x1c4>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d03b      	beq.n	8007370 <HAL_DMA_Init+0x174>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a31      	ldr	r2, [pc, #196]	@ (80073c4 <HAL_DMA_Init+0x1c8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d036      	beq.n	8007370 <HAL_DMA_Init+0x174>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a30      	ldr	r2, [pc, #192]	@ (80073c8 <HAL_DMA_Init+0x1cc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d031      	beq.n	8007370 <HAL_DMA_Init+0x174>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a2e      	ldr	r2, [pc, #184]	@ (80073cc <HAL_DMA_Init+0x1d0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d02c      	beq.n	8007370 <HAL_DMA_Init+0x174>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2d      	ldr	r2, [pc, #180]	@ (80073d0 <HAL_DMA_Init+0x1d4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d027      	beq.n	8007370 <HAL_DMA_Init+0x174>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a2b      	ldr	r2, [pc, #172]	@ (80073d4 <HAL_DMA_Init+0x1d8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d022      	beq.n	8007370 <HAL_DMA_Init+0x174>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a2a      	ldr	r2, [pc, #168]	@ (80073d8 <HAL_DMA_Init+0x1dc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d01d      	beq.n	8007370 <HAL_DMA_Init+0x174>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a28      	ldr	r2, [pc, #160]	@ (80073dc <HAL_DMA_Init+0x1e0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d018      	beq.n	8007370 <HAL_DMA_Init+0x174>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a27      	ldr	r2, [pc, #156]	@ (80073e0 <HAL_DMA_Init+0x1e4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d013      	beq.n	8007370 <HAL_DMA_Init+0x174>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a25      	ldr	r2, [pc, #148]	@ (80073e4 <HAL_DMA_Init+0x1e8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00e      	beq.n	8007370 <HAL_DMA_Init+0x174>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a24      	ldr	r2, [pc, #144]	@ (80073e8 <HAL_DMA_Init+0x1ec>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d009      	beq.n	8007370 <HAL_DMA_Init+0x174>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a22      	ldr	r2, [pc, #136]	@ (80073ec <HAL_DMA_Init+0x1f0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <HAL_DMA_Init+0x174>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a21      	ldr	r2, [pc, #132]	@ (80073f0 <HAL_DMA_Init+0x1f4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d108      	bne.n	8007382 <HAL_DMA_Init+0x186>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0201 	bic.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	e007      	b.n	8007392 <HAL_DMA_Init+0x196>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0201 	bic.w	r2, r2, #1
 8007390:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007392:	e02f      	b.n	80073f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007394:	f7fd f9e8 	bl	8004768 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b05      	cmp	r3, #5
 80073a0:	d928      	bls.n	80073f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2203      	movs	r2, #3
 80073ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e242      	b.n	800783a <HAL_DMA_Init+0x63e>
 80073b4:	40020010 	.word	0x40020010
 80073b8:	40020028 	.word	0x40020028
 80073bc:	40020040 	.word	0x40020040
 80073c0:	40020058 	.word	0x40020058
 80073c4:	40020070 	.word	0x40020070
 80073c8:	40020088 	.word	0x40020088
 80073cc:	400200a0 	.word	0x400200a0
 80073d0:	400200b8 	.word	0x400200b8
 80073d4:	40020410 	.word	0x40020410
 80073d8:	40020428 	.word	0x40020428
 80073dc:	40020440 	.word	0x40020440
 80073e0:	40020458 	.word	0x40020458
 80073e4:	40020470 	.word	0x40020470
 80073e8:	40020488 	.word	0x40020488
 80073ec:	400204a0 	.word	0x400204a0
 80073f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1c8      	bne.n	8007394 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4b83      	ldr	r3, [pc, #524]	@ (800761c <HAL_DMA_Init+0x420>)
 800740e:	4013      	ands	r3, r2
 8007410:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800741a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007426:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007432:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	4313      	orrs	r3, r2
 800743e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007444:	2b04      	cmp	r3, #4
 8007446:	d107      	bne.n	8007458 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007450:	4313      	orrs	r3, r2
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2b28      	cmp	r3, #40	@ 0x28
 800745e:	d903      	bls.n	8007468 <HAL_DMA_Init+0x26c>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2b2e      	cmp	r3, #46	@ 0x2e
 8007466:	d91f      	bls.n	80074a8 <HAL_DMA_Init+0x2ac>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	2b3e      	cmp	r3, #62	@ 0x3e
 800746e:	d903      	bls.n	8007478 <HAL_DMA_Init+0x27c>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2b42      	cmp	r3, #66	@ 0x42
 8007476:	d917      	bls.n	80074a8 <HAL_DMA_Init+0x2ac>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2b46      	cmp	r3, #70	@ 0x46
 800747e:	d903      	bls.n	8007488 <HAL_DMA_Init+0x28c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b48      	cmp	r3, #72	@ 0x48
 8007486:	d90f      	bls.n	80074a8 <HAL_DMA_Init+0x2ac>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b4e      	cmp	r3, #78	@ 0x4e
 800748e:	d903      	bls.n	8007498 <HAL_DMA_Init+0x29c>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b52      	cmp	r3, #82	@ 0x52
 8007496:	d907      	bls.n	80074a8 <HAL_DMA_Init+0x2ac>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b73      	cmp	r3, #115	@ 0x73
 800749e:	d905      	bls.n	80074ac <HAL_DMA_Init+0x2b0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b77      	cmp	r3, #119	@ 0x77
 80074a6:	d801      	bhi.n	80074ac <HAL_DMA_Init+0x2b0>
 80074a8:	2301      	movs	r3, #1
 80074aa:	e000      	b.n	80074ae <HAL_DMA_Init+0x2b2>
 80074ac:	2300      	movs	r3, #0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f023 0307 	bic.w	r3, r3, #7
 80074d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d117      	bne.n	8007514 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00e      	beq.n	8007514 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 fdca 	bl	8009090 <DMA_CheckFifoParam>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d008      	beq.n	8007514 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2240      	movs	r2, #64	@ 0x40
 8007506:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e192      	b.n	800783a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 fd05 	bl	8008f2c <DMA_CalcBaseAndBitshift>
 8007522:	4603      	mov	r3, r0
 8007524:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752a:	f003 031f 	and.w	r3, r3, #31
 800752e:	223f      	movs	r2, #63	@ 0x3f
 8007530:	409a      	lsls	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	609a      	str	r2, [r3, #8]
 8007536:	e0c8      	b.n	80076ca <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a38      	ldr	r2, [pc, #224]	@ (8007620 <HAL_DMA_Init+0x424>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d022      	beq.n	8007588 <HAL_DMA_Init+0x38c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a37      	ldr	r2, [pc, #220]	@ (8007624 <HAL_DMA_Init+0x428>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d01d      	beq.n	8007588 <HAL_DMA_Init+0x38c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a35      	ldr	r2, [pc, #212]	@ (8007628 <HAL_DMA_Init+0x42c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d018      	beq.n	8007588 <HAL_DMA_Init+0x38c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a34      	ldr	r2, [pc, #208]	@ (800762c <HAL_DMA_Init+0x430>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <HAL_DMA_Init+0x38c>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a32      	ldr	r2, [pc, #200]	@ (8007630 <HAL_DMA_Init+0x434>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00e      	beq.n	8007588 <HAL_DMA_Init+0x38c>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a31      	ldr	r2, [pc, #196]	@ (8007634 <HAL_DMA_Init+0x438>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d009      	beq.n	8007588 <HAL_DMA_Init+0x38c>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a2f      	ldr	r2, [pc, #188]	@ (8007638 <HAL_DMA_Init+0x43c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d004      	beq.n	8007588 <HAL_DMA_Init+0x38c>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a2e      	ldr	r2, [pc, #184]	@ (800763c <HAL_DMA_Init+0x440>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d101      	bne.n	800758c <HAL_DMA_Init+0x390>
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <HAL_DMA_Init+0x392>
 800758c:	2300      	movs	r3, #0
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8092 	beq.w	80076b8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a21      	ldr	r2, [pc, #132]	@ (8007620 <HAL_DMA_Init+0x424>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d021      	beq.n	80075e2 <HAL_DMA_Init+0x3e6>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a20      	ldr	r2, [pc, #128]	@ (8007624 <HAL_DMA_Init+0x428>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d01c      	beq.n	80075e2 <HAL_DMA_Init+0x3e6>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007628 <HAL_DMA_Init+0x42c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d017      	beq.n	80075e2 <HAL_DMA_Init+0x3e6>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1d      	ldr	r2, [pc, #116]	@ (800762c <HAL_DMA_Init+0x430>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d012      	beq.n	80075e2 <HAL_DMA_Init+0x3e6>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007630 <HAL_DMA_Init+0x434>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00d      	beq.n	80075e2 <HAL_DMA_Init+0x3e6>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007634 <HAL_DMA_Init+0x438>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d008      	beq.n	80075e2 <HAL_DMA_Init+0x3e6>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a18      	ldr	r2, [pc, #96]	@ (8007638 <HAL_DMA_Init+0x43c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <HAL_DMA_Init+0x3e6>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a17      	ldr	r2, [pc, #92]	@ (800763c <HAL_DMA_Init+0x440>)
 80075e0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2202      	movs	r2, #2
 80075e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4b10      	ldr	r3, [pc, #64]	@ (8007640 <HAL_DMA_Init+0x444>)
 80075fe:	4013      	ands	r3, r2
 8007600:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b40      	cmp	r3, #64	@ 0x40
 8007608:	d01c      	beq.n	8007644 <HAL_DMA_Init+0x448>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b80      	cmp	r3, #128	@ 0x80
 8007610:	d102      	bne.n	8007618 <HAL_DMA_Init+0x41c>
 8007612:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007616:	e016      	b.n	8007646 <HAL_DMA_Init+0x44a>
 8007618:	2300      	movs	r3, #0
 800761a:	e014      	b.n	8007646 <HAL_DMA_Init+0x44a>
 800761c:	fe10803f 	.word	0xfe10803f
 8007620:	58025408 	.word	0x58025408
 8007624:	5802541c 	.word	0x5802541c
 8007628:	58025430 	.word	0x58025430
 800762c:	58025444 	.word	0x58025444
 8007630:	58025458 	.word	0x58025458
 8007634:	5802546c 	.word	0x5802546c
 8007638:	58025480 	.word	0x58025480
 800763c:	58025494 	.word	0x58025494
 8007640:	fffe000f 	.word	0xfffe000f
 8007644:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	68d2      	ldr	r2, [r2, #12]
 800764a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800764c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800765c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007664:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800766c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007674:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	4b6e      	ldr	r3, [pc, #440]	@ (8007844 <HAL_DMA_Init+0x648>)
 800768c:	4413      	add	r3, r2
 800768e:	4a6e      	ldr	r2, [pc, #440]	@ (8007848 <HAL_DMA_Init+0x64c>)
 8007690:	fba2 2303 	umull	r2, r3, r2, r3
 8007694:	091b      	lsrs	r3, r3, #4
 8007696:	009a      	lsls	r2, r3, #2
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fc45 	bl	8008f2c <DMA_CalcBaseAndBitshift>
 80076a2:	4603      	mov	r3, r0
 80076a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076aa:	f003 031f 	and.w	r3, r3, #31
 80076ae:	2201      	movs	r2, #1
 80076b0:	409a      	lsls	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	e008      	b.n	80076ca <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2240      	movs	r2, #64	@ 0x40
 80076bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2203      	movs	r2, #3
 80076c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e0b7      	b.n	800783a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a5f      	ldr	r2, [pc, #380]	@ (800784c <HAL_DMA_Init+0x650>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d072      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007850 <HAL_DMA_Init+0x654>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d06d      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a5c      	ldr	r2, [pc, #368]	@ (8007854 <HAL_DMA_Init+0x658>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d068      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a5a      	ldr	r2, [pc, #360]	@ (8007858 <HAL_DMA_Init+0x65c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d063      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a59      	ldr	r2, [pc, #356]	@ (800785c <HAL_DMA_Init+0x660>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d05e      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a57      	ldr	r2, [pc, #348]	@ (8007860 <HAL_DMA_Init+0x664>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d059      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a56      	ldr	r2, [pc, #344]	@ (8007864 <HAL_DMA_Init+0x668>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d054      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a54      	ldr	r2, [pc, #336]	@ (8007868 <HAL_DMA_Init+0x66c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d04f      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a53      	ldr	r2, [pc, #332]	@ (800786c <HAL_DMA_Init+0x670>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d04a      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a51      	ldr	r2, [pc, #324]	@ (8007870 <HAL_DMA_Init+0x674>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d045      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a50      	ldr	r2, [pc, #320]	@ (8007874 <HAL_DMA_Init+0x678>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d040      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a4e      	ldr	r2, [pc, #312]	@ (8007878 <HAL_DMA_Init+0x67c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d03b      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a4d      	ldr	r2, [pc, #308]	@ (800787c <HAL_DMA_Init+0x680>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d036      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a4b      	ldr	r2, [pc, #300]	@ (8007880 <HAL_DMA_Init+0x684>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d031      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a4a      	ldr	r2, [pc, #296]	@ (8007884 <HAL_DMA_Init+0x688>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d02c      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a48      	ldr	r2, [pc, #288]	@ (8007888 <HAL_DMA_Init+0x68c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d027      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a47      	ldr	r2, [pc, #284]	@ (800788c <HAL_DMA_Init+0x690>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d022      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a45      	ldr	r2, [pc, #276]	@ (8007890 <HAL_DMA_Init+0x694>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01d      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a44      	ldr	r2, [pc, #272]	@ (8007894 <HAL_DMA_Init+0x698>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d018      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a42      	ldr	r2, [pc, #264]	@ (8007898 <HAL_DMA_Init+0x69c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d013      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a41      	ldr	r2, [pc, #260]	@ (800789c <HAL_DMA_Init+0x6a0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00e      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a3f      	ldr	r2, [pc, #252]	@ (80078a0 <HAL_DMA_Init+0x6a4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d009      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a3e      	ldr	r2, [pc, #248]	@ (80078a4 <HAL_DMA_Init+0x6a8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d004      	beq.n	80077ba <HAL_DMA_Init+0x5be>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a3c      	ldr	r2, [pc, #240]	@ (80078a8 <HAL_DMA_Init+0x6ac>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d101      	bne.n	80077be <HAL_DMA_Init+0x5c2>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <HAL_DMA_Init+0x5c4>
 80077be:	2300      	movs	r3, #0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d032      	beq.n	800782a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 fcdf 	bl	8009188 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	2b80      	cmp	r3, #128	@ 0x80
 80077d0:	d102      	bne.n	80077d8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077e0:	b2d2      	uxtb	r2, r2
 80077e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80077ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d010      	beq.n	8007818 <HAL_DMA_Init+0x61c>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d80c      	bhi.n	8007818 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fd5c 	bl	80092bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	e008      	b.n	800782a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	a7fdabf8 	.word	0xa7fdabf8
 8007848:	cccccccd 	.word	0xcccccccd
 800784c:	40020010 	.word	0x40020010
 8007850:	40020028 	.word	0x40020028
 8007854:	40020040 	.word	0x40020040
 8007858:	40020058 	.word	0x40020058
 800785c:	40020070 	.word	0x40020070
 8007860:	40020088 	.word	0x40020088
 8007864:	400200a0 	.word	0x400200a0
 8007868:	400200b8 	.word	0x400200b8
 800786c:	40020410 	.word	0x40020410
 8007870:	40020428 	.word	0x40020428
 8007874:	40020440 	.word	0x40020440
 8007878:	40020458 	.word	0x40020458
 800787c:	40020470 	.word	0x40020470
 8007880:	40020488 	.word	0x40020488
 8007884:	400204a0 	.word	0x400204a0
 8007888:	400204b8 	.word	0x400204b8
 800788c:	58025408 	.word	0x58025408
 8007890:	5802541c 	.word	0x5802541c
 8007894:	58025430 	.word	0x58025430
 8007898:	58025444 	.word	0x58025444
 800789c:	58025458 	.word	0x58025458
 80078a0:	5802546c 	.word	0x5802546c
 80078a4:	58025480 	.word	0x58025480
 80078a8:	58025494 	.word	0x58025494

080078ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e226      	b.n	8007d16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d101      	bne.n	80078d6 <HAL_DMA_Start_IT+0x2a>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e21f      	b.n	8007d16 <HAL_DMA_Start_IT+0x46a>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	f040 820a 	bne.w	8007d00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a68      	ldr	r2, [pc, #416]	@ (8007aa0 <HAL_DMA_Start_IT+0x1f4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d04a      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a66      	ldr	r2, [pc, #408]	@ (8007aa4 <HAL_DMA_Start_IT+0x1f8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d045      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a65      	ldr	r2, [pc, #404]	@ (8007aa8 <HAL_DMA_Start_IT+0x1fc>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d040      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a63      	ldr	r2, [pc, #396]	@ (8007aac <HAL_DMA_Start_IT+0x200>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d03b      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a62      	ldr	r2, [pc, #392]	@ (8007ab0 <HAL_DMA_Start_IT+0x204>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d036      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a60      	ldr	r2, [pc, #384]	@ (8007ab4 <HAL_DMA_Start_IT+0x208>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d031      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a5f      	ldr	r2, [pc, #380]	@ (8007ab8 <HAL_DMA_Start_IT+0x20c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d02c      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a5d      	ldr	r2, [pc, #372]	@ (8007abc <HAL_DMA_Start_IT+0x210>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d027      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a5c      	ldr	r2, [pc, #368]	@ (8007ac0 <HAL_DMA_Start_IT+0x214>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d022      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a5a      	ldr	r2, [pc, #360]	@ (8007ac4 <HAL_DMA_Start_IT+0x218>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d01d      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a59      	ldr	r2, [pc, #356]	@ (8007ac8 <HAL_DMA_Start_IT+0x21c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d018      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a57      	ldr	r2, [pc, #348]	@ (8007acc <HAL_DMA_Start_IT+0x220>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d013      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a56      	ldr	r2, [pc, #344]	@ (8007ad0 <HAL_DMA_Start_IT+0x224>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00e      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a54      	ldr	r2, [pc, #336]	@ (8007ad4 <HAL_DMA_Start_IT+0x228>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d009      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a53      	ldr	r2, [pc, #332]	@ (8007ad8 <HAL_DMA_Start_IT+0x22c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d004      	beq.n	800799a <HAL_DMA_Start_IT+0xee>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a51      	ldr	r2, [pc, #324]	@ (8007adc <HAL_DMA_Start_IT+0x230>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d108      	bne.n	80079ac <HAL_DMA_Start_IT+0x100>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0201 	bic.w	r2, r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e007      	b.n	80079bc <HAL_DMA_Start_IT+0x110>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0201 	bic.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f001 f906 	bl	8008bd4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a34      	ldr	r2, [pc, #208]	@ (8007aa0 <HAL_DMA_Start_IT+0x1f4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d04a      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a33      	ldr	r2, [pc, #204]	@ (8007aa4 <HAL_DMA_Start_IT+0x1f8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d045      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a31      	ldr	r2, [pc, #196]	@ (8007aa8 <HAL_DMA_Start_IT+0x1fc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d040      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a30      	ldr	r2, [pc, #192]	@ (8007aac <HAL_DMA_Start_IT+0x200>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d03b      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a2e      	ldr	r2, [pc, #184]	@ (8007ab0 <HAL_DMA_Start_IT+0x204>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d036      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a2d      	ldr	r2, [pc, #180]	@ (8007ab4 <HAL_DMA_Start_IT+0x208>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d031      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a2b      	ldr	r2, [pc, #172]	@ (8007ab8 <HAL_DMA_Start_IT+0x20c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d02c      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2a      	ldr	r2, [pc, #168]	@ (8007abc <HAL_DMA_Start_IT+0x210>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d027      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a28      	ldr	r2, [pc, #160]	@ (8007ac0 <HAL_DMA_Start_IT+0x214>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d022      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a27      	ldr	r2, [pc, #156]	@ (8007ac4 <HAL_DMA_Start_IT+0x218>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d01d      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a25      	ldr	r2, [pc, #148]	@ (8007ac8 <HAL_DMA_Start_IT+0x21c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d018      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a24      	ldr	r2, [pc, #144]	@ (8007acc <HAL_DMA_Start_IT+0x220>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d013      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a22      	ldr	r2, [pc, #136]	@ (8007ad0 <HAL_DMA_Start_IT+0x224>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00e      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a21      	ldr	r2, [pc, #132]	@ (8007ad4 <HAL_DMA_Start_IT+0x228>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d009      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad8 <HAL_DMA_Start_IT+0x22c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d004      	beq.n	8007a68 <HAL_DMA_Start_IT+0x1bc>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a1e      	ldr	r2, [pc, #120]	@ (8007adc <HAL_DMA_Start_IT+0x230>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d101      	bne.n	8007a6c <HAL_DMA_Start_IT+0x1c0>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e000      	b.n	8007a6e <HAL_DMA_Start_IT+0x1c2>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d036      	beq.n	8007ae0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f023 021e 	bic.w	r2, r3, #30
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f042 0216 	orr.w	r2, r2, #22
 8007a84:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d03e      	beq.n	8007b0c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0208 	orr.w	r2, r2, #8
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e035      	b.n	8007b0c <HAL_DMA_Start_IT+0x260>
 8007aa0:	40020010 	.word	0x40020010
 8007aa4:	40020028 	.word	0x40020028
 8007aa8:	40020040 	.word	0x40020040
 8007aac:	40020058 	.word	0x40020058
 8007ab0:	40020070 	.word	0x40020070
 8007ab4:	40020088 	.word	0x40020088
 8007ab8:	400200a0 	.word	0x400200a0
 8007abc:	400200b8 	.word	0x400200b8
 8007ac0:	40020410 	.word	0x40020410
 8007ac4:	40020428 	.word	0x40020428
 8007ac8:	40020440 	.word	0x40020440
 8007acc:	40020458 	.word	0x40020458
 8007ad0:	40020470 	.word	0x40020470
 8007ad4:	40020488 	.word	0x40020488
 8007ad8:	400204a0 	.word	0x400204a0
 8007adc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f023 020e 	bic.w	r2, r3, #14
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 020a 	orr.w	r2, r2, #10
 8007af2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0204 	orr.w	r2, r2, #4
 8007b0a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a83      	ldr	r2, [pc, #524]	@ (8007d20 <HAL_DMA_Start_IT+0x474>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d072      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a82      	ldr	r2, [pc, #520]	@ (8007d24 <HAL_DMA_Start_IT+0x478>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d06d      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a80      	ldr	r2, [pc, #512]	@ (8007d28 <HAL_DMA_Start_IT+0x47c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d068      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a7f      	ldr	r2, [pc, #508]	@ (8007d2c <HAL_DMA_Start_IT+0x480>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d063      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a7d      	ldr	r2, [pc, #500]	@ (8007d30 <HAL_DMA_Start_IT+0x484>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d05e      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a7c      	ldr	r2, [pc, #496]	@ (8007d34 <HAL_DMA_Start_IT+0x488>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d059      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a7a      	ldr	r2, [pc, #488]	@ (8007d38 <HAL_DMA_Start_IT+0x48c>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d054      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a79      	ldr	r2, [pc, #484]	@ (8007d3c <HAL_DMA_Start_IT+0x490>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d04f      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a77      	ldr	r2, [pc, #476]	@ (8007d40 <HAL_DMA_Start_IT+0x494>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d04a      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a76      	ldr	r2, [pc, #472]	@ (8007d44 <HAL_DMA_Start_IT+0x498>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d045      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a74      	ldr	r2, [pc, #464]	@ (8007d48 <HAL_DMA_Start_IT+0x49c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d040      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a73      	ldr	r2, [pc, #460]	@ (8007d4c <HAL_DMA_Start_IT+0x4a0>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d03b      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a71      	ldr	r2, [pc, #452]	@ (8007d50 <HAL_DMA_Start_IT+0x4a4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d036      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a70      	ldr	r2, [pc, #448]	@ (8007d54 <HAL_DMA_Start_IT+0x4a8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d031      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8007d58 <HAL_DMA_Start_IT+0x4ac>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d02c      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8007d5c <HAL_DMA_Start_IT+0x4b0>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d027      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8007d60 <HAL_DMA_Start_IT+0x4b4>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d022      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a6a      	ldr	r2, [pc, #424]	@ (8007d64 <HAL_DMA_Start_IT+0x4b8>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d01d      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a68      	ldr	r2, [pc, #416]	@ (8007d68 <HAL_DMA_Start_IT+0x4bc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d018      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a67      	ldr	r2, [pc, #412]	@ (8007d6c <HAL_DMA_Start_IT+0x4c0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a65      	ldr	r2, [pc, #404]	@ (8007d70 <HAL_DMA_Start_IT+0x4c4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00e      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a64      	ldr	r2, [pc, #400]	@ (8007d74 <HAL_DMA_Start_IT+0x4c8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d009      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a62      	ldr	r2, [pc, #392]	@ (8007d78 <HAL_DMA_Start_IT+0x4cc>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <HAL_DMA_Start_IT+0x350>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a61      	ldr	r2, [pc, #388]	@ (8007d7c <HAL_DMA_Start_IT+0x4d0>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d101      	bne.n	8007c00 <HAL_DMA_Start_IT+0x354>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <HAL_DMA_Start_IT+0x356>
 8007c00:	2300      	movs	r3, #0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d01a      	beq.n	8007c3c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c22:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c3a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a37      	ldr	r2, [pc, #220]	@ (8007d20 <HAL_DMA_Start_IT+0x474>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d04a      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a36      	ldr	r2, [pc, #216]	@ (8007d24 <HAL_DMA_Start_IT+0x478>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d045      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a34      	ldr	r2, [pc, #208]	@ (8007d28 <HAL_DMA_Start_IT+0x47c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d040      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a33      	ldr	r2, [pc, #204]	@ (8007d2c <HAL_DMA_Start_IT+0x480>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d03b      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a31      	ldr	r2, [pc, #196]	@ (8007d30 <HAL_DMA_Start_IT+0x484>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d036      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a30      	ldr	r2, [pc, #192]	@ (8007d34 <HAL_DMA_Start_IT+0x488>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d031      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8007d38 <HAL_DMA_Start_IT+0x48c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d02c      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a2d      	ldr	r2, [pc, #180]	@ (8007d3c <HAL_DMA_Start_IT+0x490>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d027      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a2b      	ldr	r2, [pc, #172]	@ (8007d40 <HAL_DMA_Start_IT+0x494>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d022      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8007d44 <HAL_DMA_Start_IT+0x498>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d01d      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a28      	ldr	r2, [pc, #160]	@ (8007d48 <HAL_DMA_Start_IT+0x49c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d018      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a27      	ldr	r2, [pc, #156]	@ (8007d4c <HAL_DMA_Start_IT+0x4a0>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d013      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a25      	ldr	r2, [pc, #148]	@ (8007d50 <HAL_DMA_Start_IT+0x4a4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d00e      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a24      	ldr	r2, [pc, #144]	@ (8007d54 <HAL_DMA_Start_IT+0x4a8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d009      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a22      	ldr	r2, [pc, #136]	@ (8007d58 <HAL_DMA_Start_IT+0x4ac>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d004      	beq.n	8007cdc <HAL_DMA_Start_IT+0x430>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a21      	ldr	r2, [pc, #132]	@ (8007d5c <HAL_DMA_Start_IT+0x4b0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d108      	bne.n	8007cee <HAL_DMA_Start_IT+0x442>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e012      	b.n	8007d14 <HAL_DMA_Start_IT+0x468>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f042 0201 	orr.w	r2, r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	e009      	b.n	8007d14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40020010 	.word	0x40020010
 8007d24:	40020028 	.word	0x40020028
 8007d28:	40020040 	.word	0x40020040
 8007d2c:	40020058 	.word	0x40020058
 8007d30:	40020070 	.word	0x40020070
 8007d34:	40020088 	.word	0x40020088
 8007d38:	400200a0 	.word	0x400200a0
 8007d3c:	400200b8 	.word	0x400200b8
 8007d40:	40020410 	.word	0x40020410
 8007d44:	40020428 	.word	0x40020428
 8007d48:	40020440 	.word	0x40020440
 8007d4c:	40020458 	.word	0x40020458
 8007d50:	40020470 	.word	0x40020470
 8007d54:	40020488 	.word	0x40020488
 8007d58:	400204a0 	.word	0x400204a0
 8007d5c:	400204b8 	.word	0x400204b8
 8007d60:	58025408 	.word	0x58025408
 8007d64:	5802541c 	.word	0x5802541c
 8007d68:	58025430 	.word	0x58025430
 8007d6c:	58025444 	.word	0x58025444
 8007d70:	58025458 	.word	0x58025458
 8007d74:	5802546c 	.word	0x5802546c
 8007d78:	58025480 	.word	0x58025480
 8007d7c:	58025494 	.word	0x58025494

08007d80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08a      	sub	sp, #40	@ 0x28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d8c:	4b67      	ldr	r3, [pc, #412]	@ (8007f2c <HAL_DMA_IRQHandler+0x1ac>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a67      	ldr	r2, [pc, #412]	@ (8007f30 <HAL_DMA_IRQHandler+0x1b0>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	0a9b      	lsrs	r3, r3, #10
 8007d98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a5f      	ldr	r2, [pc, #380]	@ (8007f34 <HAL_DMA_IRQHandler+0x1b4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d04a      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8007f38 <HAL_DMA_IRQHandler+0x1b8>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d045      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a5c      	ldr	r2, [pc, #368]	@ (8007f3c <HAL_DMA_IRQHandler+0x1bc>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d040      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8007f40 <HAL_DMA_IRQHandler+0x1c0>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d03b      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a59      	ldr	r2, [pc, #356]	@ (8007f44 <HAL_DMA_IRQHandler+0x1c4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d036      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a57      	ldr	r2, [pc, #348]	@ (8007f48 <HAL_DMA_IRQHandler+0x1c8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d031      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a56      	ldr	r2, [pc, #344]	@ (8007f4c <HAL_DMA_IRQHandler+0x1cc>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d02c      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a54      	ldr	r2, [pc, #336]	@ (8007f50 <HAL_DMA_IRQHandler+0x1d0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d027      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a53      	ldr	r2, [pc, #332]	@ (8007f54 <HAL_DMA_IRQHandler+0x1d4>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d022      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a51      	ldr	r2, [pc, #324]	@ (8007f58 <HAL_DMA_IRQHandler+0x1d8>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d01d      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a50      	ldr	r2, [pc, #320]	@ (8007f5c <HAL_DMA_IRQHandler+0x1dc>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d018      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a4e      	ldr	r2, [pc, #312]	@ (8007f60 <HAL_DMA_IRQHandler+0x1e0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d013      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a4d      	ldr	r2, [pc, #308]	@ (8007f64 <HAL_DMA_IRQHandler+0x1e4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00e      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a4b      	ldr	r2, [pc, #300]	@ (8007f68 <HAL_DMA_IRQHandler+0x1e8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d009      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a4a      	ldr	r2, [pc, #296]	@ (8007f6c <HAL_DMA_IRQHandler+0x1ec>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d004      	beq.n	8007e52 <HAL_DMA_IRQHandler+0xd2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a48      	ldr	r2, [pc, #288]	@ (8007f70 <HAL_DMA_IRQHandler+0x1f0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d101      	bne.n	8007e56 <HAL_DMA_IRQHandler+0xd6>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <HAL_DMA_IRQHandler+0xd8>
 8007e56:	2300      	movs	r3, #0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 842b 	beq.w	80086b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e62:	f003 031f 	and.w	r3, r3, #31
 8007e66:	2208      	movs	r2, #8
 8007e68:	409a      	lsls	r2, r3
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 80a2 	beq.w	8007fb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a2e      	ldr	r2, [pc, #184]	@ (8007f34 <HAL_DMA_IRQHandler+0x1b4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d04a      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a2d      	ldr	r2, [pc, #180]	@ (8007f38 <HAL_DMA_IRQHandler+0x1b8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d045      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8007f3c <HAL_DMA_IRQHandler+0x1bc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d040      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a2a      	ldr	r2, [pc, #168]	@ (8007f40 <HAL_DMA_IRQHandler+0x1c0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d03b      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a28      	ldr	r2, [pc, #160]	@ (8007f44 <HAL_DMA_IRQHandler+0x1c4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d036      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a27      	ldr	r2, [pc, #156]	@ (8007f48 <HAL_DMA_IRQHandler+0x1c8>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d031      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a25      	ldr	r2, [pc, #148]	@ (8007f4c <HAL_DMA_IRQHandler+0x1cc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d02c      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a24      	ldr	r2, [pc, #144]	@ (8007f50 <HAL_DMA_IRQHandler+0x1d0>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d027      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a22      	ldr	r2, [pc, #136]	@ (8007f54 <HAL_DMA_IRQHandler+0x1d4>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d022      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a21      	ldr	r2, [pc, #132]	@ (8007f58 <HAL_DMA_IRQHandler+0x1d8>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d01d      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a1f      	ldr	r2, [pc, #124]	@ (8007f5c <HAL_DMA_IRQHandler+0x1dc>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d018      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f60 <HAL_DMA_IRQHandler+0x1e0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d013      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f64 <HAL_DMA_IRQHandler+0x1e4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00e      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1b      	ldr	r2, [pc, #108]	@ (8007f68 <HAL_DMA_IRQHandler+0x1e8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d009      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a19      	ldr	r2, [pc, #100]	@ (8007f6c <HAL_DMA_IRQHandler+0x1ec>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d004      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x194>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a18      	ldr	r2, [pc, #96]	@ (8007f70 <HAL_DMA_IRQHandler+0x1f0>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d12f      	bne.n	8007f74 <HAL_DMA_IRQHandler+0x1f4>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bf14      	ite	ne
 8007f22:	2301      	movne	r3, #1
 8007f24:	2300      	moveq	r3, #0
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	e02e      	b.n	8007f88 <HAL_DMA_IRQHandler+0x208>
 8007f2a:	bf00      	nop
 8007f2c:	24000014 	.word	0x24000014
 8007f30:	1b4e81b5 	.word	0x1b4e81b5
 8007f34:	40020010 	.word	0x40020010
 8007f38:	40020028 	.word	0x40020028
 8007f3c:	40020040 	.word	0x40020040
 8007f40:	40020058 	.word	0x40020058
 8007f44:	40020070 	.word	0x40020070
 8007f48:	40020088 	.word	0x40020088
 8007f4c:	400200a0 	.word	0x400200a0
 8007f50:	400200b8 	.word	0x400200b8
 8007f54:	40020410 	.word	0x40020410
 8007f58:	40020428 	.word	0x40020428
 8007f5c:	40020440 	.word	0x40020440
 8007f60:	40020458 	.word	0x40020458
 8007f64:	40020470 	.word	0x40020470
 8007f68:	40020488 	.word	0x40020488
 8007f6c:	400204a0 	.word	0x400204a0
 8007f70:	400204b8 	.word	0x400204b8
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bf14      	ite	ne
 8007f82:	2301      	movne	r3, #1
 8007f84:	2300      	moveq	r3, #0
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d015      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0204 	bic.w	r2, r2, #4
 8007f9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fa0:	f003 031f 	and.w	r3, r3, #31
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	409a      	lsls	r2, r3
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb0:	f043 0201 	orr.w	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fbc:	f003 031f 	and.w	r3, r3, #31
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d06e      	beq.n	80080ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a69      	ldr	r2, [pc, #420]	@ (8008178 <HAL_DMA_IRQHandler+0x3f8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d04a      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a67      	ldr	r2, [pc, #412]	@ (800817c <HAL_DMA_IRQHandler+0x3fc>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d045      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a66      	ldr	r2, [pc, #408]	@ (8008180 <HAL_DMA_IRQHandler+0x400>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d040      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a64      	ldr	r2, [pc, #400]	@ (8008184 <HAL_DMA_IRQHandler+0x404>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d03b      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a63      	ldr	r2, [pc, #396]	@ (8008188 <HAL_DMA_IRQHandler+0x408>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d036      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a61      	ldr	r2, [pc, #388]	@ (800818c <HAL_DMA_IRQHandler+0x40c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d031      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a60      	ldr	r2, [pc, #384]	@ (8008190 <HAL_DMA_IRQHandler+0x410>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d02c      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a5e      	ldr	r2, [pc, #376]	@ (8008194 <HAL_DMA_IRQHandler+0x414>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d027      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a5d      	ldr	r2, [pc, #372]	@ (8008198 <HAL_DMA_IRQHandler+0x418>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d022      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a5b      	ldr	r2, [pc, #364]	@ (800819c <HAL_DMA_IRQHandler+0x41c>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d01d      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a5a      	ldr	r2, [pc, #360]	@ (80081a0 <HAL_DMA_IRQHandler+0x420>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d018      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a58      	ldr	r2, [pc, #352]	@ (80081a4 <HAL_DMA_IRQHandler+0x424>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d013      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a57      	ldr	r2, [pc, #348]	@ (80081a8 <HAL_DMA_IRQHandler+0x428>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00e      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a55      	ldr	r2, [pc, #340]	@ (80081ac <HAL_DMA_IRQHandler+0x42c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d009      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a54      	ldr	r2, [pc, #336]	@ (80081b0 <HAL_DMA_IRQHandler+0x430>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d004      	beq.n	800806e <HAL_DMA_IRQHandler+0x2ee>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a52      	ldr	r2, [pc, #328]	@ (80081b4 <HAL_DMA_IRQHandler+0x434>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d10a      	bne.n	8008084 <HAL_DMA_IRQHandler+0x304>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008078:	2b00      	cmp	r3, #0
 800807a:	bf14      	ite	ne
 800807c:	2301      	movne	r3, #1
 800807e:	2300      	moveq	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	e003      	b.n	800808c <HAL_DMA_IRQHandler+0x30c>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2300      	movs	r3, #0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00d      	beq.n	80080ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008094:	f003 031f 	and.w	r3, r3, #31
 8008098:	2201      	movs	r2, #1
 800809a:	409a      	lsls	r2, r3
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a4:	f043 0202 	orr.w	r2, r3, #2
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2204      	movs	r2, #4
 80080b6:	409a      	lsls	r2, r3
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 808f 	beq.w	80081e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008178 <HAL_DMA_IRQHandler+0x3f8>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d04a      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a2a      	ldr	r2, [pc, #168]	@ (800817c <HAL_DMA_IRQHandler+0x3fc>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d045      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a29      	ldr	r2, [pc, #164]	@ (8008180 <HAL_DMA_IRQHandler+0x400>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d040      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a27      	ldr	r2, [pc, #156]	@ (8008184 <HAL_DMA_IRQHandler+0x404>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d03b      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a26      	ldr	r2, [pc, #152]	@ (8008188 <HAL_DMA_IRQHandler+0x408>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d036      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a24      	ldr	r2, [pc, #144]	@ (800818c <HAL_DMA_IRQHandler+0x40c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d031      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a23      	ldr	r2, [pc, #140]	@ (8008190 <HAL_DMA_IRQHandler+0x410>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d02c      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a21      	ldr	r2, [pc, #132]	@ (8008194 <HAL_DMA_IRQHandler+0x414>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d027      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a20      	ldr	r2, [pc, #128]	@ (8008198 <HAL_DMA_IRQHandler+0x418>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d022      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a1e      	ldr	r2, [pc, #120]	@ (800819c <HAL_DMA_IRQHandler+0x41c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d01d      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a1d      	ldr	r2, [pc, #116]	@ (80081a0 <HAL_DMA_IRQHandler+0x420>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d018      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1b      	ldr	r2, [pc, #108]	@ (80081a4 <HAL_DMA_IRQHandler+0x424>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d013      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a1a      	ldr	r2, [pc, #104]	@ (80081a8 <HAL_DMA_IRQHandler+0x428>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d00e      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a18      	ldr	r2, [pc, #96]	@ (80081ac <HAL_DMA_IRQHandler+0x42c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d009      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a17      	ldr	r2, [pc, #92]	@ (80081b0 <HAL_DMA_IRQHandler+0x430>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d004      	beq.n	8008162 <HAL_DMA_IRQHandler+0x3e2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a15      	ldr	r2, [pc, #84]	@ (80081b4 <HAL_DMA_IRQHandler+0x434>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d12a      	bne.n	80081b8 <HAL_DMA_IRQHandler+0x438>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	bf14      	ite	ne
 8008170:	2301      	movne	r3, #1
 8008172:	2300      	moveq	r3, #0
 8008174:	b2db      	uxtb	r3, r3
 8008176:	e023      	b.n	80081c0 <HAL_DMA_IRQHandler+0x440>
 8008178:	40020010 	.word	0x40020010
 800817c:	40020028 	.word	0x40020028
 8008180:	40020040 	.word	0x40020040
 8008184:	40020058 	.word	0x40020058
 8008188:	40020070 	.word	0x40020070
 800818c:	40020088 	.word	0x40020088
 8008190:	400200a0 	.word	0x400200a0
 8008194:	400200b8 	.word	0x400200b8
 8008198:	40020410 	.word	0x40020410
 800819c:	40020428 	.word	0x40020428
 80081a0:	40020440 	.word	0x40020440
 80081a4:	40020458 	.word	0x40020458
 80081a8:	40020470 	.word	0x40020470
 80081ac:	40020488 	.word	0x40020488
 80081b0:	400204a0 	.word	0x400204a0
 80081b4:	400204b8 	.word	0x400204b8
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2300      	movs	r3, #0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00d      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c8:	f003 031f 	and.w	r3, r3, #31
 80081cc:	2204      	movs	r2, #4
 80081ce:	409a      	lsls	r2, r3
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d8:	f043 0204 	orr.w	r2, r3, #4
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081e4:	f003 031f 	and.w	r3, r3, #31
 80081e8:	2210      	movs	r2, #16
 80081ea:	409a      	lsls	r2, r3
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 80a6 	beq.w	8008342 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a85      	ldr	r2, [pc, #532]	@ (8008410 <HAL_DMA_IRQHandler+0x690>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d04a      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a83      	ldr	r2, [pc, #524]	@ (8008414 <HAL_DMA_IRQHandler+0x694>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d045      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a82      	ldr	r2, [pc, #520]	@ (8008418 <HAL_DMA_IRQHandler+0x698>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d040      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a80      	ldr	r2, [pc, #512]	@ (800841c <HAL_DMA_IRQHandler+0x69c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d03b      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a7f      	ldr	r2, [pc, #508]	@ (8008420 <HAL_DMA_IRQHandler+0x6a0>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d036      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a7d      	ldr	r2, [pc, #500]	@ (8008424 <HAL_DMA_IRQHandler+0x6a4>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d031      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a7c      	ldr	r2, [pc, #496]	@ (8008428 <HAL_DMA_IRQHandler+0x6a8>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d02c      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a7a      	ldr	r2, [pc, #488]	@ (800842c <HAL_DMA_IRQHandler+0x6ac>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d027      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a79      	ldr	r2, [pc, #484]	@ (8008430 <HAL_DMA_IRQHandler+0x6b0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d022      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a77      	ldr	r2, [pc, #476]	@ (8008434 <HAL_DMA_IRQHandler+0x6b4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01d      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a76      	ldr	r2, [pc, #472]	@ (8008438 <HAL_DMA_IRQHandler+0x6b8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d018      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a74      	ldr	r2, [pc, #464]	@ (800843c <HAL_DMA_IRQHandler+0x6bc>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d013      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a73      	ldr	r2, [pc, #460]	@ (8008440 <HAL_DMA_IRQHandler+0x6c0>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00e      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a71      	ldr	r2, [pc, #452]	@ (8008444 <HAL_DMA_IRQHandler+0x6c4>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d009      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a70      	ldr	r2, [pc, #448]	@ (8008448 <HAL_DMA_IRQHandler+0x6c8>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d004      	beq.n	8008296 <HAL_DMA_IRQHandler+0x516>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a6e      	ldr	r2, [pc, #440]	@ (800844c <HAL_DMA_IRQHandler+0x6cc>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d10a      	bne.n	80082ac <HAL_DMA_IRQHandler+0x52c>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bf14      	ite	ne
 80082a4:	2301      	movne	r3, #1
 80082a6:	2300      	moveq	r3, #0
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	e009      	b.n	80082c0 <HAL_DMA_IRQHandler+0x540>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0304 	and.w	r3, r3, #4
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	bf14      	ite	ne
 80082ba:	2301      	movne	r3, #1
 80082bc:	2300      	moveq	r3, #0
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d03e      	beq.n	8008342 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082c8:	f003 031f 	and.w	r3, r3, #31
 80082cc:	2210      	movs	r2, #16
 80082ce:	409a      	lsls	r2, r3
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d018      	beq.n	8008314 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d108      	bne.n	8008302 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d024      	beq.n	8008342 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	4798      	blx	r3
 8008300:	e01f      	b.n	8008342 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01b      	beq.n	8008342 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
 8008312:	e016      	b.n	8008342 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800831e:	2b00      	cmp	r3, #0
 8008320:	d107      	bne.n	8008332 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0208 	bic.w	r2, r2, #8
 8008330:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008346:	f003 031f 	and.w	r3, r3, #31
 800834a:	2220      	movs	r2, #32
 800834c:	409a      	lsls	r2, r3
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	4013      	ands	r3, r2
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 8110 	beq.w	8008578 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a2c      	ldr	r2, [pc, #176]	@ (8008410 <HAL_DMA_IRQHandler+0x690>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d04a      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a2b      	ldr	r2, [pc, #172]	@ (8008414 <HAL_DMA_IRQHandler+0x694>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d045      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a29      	ldr	r2, [pc, #164]	@ (8008418 <HAL_DMA_IRQHandler+0x698>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d040      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a28      	ldr	r2, [pc, #160]	@ (800841c <HAL_DMA_IRQHandler+0x69c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d03b      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a26      	ldr	r2, [pc, #152]	@ (8008420 <HAL_DMA_IRQHandler+0x6a0>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d036      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a25      	ldr	r2, [pc, #148]	@ (8008424 <HAL_DMA_IRQHandler+0x6a4>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d031      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a23      	ldr	r2, [pc, #140]	@ (8008428 <HAL_DMA_IRQHandler+0x6a8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d02c      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a22      	ldr	r2, [pc, #136]	@ (800842c <HAL_DMA_IRQHandler+0x6ac>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d027      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a20      	ldr	r2, [pc, #128]	@ (8008430 <HAL_DMA_IRQHandler+0x6b0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d022      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008434 <HAL_DMA_IRQHandler+0x6b4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d01d      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008438 <HAL_DMA_IRQHandler+0x6b8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d018      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1c      	ldr	r2, [pc, #112]	@ (800843c <HAL_DMA_IRQHandler+0x6bc>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d013      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008440 <HAL_DMA_IRQHandler+0x6c0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00e      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a19      	ldr	r2, [pc, #100]	@ (8008444 <HAL_DMA_IRQHandler+0x6c4>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d009      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a17      	ldr	r2, [pc, #92]	@ (8008448 <HAL_DMA_IRQHandler+0x6c8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d004      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x678>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a16      	ldr	r2, [pc, #88]	@ (800844c <HAL_DMA_IRQHandler+0x6cc>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d12b      	bne.n	8008450 <HAL_DMA_IRQHandler+0x6d0>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0310 	and.w	r3, r3, #16
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf14      	ite	ne
 8008406:	2301      	movne	r3, #1
 8008408:	2300      	moveq	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	e02a      	b.n	8008464 <HAL_DMA_IRQHandler+0x6e4>
 800840e:	bf00      	nop
 8008410:	40020010 	.word	0x40020010
 8008414:	40020028 	.word	0x40020028
 8008418:	40020040 	.word	0x40020040
 800841c:	40020058 	.word	0x40020058
 8008420:	40020070 	.word	0x40020070
 8008424:	40020088 	.word	0x40020088
 8008428:	400200a0 	.word	0x400200a0
 800842c:	400200b8 	.word	0x400200b8
 8008430:	40020410 	.word	0x40020410
 8008434:	40020428 	.word	0x40020428
 8008438:	40020440 	.word	0x40020440
 800843c:	40020458 	.word	0x40020458
 8008440:	40020470 	.word	0x40020470
 8008444:	40020488 	.word	0x40020488
 8008448:	400204a0 	.word	0x400204a0
 800844c:	400204b8 	.word	0x400204b8
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b00      	cmp	r3, #0
 800845c:	bf14      	ite	ne
 800845e:	2301      	movne	r3, #1
 8008460:	2300      	moveq	r3, #0
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 8087 	beq.w	8008578 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800846e:	f003 031f 	and.w	r3, r3, #31
 8008472:	2220      	movs	r2, #32
 8008474:	409a      	lsls	r2, r3
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b04      	cmp	r3, #4
 8008484:	d139      	bne.n	80084fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0216 	bic.w	r2, r2, #22
 8008494:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695a      	ldr	r2, [r3, #20]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d103      	bne.n	80084b6 <HAL_DMA_IRQHandler+0x736>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0208 	bic.w	r2, r2, #8
 80084c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ca:	f003 031f 	and.w	r3, r3, #31
 80084ce:	223f      	movs	r2, #63	@ 0x3f
 80084d0:	409a      	lsls	r2, r3
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 834a 	beq.w	8008b84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
          }
          return;
 80084f8:	e344      	b.n	8008b84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d018      	beq.n	800853a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d108      	bne.n	8008528 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800851a:	2b00      	cmp	r3, #0
 800851c:	d02c      	beq.n	8008578 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	4798      	blx	r3
 8008526:	e027      	b.n	8008578 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852c:	2b00      	cmp	r3, #0
 800852e:	d023      	beq.n	8008578 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	4798      	blx	r3
 8008538:	e01e      	b.n	8008578 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10f      	bne.n	8008568 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0210 	bic.w	r2, r2, #16
 8008556:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 8306 	beq.w	8008b8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 8088 	beq.w	80086a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2204      	movs	r2, #4
 8008594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a7a      	ldr	r2, [pc, #488]	@ (8008788 <HAL_DMA_IRQHandler+0xa08>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d04a      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a79      	ldr	r2, [pc, #484]	@ (800878c <HAL_DMA_IRQHandler+0xa0c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d045      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a77      	ldr	r2, [pc, #476]	@ (8008790 <HAL_DMA_IRQHandler+0xa10>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d040      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a76      	ldr	r2, [pc, #472]	@ (8008794 <HAL_DMA_IRQHandler+0xa14>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d03b      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a74      	ldr	r2, [pc, #464]	@ (8008798 <HAL_DMA_IRQHandler+0xa18>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d036      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a73      	ldr	r2, [pc, #460]	@ (800879c <HAL_DMA_IRQHandler+0xa1c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d031      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a71      	ldr	r2, [pc, #452]	@ (80087a0 <HAL_DMA_IRQHandler+0xa20>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d02c      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a70      	ldr	r2, [pc, #448]	@ (80087a4 <HAL_DMA_IRQHandler+0xa24>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d027      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a6e      	ldr	r2, [pc, #440]	@ (80087a8 <HAL_DMA_IRQHandler+0xa28>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d022      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a6d      	ldr	r2, [pc, #436]	@ (80087ac <HAL_DMA_IRQHandler+0xa2c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d01d      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a6b      	ldr	r2, [pc, #428]	@ (80087b0 <HAL_DMA_IRQHandler+0xa30>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d018      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a6a      	ldr	r2, [pc, #424]	@ (80087b4 <HAL_DMA_IRQHandler+0xa34>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d013      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a68      	ldr	r2, [pc, #416]	@ (80087b8 <HAL_DMA_IRQHandler+0xa38>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d00e      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a67      	ldr	r2, [pc, #412]	@ (80087bc <HAL_DMA_IRQHandler+0xa3c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d009      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a65      	ldr	r2, [pc, #404]	@ (80087c0 <HAL_DMA_IRQHandler+0xa40>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d004      	beq.n	8008638 <HAL_DMA_IRQHandler+0x8b8>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a64      	ldr	r2, [pc, #400]	@ (80087c4 <HAL_DMA_IRQHandler+0xa44>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d108      	bne.n	800864a <HAL_DMA_IRQHandler+0x8ca>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	e007      	b.n	800865a <HAL_DMA_IRQHandler+0x8da>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0201 	bic.w	r2, r2, #1
 8008658:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008662:	429a      	cmp	r2, r3
 8008664:	d307      	bcc.n	8008676 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f2      	bne.n	800865a <HAL_DMA_IRQHandler+0x8da>
 8008674:	e000      	b.n	8008678 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008676:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2203      	movs	r2, #3
 800868a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800868e:	e003      	b.n	8008698 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8272 	beq.w	8008b8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4798      	blx	r3
 80086b2:	e26c      	b.n	8008b8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a43      	ldr	r2, [pc, #268]	@ (80087c8 <HAL_DMA_IRQHandler+0xa48>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d022      	beq.n	8008704 <HAL_DMA_IRQHandler+0x984>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a42      	ldr	r2, [pc, #264]	@ (80087cc <HAL_DMA_IRQHandler+0xa4c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d01d      	beq.n	8008704 <HAL_DMA_IRQHandler+0x984>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a40      	ldr	r2, [pc, #256]	@ (80087d0 <HAL_DMA_IRQHandler+0xa50>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d018      	beq.n	8008704 <HAL_DMA_IRQHandler+0x984>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a3f      	ldr	r2, [pc, #252]	@ (80087d4 <HAL_DMA_IRQHandler+0xa54>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <HAL_DMA_IRQHandler+0x984>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a3d      	ldr	r2, [pc, #244]	@ (80087d8 <HAL_DMA_IRQHandler+0xa58>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00e      	beq.n	8008704 <HAL_DMA_IRQHandler+0x984>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a3c      	ldr	r2, [pc, #240]	@ (80087dc <HAL_DMA_IRQHandler+0xa5c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d009      	beq.n	8008704 <HAL_DMA_IRQHandler+0x984>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a3a      	ldr	r2, [pc, #232]	@ (80087e0 <HAL_DMA_IRQHandler+0xa60>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d004      	beq.n	8008704 <HAL_DMA_IRQHandler+0x984>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a39      	ldr	r2, [pc, #228]	@ (80087e4 <HAL_DMA_IRQHandler+0xa64>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d101      	bne.n	8008708 <HAL_DMA_IRQHandler+0x988>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <HAL_DMA_IRQHandler+0x98a>
 8008708:	2300      	movs	r3, #0
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 823f 	beq.w	8008b8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800871c:	f003 031f 	and.w	r3, r3, #31
 8008720:	2204      	movs	r2, #4
 8008722:	409a      	lsls	r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	4013      	ands	r3, r2
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80cd 	beq.w	80088c8 <HAL_DMA_IRQHandler+0xb48>
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80c7 	beq.w	80088c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800873e:	f003 031f 	and.w	r3, r3, #31
 8008742:	2204      	movs	r2, #4
 8008744:	409a      	lsls	r2, r3
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d049      	beq.n	80087e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 8210 	beq.w	8008b88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008770:	e20a      	b.n	8008b88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 8206 	beq.w	8008b88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008784:	e200      	b.n	8008b88 <HAL_DMA_IRQHandler+0xe08>
 8008786:	bf00      	nop
 8008788:	40020010 	.word	0x40020010
 800878c:	40020028 	.word	0x40020028
 8008790:	40020040 	.word	0x40020040
 8008794:	40020058 	.word	0x40020058
 8008798:	40020070 	.word	0x40020070
 800879c:	40020088 	.word	0x40020088
 80087a0:	400200a0 	.word	0x400200a0
 80087a4:	400200b8 	.word	0x400200b8
 80087a8:	40020410 	.word	0x40020410
 80087ac:	40020428 	.word	0x40020428
 80087b0:	40020440 	.word	0x40020440
 80087b4:	40020458 	.word	0x40020458
 80087b8:	40020470 	.word	0x40020470
 80087bc:	40020488 	.word	0x40020488
 80087c0:	400204a0 	.word	0x400204a0
 80087c4:	400204b8 	.word	0x400204b8
 80087c8:	58025408 	.word	0x58025408
 80087cc:	5802541c 	.word	0x5802541c
 80087d0:	58025430 	.word	0x58025430
 80087d4:	58025444 	.word	0x58025444
 80087d8:	58025458 	.word	0x58025458
 80087dc:	5802546c 	.word	0x5802546c
 80087e0:	58025480 	.word	0x58025480
 80087e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d160      	bne.n	80088b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a7f      	ldr	r2, [pc, #508]	@ (80089f4 <HAL_DMA_IRQHandler+0xc74>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d04a      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a7d      	ldr	r2, [pc, #500]	@ (80089f8 <HAL_DMA_IRQHandler+0xc78>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d045      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a7c      	ldr	r2, [pc, #496]	@ (80089fc <HAL_DMA_IRQHandler+0xc7c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d040      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a7a      	ldr	r2, [pc, #488]	@ (8008a00 <HAL_DMA_IRQHandler+0xc80>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d03b      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a79      	ldr	r2, [pc, #484]	@ (8008a04 <HAL_DMA_IRQHandler+0xc84>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d036      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a77      	ldr	r2, [pc, #476]	@ (8008a08 <HAL_DMA_IRQHandler+0xc88>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d031      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a76      	ldr	r2, [pc, #472]	@ (8008a0c <HAL_DMA_IRQHandler+0xc8c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d02c      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a74      	ldr	r2, [pc, #464]	@ (8008a10 <HAL_DMA_IRQHandler+0xc90>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d027      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a73      	ldr	r2, [pc, #460]	@ (8008a14 <HAL_DMA_IRQHandler+0xc94>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d022      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a71      	ldr	r2, [pc, #452]	@ (8008a18 <HAL_DMA_IRQHandler+0xc98>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d01d      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a70      	ldr	r2, [pc, #448]	@ (8008a1c <HAL_DMA_IRQHandler+0xc9c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d018      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a6e      	ldr	r2, [pc, #440]	@ (8008a20 <HAL_DMA_IRQHandler+0xca0>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d013      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a6d      	ldr	r2, [pc, #436]	@ (8008a24 <HAL_DMA_IRQHandler+0xca4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d00e      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a6b      	ldr	r2, [pc, #428]	@ (8008a28 <HAL_DMA_IRQHandler+0xca8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d009      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a6a      	ldr	r2, [pc, #424]	@ (8008a2c <HAL_DMA_IRQHandler+0xcac>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d004      	beq.n	8008892 <HAL_DMA_IRQHandler+0xb12>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a68      	ldr	r2, [pc, #416]	@ (8008a30 <HAL_DMA_IRQHandler+0xcb0>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d108      	bne.n	80088a4 <HAL_DMA_IRQHandler+0xb24>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 0208 	bic.w	r2, r2, #8
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	e007      	b.n	80088b4 <HAL_DMA_IRQHandler+0xb34>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0204 	bic.w	r2, r2, #4
 80088b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 8165 	beq.w	8008b88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088c6:	e15f      	b.n	8008b88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088cc:	f003 031f 	and.w	r3, r3, #31
 80088d0:	2202      	movs	r2, #2
 80088d2:	409a      	lsls	r2, r3
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	4013      	ands	r3, r2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80c5 	beq.w	8008a68 <HAL_DMA_IRQHandler+0xce8>
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 80bf 	beq.w	8008a68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ee:	f003 031f 	and.w	r3, r3, #31
 80088f2:	2202      	movs	r2, #2
 80088f4:	409a      	lsls	r2, r3
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d018      	beq.n	8008936 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d109      	bne.n	8008922 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 813a 	beq.w	8008b8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008920:	e134      	b.n	8008b8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 8130 	beq.w	8008b8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008934:	e12a      	b.n	8008b8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f003 0320 	and.w	r3, r3, #32
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 8089 	bne.w	8008a54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a2b      	ldr	r2, [pc, #172]	@ (80089f4 <HAL_DMA_IRQHandler+0xc74>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d04a      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a29      	ldr	r2, [pc, #164]	@ (80089f8 <HAL_DMA_IRQHandler+0xc78>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d045      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a28      	ldr	r2, [pc, #160]	@ (80089fc <HAL_DMA_IRQHandler+0xc7c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d040      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a26      	ldr	r2, [pc, #152]	@ (8008a00 <HAL_DMA_IRQHandler+0xc80>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d03b      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a25      	ldr	r2, [pc, #148]	@ (8008a04 <HAL_DMA_IRQHandler+0xc84>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d036      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a23      	ldr	r2, [pc, #140]	@ (8008a08 <HAL_DMA_IRQHandler+0xc88>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d031      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a22      	ldr	r2, [pc, #136]	@ (8008a0c <HAL_DMA_IRQHandler+0xc8c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d02c      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a20      	ldr	r2, [pc, #128]	@ (8008a10 <HAL_DMA_IRQHandler+0xc90>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d027      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a1f      	ldr	r2, [pc, #124]	@ (8008a14 <HAL_DMA_IRQHandler+0xc94>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d022      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a18 <HAL_DMA_IRQHandler+0xc98>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d01d      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a1c      	ldr	r2, [pc, #112]	@ (8008a1c <HAL_DMA_IRQHandler+0xc9c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d018      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008a20 <HAL_DMA_IRQHandler+0xca0>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d013      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a19      	ldr	r2, [pc, #100]	@ (8008a24 <HAL_DMA_IRQHandler+0xca4>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d00e      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a17      	ldr	r2, [pc, #92]	@ (8008a28 <HAL_DMA_IRQHandler+0xca8>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d009      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a16      	ldr	r2, [pc, #88]	@ (8008a2c <HAL_DMA_IRQHandler+0xcac>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d004      	beq.n	80089e2 <HAL_DMA_IRQHandler+0xc62>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a14      	ldr	r2, [pc, #80]	@ (8008a30 <HAL_DMA_IRQHandler+0xcb0>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d128      	bne.n	8008a34 <HAL_DMA_IRQHandler+0xcb4>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0214 	bic.w	r2, r2, #20
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	e027      	b.n	8008a44 <HAL_DMA_IRQHandler+0xcc4>
 80089f4:	40020010 	.word	0x40020010
 80089f8:	40020028 	.word	0x40020028
 80089fc:	40020040 	.word	0x40020040
 8008a00:	40020058 	.word	0x40020058
 8008a04:	40020070 	.word	0x40020070
 8008a08:	40020088 	.word	0x40020088
 8008a0c:	400200a0 	.word	0x400200a0
 8008a10:	400200b8 	.word	0x400200b8
 8008a14:	40020410 	.word	0x40020410
 8008a18:	40020428 	.word	0x40020428
 8008a1c:	40020440 	.word	0x40020440
 8008a20:	40020458 	.word	0x40020458
 8008a24:	40020470 	.word	0x40020470
 8008a28:	40020488 	.word	0x40020488
 8008a2c:	400204a0 	.word	0x400204a0
 8008a30:	400204b8 	.word	0x400204b8
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 020a 	bic.w	r2, r2, #10
 8008a42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 8097 	beq.w	8008b8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a66:	e091      	b.n	8008b8c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	2208      	movs	r2, #8
 8008a72:	409a      	lsls	r2, r3
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	4013      	ands	r3, r2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8088 	beq.w	8008b8e <HAL_DMA_IRQHandler+0xe0e>
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8082 	beq.w	8008b8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a41      	ldr	r2, [pc, #260]	@ (8008b94 <HAL_DMA_IRQHandler+0xe14>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d04a      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a3f      	ldr	r2, [pc, #252]	@ (8008b98 <HAL_DMA_IRQHandler+0xe18>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d045      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8008b9c <HAL_DMA_IRQHandler+0xe1c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d040      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a3c      	ldr	r2, [pc, #240]	@ (8008ba0 <HAL_DMA_IRQHandler+0xe20>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d03b      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8008ba4 <HAL_DMA_IRQHandler+0xe24>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d036      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a39      	ldr	r2, [pc, #228]	@ (8008ba8 <HAL_DMA_IRQHandler+0xe28>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d031      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a38      	ldr	r2, [pc, #224]	@ (8008bac <HAL_DMA_IRQHandler+0xe2c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d02c      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a36      	ldr	r2, [pc, #216]	@ (8008bb0 <HAL_DMA_IRQHandler+0xe30>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d027      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a35      	ldr	r2, [pc, #212]	@ (8008bb4 <HAL_DMA_IRQHandler+0xe34>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d022      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a33      	ldr	r2, [pc, #204]	@ (8008bb8 <HAL_DMA_IRQHandler+0xe38>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d01d      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a32      	ldr	r2, [pc, #200]	@ (8008bbc <HAL_DMA_IRQHandler+0xe3c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d018      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a30      	ldr	r2, [pc, #192]	@ (8008bc0 <HAL_DMA_IRQHandler+0xe40>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d013      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a2f      	ldr	r2, [pc, #188]	@ (8008bc4 <HAL_DMA_IRQHandler+0xe44>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d00e      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a2d      	ldr	r2, [pc, #180]	@ (8008bc8 <HAL_DMA_IRQHandler+0xe48>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d009      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bcc <HAL_DMA_IRQHandler+0xe4c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d004      	beq.n	8008b2a <HAL_DMA_IRQHandler+0xdaa>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a2a      	ldr	r2, [pc, #168]	@ (8008bd0 <HAL_DMA_IRQHandler+0xe50>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d108      	bne.n	8008b3c <HAL_DMA_IRQHandler+0xdbc>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 021c 	bic.w	r2, r2, #28
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	e007      	b.n	8008b4c <HAL_DMA_IRQHandler+0xdcc>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 020e 	bic.w	r2, r2, #14
 8008b4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	2201      	movs	r2, #1
 8008b56:	409a      	lsls	r2, r3
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d009      	beq.n	8008b8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4798      	blx	r3
 8008b82:	e004      	b.n	8008b8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008b84:	bf00      	nop
 8008b86:	e002      	b.n	8008b8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b88:	bf00      	nop
 8008b8a:	e000      	b.n	8008b8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008b8e:	3728      	adds	r7, #40	@ 0x28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	40020010 	.word	0x40020010
 8008b98:	40020028 	.word	0x40020028
 8008b9c:	40020040 	.word	0x40020040
 8008ba0:	40020058 	.word	0x40020058
 8008ba4:	40020070 	.word	0x40020070
 8008ba8:	40020088 	.word	0x40020088
 8008bac:	400200a0 	.word	0x400200a0
 8008bb0:	400200b8 	.word	0x400200b8
 8008bb4:	40020410 	.word	0x40020410
 8008bb8:	40020428 	.word	0x40020428
 8008bbc:	40020440 	.word	0x40020440
 8008bc0:	40020458 	.word	0x40020458
 8008bc4:	40020470 	.word	0x40020470
 8008bc8:	40020488 	.word	0x40020488
 8008bcc:	400204a0 	.word	0x400204a0
 8008bd0:	400204b8 	.word	0x400204b8

08008bd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a7f      	ldr	r2, [pc, #508]	@ (8008df0 <DMA_SetConfig+0x21c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d072      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a7d      	ldr	r2, [pc, #500]	@ (8008df4 <DMA_SetConfig+0x220>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d06d      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a7c      	ldr	r2, [pc, #496]	@ (8008df8 <DMA_SetConfig+0x224>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d068      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a7a      	ldr	r2, [pc, #488]	@ (8008dfc <DMA_SetConfig+0x228>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d063      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a79      	ldr	r2, [pc, #484]	@ (8008e00 <DMA_SetConfig+0x22c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d05e      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a77      	ldr	r2, [pc, #476]	@ (8008e04 <DMA_SetConfig+0x230>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d059      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a76      	ldr	r2, [pc, #472]	@ (8008e08 <DMA_SetConfig+0x234>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d054      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a74      	ldr	r2, [pc, #464]	@ (8008e0c <DMA_SetConfig+0x238>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d04f      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a73      	ldr	r2, [pc, #460]	@ (8008e10 <DMA_SetConfig+0x23c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d04a      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a71      	ldr	r2, [pc, #452]	@ (8008e14 <DMA_SetConfig+0x240>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d045      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a70      	ldr	r2, [pc, #448]	@ (8008e18 <DMA_SetConfig+0x244>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d040      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a6e      	ldr	r2, [pc, #440]	@ (8008e1c <DMA_SetConfig+0x248>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d03b      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a6d      	ldr	r2, [pc, #436]	@ (8008e20 <DMA_SetConfig+0x24c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d036      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a6b      	ldr	r2, [pc, #428]	@ (8008e24 <DMA_SetConfig+0x250>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d031      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a6a      	ldr	r2, [pc, #424]	@ (8008e28 <DMA_SetConfig+0x254>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d02c      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a68      	ldr	r2, [pc, #416]	@ (8008e2c <DMA_SetConfig+0x258>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d027      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a67      	ldr	r2, [pc, #412]	@ (8008e30 <DMA_SetConfig+0x25c>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d022      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a65      	ldr	r2, [pc, #404]	@ (8008e34 <DMA_SetConfig+0x260>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d01d      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a64      	ldr	r2, [pc, #400]	@ (8008e38 <DMA_SetConfig+0x264>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d018      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a62      	ldr	r2, [pc, #392]	@ (8008e3c <DMA_SetConfig+0x268>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d013      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a61      	ldr	r2, [pc, #388]	@ (8008e40 <DMA_SetConfig+0x26c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00e      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a5f      	ldr	r2, [pc, #380]	@ (8008e44 <DMA_SetConfig+0x270>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d009      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a5e      	ldr	r2, [pc, #376]	@ (8008e48 <DMA_SetConfig+0x274>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d004      	beq.n	8008cde <DMA_SetConfig+0x10a>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a5c      	ldr	r2, [pc, #368]	@ (8008e4c <DMA_SetConfig+0x278>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d101      	bne.n	8008ce2 <DMA_SetConfig+0x10e>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <DMA_SetConfig+0x110>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00d      	beq.n	8008d04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008cf0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d004      	beq.n	8008d04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008d02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a39      	ldr	r2, [pc, #228]	@ (8008df0 <DMA_SetConfig+0x21c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d04a      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a38      	ldr	r2, [pc, #224]	@ (8008df4 <DMA_SetConfig+0x220>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d045      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a36      	ldr	r2, [pc, #216]	@ (8008df8 <DMA_SetConfig+0x224>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d040      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a35      	ldr	r2, [pc, #212]	@ (8008dfc <DMA_SetConfig+0x228>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d03b      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a33      	ldr	r2, [pc, #204]	@ (8008e00 <DMA_SetConfig+0x22c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d036      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a32      	ldr	r2, [pc, #200]	@ (8008e04 <DMA_SetConfig+0x230>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d031      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a30      	ldr	r2, [pc, #192]	@ (8008e08 <DMA_SetConfig+0x234>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d02c      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8008e0c <DMA_SetConfig+0x238>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d027      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a2d      	ldr	r2, [pc, #180]	@ (8008e10 <DMA_SetConfig+0x23c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d022      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a2c      	ldr	r2, [pc, #176]	@ (8008e14 <DMA_SetConfig+0x240>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d01d      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8008e18 <DMA_SetConfig+0x244>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d018      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a29      	ldr	r2, [pc, #164]	@ (8008e1c <DMA_SetConfig+0x248>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d013      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a27      	ldr	r2, [pc, #156]	@ (8008e20 <DMA_SetConfig+0x24c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d00e      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a26      	ldr	r2, [pc, #152]	@ (8008e24 <DMA_SetConfig+0x250>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d009      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a24      	ldr	r2, [pc, #144]	@ (8008e28 <DMA_SetConfig+0x254>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d004      	beq.n	8008da4 <DMA_SetConfig+0x1d0>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a23      	ldr	r2, [pc, #140]	@ (8008e2c <DMA_SetConfig+0x258>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d101      	bne.n	8008da8 <DMA_SetConfig+0x1d4>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e000      	b.n	8008daa <DMA_SetConfig+0x1d6>
 8008da8:	2300      	movs	r3, #0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d059      	beq.n	8008e62 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008db2:	f003 031f 	and.w	r3, r3, #31
 8008db6:	223f      	movs	r2, #63	@ 0x3f
 8008db8:	409a      	lsls	r2, r3
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008dcc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	2b40      	cmp	r3, #64	@ 0x40
 8008ddc:	d138      	bne.n	8008e50 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008dee:	e086      	b.n	8008efe <DMA_SetConfig+0x32a>
 8008df0:	40020010 	.word	0x40020010
 8008df4:	40020028 	.word	0x40020028
 8008df8:	40020040 	.word	0x40020040
 8008dfc:	40020058 	.word	0x40020058
 8008e00:	40020070 	.word	0x40020070
 8008e04:	40020088 	.word	0x40020088
 8008e08:	400200a0 	.word	0x400200a0
 8008e0c:	400200b8 	.word	0x400200b8
 8008e10:	40020410 	.word	0x40020410
 8008e14:	40020428 	.word	0x40020428
 8008e18:	40020440 	.word	0x40020440
 8008e1c:	40020458 	.word	0x40020458
 8008e20:	40020470 	.word	0x40020470
 8008e24:	40020488 	.word	0x40020488
 8008e28:	400204a0 	.word	0x400204a0
 8008e2c:	400204b8 	.word	0x400204b8
 8008e30:	58025408 	.word	0x58025408
 8008e34:	5802541c 	.word	0x5802541c
 8008e38:	58025430 	.word	0x58025430
 8008e3c:	58025444 	.word	0x58025444
 8008e40:	58025458 	.word	0x58025458
 8008e44:	5802546c 	.word	0x5802546c
 8008e48:	58025480 	.word	0x58025480
 8008e4c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	60da      	str	r2, [r3, #12]
}
 8008e60:	e04d      	b.n	8008efe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a29      	ldr	r2, [pc, #164]	@ (8008f0c <DMA_SetConfig+0x338>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d022      	beq.n	8008eb2 <DMA_SetConfig+0x2de>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a27      	ldr	r2, [pc, #156]	@ (8008f10 <DMA_SetConfig+0x33c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d01d      	beq.n	8008eb2 <DMA_SetConfig+0x2de>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a26      	ldr	r2, [pc, #152]	@ (8008f14 <DMA_SetConfig+0x340>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d018      	beq.n	8008eb2 <DMA_SetConfig+0x2de>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a24      	ldr	r2, [pc, #144]	@ (8008f18 <DMA_SetConfig+0x344>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d013      	beq.n	8008eb2 <DMA_SetConfig+0x2de>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a23      	ldr	r2, [pc, #140]	@ (8008f1c <DMA_SetConfig+0x348>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00e      	beq.n	8008eb2 <DMA_SetConfig+0x2de>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a21      	ldr	r2, [pc, #132]	@ (8008f20 <DMA_SetConfig+0x34c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d009      	beq.n	8008eb2 <DMA_SetConfig+0x2de>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a20      	ldr	r2, [pc, #128]	@ (8008f24 <DMA_SetConfig+0x350>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d004      	beq.n	8008eb2 <DMA_SetConfig+0x2de>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1e      	ldr	r2, [pc, #120]	@ (8008f28 <DMA_SetConfig+0x354>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d101      	bne.n	8008eb6 <DMA_SetConfig+0x2e2>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e000      	b.n	8008eb8 <DMA_SetConfig+0x2e4>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d020      	beq.n	8008efe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ec0:	f003 031f 	and.w	r3, r3, #31
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	409a      	lsls	r2, r3
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	2b40      	cmp	r3, #64	@ 0x40
 8008eda:	d108      	bne.n	8008eee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	60da      	str	r2, [r3, #12]
}
 8008eec:	e007      	b.n	8008efe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	60da      	str	r2, [r3, #12]
}
 8008efe:	bf00      	nop
 8008f00:	371c      	adds	r7, #28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	58025408 	.word	0x58025408
 8008f10:	5802541c 	.word	0x5802541c
 8008f14:	58025430 	.word	0x58025430
 8008f18:	58025444 	.word	0x58025444
 8008f1c:	58025458 	.word	0x58025458
 8008f20:	5802546c 	.word	0x5802546c
 8008f24:	58025480 	.word	0x58025480
 8008f28:	58025494 	.word	0x58025494

08008f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a42      	ldr	r2, [pc, #264]	@ (8009044 <DMA_CalcBaseAndBitshift+0x118>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d04a      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a41      	ldr	r2, [pc, #260]	@ (8009048 <DMA_CalcBaseAndBitshift+0x11c>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d045      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800904c <DMA_CalcBaseAndBitshift+0x120>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d040      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a3e      	ldr	r2, [pc, #248]	@ (8009050 <DMA_CalcBaseAndBitshift+0x124>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d03b      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a3c      	ldr	r2, [pc, #240]	@ (8009054 <DMA_CalcBaseAndBitshift+0x128>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d036      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8009058 <DMA_CalcBaseAndBitshift+0x12c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d031      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a39      	ldr	r2, [pc, #228]	@ (800905c <DMA_CalcBaseAndBitshift+0x130>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d02c      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a38      	ldr	r2, [pc, #224]	@ (8009060 <DMA_CalcBaseAndBitshift+0x134>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d027      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a36      	ldr	r2, [pc, #216]	@ (8009064 <DMA_CalcBaseAndBitshift+0x138>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d022      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a35      	ldr	r2, [pc, #212]	@ (8009068 <DMA_CalcBaseAndBitshift+0x13c>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d01d      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a33      	ldr	r2, [pc, #204]	@ (800906c <DMA_CalcBaseAndBitshift+0x140>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d018      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a32      	ldr	r2, [pc, #200]	@ (8009070 <DMA_CalcBaseAndBitshift+0x144>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d013      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a30      	ldr	r2, [pc, #192]	@ (8009074 <DMA_CalcBaseAndBitshift+0x148>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00e      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a2f      	ldr	r2, [pc, #188]	@ (8009078 <DMA_CalcBaseAndBitshift+0x14c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d009      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800907c <DMA_CalcBaseAndBitshift+0x150>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d004      	beq.n	8008fd4 <DMA_CalcBaseAndBitshift+0xa8>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a2c      	ldr	r2, [pc, #176]	@ (8009080 <DMA_CalcBaseAndBitshift+0x154>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d101      	bne.n	8008fd8 <DMA_CalcBaseAndBitshift+0xac>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e000      	b.n	8008fda <DMA_CalcBaseAndBitshift+0xae>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d024      	beq.n	8009028 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	3b10      	subs	r3, #16
 8008fe6:	4a27      	ldr	r2, [pc, #156]	@ (8009084 <DMA_CalcBaseAndBitshift+0x158>)
 8008fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fec:	091b      	lsrs	r3, r3, #4
 8008fee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	4a24      	ldr	r2, [pc, #144]	@ (8009088 <DMA_CalcBaseAndBitshift+0x15c>)
 8008ff8:	5cd3      	ldrb	r3, [r2, r3]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b03      	cmp	r3, #3
 8009004:	d908      	bls.n	8009018 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	4b1f      	ldr	r3, [pc, #124]	@ (800908c <DMA_CalcBaseAndBitshift+0x160>)
 800900e:	4013      	ands	r3, r2
 8009010:	1d1a      	adds	r2, r3, #4
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	659a      	str	r2, [r3, #88]	@ 0x58
 8009016:	e00d      	b.n	8009034 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	4b1b      	ldr	r3, [pc, #108]	@ (800908c <DMA_CalcBaseAndBitshift+0x160>)
 8009020:	4013      	ands	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6593      	str	r3, [r2, #88]	@ 0x58
 8009026:	e005      	b.n	8009034 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	40020010 	.word	0x40020010
 8009048:	40020028 	.word	0x40020028
 800904c:	40020040 	.word	0x40020040
 8009050:	40020058 	.word	0x40020058
 8009054:	40020070 	.word	0x40020070
 8009058:	40020088 	.word	0x40020088
 800905c:	400200a0 	.word	0x400200a0
 8009060:	400200b8 	.word	0x400200b8
 8009064:	40020410 	.word	0x40020410
 8009068:	40020428 	.word	0x40020428
 800906c:	40020440 	.word	0x40020440
 8009070:	40020458 	.word	0x40020458
 8009074:	40020470 	.word	0x40020470
 8009078:	40020488 	.word	0x40020488
 800907c:	400204a0 	.word	0x400204a0
 8009080:	400204b8 	.word	0x400204b8
 8009084:	aaaaaaab 	.word	0xaaaaaaab
 8009088:	080195c4 	.word	0x080195c4
 800908c:	fffffc00 	.word	0xfffffc00

08009090 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d120      	bne.n	80090e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d858      	bhi.n	800915e <DMA_CheckFifoParam+0xce>
 80090ac:	a201      	add	r2, pc, #4	@ (adr r2, 80090b4 <DMA_CheckFifoParam+0x24>)
 80090ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b2:	bf00      	nop
 80090b4:	080090c5 	.word	0x080090c5
 80090b8:	080090d7 	.word	0x080090d7
 80090bc:	080090c5 	.word	0x080090c5
 80090c0:	0800915f 	.word	0x0800915f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d048      	beq.n	8009162 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090d4:	e045      	b.n	8009162 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80090de:	d142      	bne.n	8009166 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090e4:	e03f      	b.n	8009166 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090ee:	d123      	bne.n	8009138 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d838      	bhi.n	800916a <DMA_CheckFifoParam+0xda>
 80090f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <DMA_CheckFifoParam+0x70>)
 80090fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fe:	bf00      	nop
 8009100:	08009111 	.word	0x08009111
 8009104:	08009117 	.word	0x08009117
 8009108:	08009111 	.word	0x08009111
 800910c:	08009129 	.word	0x08009129
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	73fb      	strb	r3, [r7, #15]
        break;
 8009114:	e030      	b.n	8009178 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d025      	beq.n	800916e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009126:	e022      	b.n	800916e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009130:	d11f      	bne.n	8009172 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009136:	e01c      	b.n	8009172 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800913c:	2b02      	cmp	r3, #2
 800913e:	d902      	bls.n	8009146 <DMA_CheckFifoParam+0xb6>
 8009140:	2b03      	cmp	r3, #3
 8009142:	d003      	beq.n	800914c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009144:	e018      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	73fb      	strb	r3, [r7, #15]
        break;
 800914a:	e015      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00e      	beq.n	8009176 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
    break;
 800915c:	e00b      	b.n	8009176 <DMA_CheckFifoParam+0xe6>
        break;
 800915e:	bf00      	nop
 8009160:	e00a      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
        break;
 8009162:	bf00      	nop
 8009164:	e008      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
        break;
 8009166:	bf00      	nop
 8009168:	e006      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
        break;
 800916a:	bf00      	nop
 800916c:	e004      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
        break;
 800916e:	bf00      	nop
 8009170:	e002      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
        break;
 8009172:	bf00      	nop
 8009174:	e000      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
    break;
 8009176:	bf00      	nop
    }
  }

  return status;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop

08009188 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a38      	ldr	r2, [pc, #224]	@ (800927c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d022      	beq.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a36      	ldr	r2, [pc, #216]	@ (8009280 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d01d      	beq.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a35      	ldr	r2, [pc, #212]	@ (8009284 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d018      	beq.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a33      	ldr	r2, [pc, #204]	@ (8009288 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d013      	beq.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a32      	ldr	r2, [pc, #200]	@ (800928c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00e      	beq.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a30      	ldr	r2, [pc, #192]	@ (8009290 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d009      	beq.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a2f      	ldr	r2, [pc, #188]	@ (8009294 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d004      	beq.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009298 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d101      	bne.n	80091ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e000      	b.n	80091ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80091ea:	2300      	movs	r3, #0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01a      	beq.n	8009226 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	3b08      	subs	r3, #8
 80091f8:	4a28      	ldr	r2, [pc, #160]	@ (800929c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80091fa:	fba2 2303 	umull	r2, r3, r2, r3
 80091fe:	091b      	lsrs	r3, r3, #4
 8009200:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4b26      	ldr	r3, [pc, #152]	@ (80092a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	461a      	mov	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a24      	ldr	r2, [pc, #144]	@ (80092a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009214:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f003 031f 	and.w	r3, r3, #31
 800921c:	2201      	movs	r2, #1
 800921e:	409a      	lsls	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009224:	e024      	b.n	8009270 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	3b10      	subs	r3, #16
 800922e:	4a1e      	ldr	r2, [pc, #120]	@ (80092a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009230:	fba2 2303 	umull	r2, r3, r2, r3
 8009234:	091b      	lsrs	r3, r3, #4
 8009236:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	4a1c      	ldr	r2, [pc, #112]	@ (80092ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d806      	bhi.n	800924e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4a1b      	ldr	r2, [pc, #108]	@ (80092b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d902      	bls.n	800924e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3308      	adds	r3, #8
 800924c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	4b18      	ldr	r3, [pc, #96]	@ (80092b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	461a      	mov	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a16      	ldr	r2, [pc, #88]	@ (80092b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009260:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f003 031f 	and.w	r3, r3, #31
 8009268:	2201      	movs	r2, #1
 800926a:	409a      	lsls	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009270:	bf00      	nop
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	58025408 	.word	0x58025408
 8009280:	5802541c 	.word	0x5802541c
 8009284:	58025430 	.word	0x58025430
 8009288:	58025444 	.word	0x58025444
 800928c:	58025458 	.word	0x58025458
 8009290:	5802546c 	.word	0x5802546c
 8009294:	58025480 	.word	0x58025480
 8009298:	58025494 	.word	0x58025494
 800929c:	cccccccd 	.word	0xcccccccd
 80092a0:	16009600 	.word	0x16009600
 80092a4:	58025880 	.word	0x58025880
 80092a8:	aaaaaaab 	.word	0xaaaaaaab
 80092ac:	400204b8 	.word	0x400204b8
 80092b0:	4002040f 	.word	0x4002040f
 80092b4:	10008200 	.word	0x10008200
 80092b8:	40020880 	.word	0x40020880

080092bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d04a      	beq.n	8009368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d847      	bhi.n	8009368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a25      	ldr	r2, [pc, #148]	@ (8009374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d022      	beq.n	8009328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a24      	ldr	r2, [pc, #144]	@ (8009378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d01d      	beq.n	8009328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a22      	ldr	r2, [pc, #136]	@ (800937c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d018      	beq.n	8009328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a21      	ldr	r2, [pc, #132]	@ (8009380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d013      	beq.n	8009328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a1f      	ldr	r2, [pc, #124]	@ (8009384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d00e      	beq.n	8009328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a1e      	ldr	r2, [pc, #120]	@ (8009388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d009      	beq.n	8009328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a1c      	ldr	r2, [pc, #112]	@ (800938c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d004      	beq.n	8009328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a1b      	ldr	r2, [pc, #108]	@ (8009390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d101      	bne.n	800932c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009328:	2301      	movs	r3, #1
 800932a:	e000      	b.n	800932e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800932c:	2300      	movs	r3, #0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	4b17      	ldr	r3, [pc, #92]	@ (8009394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	461a      	mov	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a15      	ldr	r2, [pc, #84]	@ (8009398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009344:	671a      	str	r2, [r3, #112]	@ 0x70
 8009346:	e009      	b.n	800935c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4b14      	ldr	r3, [pc, #80]	@ (800939c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800934c:	4413      	add	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	461a      	mov	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a11      	ldr	r2, [pc, #68]	@ (80093a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800935a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3b01      	subs	r3, #1
 8009360:	2201      	movs	r2, #1
 8009362:	409a      	lsls	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009368:	bf00      	nop
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	58025408 	.word	0x58025408
 8009378:	5802541c 	.word	0x5802541c
 800937c:	58025430 	.word	0x58025430
 8009380:	58025444 	.word	0x58025444
 8009384:	58025458 	.word	0x58025458
 8009388:	5802546c 	.word	0x5802546c
 800938c:	58025480 	.word	0x58025480
 8009390:	58025494 	.word	0x58025494
 8009394:	1600963f 	.word	0x1600963f
 8009398:	58025940 	.word	0x58025940
 800939c:	1000823f 	.word	0x1000823f
 80093a0:	40020940 	.word	0x40020940

080093a4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b098      	sub	sp, #96	@ 0x60
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80093ac:	4a84      	ldr	r2, [pc, #528]	@ (80095c0 <HAL_FDCAN_Init+0x21c>)
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	4611      	mov	r1, r2
 80093b4:	224c      	movs	r2, #76	@ 0x4c
 80093b6:	4618      	mov	r0, r3
 80093b8:	f00c faff 	bl	80159ba <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e1c6      	b.n	8009754 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a7e      	ldr	r2, [pc, #504]	@ (80095c4 <HAL_FDCAN_Init+0x220>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d106      	bne.n	80093de <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80093d8:	461a      	mov	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fa fbde 	bl	8003bb4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699a      	ldr	r2, [r3, #24]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0210 	bic.w	r2, r2, #16
 8009406:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009408:	f7fb f9ae 	bl	8004768 <HAL_GetTick>
 800940c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800940e:	e014      	b.n	800943a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009410:	f7fb f9aa 	bl	8004768 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b0a      	cmp	r3, #10
 800941c:	d90d      	bls.n	800943a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009424:	f043 0201 	orr.w	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2203      	movs	r2, #3
 8009432:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e18c      	b.n	8009754 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b08      	cmp	r3, #8
 8009446:	d0e3      	beq.n	8009410 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	699a      	ldr	r2, [r3, #24]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0201 	orr.w	r2, r2, #1
 8009456:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009458:	f7fb f986 	bl	8004768 <HAL_GetTick>
 800945c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800945e:	e014      	b.n	800948a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009460:	f7fb f982 	bl	8004768 <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	2b0a      	cmp	r3, #10
 800946c:	d90d      	bls.n	800948a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009474:	f043 0201 	orr.w	r2, r3, #1
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2203      	movs	r2, #3
 8009482:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e164      	b.n	8009754 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0e3      	beq.n	8009460 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699a      	ldr	r2, [r3, #24]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0202 	orr.w	r2, r2, #2
 80094a6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	7c1b      	ldrb	r3, [r3, #16]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d108      	bne.n	80094c2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094be:	619a      	str	r2, [r3, #24]
 80094c0:	e007      	b.n	80094d2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	7c5b      	ldrb	r3, [r3, #17]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d108      	bne.n	80094ec <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	699a      	ldr	r2, [r3, #24]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094e8:	619a      	str	r2, [r3, #24]
 80094ea:	e007      	b.n	80094fc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699a      	ldr	r2, [r3, #24]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80094fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	7c9b      	ldrb	r3, [r3, #18]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d108      	bne.n	8009516 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699a      	ldr	r2, [r3, #24]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009512:	619a      	str	r2, [r3, #24]
 8009514:	e007      	b.n	8009526 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	699a      	ldr	r2, [r3, #24]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009524:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	699a      	ldr	r2, [r3, #24]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800954a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0210 	bic.w	r2, r2, #16
 800955a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d108      	bne.n	8009576 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699a      	ldr	r2, [r3, #24]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0204 	orr.w	r2, r2, #4
 8009572:	619a      	str	r2, [r3, #24]
 8009574:	e030      	b.n	80095d8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d02c      	beq.n	80095d8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d020      	beq.n	80095c8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699a      	ldr	r2, [r3, #24]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009594:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f042 0210 	orr.w	r2, r2, #16
 80095a4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d114      	bne.n	80095d8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	699a      	ldr	r2, [r3, #24]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 0220 	orr.w	r2, r2, #32
 80095bc:	619a      	str	r2, [r3, #24]
 80095be:	e00b      	b.n	80095d8 <HAL_FDCAN_Init+0x234>
 80095c0:	08019568 	.word	0x08019568
 80095c4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0220 	orr.w	r2, r2, #32
 80095d6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	3b01      	subs	r3, #1
 80095de:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80095e8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80095f0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009600:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009602:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800960c:	d115      	bne.n	800963a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009612:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009618:	3b01      	subs	r3, #1
 800961a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800961c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009622:	3b01      	subs	r3, #1
 8009624:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009626:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962e:	3b01      	subs	r3, #1
 8009630:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009636:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009638:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009660:	4413      	add	r3, r2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d011      	beq.n	800968a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800966e:	f023 0107 	bic.w	r1, r3, #7
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	3360      	adds	r3, #96	@ 0x60
 800967a:	443b      	add	r3, r7
 800967c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	d011      	beq.n	80096b6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800969a:	f023 0107 	bic.w	r1, r3, #7
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	3360      	adds	r3, #96	@ 0x60
 80096a6:	443b      	add	r3, r7
 80096a8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d012      	beq.n	80096e4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80096c6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	3360      	adds	r3, #96	@ 0x60
 80096d2:	443b      	add	r3, r7
 80096d4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80096d8:	011a      	lsls	r2, r3, #4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d012      	beq.n	8009712 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80096f4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	3360      	adds	r3, #96	@ 0x60
 8009700:	443b      	add	r3, r7
 8009702:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009706:	021a      	lsls	r2, r3, #8
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a11      	ldr	r2, [pc, #68]	@ (800975c <HAL_FDCAN_Init+0x3b8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d107      	bne.n	800972c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	689a      	ldr	r2, [r3, #8]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f022 0203 	bic.w	r2, r2, #3
 800972a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fe3b 	bl	800a3c0 <FDCAN_CalcultateRamBlockAddresses>
 800974a:	4603      	mov	r3, r0
 800974c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8009750:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8009754:	4618      	mov	r0, r3
 8009756:	3760      	adds	r7, #96	@ 0x60
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	4000a000 	.word	0x4000a000

08009760 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009770:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d002      	beq.n	800977e <HAL_FDCAN_ConfigFilter+0x1e>
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	2b02      	cmp	r3, #2
 800977c:	d157      	bne.n	800982e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d12b      	bne.n	80097de <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	2b07      	cmp	r3, #7
 800978c:	d10d      	bne.n	80097aa <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800979a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80097a0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80097a2:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80097a6:	617b      	str	r3, [r7, #20]
 80097a8:	e00e      	b.n	80097c8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80097b6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80097be:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	e025      	b.n	800982a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	075a      	lsls	r2, r3, #29
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	d103      	bne.n	80097fc <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	613b      	str	r3, [r7, #16]
 80097fa:	e006      	b.n	800980a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	079a      	lsls	r2, r3, #30
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	4413      	add	r3, r2
 8009816:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	3304      	adds	r3, #4
 8009822:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	e008      	b.n	8009840 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009834:	f043 0202 	orr.w	r2, r3, #2
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
  }
}
 8009840:	4618      	mov	r0, r3
 8009842:	371c      	adds	r7, #28
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b01      	cmp	r3, #1
 800985e:	d111      	bne.n	8009884 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699a      	ldr	r2, [r3, #24]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f022 0201 	bic.w	r2, r2, #1
 8009876:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	e008      	b.n	8009896 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800988a:	f043 0204 	orr.w	r2, r3, #4
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
  }
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b086      	sub	sp, #24
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d141      	bne.n	800993e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80098c2:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d109      	bne.n	80098de <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098d0:	f043 0220 	orr.w	r2, r3, #32
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e038      	b.n	8009950 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80098e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d009      	beq.n	8009902 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e026      	b.n	8009950 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800990a:	0c1b      	lsrs	r3, r3, #16
 800990c:	f003 031f 	and.w	r3, r3, #31
 8009910:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 fed7 	bl	800a6cc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2101      	movs	r1, #1
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	fa01 f202 	lsl.w	r2, r1, r2
 800992a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800992e:	2201      	movs	r2, #1
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	409a      	lsls	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	e008      	b.n	8009950 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009944:	f043 0208 	orr.w	r2, r3, #8
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
  }
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8009958:	b480      	push	{r7}
 800995a:	b08b      	sub	sp, #44	@ 0x2c
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009970:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8009972:	7efb      	ldrb	r3, [r7, #27]
 8009974:	2b02      	cmp	r3, #2
 8009976:	f040 8149 	bne.w	8009c0c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2b40      	cmp	r3, #64	@ 0x40
 800997e:	d14c      	bne.n	8009a1a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009988:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d109      	bne.n	80099a4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009996:	f043 0220 	orr.w	r2, r3, #32
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e13c      	b.n	8009c1e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d109      	bne.n	80099c8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e12a      	b.n	8009c1e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80099d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099d8:	d10a      	bne.n	80099f0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80099e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099ea:	d101      	bne.n	80099f0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80099ec:	2301      	movs	r3, #1
 80099ee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099f8:	0a1b      	lsrs	r3, r3, #8
 80099fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	4413      	add	r3, r2
 8009a02:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a0c:	69f9      	ldr	r1, [r7, #28]
 8009a0e:	fb01 f303 	mul.w	r3, r1, r3
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a18:	e068      	b.n	8009aec <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b41      	cmp	r3, #65	@ 0x41
 8009a1e:	d14c      	bne.n	8009aba <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a28:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d109      	bne.n	8009a44 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a36:	f043 0220 	orr.w	r2, r3, #32
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e0ec      	b.n	8009c1e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d109      	bne.n	8009a68 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e0da      	b.n	8009c1e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a78:	d10a      	bne.n	8009a90 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a8a:	d101      	bne.n	8009a90 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a98:	0a1b      	lsrs	r3, r3, #8
 8009a9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a9e:	69fa      	ldr	r2, [r7, #28]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aac:	69f9      	ldr	r1, [r7, #28]
 8009aae:	fb01 f303 	mul.w	r3, r1, r3
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ab8:	e018      	b.n	8009aec <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d309      	bcc.n	8009ad8 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009aca:	f043 0220 	orr.w	r2, r3, #32
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e0a2      	b.n	8009c1e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae0:	68b9      	ldr	r1, [r7, #8]
 8009ae2:	fb01 f303 	mul.w	r3, r1, r3
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d107      	bne.n	8009b10 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	0c9b      	lsrs	r3, r3, #18
 8009b06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e005      	b.n	8009b1c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	3304      	adds	r3, #4
 8009b38:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8009b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	0c1b      	lsrs	r3, r3, #16
 8009b4a:	f003 020f 	and.w	r2, r3, #15
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	0e1b      	lsrs	r3, r3, #24
 8009b70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8009b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	0fda      	lsrs	r2, r3, #31
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b84:	3304      	adds	r3, #4
 8009b86:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	623b      	str	r3, [r7, #32]
 8009b90:	e00a      	b.n	8009ba8 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	441a      	add	r2, r3
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	440b      	add	r3, r1
 8009b9e:	7812      	ldrb	r2, [r2, #0]
 8009ba0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	623b      	str	r3, [r7, #32]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	4a1f      	ldr	r2, [pc, #124]	@ (8009c2c <HAL_FDCAN_GetRxMessage+0x2d4>)
 8009bae:	5cd3      	ldrb	r3, [r2, r3]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d3ec      	bcc.n	8009b92 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b40      	cmp	r3, #64	@ 0x40
 8009bbc:	d105      	bne.n	8009bca <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8009bc8:	e01e      	b.n	8009c08 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b41      	cmp	r3, #65	@ 0x41
 8009bce:	d105      	bne.n	8009bdc <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8009bda:	e015      	b.n	8009c08 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2b1f      	cmp	r3, #31
 8009be0:	d808      	bhi.n	8009bf4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2101      	movs	r1, #1
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	fa01 f202 	lsl.w	r2, r1, r2
 8009bee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009bf2:	e009      	b.n	8009c08 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f003 021f 	and.w	r2, r3, #31
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2101      	movs	r1, #1
 8009c00:	fa01 f202 	lsl.w	r2, r1, r2
 8009c04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e008      	b.n	8009c1e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c12:	f043 0208 	orr.w	r2, r3, #8
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
  }
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	372c      	adds	r7, #44	@ 0x2c
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	080195cc 	.word	0x080195cc

08009c30 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c40:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f003 0207 	and.w	r2, r3, #7
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	0a1b      	lsrs	r3, r3, #8
 8009c50:	f003 0207 	and.w	r2, r3, #7
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f003 0218 	and.w	r2, r3, #24
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	095b      	lsrs	r3, r3, #5
 8009c66:	f003 0201 	and.w	r2, r3, #1
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	099b      	lsrs	r3, r3, #6
 8009c72:	f003 0201 	and.w	r2, r3, #1
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	09db      	lsrs	r3, r3, #7
 8009c7e:	f003 0201 	and.w	r2, r3, #1
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	0adb      	lsrs	r3, r3, #11
 8009c8a:	f003 0201 	and.w	r2, r3, #1
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	0b1b      	lsrs	r3, r3, #12
 8009c96:	f003 0201 	and.w	r2, r3, #1
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	0b5b      	lsrs	r3, r3, #13
 8009ca2:	f003 0201 	and.w	r2, r3, #1
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	0b9b      	lsrs	r3, r3, #14
 8009cae:	f003 0201 	and.w	r2, r3, #1
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	0c1b      	lsrs	r3, r3, #16
 8009cba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009ce2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d002      	beq.n	8009cf0 <HAL_FDCAN_ActivateNotification+0x20>
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d155      	bne.n	8009d9c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d108      	bne.n	8009d10 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 0201 	orr.w	r2, r2, #1
 8009d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d0e:	e014      	b.n	8009d3a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d108      	bne.n	8009d32 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f042 0202 	orr.w	r2, r2, #2
 8009d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d30:	e003      	b.n	8009d3a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2203      	movs	r2, #3
 8009d38:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d009      	beq.n	8009d58 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009dbc <HAL_FDCAN_ActivateNotification+0xec>)
 8009d80:	4013      	ands	r3, r2
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	6812      	ldr	r2, [r2, #0]
 8009d86:	430b      	orrs	r3, r1
 8009d88:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009d8c:	695a      	ldr	r2, [r3, #20]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	0f9b      	lsrs	r3, r3, #30
 8009d92:	490b      	ldr	r1, [pc, #44]	@ (8009dc0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	e008      	b.n	8009dae <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009da2:	f043 0202 	orr.w	r2, r3, #2
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
  }
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	371c      	adds	r7, #28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	3fcfffff 	.word	0x3fcfffff
 8009dc0:	4000a800 	.word	0x4000a800

08009dc4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b096      	sub	sp, #88	@ 0x58
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8009dcc:	4b9a      	ldr	r3, [pc, #616]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	079b      	lsls	r3, r3, #30
 8009dd2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8009dd4:	4b98      	ldr	r3, [pc, #608]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009dd6:	695b      	ldr	r3, [r3, #20]
 8009dd8:	079b      	lsls	r3, r3, #30
 8009dda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ddc:	4013      	ands	r3, r2
 8009dde:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009dea:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009df4:	4013      	ands	r3, r2
 8009df6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dfe:	f003 030f 	and.w	r3, r3, #15
 8009e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e24:	4013      	ands	r3, r2
 8009e26:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e2e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8009e32:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e46:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8009e4a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e54:	4013      	ands	r3, r2
 8009e56:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6a:	0a1b      	lsrs	r3, r3, #8
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d010      	beq.n	8009e96 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e76:	0a1b      	lsrs	r3, r3, #8
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00a      	beq.n	8009e96 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e88:	651a      	str	r2, [r3, #80]	@ 0x50
 8009e8a:	4b6b      	ldr	r3, [pc, #428]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fa54 	bl	800a33e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e98:	0a9b      	lsrs	r3, r3, #10
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01d      	beq.n	8009ede <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea4:	0a9b      	lsrs	r3, r3, #10
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d017      	beq.n	8009ede <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009eb6:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ec0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009ece:	651a      	str	r2, [r3, #80]	@ 0x50
 8009ed0:	4b59      	ldr	r3, [pc, #356]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009ed6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fa07 	bl	800a2ec <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8009ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00d      	beq.n	8009f00 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009eea:	4b54      	ldr	r3, [pc, #336]	@ (800a03c <HAL_FDCAN_IRQHandler+0x278>)
 8009eec:	400b      	ands	r3, r1
 8009eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ef0:	4a51      	ldr	r2, [pc, #324]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ef4:	0f9b      	lsrs	r3, r3, #30
 8009ef6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8009ef8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f9c0 	bl	800a280 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00d      	beq.n	8009f22 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800a03c <HAL_FDCAN_IRQHandler+0x278>)
 8009f0e:	400b      	ands	r3, r1
 8009f10:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f12:	4a49      	ldr	r2, [pc, #292]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f16:	0f9b      	lsrs	r3, r3, #30
 8009f18:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009f1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f9ba 	bl	800a296 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00d      	beq.n	8009f44 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009f2e:	4b43      	ldr	r3, [pc, #268]	@ (800a03c <HAL_FDCAN_IRQHandler+0x278>)
 8009f30:	400b      	ands	r3, r1
 8009f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f34:	4a40      	ldr	r2, [pc, #256]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f38:	0f9b      	lsrs	r3, r3, #30
 8009f3a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009f3c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7f8 f948 	bl	80021d4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00d      	beq.n	8009f66 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009f50:	4b3a      	ldr	r3, [pc, #232]	@ (800a03c <HAL_FDCAN_IRQHandler+0x278>)
 8009f52:	400b      	ands	r3, r1
 8009f54:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f56:	4a38      	ldr	r2, [pc, #224]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f5a:	0f9b      	lsrs	r3, r3, #30
 8009f5c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009f5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f9a3 	bl	800a2ac <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f68:	0adb      	lsrs	r3, r3, #11
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d010      	beq.n	8009f94 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f74:	0adb      	lsrs	r3, r3, #11
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f86:	651a      	str	r2, [r3, #80]	@ 0x50
 8009f88:	4b2b      	ldr	r3, [pc, #172]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f997 	bl	800a2c2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8009f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f96:	0a5b      	lsrs	r3, r3, #9
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01d      	beq.n	8009fdc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa2:	0a5b      	lsrs	r3, r3, #9
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d017      	beq.n	8009fdc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009fb4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fcc:	651a      	str	r2, [r3, #80]	@ 0x50
 8009fce:	4b1a      	ldr	r3, [pc, #104]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009fd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f97d 	bl	800a2d6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fde:	0cdb      	lsrs	r3, r3, #19
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d010      	beq.n	800a00a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fea:	0cdb      	lsrs	r3, r3, #19
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009ffc:	651a      	str	r2, [r3, #80]	@ 0x50
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 800a000:	2200      	movs	r2, #0
 800a002:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f97c 	bl	800a302 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800a00a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a00c:	0c1b      	lsrs	r3, r3, #16
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b00      	cmp	r3, #0
 800a014:	d016      	beq.n	800a044 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	0c1b      	lsrs	r3, r3, #16
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d010      	beq.n	800a044 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a02a:	651a      	str	r2, [r3, #80]	@ 0x50
 800a02c:	4b02      	ldr	r3, [pc, #8]	@ (800a038 <HAL_FDCAN_IRQHandler+0x274>)
 800a02e:	2200      	movs	r2, #0
 800a030:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	e004      	b.n	800a040 <HAL_FDCAN_IRQHandler+0x27c>
 800a036:	bf00      	nop
 800a038:	4000a800 	.word	0x4000a800
 800a03c:	3fcfffff 	.word	0x3fcfffff
 800a040:	f000 f969 	bl	800a316 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800a044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a046:	0c9b      	lsrs	r3, r3, #18
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d010      	beq.n	800a072 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	0c9b      	lsrs	r3, r3, #18
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00a      	beq.n	800a072 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a064:	651a      	str	r2, [r3, #80]	@ 0x50
 800a066:	4b83      	ldr	r3, [pc, #524]	@ (800a274 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a068:	2200      	movs	r2, #0
 800a06a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f95c 	bl	800a32a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800a072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a074:	0c5b      	lsrs	r3, r3, #17
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d015      	beq.n	800a0aa <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800a07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a080:	0c5b      	lsrs	r3, r3, #17
 800a082:	f003 0301 	and.w	r3, r3, #1
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00f      	beq.n	800a0aa <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a092:	651a      	str	r2, [r3, #80]	@ 0x50
 800a094:	4b77      	ldr	r3, [pc, #476]	@ (800a274 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a096:	2200      	movs	r2, #0
 800a098:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a0a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800a0aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00d      	beq.n	800a0cc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0b6:	4b70      	ldr	r3, [pc, #448]	@ (800a278 <HAL_FDCAN_IRQHandler+0x4b4>)
 800a0b8:	400b      	ands	r3, r1
 800a0ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800a0bc:	4a6d      	ldr	r2, [pc, #436]	@ (800a274 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a0be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0c0:	0f9b      	lsrs	r3, r3, #30
 800a0c2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800a0c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7f8 f9ca 	bl	8002460 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800a0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d011      	beq.n	800a0f6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0d8:	4b67      	ldr	r3, [pc, #412]	@ (800a278 <HAL_FDCAN_IRQHandler+0x4b4>)
 800a0da:	400b      	ands	r3, r1
 800a0dc:	6513      	str	r3, [r2, #80]	@ 0x50
 800a0de:	4a65      	ldr	r2, [pc, #404]	@ (800a274 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a0e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0e2:	0f9b      	lsrs	r3, r3, #30
 800a0e4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800a0ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ee:	431a      	orrs	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a60      	ldr	r2, [pc, #384]	@ (800a27c <HAL_FDCAN_IRQHandler+0x4b8>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	f040 80ac 	bne.w	800a25a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 80a4 	beq.w	800a25a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	f003 030f 	and.w	r3, r3, #15
 800a11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a126:	4013      	ands	r3, r2
 800a128:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a134:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a13e:	4013      	ands	r3, r2
 800a140:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	6a1b      	ldr	r3, [r3, #32]
 800a148:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800a14c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a156:	4013      	ands	r3, r2
 800a158:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800a164:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16c:	6a3a      	ldr	r2, [r7, #32]
 800a16e:	4013      	ands	r3, r2
 800a170:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800a17c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	4013      	ands	r3, r2
 800a188:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a190:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	6a1b      	ldr	r3, [r3, #32]
 800a198:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800a19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d007      	beq.n	800a1b0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1a6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800a1a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f8db 	bl	800a366 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800a1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d007      	beq.n	800a1c6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1bc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800a1be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f8db 	bl	800a37c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	099b      	lsrs	r3, r3, #6
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01a      	beq.n	800a208 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	099b      	lsrs	r3, r3, #6
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d014      	beq.n	800a208 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e4:	0c1b      	lsrs	r3, r3, #16
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1f4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	2240      	movs	r2, #64	@ 0x40
 800a1fc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	6939      	ldr	r1, [r7, #16]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f8c5 	bl	800a392 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800a208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d007      	beq.n	800a21e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a214:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800a216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f8c6 	bl	800a3aa <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00b      	beq.n	800a23c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	6a3a      	ldr	r2, [r7, #32]
 800a22a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	431a      	orrs	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00b      	beq.n	800a25a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	431a      	orrs	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f874 	bl	800a352 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800a26a:	bf00      	nop
 800a26c:	3758      	adds	r7, #88	@ 0x58
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	4000a800 	.word	0x4000a800
 800a278:	3fcfffff 	.word	0x3fcfffff
 800a27c:	4000a000 	.word	0x4000a000

0800a280 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800a28a:	bf00      	nop
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800a2b6:	bf00      	nop
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800a2ca:	bf00      	nop
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800a30a:	bf00      	nop
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800a31e:	bf00      	nop
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800a346:	bf00      	nop
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a352:	b480      	push	{r7}
 800a354:	b083      	sub	sp, #12
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800a35a:	bf00      	nop
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800a366:	b480      	push	{r7}
 800a368:	b083      	sub	sp, #12
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800a386:	bf00      	nop
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800a392:	b480      	push	{r7}
 800a394:	b085      	sub	sp, #20
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800a39e:	bf00      	nop
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3cc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a3d6:	4ba7      	ldr	r3, [pc, #668]	@ (800a674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a3d8:	4013      	ands	r3, r2
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	0091      	lsls	r1, r2, #2
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	6812      	ldr	r2, [r2, #0]
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3f0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f8:	041a      	lsls	r2, r3, #16
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	4413      	add	r3, r2
 800a40c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a416:	4b97      	ldr	r3, [pc, #604]	@ (800a674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a418:	4013      	ands	r3, r2
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	0091      	lsls	r1, r2, #2
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	430b      	orrs	r3, r1
 800a424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a430:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a438:	041a      	lsls	r2, r3, #16
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	4413      	add	r3, r2
 800a44e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a458:	4b86      	ldr	r3, [pc, #536]	@ (800a674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a45a:	4013      	ands	r3, r2
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	0091      	lsls	r1, r2, #2
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	430b      	orrs	r3, r1
 800a466:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a472:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47a:	041a      	lsls	r2, r3, #16
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	4413      	add	r3, r2
 800a496:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a4a0:	4b74      	ldr	r3, [pc, #464]	@ (800a674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	0091      	lsls	r1, r2, #2
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4ba:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4c2:	041a      	lsls	r2, r3, #16
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a4d6:	fb02 f303 	mul.w	r3, r2, r3
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	4413      	add	r3, r2
 800a4de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800a4e8:	4b62      	ldr	r3, [pc, #392]	@ (800a674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	0091      	lsls	r1, r2, #2
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6812      	ldr	r2, [r2, #0]
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a502:	fb02 f303 	mul.w	r3, r2, r3
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	4413      	add	r3, r2
 800a50a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800a514:	4b57      	ldr	r3, [pc, #348]	@ (800a674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a516:	4013      	ands	r3, r2
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	0091      	lsls	r1, r2, #2
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	6812      	ldr	r2, [r2, #0]
 800a520:	430b      	orrs	r3, r1
 800a522:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a52e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a536:	041a      	lsls	r2, r3, #16
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	4413      	add	r3, r2
 800a54c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800a556:	4b47      	ldr	r3, [pc, #284]	@ (800a674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a558:	4013      	ands	r3, r2
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	0091      	lsls	r1, r2, #2
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	6812      	ldr	r2, [r2, #0]
 800a562:	430b      	orrs	r3, r1
 800a564:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a570:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a578:	041a      	lsls	r2, r3, #16
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a58c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a594:	061a      	lsls	r2, r3, #24
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5a4:	4b34      	ldr	r3, [pc, #208]	@ (800a678 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800a5a6:	4413      	add	r3, r2
 800a5a8:	009a      	lsls	r2, r3, #2
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	441a      	add	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5c6:	00db      	lsls	r3, r3, #3
 800a5c8:	441a      	add	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800a5da:	fb01 f303 	mul.w	r3, r1, r3
 800a5de:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a5e0:	441a      	add	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800a5f2:	fb01 f303 	mul.w	r3, r1, r3
 800a5f6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a5f8:	441a      	add	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a606:	6879      	ldr	r1, [r7, #4]
 800a608:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800a60a:	fb01 f303 	mul.w	r3, r1, r3
 800a60e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a610:	441a      	add	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	441a      	add	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a636:	6879      	ldr	r1, [r7, #4]
 800a638:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a63a:	fb01 f303 	mul.w	r3, r1, r3
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	441a      	add	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a656:	fb01 f303 	mul.w	r3, r1, r3
 800a65a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a65c:	441a      	add	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a66a:	4a04      	ldr	r2, [pc, #16]	@ (800a67c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d915      	bls.n	800a69c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800a670:	e006      	b.n	800a680 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800a672:	bf00      	nop
 800a674:	ffff0003 	.word	0xffff0003
 800a678:	10002b00 	.word	0x10002b00
 800a67c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a686:	f043 0220 	orr.w	r2, r3, #32
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2203      	movs	r2, #3
 800a694:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e010      	b.n	800a6be <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6a0:	60fb      	str	r3, [r7, #12]
 800a6a2:	e005      	b.n	800a6b0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d3f3      	bcc.n	800a6a4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop

0800a6cc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b089      	sub	sp, #36	@ 0x24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10a      	bne.n	800a6f8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800a6ea:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	61fb      	str	r3, [r7, #28]
 800a6f6:	e00a      	b.n	800a70e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800a700:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800a706:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a708:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a70c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a718:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800a71e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800a724:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a72c:	4313      	orrs	r3, r2
 800a72e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	fb01 f303 	mul.w	r3, r1, r3
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	69fa      	ldr	r2, [r7, #28]
 800a74a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	3304      	adds	r3, #4
 800a750:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	3304      	adds	r3, #4
 800a75c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a75e:	2300      	movs	r3, #0
 800a760:	617b      	str	r3, [r7, #20]
 800a762:	e020      	b.n	800a7a6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	3303      	adds	r3, #3
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	4413      	add	r3, r2
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	3302      	adds	r3, #2
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	440b      	add	r3, r1
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a77c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	3301      	adds	r3, #1
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	440b      	add	r3, r1
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a78a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	440a      	add	r2, r1
 800a792:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a794:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	3304      	adds	r3, #4
 800a79e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	617b      	str	r3, [r7, #20]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	4a06      	ldr	r2, [pc, #24]	@ (800a7c4 <FDCAN_CopyMessageToRAM+0xf8>)
 800a7ac:	5cd3      	ldrb	r3, [r2, r3]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d3d6      	bcc.n	800a764 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800a7b6:	bf00      	nop
 800a7b8:	bf00      	nop
 800a7ba:	3724      	adds	r7, #36	@ 0x24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	080195cc 	.word	0x080195cc

0800a7c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b089      	sub	sp, #36	@ 0x24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a7d6:	4b86      	ldr	r3, [pc, #536]	@ (800a9f0 <HAL_GPIO_Init+0x228>)
 800a7d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a7da:	e18c      	b.n	800aaf6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 817e 	beq.w	800aaf0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f003 0303 	and.w	r3, r3, #3
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d005      	beq.n	800a80c <HAL_GPIO_Init+0x44>
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f003 0303 	and.w	r3, r3, #3
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d130      	bne.n	800a86e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	2203      	movs	r2, #3
 800a818:	fa02 f303 	lsl.w	r3, r2, r3
 800a81c:	43db      	mvns	r3, r3
 800a81e:	69ba      	ldr	r2, [r7, #24]
 800a820:	4013      	ands	r3, r2
 800a822:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	68da      	ldr	r2, [r3, #12]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	fa02 f303 	lsl.w	r3, r2, r3
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	4313      	orrs	r3, r2
 800a834:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	69ba      	ldr	r2, [r7, #24]
 800a83a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a842:	2201      	movs	r2, #1
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	fa02 f303 	lsl.w	r3, r2, r3
 800a84a:	43db      	mvns	r3, r3
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	4013      	ands	r3, r2
 800a850:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	091b      	lsrs	r3, r3, #4
 800a858:	f003 0201 	and.w	r2, r3, #1
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	fa02 f303 	lsl.w	r3, r2, r3
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	4313      	orrs	r3, r2
 800a866:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	69ba      	ldr	r2, [r7, #24]
 800a86c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	2b03      	cmp	r3, #3
 800a878:	d017      	beq.n	800a8aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	2203      	movs	r2, #3
 800a886:	fa02 f303 	lsl.w	r3, r2, r3
 800a88a:	43db      	mvns	r3, r3
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	4013      	ands	r3, r2
 800a890:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	689a      	ldr	r2, [r3, #8]
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	fa02 f303 	lsl.w	r3, r2, r3
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	f003 0303 	and.w	r3, r3, #3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d123      	bne.n	800a8fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	08da      	lsrs	r2, r3, #3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3208      	adds	r2, #8
 800a8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	220f      	movs	r2, #15
 800a8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d2:	43db      	mvns	r3, r3
 800a8d4:	69ba      	ldr	r2, [r7, #24]
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	691a      	ldr	r2, [r3, #16]
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	f003 0307 	and.w	r3, r3, #7
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	08da      	lsrs	r2, r3, #3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3208      	adds	r2, #8
 800a8f8:	69b9      	ldr	r1, [r7, #24]
 800a8fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	005b      	lsls	r3, r3, #1
 800a908:	2203      	movs	r2, #3
 800a90a:	fa02 f303 	lsl.w	r3, r2, r3
 800a90e:	43db      	mvns	r3, r3
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	4013      	ands	r3, r2
 800a914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f003 0203 	and.w	r2, r3, #3
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	fa02 f303 	lsl.w	r3, r2, r3
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	4313      	orrs	r3, r2
 800a92a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	69ba      	ldr	r2, [r7, #24]
 800a930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 80d8 	beq.w	800aaf0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a940:	4b2c      	ldr	r3, [pc, #176]	@ (800a9f4 <HAL_GPIO_Init+0x22c>)
 800a942:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a946:	4a2b      	ldr	r2, [pc, #172]	@ (800a9f4 <HAL_GPIO_Init+0x22c>)
 800a948:	f043 0302 	orr.w	r3, r3, #2
 800a94c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a950:	4b28      	ldr	r3, [pc, #160]	@ (800a9f4 <HAL_GPIO_Init+0x22c>)
 800a952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a95e:	4a26      	ldr	r2, [pc, #152]	@ (800a9f8 <HAL_GPIO_Init+0x230>)
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	089b      	lsrs	r3, r3, #2
 800a964:	3302      	adds	r3, #2
 800a966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a96a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	f003 0303 	and.w	r3, r3, #3
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	220f      	movs	r2, #15
 800a976:	fa02 f303 	lsl.w	r3, r2, r3
 800a97a:	43db      	mvns	r3, r3
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	4013      	ands	r3, r2
 800a980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a1d      	ldr	r2, [pc, #116]	@ (800a9fc <HAL_GPIO_Init+0x234>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d04a      	beq.n	800aa20 <HAL_GPIO_Init+0x258>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a1c      	ldr	r2, [pc, #112]	@ (800aa00 <HAL_GPIO_Init+0x238>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d02b      	beq.n	800a9ea <HAL_GPIO_Init+0x222>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a1b      	ldr	r2, [pc, #108]	@ (800aa04 <HAL_GPIO_Init+0x23c>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d025      	beq.n	800a9e6 <HAL_GPIO_Init+0x21e>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a1a      	ldr	r2, [pc, #104]	@ (800aa08 <HAL_GPIO_Init+0x240>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d01f      	beq.n	800a9e2 <HAL_GPIO_Init+0x21a>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a19      	ldr	r2, [pc, #100]	@ (800aa0c <HAL_GPIO_Init+0x244>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d019      	beq.n	800a9de <HAL_GPIO_Init+0x216>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a18      	ldr	r2, [pc, #96]	@ (800aa10 <HAL_GPIO_Init+0x248>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d013      	beq.n	800a9da <HAL_GPIO_Init+0x212>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a17      	ldr	r2, [pc, #92]	@ (800aa14 <HAL_GPIO_Init+0x24c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00d      	beq.n	800a9d6 <HAL_GPIO_Init+0x20e>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a16      	ldr	r2, [pc, #88]	@ (800aa18 <HAL_GPIO_Init+0x250>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d007      	beq.n	800a9d2 <HAL_GPIO_Init+0x20a>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a15      	ldr	r2, [pc, #84]	@ (800aa1c <HAL_GPIO_Init+0x254>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d101      	bne.n	800a9ce <HAL_GPIO_Init+0x206>
 800a9ca:	2309      	movs	r3, #9
 800a9cc:	e029      	b.n	800aa22 <HAL_GPIO_Init+0x25a>
 800a9ce:	230a      	movs	r3, #10
 800a9d0:	e027      	b.n	800aa22 <HAL_GPIO_Init+0x25a>
 800a9d2:	2307      	movs	r3, #7
 800a9d4:	e025      	b.n	800aa22 <HAL_GPIO_Init+0x25a>
 800a9d6:	2306      	movs	r3, #6
 800a9d8:	e023      	b.n	800aa22 <HAL_GPIO_Init+0x25a>
 800a9da:	2305      	movs	r3, #5
 800a9dc:	e021      	b.n	800aa22 <HAL_GPIO_Init+0x25a>
 800a9de:	2304      	movs	r3, #4
 800a9e0:	e01f      	b.n	800aa22 <HAL_GPIO_Init+0x25a>
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e01d      	b.n	800aa22 <HAL_GPIO_Init+0x25a>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e01b      	b.n	800aa22 <HAL_GPIO_Init+0x25a>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e019      	b.n	800aa22 <HAL_GPIO_Init+0x25a>
 800a9ee:	bf00      	nop
 800a9f0:	58000080 	.word	0x58000080
 800a9f4:	58024400 	.word	0x58024400
 800a9f8:	58000400 	.word	0x58000400
 800a9fc:	58020000 	.word	0x58020000
 800aa00:	58020400 	.word	0x58020400
 800aa04:	58020800 	.word	0x58020800
 800aa08:	58020c00 	.word	0x58020c00
 800aa0c:	58021000 	.word	0x58021000
 800aa10:	58021400 	.word	0x58021400
 800aa14:	58021800 	.word	0x58021800
 800aa18:	58021c00 	.word	0x58021c00
 800aa1c:	58022400 	.word	0x58022400
 800aa20:	2300      	movs	r3, #0
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	f002 0203 	and.w	r2, r2, #3
 800aa28:	0092      	lsls	r2, r2, #2
 800aa2a:	4093      	lsls	r3, r2
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa32:	4938      	ldr	r1, [pc, #224]	@ (800ab14 <HAL_GPIO_Init+0x34c>)
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	089b      	lsrs	r3, r3, #2
 800aa38:	3302      	adds	r3, #2
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aa40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	43db      	mvns	r3, r3
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	4013      	ands	r3, r2
 800aa50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800aa5e:	69ba      	ldr	r2, [r7, #24]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800aa66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800aa6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	43db      	mvns	r3, r3
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d003      	beq.n	800aa94 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800aa94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	43db      	mvns	r3, r3
 800aaa6:	69ba      	ldr	r2, [r7, #24]
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d003      	beq.n	800aac0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800aab8:	69ba      	ldr	r2, [r7, #24]
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	43db      	mvns	r3, r3
 800aad0:	69ba      	ldr	r2, [r7, #24]
 800aad2:	4013      	ands	r3, r2
 800aad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800aae2:	69ba      	ldr	r2, [r7, #24]
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	fa22 f303 	lsr.w	r3, r2, r3
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f47f ae6b 	bne.w	800a7dc <HAL_GPIO_Init+0x14>
  }
}
 800ab06:	bf00      	nop
 800ab08:	bf00      	nop
 800ab0a:	3724      	adds	r7, #36	@ 0x24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	58000400 	.word	0x58000400

0800ab18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	691a      	ldr	r2, [r3, #16]
 800ab28:	887b      	ldrh	r3, [r7, #2]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ab30:	2301      	movs	r3, #1
 800ab32:	73fb      	strb	r3, [r7, #15]
 800ab34:	e001      	b.n	800ab3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ab36:	2300      	movs	r3, #0
 800ab38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	807b      	strh	r3, [r7, #2]
 800ab54:	4613      	mov	r3, r2
 800ab56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ab58:	787b      	ldrb	r3, [r7, #1]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ab5e:	887a      	ldrh	r2, [r7, #2]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ab64:	e003      	b.n	800ab6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ab66:	887b      	ldrh	r3, [r7, #2]
 800ab68:	041a      	lsls	r2, r3, #16
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	619a      	str	r2, [r3, #24]
}
 800ab6e:	bf00      	nop
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
	...

0800ab7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ab84:	4b19      	ldr	r3, [pc, #100]	@ (800abec <HAL_PWREx_ConfigSupply+0x70>)
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b04      	cmp	r3, #4
 800ab8e:	d00a      	beq.n	800aba6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ab90:	4b16      	ldr	r3, [pc, #88]	@ (800abec <HAL_PWREx_ConfigSupply+0x70>)
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	f003 0307 	and.w	r3, r3, #7
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d001      	beq.n	800aba2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e01f      	b.n	800abe2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	e01d      	b.n	800abe2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aba6:	4b11      	ldr	r3, [pc, #68]	@ (800abec <HAL_PWREx_ConfigSupply+0x70>)
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	f023 0207 	bic.w	r2, r3, #7
 800abae:	490f      	ldr	r1, [pc, #60]	@ (800abec <HAL_PWREx_ConfigSupply+0x70>)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800abb6:	f7f9 fdd7 	bl	8004768 <HAL_GetTick>
 800abba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800abbc:	e009      	b.n	800abd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800abbe:	f7f9 fdd3 	bl	8004768 <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800abcc:	d901      	bls.n	800abd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e007      	b.n	800abe2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800abd2:	4b06      	ldr	r3, [pc, #24]	@ (800abec <HAL_PWREx_ConfigSupply+0x70>)
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800abda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abde:	d1ee      	bne.n	800abbe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	58024800 	.word	0x58024800

0800abf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08c      	sub	sp, #48	@ 0x30
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e3c8      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 8087 	beq.w	800ad1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac10:	4b88      	ldr	r3, [pc, #544]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac1a:	4b86      	ldr	r3, [pc, #536]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ac20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac22:	2b10      	cmp	r3, #16
 800ac24:	d007      	beq.n	800ac36 <HAL_RCC_OscConfig+0x46>
 800ac26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac28:	2b18      	cmp	r3, #24
 800ac2a:	d110      	bne.n	800ac4e <HAL_RCC_OscConfig+0x5e>
 800ac2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d10b      	bne.n	800ac4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac36:	4b7f      	ldr	r3, [pc, #508]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d06c      	beq.n	800ad1c <HAL_RCC_OscConfig+0x12c>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d168      	bne.n	800ad1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e3a2      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac56:	d106      	bne.n	800ac66 <HAL_RCC_OscConfig+0x76>
 800ac58:	4b76      	ldr	r3, [pc, #472]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a75      	ldr	r2, [pc, #468]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	e02e      	b.n	800acc4 <HAL_RCC_OscConfig+0xd4>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10c      	bne.n	800ac88 <HAL_RCC_OscConfig+0x98>
 800ac6e:	4b71      	ldr	r3, [pc, #452]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a70      	ldr	r2, [pc, #448]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	4b6e      	ldr	r3, [pc, #440]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a6d      	ldr	r2, [pc, #436]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	e01d      	b.n	800acc4 <HAL_RCC_OscConfig+0xd4>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac90:	d10c      	bne.n	800acac <HAL_RCC_OscConfig+0xbc>
 800ac92:	4b68      	ldr	r3, [pc, #416]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a67      	ldr	r2, [pc, #412]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ac98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	4b65      	ldr	r3, [pc, #404]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a64      	ldr	r2, [pc, #400]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800aca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aca8:	6013      	str	r3, [r2, #0]
 800acaa:	e00b      	b.n	800acc4 <HAL_RCC_OscConfig+0xd4>
 800acac:	4b61      	ldr	r3, [pc, #388]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a60      	ldr	r2, [pc, #384]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800acb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	4b5e      	ldr	r3, [pc, #376]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a5d      	ldr	r2, [pc, #372]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800acbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d013      	beq.n	800acf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800accc:	f7f9 fd4c 	bl	8004768 <HAL_GetTick>
 800acd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acd2:	e008      	b.n	800ace6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acd4:	f7f9 fd48 	bl	8004768 <HAL_GetTick>
 800acd8:	4602      	mov	r2, r0
 800acda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	2b64      	cmp	r3, #100	@ 0x64
 800ace0:	d901      	bls.n	800ace6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ace2:	2303      	movs	r3, #3
 800ace4:	e356      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ace6:	4b53      	ldr	r3, [pc, #332]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d0f0      	beq.n	800acd4 <HAL_RCC_OscConfig+0xe4>
 800acf2:	e014      	b.n	800ad1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acf4:	f7f9 fd38 	bl	8004768 <HAL_GetTick>
 800acf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800acfa:	e008      	b.n	800ad0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acfc:	f7f9 fd34 	bl	8004768 <HAL_GetTick>
 800ad00:	4602      	mov	r2, r0
 800ad02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	2b64      	cmp	r3, #100	@ 0x64
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e342      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ad0e:	4b49      	ldr	r3, [pc, #292]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f0      	bne.n	800acfc <HAL_RCC_OscConfig+0x10c>
 800ad1a:	e000      	b.n	800ad1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0302 	and.w	r3, r3, #2
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 808c 	beq.w	800ae44 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad2c:	4b41      	ldr	r3, [pc, #260]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad36:	4b3f      	ldr	r3, [pc, #252]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ad38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad3a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d007      	beq.n	800ad52 <HAL_RCC_OscConfig+0x162>
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	2b18      	cmp	r3, #24
 800ad46:	d137      	bne.n	800adb8 <HAL_RCC_OscConfig+0x1c8>
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	f003 0303 	and.w	r3, r3, #3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d132      	bne.n	800adb8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad52:	4b38      	ldr	r3, [pc, #224]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0304 	and.w	r3, r3, #4
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d005      	beq.n	800ad6a <HAL_RCC_OscConfig+0x17a>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e314      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad6a:	4b32      	ldr	r3, [pc, #200]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f023 0219 	bic.w	r2, r3, #25
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	492f      	ldr	r1, [pc, #188]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad7c:	f7f9 fcf4 	bl	8004768 <HAL_GetTick>
 800ad80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad82:	e008      	b.n	800ad96 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad84:	f7f9 fcf0 	bl	8004768 <HAL_GetTick>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d901      	bls.n	800ad96 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e2fe      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad96:	4b27      	ldr	r3, [pc, #156]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0304 	and.w	r3, r3, #4
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0f0      	beq.n	800ad84 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ada2:	4b24      	ldr	r3, [pc, #144]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	061b      	lsls	r3, r3, #24
 800adb0:	4920      	ldr	r1, [pc, #128]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800adb2:	4313      	orrs	r3, r2
 800adb4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800adb6:	e045      	b.n	800ae44 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d026      	beq.n	800ae0e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800adc0:	4b1c      	ldr	r3, [pc, #112]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f023 0219 	bic.w	r2, r3, #25
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	4919      	ldr	r1, [pc, #100]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800adce:	4313      	orrs	r3, r2
 800add0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800add2:	f7f9 fcc9 	bl	8004768 <HAL_GetTick>
 800add6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800add8:	e008      	b.n	800adec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adda:	f7f9 fcc5 	bl	8004768 <HAL_GetTick>
 800adde:	4602      	mov	r2, r0
 800ade0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d901      	bls.n	800adec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	e2d3      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800adec:	4b11      	ldr	r3, [pc, #68]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0f0      	beq.n	800adda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adf8:	4b0e      	ldr	r3, [pc, #56]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	061b      	lsls	r3, r3, #24
 800ae06:	490b      	ldr	r1, [pc, #44]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	604b      	str	r3, [r1, #4]
 800ae0c:	e01a      	b.n	800ae44 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae0e:	4b09      	ldr	r3, [pc, #36]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a08      	ldr	r2, [pc, #32]	@ (800ae34 <HAL_RCC_OscConfig+0x244>)
 800ae14:	f023 0301 	bic.w	r3, r3, #1
 800ae18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae1a:	f7f9 fca5 	bl	8004768 <HAL_GetTick>
 800ae1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ae20:	e00a      	b.n	800ae38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae22:	f7f9 fca1 	bl	8004768 <HAL_GetTick>
 800ae26:	4602      	mov	r2, r0
 800ae28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d903      	bls.n	800ae38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ae30:	2303      	movs	r3, #3
 800ae32:	e2af      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
 800ae34:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ae38:	4b96      	ldr	r3, [pc, #600]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 0304 	and.w	r3, r3, #4
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1ee      	bne.n	800ae22 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 0310 	and.w	r3, r3, #16
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d06a      	beq.n	800af26 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae50:	4b90      	ldr	r3, [pc, #576]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae58:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae5a:	4b8e      	ldr	r3, [pc, #568]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800ae5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	2b08      	cmp	r3, #8
 800ae64:	d007      	beq.n	800ae76 <HAL_RCC_OscConfig+0x286>
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	2b18      	cmp	r3, #24
 800ae6a:	d11b      	bne.n	800aea4 <HAL_RCC_OscConfig+0x2b4>
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f003 0303 	and.w	r3, r3, #3
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d116      	bne.n	800aea4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae76:	4b87      	ldr	r3, [pc, #540]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d005      	beq.n	800ae8e <HAL_RCC_OscConfig+0x29e>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	2b80      	cmp	r3, #128	@ 0x80
 800ae88:	d001      	beq.n	800ae8e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e282      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae8e:	4b81      	ldr	r3, [pc, #516]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	061b      	lsls	r3, r3, #24
 800ae9c:	497d      	ldr	r1, [pc, #500]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aea2:	e040      	b.n	800af26 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d023      	beq.n	800aef4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aeac:	4b79      	ldr	r3, [pc, #484]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a78      	ldr	r2, [pc, #480]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800aeb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeb8:	f7f9 fc56 	bl	8004768 <HAL_GetTick>
 800aebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aebe:	e008      	b.n	800aed2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aec0:	f7f9 fc52 	bl	8004768 <HAL_GetTick>
 800aec4:	4602      	mov	r2, r0
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d901      	bls.n	800aed2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aece:	2303      	movs	r3, #3
 800aed0:	e260      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aed2:	4b70      	ldr	r3, [pc, #448]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d0f0      	beq.n	800aec0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aede:	4b6d      	ldr	r3, [pc, #436]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	061b      	lsls	r3, r3, #24
 800aeec:	4969      	ldr	r1, [pc, #420]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	60cb      	str	r3, [r1, #12]
 800aef2:	e018      	b.n	800af26 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aef4:	4b67      	ldr	r3, [pc, #412]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a66      	ldr	r2, [pc, #408]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800aefa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aefe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af00:	f7f9 fc32 	bl	8004768 <HAL_GetTick>
 800af04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af06:	e008      	b.n	800af1a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800af08:	f7f9 fc2e 	bl	8004768 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	2b02      	cmp	r3, #2
 800af14:	d901      	bls.n	800af1a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e23c      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af1a:	4b5e      	ldr	r3, [pc, #376]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1f0      	bne.n	800af08 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0308 	and.w	r3, r3, #8
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d036      	beq.n	800afa0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d019      	beq.n	800af6e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af3a:	4b56      	ldr	r3, [pc, #344]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800af3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af3e:	4a55      	ldr	r2, [pc, #340]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800af40:	f043 0301 	orr.w	r3, r3, #1
 800af44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af46:	f7f9 fc0f 	bl	8004768 <HAL_GetTick>
 800af4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af4c:	e008      	b.n	800af60 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af4e:	f7f9 fc0b 	bl	8004768 <HAL_GetTick>
 800af52:	4602      	mov	r2, r0
 800af54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af56:	1ad3      	subs	r3, r2, r3
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d901      	bls.n	800af60 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e219      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af60:	4b4c      	ldr	r3, [pc, #304]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800af62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af64:	f003 0302 	and.w	r3, r3, #2
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d0f0      	beq.n	800af4e <HAL_RCC_OscConfig+0x35e>
 800af6c:	e018      	b.n	800afa0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af6e:	4b49      	ldr	r3, [pc, #292]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800af70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af72:	4a48      	ldr	r2, [pc, #288]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800af74:	f023 0301 	bic.w	r3, r3, #1
 800af78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af7a:	f7f9 fbf5 	bl	8004768 <HAL_GetTick>
 800af7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af80:	e008      	b.n	800af94 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af82:	f7f9 fbf1 	bl	8004768 <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d901      	bls.n	800af94 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e1ff      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af94:	4b3f      	ldr	r3, [pc, #252]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800af96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af98:	f003 0302 	and.w	r3, r3, #2
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1f0      	bne.n	800af82 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0320 	and.w	r3, r3, #32
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d036      	beq.n	800b01a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d019      	beq.n	800afe8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800afb4:	4b37      	ldr	r3, [pc, #220]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a36      	ldr	r2, [pc, #216]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800afba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800afbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800afc0:	f7f9 fbd2 	bl	8004768 <HAL_GetTick>
 800afc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800afc6:	e008      	b.n	800afda <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afc8:	f7f9 fbce 	bl	8004768 <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d901      	bls.n	800afda <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800afd6:	2303      	movs	r3, #3
 800afd8:	e1dc      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800afda:	4b2e      	ldr	r3, [pc, #184]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0f0      	beq.n	800afc8 <HAL_RCC_OscConfig+0x3d8>
 800afe6:	e018      	b.n	800b01a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800afe8:	4b2a      	ldr	r3, [pc, #168]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a29      	ldr	r2, [pc, #164]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800afee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aff2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aff4:	f7f9 fbb8 	bl	8004768 <HAL_GetTick>
 800aff8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800affa:	e008      	b.n	800b00e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800affc:	f7f9 fbb4 	bl	8004768 <HAL_GetTick>
 800b000:	4602      	mov	r2, r0
 800b002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	2b02      	cmp	r3, #2
 800b008:	d901      	bls.n	800b00e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e1c2      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b00e:	4b21      	ldr	r3, [pc, #132]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1f0      	bne.n	800affc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 0304 	and.w	r3, r3, #4
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 8086 	beq.w	800b134 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b028:	4b1b      	ldr	r3, [pc, #108]	@ (800b098 <HAL_RCC_OscConfig+0x4a8>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a1a      	ldr	r2, [pc, #104]	@ (800b098 <HAL_RCC_OscConfig+0x4a8>)
 800b02e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b034:	f7f9 fb98 	bl	8004768 <HAL_GetTick>
 800b038:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b03a:	e008      	b.n	800b04e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b03c:	f7f9 fb94 	bl	8004768 <HAL_GetTick>
 800b040:	4602      	mov	r2, r0
 800b042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	2b64      	cmp	r3, #100	@ 0x64
 800b048:	d901      	bls.n	800b04e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e1a2      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b04e:	4b12      	ldr	r3, [pc, #72]	@ (800b098 <HAL_RCC_OscConfig+0x4a8>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0f0      	beq.n	800b03c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d106      	bne.n	800b070 <HAL_RCC_OscConfig+0x480>
 800b062:	4b0c      	ldr	r3, [pc, #48]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800b064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b066:	4a0b      	ldr	r2, [pc, #44]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800b068:	f043 0301 	orr.w	r3, r3, #1
 800b06c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b06e:	e032      	b.n	800b0d6 <HAL_RCC_OscConfig+0x4e6>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d111      	bne.n	800b09c <HAL_RCC_OscConfig+0x4ac>
 800b078:	4b06      	ldr	r3, [pc, #24]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800b07a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b07c:	4a05      	ldr	r2, [pc, #20]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800b07e:	f023 0301 	bic.w	r3, r3, #1
 800b082:	6713      	str	r3, [r2, #112]	@ 0x70
 800b084:	4b03      	ldr	r3, [pc, #12]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800b086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b088:	4a02      	ldr	r2, [pc, #8]	@ (800b094 <HAL_RCC_OscConfig+0x4a4>)
 800b08a:	f023 0304 	bic.w	r3, r3, #4
 800b08e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b090:	e021      	b.n	800b0d6 <HAL_RCC_OscConfig+0x4e6>
 800b092:	bf00      	nop
 800b094:	58024400 	.word	0x58024400
 800b098:	58024800 	.word	0x58024800
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	2b05      	cmp	r3, #5
 800b0a2:	d10c      	bne.n	800b0be <HAL_RCC_OscConfig+0x4ce>
 800b0a4:	4b83      	ldr	r3, [pc, #524]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b0a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0a8:	4a82      	ldr	r2, [pc, #520]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b0aa:	f043 0304 	orr.w	r3, r3, #4
 800b0ae:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0b0:	4b80      	ldr	r3, [pc, #512]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b0b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0b4:	4a7f      	ldr	r2, [pc, #508]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b0b6:	f043 0301 	orr.w	r3, r3, #1
 800b0ba:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0bc:	e00b      	b.n	800b0d6 <HAL_RCC_OscConfig+0x4e6>
 800b0be:	4b7d      	ldr	r3, [pc, #500]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b0c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0c2:	4a7c      	ldr	r2, [pc, #496]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b0c4:	f023 0301 	bic.w	r3, r3, #1
 800b0c8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0ca:	4b7a      	ldr	r3, [pc, #488]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0ce:	4a79      	ldr	r2, [pc, #484]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b0d0:	f023 0304 	bic.w	r3, r3, #4
 800b0d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d015      	beq.n	800b10a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0de:	f7f9 fb43 	bl	8004768 <HAL_GetTick>
 800b0e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0e4:	e00a      	b.n	800b0fc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0e6:	f7f9 fb3f 	bl	8004768 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d901      	bls.n	800b0fc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e14b      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0fc:	4b6d      	ldr	r3, [pc, #436]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b0fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b100:	f003 0302 	and.w	r3, r3, #2
 800b104:	2b00      	cmp	r3, #0
 800b106:	d0ee      	beq.n	800b0e6 <HAL_RCC_OscConfig+0x4f6>
 800b108:	e014      	b.n	800b134 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b10a:	f7f9 fb2d 	bl	8004768 <HAL_GetTick>
 800b10e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b110:	e00a      	b.n	800b128 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b112:	f7f9 fb29 	bl	8004768 <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b120:	4293      	cmp	r3, r2
 800b122:	d901      	bls.n	800b128 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e135      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b128:	4b62      	ldr	r3, [pc, #392]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b12a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b12c:	f003 0302 	and.w	r3, r3, #2
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1ee      	bne.n	800b112 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 812a 	beq.w	800b392 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b13e:	4b5d      	ldr	r3, [pc, #372]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b146:	2b18      	cmp	r3, #24
 800b148:	f000 80ba 	beq.w	800b2c0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b150:	2b02      	cmp	r3, #2
 800b152:	f040 8095 	bne.w	800b280 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b156:	4b57      	ldr	r3, [pc, #348]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a56      	ldr	r2, [pc, #344]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b15c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b162:	f7f9 fb01 	bl	8004768 <HAL_GetTick>
 800b166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b168:	e008      	b.n	800b17c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b16a:	f7f9 fafd 	bl	8004768 <HAL_GetTick>
 800b16e:	4602      	mov	r2, r0
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	2b02      	cmp	r3, #2
 800b176:	d901      	bls.n	800b17c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b178:	2303      	movs	r3, #3
 800b17a:	e10b      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b17c:	4b4d      	ldr	r3, [pc, #308]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1f0      	bne.n	800b16a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b188:	4b4a      	ldr	r3, [pc, #296]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b18a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b18c:	4b4a      	ldr	r3, [pc, #296]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c8>)
 800b18e:	4013      	ands	r3, r2
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b198:	0112      	lsls	r2, r2, #4
 800b19a:	430a      	orrs	r2, r1
 800b19c:	4945      	ldr	r1, [pc, #276]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	628b      	str	r3, [r1, #40]	@ 0x28
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	025b      	lsls	r3, r3, #9
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	041b      	lsls	r3, r3, #16
 800b1c0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b1c4:	431a      	orrs	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	061b      	lsls	r3, r3, #24
 800b1ce:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b1d2:	4938      	ldr	r1, [pc, #224]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b1d8:	4b36      	ldr	r3, [pc, #216]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1dc:	4a35      	ldr	r2, [pc, #212]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b1de:	f023 0301 	bic.w	r3, r3, #1
 800b1e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1e4:	4b33      	ldr	r3, [pc, #204]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b1e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1e8:	4b34      	ldr	r3, [pc, #208]	@ (800b2bc <HAL_RCC_OscConfig+0x6cc>)
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b1f0:	00d2      	lsls	r2, r2, #3
 800b1f2:	4930      	ldr	r1, [pc, #192]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b1f8:	4b2e      	ldr	r3, [pc, #184]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fc:	f023 020c 	bic.w	r2, r3, #12
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b204:	492b      	ldr	r1, [pc, #172]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b206:	4313      	orrs	r3, r2
 800b208:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b20a:	4b2a      	ldr	r3, [pc, #168]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20e:	f023 0202 	bic.w	r2, r3, #2
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b216:	4927      	ldr	r1, [pc, #156]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b218:	4313      	orrs	r3, r2
 800b21a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b21c:	4b25      	ldr	r3, [pc, #148]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b220:	4a24      	ldr	r2, [pc, #144]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b228:	4b22      	ldr	r3, [pc, #136]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b22c:	4a21      	ldr	r2, [pc, #132]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b22e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b234:	4b1f      	ldr	r3, [pc, #124]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b238:	4a1e      	ldr	r2, [pc, #120]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b23a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b23e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b240:	4b1c      	ldr	r3, [pc, #112]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b244:	4a1b      	ldr	r2, [pc, #108]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b246:	f043 0301 	orr.w	r3, r3, #1
 800b24a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b24c:	4b19      	ldr	r3, [pc, #100]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a18      	ldr	r2, [pc, #96]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b258:	f7f9 fa86 	bl	8004768 <HAL_GetTick>
 800b25c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b25e:	e008      	b.n	800b272 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b260:	f7f9 fa82 	bl	8004768 <HAL_GetTick>
 800b264:	4602      	mov	r2, r0
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d901      	bls.n	800b272 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	e090      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b272:	4b10      	ldr	r3, [pc, #64]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0f0      	beq.n	800b260 <HAL_RCC_OscConfig+0x670>
 800b27e:	e088      	b.n	800b392 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b280:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a0b      	ldr	r2, [pc, #44]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b28a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b28c:	f7f9 fa6c 	bl	8004768 <HAL_GetTick>
 800b290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b292:	e008      	b.n	800b2a6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b294:	f7f9 fa68 	bl	8004768 <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d901      	bls.n	800b2a6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e076      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2a6:	4b03      	ldr	r3, [pc, #12]	@ (800b2b4 <HAL_RCC_OscConfig+0x6c4>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1f0      	bne.n	800b294 <HAL_RCC_OscConfig+0x6a4>
 800b2b2:	e06e      	b.n	800b392 <HAL_RCC_OscConfig+0x7a2>
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	fffffc0c 	.word	0xfffffc0c
 800b2bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b2c0:	4b36      	ldr	r3, [pc, #216]	@ (800b39c <HAL_RCC_OscConfig+0x7ac>)
 800b2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b2c6:	4b35      	ldr	r3, [pc, #212]	@ (800b39c <HAL_RCC_OscConfig+0x7ac>)
 800b2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d031      	beq.n	800b338 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	f003 0203 	and.w	r2, r3, #3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d12a      	bne.n	800b338 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	091b      	lsrs	r3, r3, #4
 800b2e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d122      	bne.n	800b338 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d11a      	bne.n	800b338 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	0a5b      	lsrs	r3, r3, #9
 800b306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b30e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b310:	429a      	cmp	r2, r3
 800b312:	d111      	bne.n	800b338 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	0c1b      	lsrs	r3, r3, #16
 800b318:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b320:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b322:	429a      	cmp	r2, r3
 800b324:	d108      	bne.n	800b338 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	0e1b      	lsrs	r3, r3, #24
 800b32a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b332:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b334:	429a      	cmp	r2, r3
 800b336:	d001      	beq.n	800b33c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e02b      	b.n	800b394 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b33c:	4b17      	ldr	r3, [pc, #92]	@ (800b39c <HAL_RCC_OscConfig+0x7ac>)
 800b33e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b340:	08db      	lsrs	r3, r3, #3
 800b342:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b346:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d01f      	beq.n	800b392 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b352:	4b12      	ldr	r3, [pc, #72]	@ (800b39c <HAL_RCC_OscConfig+0x7ac>)
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	4a11      	ldr	r2, [pc, #68]	@ (800b39c <HAL_RCC_OscConfig+0x7ac>)
 800b358:	f023 0301 	bic.w	r3, r3, #1
 800b35c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b35e:	f7f9 fa03 	bl	8004768 <HAL_GetTick>
 800b362:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b364:	bf00      	nop
 800b366:	f7f9 f9ff 	bl	8004768 <HAL_GetTick>
 800b36a:	4602      	mov	r2, r0
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	4293      	cmp	r3, r2
 800b370:	d0f9      	beq.n	800b366 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b372:	4b0a      	ldr	r3, [pc, #40]	@ (800b39c <HAL_RCC_OscConfig+0x7ac>)
 800b374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b376:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a0 <HAL_RCC_OscConfig+0x7b0>)
 800b378:	4013      	ands	r3, r2
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b37e:	00d2      	lsls	r2, r2, #3
 800b380:	4906      	ldr	r1, [pc, #24]	@ (800b39c <HAL_RCC_OscConfig+0x7ac>)
 800b382:	4313      	orrs	r3, r2
 800b384:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b386:	4b05      	ldr	r3, [pc, #20]	@ (800b39c <HAL_RCC_OscConfig+0x7ac>)
 800b388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38a:	4a04      	ldr	r2, [pc, #16]	@ (800b39c <HAL_RCC_OscConfig+0x7ac>)
 800b38c:	f043 0301 	orr.w	r3, r3, #1
 800b390:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3730      	adds	r7, #48	@ 0x30
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	58024400 	.word	0x58024400
 800b3a0:	ffff0007 	.word	0xffff0007

0800b3a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e19c      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3b8:	4b8a      	ldr	r3, [pc, #552]	@ (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 030f 	and.w	r3, r3, #15
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d910      	bls.n	800b3e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3c6:	4b87      	ldr	r3, [pc, #540]	@ (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f023 020f 	bic.w	r2, r3, #15
 800b3ce:	4985      	ldr	r1, [pc, #532]	@ (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3d6:	4b83      	ldr	r3, [pc, #524]	@ (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 030f 	and.w	r3, r3, #15
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d001      	beq.n	800b3e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e184      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d010      	beq.n	800b416 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691a      	ldr	r2, [r3, #16]
 800b3f8:	4b7b      	ldr	r3, [pc, #492]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b400:	429a      	cmp	r2, r3
 800b402:	d908      	bls.n	800b416 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b404:	4b78      	ldr	r3, [pc, #480]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	4975      	ldr	r1, [pc, #468]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b412:	4313      	orrs	r3, r2
 800b414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0308 	and.w	r3, r3, #8
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d010      	beq.n	800b444 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	695a      	ldr	r2, [r3, #20]
 800b426:	4b70      	ldr	r3, [pc, #448]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b42e:	429a      	cmp	r2, r3
 800b430:	d908      	bls.n	800b444 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b432:	4b6d      	ldr	r3, [pc, #436]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	496a      	ldr	r1, [pc, #424]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b440:	4313      	orrs	r3, r2
 800b442:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0310 	and.w	r3, r3, #16
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d010      	beq.n	800b472 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	699a      	ldr	r2, [r3, #24]
 800b454:	4b64      	ldr	r3, [pc, #400]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d908      	bls.n	800b472 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b460:	4b61      	ldr	r3, [pc, #388]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	495e      	ldr	r1, [pc, #376]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0320 	and.w	r3, r3, #32
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d010      	beq.n	800b4a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	69da      	ldr	r2, [r3, #28]
 800b482:	4b59      	ldr	r3, [pc, #356]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d908      	bls.n	800b4a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b48e:	4b56      	ldr	r3, [pc, #344]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	4953      	ldr	r1, [pc, #332]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b49c:	4313      	orrs	r3, r2
 800b49e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 0302 	and.w	r3, r3, #2
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d010      	beq.n	800b4ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68da      	ldr	r2, [r3, #12]
 800b4b0:	4b4d      	ldr	r3, [pc, #308]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	f003 030f 	and.w	r3, r3, #15
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d908      	bls.n	800b4ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4bc:	4b4a      	ldr	r3, [pc, #296]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	f023 020f 	bic.w	r2, r3, #15
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	4947      	ldr	r1, [pc, #284]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d055      	beq.n	800b586 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b4da:	4b43      	ldr	r3, [pc, #268]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	4940      	ldr	r1, [pc, #256]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d107      	bne.n	800b504 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4f4:	4b3c      	ldr	r3, [pc, #240]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d121      	bne.n	800b544 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e0f6      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d107      	bne.n	800b51c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b50c:	4b36      	ldr	r3, [pc, #216]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d115      	bne.n	800b544 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e0ea      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d107      	bne.n	800b534 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b524:	4b30      	ldr	r3, [pc, #192]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d109      	bne.n	800b544 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e0de      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b534:	4b2c      	ldr	r3, [pc, #176]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e0d6      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b544:	4b28      	ldr	r3, [pc, #160]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	f023 0207 	bic.w	r2, r3, #7
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	4925      	ldr	r1, [pc, #148]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b552:	4313      	orrs	r3, r2
 800b554:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b556:	f7f9 f907 	bl	8004768 <HAL_GetTick>
 800b55a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b55c:	e00a      	b.n	800b574 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b55e:	f7f9 f903 	bl	8004768 <HAL_GetTick>
 800b562:	4602      	mov	r2, r0
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d901      	bls.n	800b574 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e0be      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b574:	4b1c      	ldr	r3, [pc, #112]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	429a      	cmp	r2, r3
 800b584:	d1eb      	bne.n	800b55e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 0302 	and.w	r3, r3, #2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d010      	beq.n	800b5b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68da      	ldr	r2, [r3, #12]
 800b596:	4b14      	ldr	r3, [pc, #80]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	f003 030f 	and.w	r3, r3, #15
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d208      	bcs.n	800b5b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5a2:	4b11      	ldr	r3, [pc, #68]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	f023 020f 	bic.w	r2, r3, #15
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	490e      	ldr	r1, [pc, #56]	@ (800b5e8 <HAL_RCC_ClockConfig+0x244>)
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d214      	bcs.n	800b5ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5c2:	4b08      	ldr	r3, [pc, #32]	@ (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f023 020f 	bic.w	r2, r3, #15
 800b5ca:	4906      	ldr	r1, [pc, #24]	@ (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5d2:	4b04      	ldr	r3, [pc, #16]	@ (800b5e4 <HAL_RCC_ClockConfig+0x240>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f003 030f 	and.w	r3, r3, #15
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d005      	beq.n	800b5ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e086      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x34e>
 800b5e4:	52002000 	.word	0x52002000
 800b5e8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0304 	and.w	r3, r3, #4
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d010      	beq.n	800b61a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	691a      	ldr	r2, [r3, #16]
 800b5fc:	4b3f      	ldr	r3, [pc, #252]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b604:	429a      	cmp	r2, r3
 800b606:	d208      	bcs.n	800b61a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b608:	4b3c      	ldr	r3, [pc, #240]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	4939      	ldr	r1, [pc, #228]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b616:	4313      	orrs	r3, r2
 800b618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 0308 	and.w	r3, r3, #8
 800b622:	2b00      	cmp	r3, #0
 800b624:	d010      	beq.n	800b648 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	695a      	ldr	r2, [r3, #20]
 800b62a:	4b34      	ldr	r3, [pc, #208]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b632:	429a      	cmp	r2, r3
 800b634:	d208      	bcs.n	800b648 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b636:	4b31      	ldr	r3, [pc, #196]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b638:	69db      	ldr	r3, [r3, #28]
 800b63a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	492e      	ldr	r1, [pc, #184]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b644:	4313      	orrs	r3, r2
 800b646:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 0310 	and.w	r3, r3, #16
 800b650:	2b00      	cmp	r3, #0
 800b652:	d010      	beq.n	800b676 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	699a      	ldr	r2, [r3, #24]
 800b658:	4b28      	ldr	r3, [pc, #160]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b65a:	69db      	ldr	r3, [r3, #28]
 800b65c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b660:	429a      	cmp	r2, r3
 800b662:	d208      	bcs.n	800b676 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b664:	4b25      	ldr	r3, [pc, #148]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b666:	69db      	ldr	r3, [r3, #28]
 800b668:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	4922      	ldr	r1, [pc, #136]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b672:	4313      	orrs	r3, r2
 800b674:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 0320 	and.w	r3, r3, #32
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d010      	beq.n	800b6a4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	69da      	ldr	r2, [r3, #28]
 800b686:	4b1d      	ldr	r3, [pc, #116]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b68e:	429a      	cmp	r2, r3
 800b690:	d208      	bcs.n	800b6a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b692:	4b1a      	ldr	r3, [pc, #104]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	4917      	ldr	r1, [pc, #92]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6a4:	f000 f834 	bl	800b710 <HAL_RCC_GetSysClockFreq>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	4b14      	ldr	r3, [pc, #80]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b6ac:	699b      	ldr	r3, [r3, #24]
 800b6ae:	0a1b      	lsrs	r3, r3, #8
 800b6b0:	f003 030f 	and.w	r3, r3, #15
 800b6b4:	4912      	ldr	r1, [pc, #72]	@ (800b700 <HAL_RCC_ClockConfig+0x35c>)
 800b6b6:	5ccb      	ldrb	r3, [r1, r3]
 800b6b8:	f003 031f 	and.w	r3, r3, #31
 800b6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b6fc <HAL_RCC_ClockConfig+0x358>)
 800b6c4:	699b      	ldr	r3, [r3, #24]
 800b6c6:	f003 030f 	and.w	r3, r3, #15
 800b6ca:	4a0d      	ldr	r2, [pc, #52]	@ (800b700 <HAL_RCC_ClockConfig+0x35c>)
 800b6cc:	5cd3      	ldrb	r3, [r2, r3]
 800b6ce:	f003 031f 	and.w	r3, r3, #31
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d8:	4a0a      	ldr	r2, [pc, #40]	@ (800b704 <HAL_RCC_ClockConfig+0x360>)
 800b6da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6dc:	4a0a      	ldr	r2, [pc, #40]	@ (800b708 <HAL_RCC_ClockConfig+0x364>)
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b70c <HAL_RCC_ClockConfig+0x368>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7f8 fff4 	bl	80046d4 <HAL_InitTick>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3718      	adds	r7, #24
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	58024400 	.word	0x58024400
 800b700:	080195b4 	.word	0x080195b4
 800b704:	24000018 	.word	0x24000018
 800b708:	24000014 	.word	0x24000014
 800b70c:	2400001c 	.word	0x2400001c

0800b710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b710:	b480      	push	{r7}
 800b712:	b089      	sub	sp, #36	@ 0x24
 800b714:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b716:	4bb3      	ldr	r3, [pc, #716]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b71e:	2b18      	cmp	r3, #24
 800b720:	f200 8155 	bhi.w	800b9ce <HAL_RCC_GetSysClockFreq+0x2be>
 800b724:	a201      	add	r2, pc, #4	@ (adr r2, 800b72c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72a:	bf00      	nop
 800b72c:	0800b791 	.word	0x0800b791
 800b730:	0800b9cf 	.word	0x0800b9cf
 800b734:	0800b9cf 	.word	0x0800b9cf
 800b738:	0800b9cf 	.word	0x0800b9cf
 800b73c:	0800b9cf 	.word	0x0800b9cf
 800b740:	0800b9cf 	.word	0x0800b9cf
 800b744:	0800b9cf 	.word	0x0800b9cf
 800b748:	0800b9cf 	.word	0x0800b9cf
 800b74c:	0800b7b7 	.word	0x0800b7b7
 800b750:	0800b9cf 	.word	0x0800b9cf
 800b754:	0800b9cf 	.word	0x0800b9cf
 800b758:	0800b9cf 	.word	0x0800b9cf
 800b75c:	0800b9cf 	.word	0x0800b9cf
 800b760:	0800b9cf 	.word	0x0800b9cf
 800b764:	0800b9cf 	.word	0x0800b9cf
 800b768:	0800b9cf 	.word	0x0800b9cf
 800b76c:	0800b7bd 	.word	0x0800b7bd
 800b770:	0800b9cf 	.word	0x0800b9cf
 800b774:	0800b9cf 	.word	0x0800b9cf
 800b778:	0800b9cf 	.word	0x0800b9cf
 800b77c:	0800b9cf 	.word	0x0800b9cf
 800b780:	0800b9cf 	.word	0x0800b9cf
 800b784:	0800b9cf 	.word	0x0800b9cf
 800b788:	0800b9cf 	.word	0x0800b9cf
 800b78c:	0800b7c3 	.word	0x0800b7c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b790:	4b94      	ldr	r3, [pc, #592]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 0320 	and.w	r3, r3, #32
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d009      	beq.n	800b7b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b79c:	4b91      	ldr	r3, [pc, #580]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	08db      	lsrs	r3, r3, #3
 800b7a2:	f003 0303 	and.w	r3, r3, #3
 800b7a6:	4a90      	ldr	r2, [pc, #576]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b7ae:	e111      	b.n	800b9d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b7b0:	4b8d      	ldr	r3, [pc, #564]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7b2:	61bb      	str	r3, [r7, #24]
      break;
 800b7b4:	e10e      	b.n	800b9d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b7b6:	4b8d      	ldr	r3, [pc, #564]	@ (800b9ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b7b8:	61bb      	str	r3, [r7, #24]
      break;
 800b7ba:	e10b      	b.n	800b9d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b7bc:	4b8c      	ldr	r3, [pc, #560]	@ (800b9f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b7be:	61bb      	str	r3, [r7, #24]
      break;
 800b7c0:	e108      	b.n	800b9d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7c2:	4b88      	ldr	r3, [pc, #544]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c6:	f003 0303 	and.w	r3, r3, #3
 800b7ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b7cc:	4b85      	ldr	r3, [pc, #532]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d0:	091b      	lsrs	r3, r3, #4
 800b7d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b7d8:	4b82      	ldr	r3, [pc, #520]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7dc:	f003 0301 	and.w	r3, r3, #1
 800b7e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b7e2:	4b80      	ldr	r3, [pc, #512]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7e6:	08db      	lsrs	r3, r3, #3
 800b7e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	fb02 f303 	mul.w	r3, r2, r3
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 80e1 	beq.w	800b9c8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	f000 8083 	beq.w	800b914 <HAL_RCC_GetSysClockFreq+0x204>
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b02      	cmp	r3, #2
 800b812:	f200 80a1 	bhi.w	800b958 <HAL_RCC_GetSysClockFreq+0x248>
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <HAL_RCC_GetSysClockFreq+0x114>
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d056      	beq.n	800b8d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b822:	e099      	b.n	800b958 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b824:	4b6f      	ldr	r3, [pc, #444]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0320 	and.w	r3, r3, #32
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d02d      	beq.n	800b88c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b830:	4b6c      	ldr	r3, [pc, #432]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	08db      	lsrs	r3, r3, #3
 800b836:	f003 0303 	and.w	r3, r3, #3
 800b83a:	4a6b      	ldr	r2, [pc, #428]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b83c:	fa22 f303 	lsr.w	r3, r2, r3
 800b840:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b85a:	4b62      	ldr	r3, [pc, #392]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b85c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b85e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b86a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b86e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b9f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b87a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b87e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b882:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b886:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b88a:	e087      	b.n	800b99c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	ee07 3a90 	vmov	s15, r3
 800b892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b896:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b9f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b89a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b89e:	4b51      	ldr	r3, [pc, #324]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a6:	ee07 3a90 	vmov	s15, r3
 800b8aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8b2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b9f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b8ce:	e065      	b.n	800b99c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	ee07 3a90 	vmov	s15, r3
 800b8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8da:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b9fc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b8de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8e2:	4b40      	ldr	r3, [pc, #256]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ea:	ee07 3a90 	vmov	s15, r3
 800b8ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8f6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b9f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b912:	e043      	b.n	800b99c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	ee07 3a90 	vmov	s15, r3
 800b91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ba00 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b926:	4b2f      	ldr	r3, [pc, #188]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b92e:	ee07 3a90 	vmov	s15, r3
 800b932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b936:	ed97 6a02 	vldr	s12, [r7, #8]
 800b93a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b9f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b93e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b94a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b956:	e021      	b.n	800b99c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	ee07 3a90 	vmov	s15, r3
 800b95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b962:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b9fc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b96a:	4b1e      	ldr	r3, [pc, #120]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b96c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b972:	ee07 3a90 	vmov	s15, r3
 800b976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b97a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b97e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b9f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b98a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b98e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b99a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b99c:	4b11      	ldr	r3, [pc, #68]	@ (800b9e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b99e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a0:	0a5b      	lsrs	r3, r3, #9
 800b9a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	ee07 3a90 	vmov	s15, r3
 800b9b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9c0:	ee17 3a90 	vmov	r3, s15
 800b9c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b9c6:	e005      	b.n	800b9d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	61bb      	str	r3, [r7, #24]
      break;
 800b9cc:	e002      	b.n	800b9d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b9ce:	4b07      	ldr	r3, [pc, #28]	@ (800b9ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b9d0:	61bb      	str	r3, [r7, #24]
      break;
 800b9d2:	bf00      	nop
  }

  return sysclockfreq;
 800b9d4:	69bb      	ldr	r3, [r7, #24]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3724      	adds	r7, #36	@ 0x24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	58024400 	.word	0x58024400
 800b9e8:	03d09000 	.word	0x03d09000
 800b9ec:	003d0900 	.word	0x003d0900
 800b9f0:	016e3600 	.word	0x016e3600
 800b9f4:	46000000 	.word	0x46000000
 800b9f8:	4c742400 	.word	0x4c742400
 800b9fc:	4a742400 	.word	0x4a742400
 800ba00:	4bb71b00 	.word	0x4bb71b00

0800ba04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba0a:	f7ff fe81 	bl	800b710 <HAL_RCC_GetSysClockFreq>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	4b10      	ldr	r3, [pc, #64]	@ (800ba54 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	0a1b      	lsrs	r3, r3, #8
 800ba16:	f003 030f 	and.w	r3, r3, #15
 800ba1a:	490f      	ldr	r1, [pc, #60]	@ (800ba58 <HAL_RCC_GetHCLKFreq+0x54>)
 800ba1c:	5ccb      	ldrb	r3, [r1, r3]
 800ba1e:	f003 031f 	and.w	r3, r3, #31
 800ba22:	fa22 f303 	lsr.w	r3, r2, r3
 800ba26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba28:	4b0a      	ldr	r3, [pc, #40]	@ (800ba54 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	f003 030f 	and.w	r3, r3, #15
 800ba30:	4a09      	ldr	r2, [pc, #36]	@ (800ba58 <HAL_RCC_GetHCLKFreq+0x54>)
 800ba32:	5cd3      	ldrb	r3, [r2, r3]
 800ba34:	f003 031f 	and.w	r3, r3, #31
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba3e:	4a07      	ldr	r2, [pc, #28]	@ (800ba5c <HAL_RCC_GetHCLKFreq+0x58>)
 800ba40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba42:	4a07      	ldr	r2, [pc, #28]	@ (800ba60 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ba48:	4b04      	ldr	r3, [pc, #16]	@ (800ba5c <HAL_RCC_GetHCLKFreq+0x58>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	58024400 	.word	0x58024400
 800ba58:	080195b4 	.word	0x080195b4
 800ba5c:	24000018 	.word	0x24000018
 800ba60:	24000014 	.word	0x24000014

0800ba64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ba68:	f7ff ffcc 	bl	800ba04 <HAL_RCC_GetHCLKFreq>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4b06      	ldr	r3, [pc, #24]	@ (800ba88 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba70:	69db      	ldr	r3, [r3, #28]
 800ba72:	091b      	lsrs	r3, r3, #4
 800ba74:	f003 0307 	and.w	r3, r3, #7
 800ba78:	4904      	ldr	r1, [pc, #16]	@ (800ba8c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ba7a:	5ccb      	ldrb	r3, [r1, r3]
 800ba7c:	f003 031f 	and.w	r3, r3, #31
 800ba80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	58024400 	.word	0x58024400
 800ba8c:	080195b4 	.word	0x080195b4

0800ba90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ba94:	f7ff ffb6 	bl	800ba04 <HAL_RCC_GetHCLKFreq>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	4b06      	ldr	r3, [pc, #24]	@ (800bab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba9c:	69db      	ldr	r3, [r3, #28]
 800ba9e:	0a1b      	lsrs	r3, r3, #8
 800baa0:	f003 0307 	and.w	r3, r3, #7
 800baa4:	4904      	ldr	r1, [pc, #16]	@ (800bab8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800baa6:	5ccb      	ldrb	r3, [r1, r3]
 800baa8:	f003 031f 	and.w	r3, r3, #31
 800baac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	58024400 	.word	0x58024400
 800bab8:	080195b4 	.word	0x080195b4

0800babc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800babc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bac0:	b0c6      	sub	sp, #280	@ 0x118
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bac8:	2300      	movs	r3, #0
 800baca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bace:	2300      	movs	r3, #0
 800bad0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800bae0:	2500      	movs	r5, #0
 800bae2:	ea54 0305 	orrs.w	r3, r4, r5
 800bae6:	d049      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800baf2:	d02f      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800baf4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800baf8:	d828      	bhi.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bafa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bafe:	d01a      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bb00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb04:	d822      	bhi.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bb0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb0e:	d007      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bb10:	e01c      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb12:	4bab      	ldr	r3, [pc, #684]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb16:	4aaa      	ldr	r2, [pc, #680]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb1e:	e01a      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb24:	3308      	adds	r3, #8
 800bb26:	2102      	movs	r1, #2
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f002 fa49 	bl	800dfc0 <RCCEx_PLL2_Config>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb34:	e00f      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb3a:	3328      	adds	r3, #40	@ 0x28
 800bb3c:	2102      	movs	r1, #2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f002 faf0 	bl	800e124 <RCCEx_PLL3_Config>
 800bb44:	4603      	mov	r3, r0
 800bb46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb4a:	e004      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb52:	e000      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bb54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10a      	bne.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bb5e:	4b98      	ldr	r3, [pc, #608]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb6c:	4a94      	ldr	r2, [pc, #592]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb6e:	430b      	orrs	r3, r1
 800bb70:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb72:	e003      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800bb88:	f04f 0900 	mov.w	r9, #0
 800bb8c:	ea58 0309 	orrs.w	r3, r8, r9
 800bb90:	d047      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bb92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb98:	2b04      	cmp	r3, #4
 800bb9a:	d82a      	bhi.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bb9c:	a201      	add	r2, pc, #4	@ (adr r2, 800bba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba2:	bf00      	nop
 800bba4:	0800bbb9 	.word	0x0800bbb9
 800bba8:	0800bbc7 	.word	0x0800bbc7
 800bbac:	0800bbdd 	.word	0x0800bbdd
 800bbb0:	0800bbfb 	.word	0x0800bbfb
 800bbb4:	0800bbfb 	.word	0x0800bbfb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbb8:	4b81      	ldr	r3, [pc, #516]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbbc:	4a80      	ldr	r2, [pc, #512]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbc4:	e01a      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbca:	3308      	adds	r3, #8
 800bbcc:	2100      	movs	r1, #0
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f002 f9f6 	bl	800dfc0 <RCCEx_PLL2_Config>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbda:	e00f      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe0:	3328      	adds	r3, #40	@ 0x28
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f002 fa9d 	bl	800e124 <RCCEx_PLL3_Config>
 800bbea:	4603      	mov	r3, r0
 800bbec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbf0:	e004      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbf8:	e000      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bbfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10a      	bne.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc04:	4b6e      	ldr	r3, [pc, #440]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc08:	f023 0107 	bic.w	r1, r3, #7
 800bc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc12:	4a6b      	ldr	r2, [pc, #428]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc14:	430b      	orrs	r3, r1
 800bc16:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc18:	e003      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bc22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800bc2e:	f04f 0b00 	mov.w	fp, #0
 800bc32:	ea5a 030b 	orrs.w	r3, sl, fp
 800bc36:	d05b      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bc38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bc40:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bc44:	d03b      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bc46:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bc4a:	d834      	bhi.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bc4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc50:	d037      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bc52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc56:	d82e      	bhi.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bc58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bc5c:	d033      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bc5e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bc62:	d828      	bhi.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bc64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc68:	d01a      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bc6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc6e:	d822      	bhi.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d003      	beq.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bc74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc78:	d007      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bc7a:	e01c      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc7c:	4b50      	ldr	r3, [pc, #320]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc80:	4a4f      	ldr	r2, [pc, #316]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc88:	e01e      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc8e:	3308      	adds	r3, #8
 800bc90:	2100      	movs	r1, #0
 800bc92:	4618      	mov	r0, r3
 800bc94:	f002 f994 	bl	800dfc0 <RCCEx_PLL2_Config>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bc9e:	e013      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bca4:	3328      	adds	r3, #40	@ 0x28
 800bca6:	2100      	movs	r1, #0
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f002 fa3b 	bl	800e124 <RCCEx_PLL3_Config>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bcb4:	e008      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcbc:	e004      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bcbe:	bf00      	nop
 800bcc0:	e002      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bcc2:	bf00      	nop
 800bcc4:	e000      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bcc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10b      	bne.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bcd0:	4b3b      	ldr	r3, [pc, #236]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bcd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcd4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bcd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bce0:	4a37      	ldr	r2, [pc, #220]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bce2:	430b      	orrs	r3, r1
 800bce4:	6593      	str	r3, [r2, #88]	@ 0x58
 800bce6:	e003      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bcf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bcfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bd00:	2300      	movs	r3, #0
 800bd02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	d05d      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bd18:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bd1c:	d03b      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bd1e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bd22:	d834      	bhi.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd28:	d037      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bd2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd2e:	d82e      	bhi.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bd34:	d033      	beq.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bd36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bd3a:	d828      	bhi.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd40:	d01a      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bd42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd46:	d822      	bhi.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d003      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bd4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd50:	d007      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bd52:	e01c      	b.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd54:	4b1a      	ldr	r3, [pc, #104]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd58:	4a19      	ldr	r2, [pc, #100]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd60:	e01e      	b.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd66:	3308      	adds	r3, #8
 800bd68:	2100      	movs	r1, #0
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f002 f928 	bl	800dfc0 <RCCEx_PLL2_Config>
 800bd70:	4603      	mov	r3, r0
 800bd72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bd76:	e013      	b.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd7c:	3328      	adds	r3, #40	@ 0x28
 800bd7e:	2100      	movs	r1, #0
 800bd80:	4618      	mov	r0, r3
 800bd82:	f002 f9cf 	bl	800e124 <RCCEx_PLL3_Config>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd8c:	e008      	b.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd94:	e004      	b.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bd96:	bf00      	nop
 800bd98:	e002      	b.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bd9a:	bf00      	nop
 800bd9c:	e000      	b.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bd9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bda0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10d      	bne.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bda8:	4b05      	ldr	r3, [pc, #20]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bdb8:	4a01      	ldr	r2, [pc, #4]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdba:	430b      	orrs	r3, r1
 800bdbc:	6593      	str	r3, [r2, #88]	@ 0x58
 800bdbe:	e005      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bdc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bdcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bdd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bddc:	2300      	movs	r3, #0
 800bdde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bde2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4313      	orrs	r3, r2
 800bdea:	d03a      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bdec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdf2:	2b30      	cmp	r3, #48	@ 0x30
 800bdf4:	d01f      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bdf6:	2b30      	cmp	r3, #48	@ 0x30
 800bdf8:	d819      	bhi.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bdfa:	2b20      	cmp	r3, #32
 800bdfc:	d00c      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d815      	bhi.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800be02:	2b00      	cmp	r3, #0
 800be04:	d019      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800be06:	2b10      	cmp	r3, #16
 800be08:	d111      	bne.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be0a:	4baa      	ldr	r3, [pc, #680]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0e:	4aa9      	ldr	r2, [pc, #676]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800be16:	e011      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be1c:	3308      	adds	r3, #8
 800be1e:	2102      	movs	r1, #2
 800be20:	4618      	mov	r0, r3
 800be22:	f002 f8cd 	bl	800dfc0 <RCCEx_PLL2_Config>
 800be26:	4603      	mov	r3, r0
 800be28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800be2c:	e006      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be34:	e002      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800be36:	bf00      	nop
 800be38:	e000      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800be3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10a      	bne.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800be44:	4b9b      	ldr	r3, [pc, #620]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800be4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be52:	4a98      	ldr	r2, [pc, #608]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be54:	430b      	orrs	r3, r1
 800be56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800be58:	e003      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800be62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800be6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800be72:	2300      	movs	r3, #0
 800be74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800be78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800be7c:	460b      	mov	r3, r1
 800be7e:	4313      	orrs	r3, r2
 800be80:	d051      	beq.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800be82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be8c:	d035      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800be8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be92:	d82e      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800be94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be98:	d031      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x442>
 800be9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be9e:	d828      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bea4:	d01a      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beaa:	d822      	bhi.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800beb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800beb4:	d007      	beq.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800beb6:	e01c      	b.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beb8:	4b7e      	ldr	r3, [pc, #504]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800beba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bebc:	4a7d      	ldr	r2, [pc, #500]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bec4:	e01c      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beca:	3308      	adds	r3, #8
 800becc:	2100      	movs	r1, #0
 800bece:	4618      	mov	r0, r3
 800bed0:	f002 f876 	bl	800dfc0 <RCCEx_PLL2_Config>
 800bed4:	4603      	mov	r3, r0
 800bed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800beda:	e011      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee0:	3328      	adds	r3, #40	@ 0x28
 800bee2:	2100      	movs	r1, #0
 800bee4:	4618      	mov	r0, r3
 800bee6:	f002 f91d 	bl	800e124 <RCCEx_PLL3_Config>
 800beea:	4603      	mov	r3, r0
 800beec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bef0:	e006      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bef8:	e002      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800befa:	bf00      	nop
 800befc:	e000      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800befe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bf08:	4b6a      	ldr	r3, [pc, #424]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf16:	4a67      	ldr	r2, [pc, #412]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bf1c:	e003      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bf26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bf32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bf36:	2300      	movs	r3, #0
 800bf38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bf3c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4313      	orrs	r3, r2
 800bf44:	d053      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bf46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bf50:	d033      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bf52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bf56:	d82c      	bhi.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bf58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bf5c:	d02f      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bf5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bf62:	d826      	bhi.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bf64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bf68:	d02b      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bf6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bf6e:	d820      	bhi.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bf70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf74:	d012      	beq.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bf76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf7a:	d81a      	bhi.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d022      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bf80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf84:	d115      	bne.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f002 f816 	bl	800dfc0 <RCCEx_PLL2_Config>
 800bf94:	4603      	mov	r3, r0
 800bf96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bf9a:	e015      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfa0:	3328      	adds	r3, #40	@ 0x28
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f002 f8bd 	bl	800e124 <RCCEx_PLL3_Config>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bfb0:	e00a      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bfb8:	e006      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bfba:	bf00      	nop
 800bfbc:	e004      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bfbe:	bf00      	nop
 800bfc0:	e002      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bfc2:	bf00      	nop
 800bfc4:	e000      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bfc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10a      	bne.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bfd0:	4b38      	ldr	r3, [pc, #224]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bfd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfde:	4a35      	ldr	r2, [pc, #212]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bfe0:	430b      	orrs	r3, r1
 800bfe2:	6513      	str	r3, [r2, #80]	@ 0x50
 800bfe4:	e003      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfe6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bffa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bffe:	2300      	movs	r3, #0
 800c000:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c004:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c008:	460b      	mov	r3, r1
 800c00a:	4313      	orrs	r3, r2
 800c00c:	d058      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c016:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c01a:	d033      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c01c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c020:	d82c      	bhi.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c026:	d02f      	beq.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c02c:	d826      	bhi.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c02e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c032:	d02b      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c034:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c038:	d820      	bhi.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c03a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c03e:	d012      	beq.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c044:	d81a      	bhi.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c046:	2b00      	cmp	r3, #0
 800c048:	d022      	beq.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c04a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c04e:	d115      	bne.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c054:	3308      	adds	r3, #8
 800c056:	2101      	movs	r1, #1
 800c058:	4618      	mov	r0, r3
 800c05a:	f001 ffb1 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c05e:	4603      	mov	r3, r0
 800c060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c064:	e015      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c06a:	3328      	adds	r3, #40	@ 0x28
 800c06c:	2101      	movs	r1, #1
 800c06e:	4618      	mov	r0, r3
 800c070:	f002 f858 	bl	800e124 <RCCEx_PLL3_Config>
 800c074:	4603      	mov	r3, r0
 800c076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c07a:	e00a      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c082:	e006      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c084:	bf00      	nop
 800c086:	e004      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c088:	bf00      	nop
 800c08a:	e002      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c08c:	bf00      	nop
 800c08e:	e000      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c090:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c092:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10e      	bne.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c09a:	4b06      	ldr	r3, [pc, #24]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c09c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c09e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c0aa:	4a02      	ldr	r2, [pc, #8]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0ac:	430b      	orrs	r3, r1
 800c0ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0b0:	e006      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c0b2:	bf00      	nop
 800c0b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c0cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	d037      	beq.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0ea:	d00e      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c0ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0f0:	d816      	bhi.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d018      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c0f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0fa:	d111      	bne.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0fc:	4bc4      	ldr	r3, [pc, #784]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c100:	4ac3      	ldr	r2, [pc, #780]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c108:	e00f      	b.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c10e:	3308      	adds	r3, #8
 800c110:	2101      	movs	r1, #1
 800c112:	4618      	mov	r0, r3
 800c114:	f001 ff54 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c118:	4603      	mov	r3, r0
 800c11a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c11e:	e004      	b.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c126:	e000      	b.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c12a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10a      	bne.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c132:	4bb7      	ldr	r3, [pc, #732]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c136:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c140:	4ab3      	ldr	r2, [pc, #716]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c142:	430b      	orrs	r3, r1
 800c144:	6513      	str	r3, [r2, #80]	@ 0x50
 800c146:	e003      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c148:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c14c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c158:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c15c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c160:	2300      	movs	r3, #0
 800c162:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c166:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c16a:	460b      	mov	r3, r1
 800c16c:	4313      	orrs	r3, r2
 800c16e:	d039      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c176:	2b03      	cmp	r3, #3
 800c178:	d81c      	bhi.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c17a:	a201      	add	r2, pc, #4	@ (adr r2, 800c180 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c1bd 	.word	0x0800c1bd
 800c184:	0800c191 	.word	0x0800c191
 800c188:	0800c19f 	.word	0x0800c19f
 800c18c:	0800c1bd 	.word	0x0800c1bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c190:	4b9f      	ldr	r3, [pc, #636]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c194:	4a9e      	ldr	r2, [pc, #632]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c19a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c19c:	e00f      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a2:	3308      	adds	r3, #8
 800c1a4:	2102      	movs	r1, #2
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f001 ff0a 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c1b2:	e004      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1ba:	e000      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10a      	bne.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c1c6:	4b92      	ldr	r3, [pc, #584]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1ca:	f023 0103 	bic.w	r1, r3, #3
 800c1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1d4:	4a8e      	ldr	r2, [pc, #568]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1d6:	430b      	orrs	r3, r1
 800c1d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c1da:	e003      	b.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c1f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c1fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c1fe:	460b      	mov	r3, r1
 800c200:	4313      	orrs	r3, r2
 800c202:	f000 8099 	beq.w	800c338 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c206:	4b83      	ldr	r3, [pc, #524]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a82      	ldr	r2, [pc, #520]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c20c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c212:	f7f8 faa9 	bl	8004768 <HAL_GetTick>
 800c216:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c21a:	e00b      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c21c:	f7f8 faa4 	bl	8004768 <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	2b64      	cmp	r3, #100	@ 0x64
 800c22a:	d903      	bls.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c22c:	2303      	movs	r3, #3
 800c22e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c232:	e005      	b.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c234:	4b77      	ldr	r3, [pc, #476]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0ed      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c240:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c244:	2b00      	cmp	r3, #0
 800c246:	d173      	bne.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c248:	4b71      	ldr	r3, [pc, #452]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c24a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c254:	4053      	eors	r3, r2
 800c256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d015      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c25e:	4b6c      	ldr	r3, [pc, #432]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c266:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c26a:	4b69      	ldr	r3, [pc, #420]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c26c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c26e:	4a68      	ldr	r2, [pc, #416]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c274:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c276:	4b66      	ldr	r3, [pc, #408]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c27a:	4a65      	ldr	r2, [pc, #404]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c27c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c280:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c282:	4a63      	ldr	r2, [pc, #396]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c288:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c28e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c296:	d118      	bne.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c298:	f7f8 fa66 	bl	8004768 <HAL_GetTick>
 800c29c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c2a0:	e00d      	b.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2a2:	f7f8 fa61 	bl	8004768 <HAL_GetTick>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c2ac:	1ad2      	subs	r2, r2, r3
 800c2ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d903      	bls.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c2bc:	e005      	b.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c2be:	4b54      	ldr	r3, [pc, #336]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d0eb      	beq.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c2ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d129      	bne.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c2da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2e2:	d10e      	bne.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c2e4:	4b4a      	ldr	r3, [pc, #296]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c2f4:	091a      	lsrs	r2, r3, #4
 800c2f6:	4b48      	ldr	r3, [pc, #288]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	4a45      	ldr	r2, [pc, #276]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2fc:	430b      	orrs	r3, r1
 800c2fe:	6113      	str	r3, [r2, #16]
 800c300:	e005      	b.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c302:	4b43      	ldr	r3, [pc, #268]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c304:	691b      	ldr	r3, [r3, #16]
 800c306:	4a42      	ldr	r2, [pc, #264]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c308:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c30c:	6113      	str	r3, [r2, #16]
 800c30e:	4b40      	ldr	r3, [pc, #256]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c310:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c31a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c31e:	4a3c      	ldr	r2, [pc, #240]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c320:	430b      	orrs	r3, r1
 800c322:	6713      	str	r3, [r2, #112]	@ 0x70
 800c324:	e008      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c326:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c32a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c32e:	e003      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c334:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	f002 0301 	and.w	r3, r2, #1
 800c344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c348:	2300      	movs	r3, #0
 800c34a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c34e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c352:	460b      	mov	r3, r1
 800c354:	4313      	orrs	r3, r2
 800c356:	f000 808f 	beq.w	800c478 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c35e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c360:	2b28      	cmp	r3, #40	@ 0x28
 800c362:	d871      	bhi.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c364:	a201      	add	r2, pc, #4	@ (adr r2, 800c36c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36a:	bf00      	nop
 800c36c:	0800c451 	.word	0x0800c451
 800c370:	0800c449 	.word	0x0800c449
 800c374:	0800c449 	.word	0x0800c449
 800c378:	0800c449 	.word	0x0800c449
 800c37c:	0800c449 	.word	0x0800c449
 800c380:	0800c449 	.word	0x0800c449
 800c384:	0800c449 	.word	0x0800c449
 800c388:	0800c449 	.word	0x0800c449
 800c38c:	0800c41d 	.word	0x0800c41d
 800c390:	0800c449 	.word	0x0800c449
 800c394:	0800c449 	.word	0x0800c449
 800c398:	0800c449 	.word	0x0800c449
 800c39c:	0800c449 	.word	0x0800c449
 800c3a0:	0800c449 	.word	0x0800c449
 800c3a4:	0800c449 	.word	0x0800c449
 800c3a8:	0800c449 	.word	0x0800c449
 800c3ac:	0800c433 	.word	0x0800c433
 800c3b0:	0800c449 	.word	0x0800c449
 800c3b4:	0800c449 	.word	0x0800c449
 800c3b8:	0800c449 	.word	0x0800c449
 800c3bc:	0800c449 	.word	0x0800c449
 800c3c0:	0800c449 	.word	0x0800c449
 800c3c4:	0800c449 	.word	0x0800c449
 800c3c8:	0800c449 	.word	0x0800c449
 800c3cc:	0800c451 	.word	0x0800c451
 800c3d0:	0800c449 	.word	0x0800c449
 800c3d4:	0800c449 	.word	0x0800c449
 800c3d8:	0800c449 	.word	0x0800c449
 800c3dc:	0800c449 	.word	0x0800c449
 800c3e0:	0800c449 	.word	0x0800c449
 800c3e4:	0800c449 	.word	0x0800c449
 800c3e8:	0800c449 	.word	0x0800c449
 800c3ec:	0800c451 	.word	0x0800c451
 800c3f0:	0800c449 	.word	0x0800c449
 800c3f4:	0800c449 	.word	0x0800c449
 800c3f8:	0800c449 	.word	0x0800c449
 800c3fc:	0800c449 	.word	0x0800c449
 800c400:	0800c449 	.word	0x0800c449
 800c404:	0800c449 	.word	0x0800c449
 800c408:	0800c449 	.word	0x0800c449
 800c40c:	0800c451 	.word	0x0800c451
 800c410:	58024400 	.word	0x58024400
 800c414:	58024800 	.word	0x58024800
 800c418:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c420:	3308      	adds	r3, #8
 800c422:	2101      	movs	r1, #1
 800c424:	4618      	mov	r0, r3
 800c426:	f001 fdcb 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c42a:	4603      	mov	r3, r0
 800c42c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c430:	e00f      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c436:	3328      	adds	r3, #40	@ 0x28
 800c438:	2101      	movs	r1, #1
 800c43a:	4618      	mov	r0, r3
 800c43c:	f001 fe72 	bl	800e124 <RCCEx_PLL3_Config>
 800c440:	4603      	mov	r3, r0
 800c442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c446:	e004      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c44e:	e000      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c450:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10a      	bne.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c45a:	4bbf      	ldr	r3, [pc, #764]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c45c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c45e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c466:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c468:	4abb      	ldr	r2, [pc, #748]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c46a:	430b      	orrs	r3, r1
 800c46c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c46e:	e003      	b.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c470:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c474:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	f002 0302 	and.w	r3, r2, #2
 800c484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c488:	2300      	movs	r3, #0
 800c48a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c48e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c492:	460b      	mov	r3, r1
 800c494:	4313      	orrs	r3, r2
 800c496:	d041      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c49e:	2b05      	cmp	r3, #5
 800c4a0:	d824      	bhi.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c4a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a8:	0800c4f5 	.word	0x0800c4f5
 800c4ac:	0800c4c1 	.word	0x0800c4c1
 800c4b0:	0800c4d7 	.word	0x0800c4d7
 800c4b4:	0800c4f5 	.word	0x0800c4f5
 800c4b8:	0800c4f5 	.word	0x0800c4f5
 800c4bc:	0800c4f5 	.word	0x0800c4f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f001 fd79 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c4d4:	e00f      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4da:	3328      	adds	r3, #40	@ 0x28
 800c4dc:	2101      	movs	r1, #1
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f001 fe20 	bl	800e124 <RCCEx_PLL3_Config>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c4ea:	e004      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4f2:	e000      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d10a      	bne.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c4fe:	4b96      	ldr	r3, [pc, #600]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c502:	f023 0107 	bic.w	r1, r3, #7
 800c506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c50a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c50c:	4a92      	ldr	r2, [pc, #584]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c50e:	430b      	orrs	r3, r1
 800c510:	6553      	str	r3, [r2, #84]	@ 0x54
 800c512:	e003      	b.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	f002 0304 	and.w	r3, r2, #4
 800c528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c52c:	2300      	movs	r3, #0
 800c52e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c532:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c536:	460b      	mov	r3, r1
 800c538:	4313      	orrs	r3, r2
 800c53a:	d044      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c544:	2b05      	cmp	r3, #5
 800c546:	d825      	bhi.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c548:	a201      	add	r2, pc, #4	@ (adr r2, 800c550 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c54e:	bf00      	nop
 800c550:	0800c59d 	.word	0x0800c59d
 800c554:	0800c569 	.word	0x0800c569
 800c558:	0800c57f 	.word	0x0800c57f
 800c55c:	0800c59d 	.word	0x0800c59d
 800c560:	0800c59d 	.word	0x0800c59d
 800c564:	0800c59d 	.word	0x0800c59d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c56c:	3308      	adds	r3, #8
 800c56e:	2101      	movs	r1, #1
 800c570:	4618      	mov	r0, r3
 800c572:	f001 fd25 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c576:	4603      	mov	r3, r0
 800c578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c57c:	e00f      	b.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c582:	3328      	adds	r3, #40	@ 0x28
 800c584:	2101      	movs	r1, #1
 800c586:	4618      	mov	r0, r3
 800c588:	f001 fdcc 	bl	800e124 <RCCEx_PLL3_Config>
 800c58c:	4603      	mov	r3, r0
 800c58e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c592:	e004      	b.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c59a:	e000      	b.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c59c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c59e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d10b      	bne.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c5a6:	4b6c      	ldr	r3, [pc, #432]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5aa:	f023 0107 	bic.w	r1, r3, #7
 800c5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5b6:	4a68      	ldr	r2, [pc, #416]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5b8:	430b      	orrs	r3, r1
 800c5ba:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5bc:	e003      	b.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ce:	f002 0320 	and.w	r3, r2, #32
 800c5d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c5dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	d055      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c5f2:	d033      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c5f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c5f8:	d82c      	bhi.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5fe:	d02f      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c604:	d826      	bhi.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c606:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c60a:	d02b      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c60c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c610:	d820      	bhi.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c616:	d012      	beq.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c61c:	d81a      	bhi.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d022      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c626:	d115      	bne.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c62c:	3308      	adds	r3, #8
 800c62e:	2100      	movs	r1, #0
 800c630:	4618      	mov	r0, r3
 800c632:	f001 fcc5 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c636:	4603      	mov	r3, r0
 800c638:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c63c:	e015      	b.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c642:	3328      	adds	r3, #40	@ 0x28
 800c644:	2102      	movs	r1, #2
 800c646:	4618      	mov	r0, r3
 800c648:	f001 fd6c 	bl	800e124 <RCCEx_PLL3_Config>
 800c64c:	4603      	mov	r3, r0
 800c64e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c652:	e00a      	b.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c654:	2301      	movs	r3, #1
 800c656:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c65a:	e006      	b.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c65c:	bf00      	nop
 800c65e:	e004      	b.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c660:	bf00      	nop
 800c662:	e002      	b.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c664:	bf00      	nop
 800c666:	e000      	b.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c66a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10b      	bne.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c672:	4b39      	ldr	r3, [pc, #228]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c676:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c682:	4a35      	ldr	r2, [pc, #212]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c684:	430b      	orrs	r3, r1
 800c686:	6553      	str	r3, [r2, #84]	@ 0x54
 800c688:	e003      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c68a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c68e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c69e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6a8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	d058      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c6be:	d033      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c6c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c6c4:	d82c      	bhi.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c6c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6ca:	d02f      	beq.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c6cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6d0:	d826      	bhi.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c6d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c6d6:	d02b      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c6d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c6dc:	d820      	bhi.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c6de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6e2:	d012      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c6e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6e8:	d81a      	bhi.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d022      	beq.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c6ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6f2:	d115      	bne.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f8:	3308      	adds	r3, #8
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f001 fc5f 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c702:	4603      	mov	r3, r0
 800c704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c708:	e015      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c70e:	3328      	adds	r3, #40	@ 0x28
 800c710:	2102      	movs	r1, #2
 800c712:	4618      	mov	r0, r3
 800c714:	f001 fd06 	bl	800e124 <RCCEx_PLL3_Config>
 800c718:	4603      	mov	r3, r0
 800c71a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c71e:	e00a      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c720:	2301      	movs	r3, #1
 800c722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c726:	e006      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c728:	bf00      	nop
 800c72a:	e004      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c72c:	bf00      	nop
 800c72e:	e002      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c730:	bf00      	nop
 800c732:	e000      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c734:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10e      	bne.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c73e:	4b06      	ldr	r3, [pc, #24]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c742:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c74e:	4a02      	ldr	r2, [pc, #8]	@ (800c758 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c750:	430b      	orrs	r3, r1
 800c752:	6593      	str	r3, [r2, #88]	@ 0x58
 800c754:	e006      	b.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c756:	bf00      	nop
 800c758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c75c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c760:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c770:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c774:	2300      	movs	r3, #0
 800c776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c77a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c77e:	460b      	mov	r3, r1
 800c780:	4313      	orrs	r3, r2
 800c782:	d055      	beq.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c788:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c78c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c790:	d033      	beq.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c792:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c796:	d82c      	bhi.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c79c:	d02f      	beq.n	800c7fe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c79e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7a2:	d826      	bhi.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c7a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c7a8:	d02b      	beq.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c7aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c7ae:	d820      	bhi.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c7b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c7b4:	d012      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c7b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c7ba:	d81a      	bhi.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d022      	beq.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c7c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7c4:	d115      	bne.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ca:	3308      	adds	r3, #8
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f001 fbf6 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c7da:	e015      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e0:	3328      	adds	r3, #40	@ 0x28
 800c7e2:	2102      	movs	r1, #2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f001 fc9d 	bl	800e124 <RCCEx_PLL3_Config>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c7f0:	e00a      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7f8:	e006      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c7fa:	bf00      	nop
 800c7fc:	e004      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c7fe:	bf00      	nop
 800c800:	e002      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c802:	bf00      	nop
 800c804:	e000      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c806:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10b      	bne.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c810:	4ba0      	ldr	r3, [pc, #640]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c814:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c81c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c820:	4a9c      	ldr	r2, [pc, #624]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c822:	430b      	orrs	r3, r1
 800c824:	6593      	str	r3, [r2, #88]	@ 0x58
 800c826:	e003      	b.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c82c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c838:	f002 0308 	and.w	r3, r2, #8
 800c83c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c840:	2300      	movs	r3, #0
 800c842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c846:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c84a:	460b      	mov	r3, r1
 800c84c:	4313      	orrs	r3, r2
 800c84e:	d01e      	beq.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c85c:	d10c      	bne.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c862:	3328      	adds	r3, #40	@ 0x28
 800c864:	2102      	movs	r1, #2
 800c866:	4618      	mov	r0, r3
 800c868:	f001 fc5c 	bl	800e124 <RCCEx_PLL3_Config>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c878:	4b86      	ldr	r3, [pc, #536]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c87a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c87c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c888:	4a82      	ldr	r2, [pc, #520]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c88a:	430b      	orrs	r3, r1
 800c88c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	f002 0310 	and.w	r3, r2, #16
 800c89a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c8a4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	d01e      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8ba:	d10c      	bne.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c0:	3328      	adds	r3, #40	@ 0x28
 800c8c2:	2102      	movs	r1, #2
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f001 fc2d 	bl	800e124 <RCCEx_PLL3_Config>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c8d6:	4b6f      	ldr	r3, [pc, #444]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8e6:	4a6b      	ldr	r2, [pc, #428]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8e8:	430b      	orrs	r3, r1
 800c8ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c8f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c8fe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c902:	460b      	mov	r3, r1
 800c904:	4313      	orrs	r3, r2
 800c906:	d03e      	beq.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c90c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c914:	d022      	beq.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c91a:	d81b      	bhi.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c924:	d00b      	beq.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c926:	e015      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c92c:	3308      	adds	r3, #8
 800c92e:	2100      	movs	r1, #0
 800c930:	4618      	mov	r0, r3
 800c932:	f001 fb45 	bl	800dfc0 <RCCEx_PLL2_Config>
 800c936:	4603      	mov	r3, r0
 800c938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c93c:	e00f      	b.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c942:	3328      	adds	r3, #40	@ 0x28
 800c944:	2102      	movs	r1, #2
 800c946:	4618      	mov	r0, r3
 800c948:	f001 fbec 	bl	800e124 <RCCEx_PLL3_Config>
 800c94c:	4603      	mov	r3, r0
 800c94e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c952:	e004      	b.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c954:	2301      	movs	r3, #1
 800c956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c95a:	e000      	b.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c95c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c95e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10b      	bne.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c966:	4b4b      	ldr	r3, [pc, #300]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c96a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c972:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c976:	4a47      	ldr	r2, [pc, #284]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c978:	430b      	orrs	r3, r1
 800c97a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c97c:	e003      	b.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c97e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c982:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c992:	673b      	str	r3, [r7, #112]	@ 0x70
 800c994:	2300      	movs	r3, #0
 800c996:	677b      	str	r3, [r7, #116]	@ 0x74
 800c998:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c99c:	460b      	mov	r3, r1
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	d03b      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c9ae:	d01f      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c9b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c9b4:	d818      	bhi.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c9b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9ba:	d003      	beq.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c9bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c9c0:	d007      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c9c2:	e011      	b.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9c4:	4b33      	ldr	r3, [pc, #204]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c8:	4a32      	ldr	r2, [pc, #200]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c9d0:	e00f      	b.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d6:	3328      	adds	r3, #40	@ 0x28
 800c9d8:	2101      	movs	r1, #1
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f001 fba2 	bl	800e124 <RCCEx_PLL3_Config>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c9e6:	e004      	b.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9ee:	e000      	b.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c9f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10b      	bne.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c9fa:	4b26      	ldr	r3, [pc, #152]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ca02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca0a:	4a22      	ldr	r2, [pc, #136]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca0c:	430b      	orrs	r3, r1
 800ca0e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ca10:	e003      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ca1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ca26:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca28:	2300      	movs	r3, #0
 800ca2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca2c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ca30:	460b      	mov	r3, r1
 800ca32:	4313      	orrs	r3, r2
 800ca34:	d034      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ca36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d003      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ca40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca44:	d007      	beq.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ca46:	e011      	b.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca48:	4b12      	ldr	r3, [pc, #72]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca4c:	4a11      	ldr	r2, [pc, #68]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ca54:	e00e      	b.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca5a:	3308      	adds	r3, #8
 800ca5c:	2102      	movs	r1, #2
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f001 faae 	bl	800dfc0 <RCCEx_PLL2_Config>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ca6a:	e003      	b.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10d      	bne.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ca7c:	4b05      	ldr	r3, [pc, #20]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca8a:	4a02      	ldr	r2, [pc, #8]	@ (800ca94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca8c:	430b      	orrs	r3, r1
 800ca8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ca90:	e006      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ca92:	bf00      	nop
 800ca94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800caa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800caac:	663b      	str	r3, [r7, #96]	@ 0x60
 800caae:	2300      	movs	r3, #0
 800cab0:	667b      	str	r3, [r7, #100]	@ 0x64
 800cab2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800cab6:	460b      	mov	r3, r1
 800cab8:	4313      	orrs	r3, r2
 800caba:	d00c      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac0:	3328      	adds	r3, #40	@ 0x28
 800cac2:	2102      	movs	r1, #2
 800cac4:	4618      	mov	r0, r3
 800cac6:	f001 fb2d 	bl	800e124 <RCCEx_PLL3_Config>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cade:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800cae2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cae4:	2300      	movs	r3, #0
 800cae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cae8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800caec:	460b      	mov	r3, r1
 800caee:	4313      	orrs	r3, r2
 800caf0:	d036      	beq.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800caf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800caf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cafc:	d018      	beq.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800cafe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb02:	d811      	bhi.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cb04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb08:	d014      	beq.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800cb0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb0e:	d80b      	bhi.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d011      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800cb14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb18:	d106      	bne.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb1a:	4bb7      	ldr	r3, [pc, #732]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb1e:	4ab6      	ldr	r2, [pc, #728]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cb26:	e008      	b.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb2e:	e004      	b.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cb30:	bf00      	nop
 800cb32:	e002      	b.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cb34:	bf00      	nop
 800cb36:	e000      	b.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cb38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10a      	bne.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cb42:	4bad      	ldr	r3, [pc, #692]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb50:	4aa9      	ldr	r2, [pc, #676]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb52:	430b      	orrs	r3, r1
 800cb54:	6553      	str	r3, [r2, #84]	@ 0x54
 800cb56:	e003      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800cb6c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb6e:	2300      	movs	r3, #0
 800cb70:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800cb76:	460b      	mov	r3, r1
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	d009      	beq.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cb7c:	4b9e      	ldr	r3, [pc, #632]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cb84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb8a:	4a9b      	ldr	r2, [pc, #620]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb8c:	430b      	orrs	r3, r1
 800cb8e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cb9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb9e:	2300      	movs	r3, #0
 800cba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cba2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800cba6:	460b      	mov	r3, r1
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	d009      	beq.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cbac:	4b92      	ldr	r3, [pc, #584]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbb0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800cbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbba:	4a8f      	ldr	r2, [pc, #572]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbbc:	430b      	orrs	r3, r1
 800cbbe:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cbcc:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbce:	2300      	movs	r3, #0
 800cbd0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbd2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	d00e      	beq.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cbdc:	4b86      	ldr	r3, [pc, #536]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	4a85      	ldr	r2, [pc, #532]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbe2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cbe6:	6113      	str	r3, [r2, #16]
 800cbe8:	4b83      	ldr	r3, [pc, #524]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbea:	6919      	ldr	r1, [r3, #16]
 800cbec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cbf4:	4a80      	ldr	r2, [pc, #512]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbf6:	430b      	orrs	r3, r1
 800cbf8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc02:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cc06:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc08:	2300      	movs	r3, #0
 800cc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc0c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cc10:	460b      	mov	r3, r1
 800cc12:	4313      	orrs	r3, r2
 800cc14:	d009      	beq.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cc16:	4b78      	ldr	r3, [pc, #480]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cc1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc24:	4a74      	ldr	r2, [pc, #464]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc26:	430b      	orrs	r3, r1
 800cc28:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cc2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc32:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cc36:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc38:	2300      	movs	r3, #0
 800cc3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cc40:	460b      	mov	r3, r1
 800cc42:	4313      	orrs	r3, r2
 800cc44:	d00a      	beq.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cc46:	4b6c      	ldr	r3, [pc, #432]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc4a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc56:	4a68      	ldr	r2, [pc, #416]	@ (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc58:	430b      	orrs	r3, r1
 800cc5a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	2100      	movs	r1, #0
 800cc66:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cc68:	f003 0301 	and.w	r3, r3, #1
 800cc6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc6e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cc72:	460b      	mov	r3, r1
 800cc74:	4313      	orrs	r3, r2
 800cc76:	d011      	beq.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc7c:	3308      	adds	r3, #8
 800cc7e:	2100      	movs	r1, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f001 f99d 	bl	800dfc0 <RCCEx_PLL2_Config>
 800cc86:	4603      	mov	r3, r0
 800cc88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cc8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d003      	beq.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	2100      	movs	r1, #0
 800cca6:	6239      	str	r1, [r7, #32]
 800cca8:	f003 0302 	and.w	r3, r3, #2
 800ccac:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	d011      	beq.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ccb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccbc:	3308      	adds	r3, #8
 800ccbe:	2101      	movs	r1, #1
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f001 f97d 	bl	800dfc0 <RCCEx_PLL2_Config>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d003      	beq.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ccdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce4:	2100      	movs	r1, #0
 800cce6:	61b9      	str	r1, [r7, #24]
 800cce8:	f003 0304 	and.w	r3, r3, #4
 800ccec:	61fb      	str	r3, [r7, #28]
 800ccee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	d011      	beq.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ccf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccfc:	3308      	adds	r3, #8
 800ccfe:	2102      	movs	r1, #2
 800cd00:	4618      	mov	r0, r3
 800cd02:	f001 f95d 	bl	800dfc0 <RCCEx_PLL2_Config>
 800cd06:	4603      	mov	r3, r0
 800cd08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cd0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d003      	beq.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cd1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	2100      	movs	r1, #0
 800cd26:	6139      	str	r1, [r7, #16]
 800cd28:	f003 0308 	and.w	r3, r3, #8
 800cd2c:	617b      	str	r3, [r7, #20]
 800cd2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cd32:	460b      	mov	r3, r1
 800cd34:	4313      	orrs	r3, r2
 800cd36:	d011      	beq.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd3c:	3328      	adds	r3, #40	@ 0x28
 800cd3e:	2100      	movs	r1, #0
 800cd40:	4618      	mov	r0, r3
 800cd42:	f001 f9ef 	bl	800e124 <RCCEx_PLL3_Config>
 800cd46:	4603      	mov	r3, r0
 800cd48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800cd4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d003      	beq.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cd5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd64:	2100      	movs	r1, #0
 800cd66:	60b9      	str	r1, [r7, #8]
 800cd68:	f003 0310 	and.w	r3, r3, #16
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cd72:	460b      	mov	r3, r1
 800cd74:	4313      	orrs	r3, r2
 800cd76:	d011      	beq.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd7c:	3328      	adds	r3, #40	@ 0x28
 800cd7e:	2101      	movs	r1, #1
 800cd80:	4618      	mov	r0, r3
 800cd82:	f001 f9cf 	bl	800e124 <RCCEx_PLL3_Config>
 800cd86:	4603      	mov	r3, r0
 800cd88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cd8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d003      	beq.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cd9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	2100      	movs	r1, #0
 800cda6:	6039      	str	r1, [r7, #0]
 800cda8:	f003 0320 	and.w	r3, r3, #32
 800cdac:	607b      	str	r3, [r7, #4]
 800cdae:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	d011      	beq.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cdb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdbc:	3328      	adds	r3, #40	@ 0x28
 800cdbe:	2102      	movs	r1, #2
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f001 f9af 	bl	800e124 <RCCEx_PLL3_Config>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cdcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d003      	beq.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800cddc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	e000      	b.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdf6:	bf00      	nop
 800cdf8:	58024400 	.word	0x58024400

0800cdfc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b090      	sub	sp, #64	@ 0x40
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ce06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce0a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ce0e:	430b      	orrs	r3, r1
 800ce10:	f040 8094 	bne.w	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ce14:	4b9b      	ldr	r3, [pc, #620]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce18:	f003 0307 	and.w	r3, r3, #7
 800ce1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce20:	2b04      	cmp	r3, #4
 800ce22:	f200 8087 	bhi.w	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ce26:	a201      	add	r2, pc, #4	@ (adr r2, 800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ce41 	.word	0x0800ce41
 800ce30:	0800ce69 	.word	0x0800ce69
 800ce34:	0800ce91 	.word	0x0800ce91
 800ce38:	0800cf2d 	.word	0x0800cf2d
 800ce3c:	0800ceb9 	.word	0x0800ceb9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce40:	4b90      	ldr	r3, [pc, #576]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce4c:	d108      	bne.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce52:	4618      	mov	r0, r3
 800ce54:	f000 ff62 	bl	800dd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce5c:	f000 bc93 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce64:	f000 bc8f 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce68:	4b86      	ldr	r3, [pc, #536]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce74:	d108      	bne.n	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce76:	f107 0318 	add.w	r3, r7, #24
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 fca6 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce84:	f000 bc7f 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce8c:	f000 bc7b 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce90:	4b7c      	ldr	r3, [pc, #496]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce9c:	d108      	bne.n	800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce9e:	f107 030c 	add.w	r3, r7, #12
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 fde6 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceac:	f000 bc6b 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceb4:	f000 bc67 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ceb8:	4b72      	ldr	r3, [pc, #456]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ceba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cebc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cec0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cec2:	4b70      	ldr	r3, [pc, #448]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 0304 	and.w	r3, r3, #4
 800ceca:	2b04      	cmp	r3, #4
 800cecc:	d10c      	bne.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d109      	bne.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ced4:	4b6b      	ldr	r3, [pc, #428]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	08db      	lsrs	r3, r3, #3
 800ceda:	f003 0303 	and.w	r3, r3, #3
 800cede:	4a6a      	ldr	r2, [pc, #424]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cee0:	fa22 f303 	lsr.w	r3, r2, r3
 800cee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cee6:	e01f      	b.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cee8:	4b66      	ldr	r3, [pc, #408]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cef4:	d106      	bne.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cefc:	d102      	bne.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cefe:	4b63      	ldr	r3, [pc, #396]	@ (800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cf00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf02:	e011      	b.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf04:	4b5f      	ldr	r3, [pc, #380]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf10:	d106      	bne.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cf12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf18:	d102      	bne.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf1a:	4b5d      	ldr	r3, [pc, #372]	@ (800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cf1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf1e:	e003      	b.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf20:	2300      	movs	r3, #0
 800cf22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cf24:	f000 bc2f 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf28:	f000 bc2d 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf2c:	4b59      	ldr	r3, [pc, #356]	@ (800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cf2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf30:	f000 bc29 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf38:	f000 bc25 	b.w	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cf3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf40:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cf44:	430b      	orrs	r3, r1
 800cf46:	f040 80a7 	bne.w	800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cf4a:	4b4e      	ldr	r3, [pc, #312]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf4e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800cf52:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cf54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cf5a:	d054      	beq.n	800d006 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cf5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cf62:	f200 808b 	bhi.w	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cf6c:	f000 8083 	beq.w	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf72:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cf76:	f200 8081 	bhi.w	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf80:	d02f      	beq.n	800cfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf88:	d878      	bhi.n	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d004      	beq.n	800cf9a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cf90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cf96:	d012      	beq.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cf98:	e070      	b.n	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf9a:	4b3a      	ldr	r3, [pc, #232]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cfa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cfa6:	d107      	bne.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 feb5 	bl	800dd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfb6:	e3e6      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfbc:	e3e3      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfbe:	4b31      	ldr	r3, [pc, #196]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfca:	d107      	bne.n	800cfdc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfcc:	f107 0318 	add.w	r3, r7, #24
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 fbfb 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfda:	e3d4      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfe0:	e3d1      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfe2:	4b28      	ldr	r3, [pc, #160]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfee:	d107      	bne.n	800d000 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cff0:	f107 030c 	add.w	r3, r7, #12
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 fd3d 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cffe:	e3c2      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d004:	e3bf      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d006:	4b1f      	ldr	r3, [pc, #124]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d00a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d00e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d010:	4b1c      	ldr	r3, [pc, #112]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	2b04      	cmp	r3, #4
 800d01a:	d10c      	bne.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d109      	bne.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d022:	4b18      	ldr	r3, [pc, #96]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	08db      	lsrs	r3, r3, #3
 800d028:	f003 0303 	and.w	r3, r3, #3
 800d02c:	4a16      	ldr	r2, [pc, #88]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d02e:	fa22 f303 	lsr.w	r3, r2, r3
 800d032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d034:	e01e      	b.n	800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d036:	4b13      	ldr	r3, [pc, #76]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d03e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d042:	d106      	bne.n	800d052 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d04a:	d102      	bne.n	800d052 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d04c:	4b0f      	ldr	r3, [pc, #60]	@ (800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d050:	e010      	b.n	800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d052:	4b0c      	ldr	r3, [pc, #48]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d05a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d05e:	d106      	bne.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d062:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d066:	d102      	bne.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d068:	4b09      	ldr	r3, [pc, #36]	@ (800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d06c:	e002      	b.n	800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d072:	e388      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d074:	e387      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d076:	4b07      	ldr	r3, [pc, #28]	@ (800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d07a:	e384      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d080:	e381      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d082:	bf00      	nop
 800d084:	58024400 	.word	0x58024400
 800d088:	03d09000 	.word	0x03d09000
 800d08c:	003d0900 	.word	0x003d0900
 800d090:	016e3600 	.word	0x016e3600
 800d094:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d09c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	f040 809c 	bne.w	800d1de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d0a6:	4b9e      	ldr	r3, [pc, #632]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0aa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d0ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d0b6:	d054      	beq.n	800d162 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d0be:	f200 808b 	bhi.w	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d0c8:	f000 8083 	beq.w	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d0d2:	f200 8081 	bhi.w	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0dc:	d02f      	beq.n	800d13e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0e4:	d878      	bhi.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d004      	beq.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0f2:	d012      	beq.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d0f4:	e070      	b.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0f6:	4b8a      	ldr	r3, [pc, #552]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d102:	d107      	bne.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d104:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d108:	4618      	mov	r0, r3
 800d10a:	f000 fe07 	bl	800dd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d112:	e338      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d118:	e335      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d11a:	4b81      	ldr	r3, [pc, #516]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d126:	d107      	bne.n	800d138 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d128:	f107 0318 	add.w	r3, r7, #24
 800d12c:	4618      	mov	r0, r3
 800d12e:	f000 fb4d 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d136:	e326      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d13c:	e323      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d13e:	4b78      	ldr	r3, [pc, #480]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d14a:	d107      	bne.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d14c:	f107 030c 	add.w	r3, r7, #12
 800d150:	4618      	mov	r0, r3
 800d152:	f000 fc8f 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d15a:	e314      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d15c:	2300      	movs	r3, #0
 800d15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d160:	e311      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d162:	4b6f      	ldr	r3, [pc, #444]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d166:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d16a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d16c:	4b6c      	ldr	r3, [pc, #432]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 0304 	and.w	r3, r3, #4
 800d174:	2b04      	cmp	r3, #4
 800d176:	d10c      	bne.n	800d192 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d109      	bne.n	800d192 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d17e:	4b68      	ldr	r3, [pc, #416]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	08db      	lsrs	r3, r3, #3
 800d184:	f003 0303 	and.w	r3, r3, #3
 800d188:	4a66      	ldr	r2, [pc, #408]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d18a:	fa22 f303 	lsr.w	r3, r2, r3
 800d18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d190:	e01e      	b.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d192:	4b63      	ldr	r3, [pc, #396]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d19a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d19e:	d106      	bne.n	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1a6:	d102      	bne.n	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d1a8:	4b5f      	ldr	r3, [pc, #380]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1ac:	e010      	b.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1ae:	4b5c      	ldr	r3, [pc, #368]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1ba:	d106      	bne.n	800d1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1c2:	d102      	bne.n	800d1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d1c4:	4b59      	ldr	r3, [pc, #356]	@ (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1c8:	e002      	b.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d1ce:	e2da      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d1d0:	e2d9      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d1d2:	4b57      	ldr	r3, [pc, #348]	@ (800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1d6:	e2d6      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1dc:	e2d3      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d1de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1e2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d1e6:	430b      	orrs	r3, r1
 800d1e8:	f040 80a7 	bne.w	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d1ec:	4b4c      	ldr	r3, [pc, #304]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1f0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d1f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d1fc:	d055      	beq.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d204:	f200 8096 	bhi.w	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d20e:	f000 8084 	beq.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d218:	f200 808c 	bhi.w	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d222:	d030      	beq.n	800d286 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d22a:	f200 8083 	bhi.w	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d230:	2b00      	cmp	r3, #0
 800d232:	d004      	beq.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d23a:	d012      	beq.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d23c:	e07a      	b.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d23e:	4b38      	ldr	r3, [pc, #224]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d24a:	d107      	bne.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d24c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d250:	4618      	mov	r0, r3
 800d252:	f000 fd63 	bl	800dd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d25a:	e294      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d260:	e291      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d262:	4b2f      	ldr	r3, [pc, #188]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d26a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d26e:	d107      	bne.n	800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d270:	f107 0318 	add.w	r3, r7, #24
 800d274:	4618      	mov	r0, r3
 800d276:	f000 faa9 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d27e:	e282      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d280:	2300      	movs	r3, #0
 800d282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d284:	e27f      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d286:	4b26      	ldr	r3, [pc, #152]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d28e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d292:	d107      	bne.n	800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d294:	f107 030c 	add.w	r3, r7, #12
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 fbeb 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2a2:	e270      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2a8:	e26d      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d2aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d2b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d2b4:	4b1a      	ldr	r3, [pc, #104]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f003 0304 	and.w	r3, r3, #4
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d10c      	bne.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d109      	bne.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2c6:	4b16      	ldr	r3, [pc, #88]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	08db      	lsrs	r3, r3, #3
 800d2cc:	f003 0303 	and.w	r3, r3, #3
 800d2d0:	4a14      	ldr	r2, [pc, #80]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d2d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2d8:	e01e      	b.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d2da:	4b11      	ldr	r3, [pc, #68]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2e6:	d106      	bne.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2ee:	d102      	bne.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d2f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2f4:	e010      	b.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d302:	d106      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d30a:	d102      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d30c:	4b07      	ldr	r3, [pc, #28]	@ (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d310:	e002      	b.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d316:	e236      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d318:	e235      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d31a:	4b05      	ldr	r3, [pc, #20]	@ (800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d31e:	e232      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d320:	58024400 	.word	0x58024400
 800d324:	03d09000 	.word	0x03d09000
 800d328:	003d0900 	.word	0x003d0900
 800d32c:	016e3600 	.word	0x016e3600
 800d330:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d334:	2300      	movs	r3, #0
 800d336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d338:	e225      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d33a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d33e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d342:	430b      	orrs	r3, r1
 800d344:	f040 8085 	bne.w	800d452 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d348:	4b9c      	ldr	r3, [pc, #624]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d34a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d34c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d350:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d358:	d06b      	beq.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d360:	d874      	bhi.n	800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d364:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d368:	d056      	beq.n	800d418 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d370:	d86c      	bhi.n	800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d374:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d378:	d03b      	beq.n	800d3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d380:	d864      	bhi.n	800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d384:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d388:	d021      	beq.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d390:	d85c      	bhi.n	800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d394:	2b00      	cmp	r3, #0
 800d396:	d004      	beq.n	800d3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d39e:	d004      	beq.n	800d3aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d3a0:	e054      	b.n	800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d3a2:	f7fe fb5f 	bl	800ba64 <HAL_RCC_GetPCLK1Freq>
 800d3a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3a8:	e1ed      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3aa:	4b84      	ldr	r3, [pc, #528]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3b6:	d107      	bne.n	800d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3b8:	f107 0318 	add.w	r3, r7, #24
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 fa05 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3c6:	e1de      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3cc:	e1db      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d3ce:	4b7b      	ldr	r3, [pc, #492]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d3d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3da:	d107      	bne.n	800d3ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3dc:	f107 030c 	add.w	r3, r7, #12
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f000 fb47 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3ea:	e1cc      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3f0:	e1c9      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d3f2:	4b72      	ldr	r3, [pc, #456]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 0304 	and.w	r3, r3, #4
 800d3fa:	2b04      	cmp	r3, #4
 800d3fc:	d109      	bne.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3fe:	4b6f      	ldr	r3, [pc, #444]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	08db      	lsrs	r3, r3, #3
 800d404:	f003 0303 	and.w	r3, r3, #3
 800d408:	4a6d      	ldr	r2, [pc, #436]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d40a:	fa22 f303 	lsr.w	r3, r2, r3
 800d40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d410:	e1b9      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d416:	e1b6      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d418:	4b68      	ldr	r3, [pc, #416]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d424:	d102      	bne.n	800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d426:	4b67      	ldr	r3, [pc, #412]	@ (800d5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d42a:	e1ac      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d430:	e1a9      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d432:	4b62      	ldr	r3, [pc, #392]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d43a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d43e:	d102      	bne.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d440:	4b61      	ldr	r3, [pc, #388]	@ (800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d444:	e19f      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d446:	2300      	movs	r3, #0
 800d448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d44a:	e19c      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d44c:	2300      	movs	r3, #0
 800d44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d450:	e199      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d452:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d456:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d45a:	430b      	orrs	r3, r1
 800d45c:	d173      	bne.n	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d45e:	4b57      	ldr	r3, [pc, #348]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d462:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d466:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d46e:	d02f      	beq.n	800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d476:	d863      	bhi.n	800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d004      	beq.n	800d488 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d484:	d012      	beq.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d486:	e05b      	b.n	800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d488:	4b4c      	ldr	r3, [pc, #304]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d490:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d494:	d107      	bne.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d496:	f107 0318 	add.w	r3, r7, #24
 800d49a:	4618      	mov	r0, r3
 800d49c:	f000 f996 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4a4:	e16f      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4aa:	e16c      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d4ac:	4b43      	ldr	r3, [pc, #268]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4b8:	d107      	bne.n	800d4ca <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4ba:	f107 030c 	add.w	r3, r7, #12
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 fad8 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4c8:	e15d      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4ce:	e15a      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d4d0:	4b3a      	ldr	r3, [pc, #232]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d4d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d4da:	4b38      	ldr	r3, [pc, #224]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f003 0304 	and.w	r3, r3, #4
 800d4e2:	2b04      	cmp	r3, #4
 800d4e4:	d10c      	bne.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d109      	bne.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4ec:	4b33      	ldr	r3, [pc, #204]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	08db      	lsrs	r3, r3, #3
 800d4f2:	f003 0303 	and.w	r3, r3, #3
 800d4f6:	4a32      	ldr	r2, [pc, #200]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4fe:	e01e      	b.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d500:	4b2e      	ldr	r3, [pc, #184]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d50c:	d106      	bne.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d50e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d514:	d102      	bne.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d516:	4b2b      	ldr	r3, [pc, #172]	@ (800d5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d518:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d51a:	e010      	b.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d51c:	4b27      	ldr	r3, [pc, #156]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d528:	d106      	bne.n	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d52c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d530:	d102      	bne.n	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d532:	4b25      	ldr	r3, [pc, #148]	@ (800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d536:	e002      	b.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d53c:	e123      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d53e:	e122      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d544:	e11f      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d54a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d54e:	430b      	orrs	r3, r1
 800d550:	d13c      	bne.n	800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d552:	4b1a      	ldr	r3, [pc, #104]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d55a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d004      	beq.n	800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d568:	d012      	beq.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d56a:	e023      	b.n	800d5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d56c:	4b13      	ldr	r3, [pc, #76]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d574:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d578:	d107      	bne.n	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d57a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 fbcc 	bl	800dd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d588:	e0fd      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d58e:	e0fa      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d590:	4b0a      	ldr	r3, [pc, #40]	@ (800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d59c:	d107      	bne.n	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d59e:	f107 0318 	add.w	r3, r7, #24
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 f912 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d5a8:	6a3b      	ldr	r3, [r7, #32]
 800d5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5ac:	e0eb      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5b2:	e0e8      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5b8:	e0e5      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d5ba:	bf00      	nop
 800d5bc:	58024400 	.word	0x58024400
 800d5c0:	03d09000 	.word	0x03d09000
 800d5c4:	003d0900 	.word	0x003d0900
 800d5c8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d5cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5d0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d5d4:	430b      	orrs	r3, r1
 800d5d6:	f040 8085 	bne.w	800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d5da:	4b6d      	ldr	r3, [pc, #436]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d5dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5de:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d5e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d5ea:	d06b      	beq.n	800d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d5f2:	d874      	bhi.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5fa:	d056      	beq.n	800d6aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d602:	d86c      	bhi.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d606:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d60a:	d03b      	beq.n	800d684 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d612:	d864      	bhi.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d61a:	d021      	beq.n	800d660 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d622:	d85c      	bhi.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d630:	d004      	beq.n	800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d632:	e054      	b.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d634:	f000 f8b4 	bl	800d7a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d638:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d63a:	e0a4      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d63c:	4b54      	ldr	r3, [pc, #336]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d648:	d107      	bne.n	800d65a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d64a:	f107 0318 	add.w	r3, r7, #24
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 f8bc 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d658:	e095      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d65e:	e092      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d660:	4b4b      	ldr	r3, [pc, #300]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d66c:	d107      	bne.n	800d67e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d66e:	f107 030c 	add.w	r3, r7, #12
 800d672:	4618      	mov	r0, r3
 800d674:	f000 f9fe 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d67c:	e083      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d682:	e080      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d684:	4b42      	ldr	r3, [pc, #264]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f003 0304 	and.w	r3, r3, #4
 800d68c:	2b04      	cmp	r3, #4
 800d68e:	d109      	bne.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d690:	4b3f      	ldr	r3, [pc, #252]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	08db      	lsrs	r3, r3, #3
 800d696:	f003 0303 	and.w	r3, r3, #3
 800d69a:	4a3e      	ldr	r2, [pc, #248]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d69c:	fa22 f303 	lsr.w	r3, r2, r3
 800d6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6a2:	e070      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6a8:	e06d      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d6aa:	4b39      	ldr	r3, [pc, #228]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6b6:	d102      	bne.n	800d6be <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d6b8:	4b37      	ldr	r3, [pc, #220]	@ (800d798 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6bc:	e063      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6c2:	e060      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d6c4:	4b32      	ldr	r3, [pc, #200]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6d0:	d102      	bne.n	800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d6d2:	4b32      	ldr	r3, [pc, #200]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6d6:	e056      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6dc:	e053      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6e2:	e050      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6e8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d6ec:	430b      	orrs	r3, r1
 800d6ee:	d148      	bne.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d6f0:	4b27      	ldr	r3, [pc, #156]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d6f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d700:	d02a      	beq.n	800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d708:	d838      	bhi.n	800d77c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d716:	d00d      	beq.n	800d734 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d718:	e030      	b.n	800d77c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d71a:	4b1d      	ldr	r3, [pc, #116]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d722:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d726:	d102      	bne.n	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d728:	4b1c      	ldr	r3, [pc, #112]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d72c:	e02b      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d72e:	2300      	movs	r3, #0
 800d730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d732:	e028      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d734:	4b16      	ldr	r3, [pc, #88]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d73c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d740:	d107      	bne.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d746:	4618      	mov	r0, r3
 800d748:	f000 fae8 	bl	800dd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d750:	e019      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d756:	e016      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d758:	4b0d      	ldr	r3, [pc, #52]	@ (800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d764:	d107      	bne.n	800d776 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d766:	f107 0318 	add.w	r3, r7, #24
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 f82e 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d774:	e007      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d776:	2300      	movs	r3, #0
 800d778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d77a:	e004      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d780:	e001      	b.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d782:	2300      	movs	r3, #0
 800d784:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3740      	adds	r7, #64	@ 0x40
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	58024400 	.word	0x58024400
 800d794:	03d09000 	.word	0x03d09000
 800d798:	003d0900 	.word	0x003d0900
 800d79c:	016e3600 	.word	0x016e3600

0800d7a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d7a4:	f7fe f92e 	bl	800ba04 <HAL_RCC_GetHCLKFreq>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	4b06      	ldr	r3, [pc, #24]	@ (800d7c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	091b      	lsrs	r3, r3, #4
 800d7b0:	f003 0307 	and.w	r3, r3, #7
 800d7b4:	4904      	ldr	r1, [pc, #16]	@ (800d7c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d7b6:	5ccb      	ldrb	r3, [r1, r3]
 800d7b8:	f003 031f 	and.w	r3, r3, #31
 800d7bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	58024400 	.word	0x58024400
 800d7c8:	080195b4 	.word	0x080195b4

0800d7cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b089      	sub	sp, #36	@ 0x24
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d7d4:	4ba1      	ldr	r3, [pc, #644]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d8:	f003 0303 	and.w	r3, r3, #3
 800d7dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d7de:	4b9f      	ldr	r3, [pc, #636]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e2:	0b1b      	lsrs	r3, r3, #12
 800d7e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d7e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d7ea:	4b9c      	ldr	r3, [pc, #624]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ee:	091b      	lsrs	r3, r3, #4
 800d7f0:	f003 0301 	and.w	r3, r3, #1
 800d7f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d7f6:	4b99      	ldr	r3, [pc, #612]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7fa:	08db      	lsrs	r3, r3, #3
 800d7fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d800:	693a      	ldr	r2, [r7, #16]
 800d802:	fb02 f303 	mul.w	r3, r2, r3
 800d806:	ee07 3a90 	vmov	s15, r3
 800d80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d80e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 8111 	beq.w	800da3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	f000 8083 	beq.w	800d928 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	2b02      	cmp	r3, #2
 800d826:	f200 80a1 	bhi.w	800d96c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d003      	beq.n	800d838 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d056      	beq.n	800d8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d836:	e099      	b.n	800d96c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d838:	4b88      	ldr	r3, [pc, #544]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 0320 	and.w	r3, r3, #32
 800d840:	2b00      	cmp	r3, #0
 800d842:	d02d      	beq.n	800d8a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d844:	4b85      	ldr	r3, [pc, #532]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	08db      	lsrs	r3, r3, #3
 800d84a:	f003 0303 	and.w	r3, r3, #3
 800d84e:	4a84      	ldr	r2, [pc, #528]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d850:	fa22 f303 	lsr.w	r3, r2, r3
 800d854:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	ee07 3a90 	vmov	s15, r3
 800d85c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	ee07 3a90 	vmov	s15, r3
 800d866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d86e:	4b7b      	ldr	r3, [pc, #492]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d876:	ee07 3a90 	vmov	s15, r3
 800d87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d882:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800da64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d88e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d89a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d89e:	e087      	b.n	800d9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	ee07 3a90 	vmov	s15, r3
 800d8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800da68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8b2:	4b6a      	ldr	r3, [pc, #424]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ba:	ee07 3a90 	vmov	s15, r3
 800d8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800da64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8e2:	e065      	b.n	800d9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	ee07 3a90 	vmov	s15, r3
 800d8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800da6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8f6:	4b59      	ldr	r3, [pc, #356]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8fe:	ee07 3a90 	vmov	s15, r3
 800d902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d906:	ed97 6a03 	vldr	s12, [r7, #12]
 800d90a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800da64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d926:	e043      	b.n	800d9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	ee07 3a90 	vmov	s15, r3
 800d92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d932:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800da70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d93a:	4b48      	ldr	r3, [pc, #288]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d942:	ee07 3a90 	vmov	s15, r3
 800d946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d94e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800da64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d95a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d96a:	e021      	b.n	800d9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	ee07 3a90 	vmov	s15, r3
 800d972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d976:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800da6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d97e:	4b37      	ldr	r3, [pc, #220]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d986:	ee07 3a90 	vmov	s15, r3
 800d98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d98e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d992:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800da64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d99e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d9b0:	4b2a      	ldr	r3, [pc, #168]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9b4:	0a5b      	lsrs	r3, r3, #9
 800d9b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d9c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9d6:	ee17 2a90 	vmov	r2, s15
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d9de:	4b1f      	ldr	r3, [pc, #124]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e2:	0c1b      	lsrs	r3, r3, #16
 800d9e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9e8:	ee07 3a90 	vmov	s15, r3
 800d9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d9f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da04:	ee17 2a90 	vmov	r2, s15
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800da0c:	4b13      	ldr	r3, [pc, #76]	@ (800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da10:	0e1b      	lsrs	r3, r3, #24
 800da12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da16:	ee07 3a90 	vmov	s15, r3
 800da1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da26:	edd7 6a07 	vldr	s13, [r7, #28]
 800da2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da32:	ee17 2a90 	vmov	r2, s15
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800da3a:	e008      	b.n	800da4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	609a      	str	r2, [r3, #8]
}
 800da4e:	bf00      	nop
 800da50:	3724      	adds	r7, #36	@ 0x24
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	58024400 	.word	0x58024400
 800da60:	03d09000 	.word	0x03d09000
 800da64:	46000000 	.word	0x46000000
 800da68:	4c742400 	.word	0x4c742400
 800da6c:	4a742400 	.word	0x4a742400
 800da70:	4bb71b00 	.word	0x4bb71b00

0800da74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800da74:	b480      	push	{r7}
 800da76:	b089      	sub	sp, #36	@ 0x24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800da7c:	4ba1      	ldr	r3, [pc, #644]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da80:	f003 0303 	and.w	r3, r3, #3
 800da84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800da86:	4b9f      	ldr	r3, [pc, #636]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da8a:	0d1b      	lsrs	r3, r3, #20
 800da8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800da90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800da92:	4b9c      	ldr	r3, [pc, #624]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da96:	0a1b      	lsrs	r3, r3, #8
 800da98:	f003 0301 	and.w	r3, r3, #1
 800da9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800da9e:	4b99      	ldr	r3, [pc, #612]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daa2:	08db      	lsrs	r3, r3, #3
 800daa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800daa8:	693a      	ldr	r2, [r7, #16]
 800daaa:	fb02 f303 	mul.w	r3, r2, r3
 800daae:	ee07 3a90 	vmov	s15, r3
 800dab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f000 8111 	beq.w	800dce4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	f000 8083 	beq.w	800dbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	2b02      	cmp	r3, #2
 800dace:	f200 80a1 	bhi.w	800dc14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d003      	beq.n	800dae0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d056      	beq.n	800db8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dade:	e099      	b.n	800dc14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dae0:	4b88      	ldr	r3, [pc, #544]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f003 0320 	and.w	r3, r3, #32
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d02d      	beq.n	800db48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800daec:	4b85      	ldr	r3, [pc, #532]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	08db      	lsrs	r3, r3, #3
 800daf2:	f003 0303 	and.w	r3, r3, #3
 800daf6:	4a84      	ldr	r2, [pc, #528]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800daf8:	fa22 f303 	lsr.w	r3, r2, r3
 800dafc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	ee07 3a90 	vmov	s15, r3
 800db04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	ee07 3a90 	vmov	s15, r3
 800db0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db16:	4b7b      	ldr	r3, [pc, #492]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db1e:	ee07 3a90 	vmov	s15, r3
 800db22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db26:	ed97 6a03 	vldr	s12, [r7, #12]
 800db2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800db46:	e087      	b.n	800dc58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	ee07 3a90 	vmov	s15, r3
 800db4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dd10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800db56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db5a:	4b6a      	ldr	r3, [pc, #424]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db62:	ee07 3a90 	vmov	s15, r3
 800db66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800db6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db8a:	e065      	b.n	800dc58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	ee07 3a90 	vmov	s15, r3
 800db92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dd14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800db9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db9e:	4b59      	ldr	r3, [pc, #356]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba6:	ee07 3a90 	vmov	s15, r3
 800dbaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbae:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbb2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dbb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbce:	e043      	b.n	800dc58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	ee07 3a90 	vmov	s15, r3
 800dbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbda:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dd18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dbde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbe2:	4b48      	ldr	r3, [pc, #288]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbea:	ee07 3a90 	vmov	s15, r3
 800dbee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbf6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dbfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc12:	e021      	b.n	800dc58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	ee07 3a90 	vmov	s15, r3
 800dc1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dd14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dc22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc26:	4b37      	ldr	r3, [pc, #220]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc2e:	ee07 3a90 	vmov	s15, r3
 800dc32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc36:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800dc58:	4b2a      	ldr	r3, [pc, #168]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc5c:	0a5b      	lsrs	r3, r3, #9
 800dc5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc62:	ee07 3a90 	vmov	s15, r3
 800dc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc72:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc7e:	ee17 2a90 	vmov	r2, s15
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800dc86:	4b1f      	ldr	r3, [pc, #124]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc8a:	0c1b      	lsrs	r3, r3, #16
 800dc8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc90:	ee07 3a90 	vmov	s15, r3
 800dc94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dca0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcac:	ee17 2a90 	vmov	r2, s15
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800dcb4:	4b13      	ldr	r3, [pc, #76]	@ (800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb8:	0e1b      	lsrs	r3, r3, #24
 800dcba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcbe:	ee07 3a90 	vmov	s15, r3
 800dcc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dcca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dcce:	edd7 6a07 	vldr	s13, [r7, #28]
 800dcd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcda:	ee17 2a90 	vmov	r2, s15
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dce2:	e008      	b.n	800dcf6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	609a      	str	r2, [r3, #8]
}
 800dcf6:	bf00      	nop
 800dcf8:	3724      	adds	r7, #36	@ 0x24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	58024400 	.word	0x58024400
 800dd08:	03d09000 	.word	0x03d09000
 800dd0c:	46000000 	.word	0x46000000
 800dd10:	4c742400 	.word	0x4c742400
 800dd14:	4a742400 	.word	0x4a742400
 800dd18:	4bb71b00 	.word	0x4bb71b00

0800dd1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b089      	sub	sp, #36	@ 0x24
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dd24:	4ba0      	ldr	r3, [pc, #640]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd28:	f003 0303 	and.w	r3, r3, #3
 800dd2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800dd2e:	4b9e      	ldr	r3, [pc, #632]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd32:	091b      	lsrs	r3, r3, #4
 800dd34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800dd3a:	4b9b      	ldr	r3, [pc, #620]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3e:	f003 0301 	and.w	r3, r3, #1
 800dd42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dd44:	4b98      	ldr	r3, [pc, #608]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd48:	08db      	lsrs	r3, r3, #3
 800dd4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	fb02 f303 	mul.w	r3, r2, r3
 800dd54:	ee07 3a90 	vmov	s15, r3
 800dd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 8111 	beq.w	800df8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	2b02      	cmp	r3, #2
 800dd6c:	f000 8083 	beq.w	800de76 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	f200 80a1 	bhi.w	800deba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d056      	beq.n	800de32 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dd84:	e099      	b.n	800deba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd86:	4b88      	ldr	r3, [pc, #544]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f003 0320 	and.w	r3, r3, #32
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d02d      	beq.n	800ddee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd92:	4b85      	ldr	r3, [pc, #532]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	08db      	lsrs	r3, r3, #3
 800dd98:	f003 0303 	and.w	r3, r3, #3
 800dd9c:	4a83      	ldr	r2, [pc, #524]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800dd9e:	fa22 f303 	lsr.w	r3, r2, r3
 800dda2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	ee07 3a90 	vmov	s15, r3
 800ddaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	ee07 3a90 	vmov	s15, r3
 800ddb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddbc:	4b7a      	ldr	r3, [pc, #488]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddc4:	ee07 3a90 	vmov	s15, r3
 800ddc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddcc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddd0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800dfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ddd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dddc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dde0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dde4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dde8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ddec:	e087      	b.n	800defe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	ee07 3a90 	vmov	s15, r3
 800ddf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddf8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800dfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ddfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de00:	4b69      	ldr	r3, [pc, #420]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de08:	ee07 3a90 	vmov	s15, r3
 800de0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de10:	ed97 6a03 	vldr	s12, [r7, #12]
 800de14:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800dfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800de18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de30:	e065      	b.n	800defe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	ee07 3a90 	vmov	s15, r3
 800de38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de3c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800dfb8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800de40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de44:	4b58      	ldr	r3, [pc, #352]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de4c:	ee07 3a90 	vmov	s15, r3
 800de50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de54:	ed97 6a03 	vldr	s12, [r7, #12]
 800de58:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800dfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800de5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de74:	e043      	b.n	800defe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	ee07 3a90 	vmov	s15, r3
 800de7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de80:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800de84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de88:	4b47      	ldr	r3, [pc, #284]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de90:	ee07 3a90 	vmov	s15, r3
 800de94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de98:	ed97 6a03 	vldr	s12, [r7, #12]
 800de9c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800dfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dea8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800deac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800deb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800deb8:	e021      	b.n	800defe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	ee07 3a90 	vmov	s15, r3
 800dec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dec4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800dfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800decc:	4b36      	ldr	r3, [pc, #216]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ded0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ded4:	ee07 3a90 	vmov	s15, r3
 800ded8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dedc:	ed97 6a03 	vldr	s12, [r7, #12]
 800dee0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800def0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800def4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800def8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800defc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800defe:	4b2a      	ldr	r3, [pc, #168]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df02:	0a5b      	lsrs	r3, r3, #9
 800df04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df08:	ee07 3a90 	vmov	s15, r3
 800df0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df18:	edd7 6a07 	vldr	s13, [r7, #28]
 800df1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df24:	ee17 2a90 	vmov	r2, s15
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800df2c:	4b1e      	ldr	r3, [pc, #120]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df30:	0c1b      	lsrs	r3, r3, #16
 800df32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df36:	ee07 3a90 	vmov	s15, r3
 800df3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df46:	edd7 6a07 	vldr	s13, [r7, #28]
 800df4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df52:	ee17 2a90 	vmov	r2, s15
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800df5a:	4b13      	ldr	r3, [pc, #76]	@ (800dfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df5e:	0e1b      	lsrs	r3, r3, #24
 800df60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df64:	ee07 3a90 	vmov	s15, r3
 800df68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df74:	edd7 6a07 	vldr	s13, [r7, #28]
 800df78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df80:	ee17 2a90 	vmov	r2, s15
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800df88:	e008      	b.n	800df9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	609a      	str	r2, [r3, #8]
}
 800df9c:	bf00      	nop
 800df9e:	3724      	adds	r7, #36	@ 0x24
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	58024400 	.word	0x58024400
 800dfac:	03d09000 	.word	0x03d09000
 800dfb0:	46000000 	.word	0x46000000
 800dfb4:	4c742400 	.word	0x4c742400
 800dfb8:	4a742400 	.word	0x4a742400
 800dfbc:	4bb71b00 	.word	0x4bb71b00

0800dfc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dfce:	4b53      	ldr	r3, [pc, #332]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800dfd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd2:	f003 0303 	and.w	r3, r3, #3
 800dfd6:	2b03      	cmp	r3, #3
 800dfd8:	d101      	bne.n	800dfde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e099      	b.n	800e112 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dfde:	4b4f      	ldr	r3, [pc, #316]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4a4e      	ldr	r2, [pc, #312]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800dfe4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dfe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfea:	f7f6 fbbd 	bl	8004768 <HAL_GetTick>
 800dfee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dff0:	e008      	b.n	800e004 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dff2:	f7f6 fbb9 	bl	8004768 <HAL_GetTick>
 800dff6:	4602      	mov	r2, r0
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	d901      	bls.n	800e004 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e000:	2303      	movs	r3, #3
 800e002:	e086      	b.n	800e112 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e004:	4b45      	ldr	r3, [pc, #276]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1f0      	bne.n	800dff2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e010:	4b42      	ldr	r3, [pc, #264]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e014:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	031b      	lsls	r3, r3, #12
 800e01e:	493f      	ldr	r1, [pc, #252]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e020:	4313      	orrs	r3, r2
 800e022:	628b      	str	r3, [r1, #40]	@ 0x28
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	3b01      	subs	r3, #1
 800e02a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	3b01      	subs	r3, #1
 800e034:	025b      	lsls	r3, r3, #9
 800e036:	b29b      	uxth	r3, r3
 800e038:	431a      	orrs	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	3b01      	subs	r3, #1
 800e040:	041b      	lsls	r3, r3, #16
 800e042:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e046:	431a      	orrs	r2, r3
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	3b01      	subs	r3, #1
 800e04e:	061b      	lsls	r3, r3, #24
 800e050:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e054:	4931      	ldr	r1, [pc, #196]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e056:	4313      	orrs	r3, r2
 800e058:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e05a:	4b30      	ldr	r3, [pc, #192]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e05e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	695b      	ldr	r3, [r3, #20]
 800e066:	492d      	ldr	r1, [pc, #180]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e068:	4313      	orrs	r3, r2
 800e06a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e06c:	4b2b      	ldr	r3, [pc, #172]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e070:	f023 0220 	bic.w	r2, r3, #32
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	699b      	ldr	r3, [r3, #24]
 800e078:	4928      	ldr	r1, [pc, #160]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e07a:	4313      	orrs	r3, r2
 800e07c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e07e:	4b27      	ldr	r3, [pc, #156]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e082:	4a26      	ldr	r2, [pc, #152]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e084:	f023 0310 	bic.w	r3, r3, #16
 800e088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e08a:	4b24      	ldr	r3, [pc, #144]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e08c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e08e:	4b24      	ldr	r3, [pc, #144]	@ (800e120 <RCCEx_PLL2_Config+0x160>)
 800e090:	4013      	ands	r3, r2
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	69d2      	ldr	r2, [r2, #28]
 800e096:	00d2      	lsls	r2, r2, #3
 800e098:	4920      	ldr	r1, [pc, #128]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e09a:	4313      	orrs	r3, r2
 800e09c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e09e:	4b1f      	ldr	r3, [pc, #124]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a2:	4a1e      	ldr	r2, [pc, #120]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0a4:	f043 0310 	orr.w	r3, r3, #16
 800e0a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d106      	bne.n	800e0be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e0b0:	4b1a      	ldr	r3, [pc, #104]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b4:	4a19      	ldr	r2, [pc, #100]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e0ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0bc:	e00f      	b.n	800e0de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d106      	bne.n	800e0d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e0c4:	4b15      	ldr	r3, [pc, #84]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c8:	4a14      	ldr	r2, [pc, #80]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0d0:	e005      	b.n	800e0de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e0d2:	4b12      	ldr	r3, [pc, #72]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d6:	4a11      	ldr	r2, [pc, #68]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e0dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e0de:	4b0f      	ldr	r3, [pc, #60]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a0e      	ldr	r2, [pc, #56]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e0e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e0e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0ea:	f7f6 fb3d 	bl	8004768 <HAL_GetTick>
 800e0ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e0f0:	e008      	b.n	800e104 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e0f2:	f7f6 fb39 	bl	8004768 <HAL_GetTick>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	1ad3      	subs	r3, r2, r3
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	d901      	bls.n	800e104 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e100:	2303      	movs	r3, #3
 800e102:	e006      	b.n	800e112 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e104:	4b05      	ldr	r3, [pc, #20]	@ (800e11c <RCCEx_PLL2_Config+0x15c>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d0f0      	beq.n	800e0f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e110:	7bfb      	ldrb	r3, [r7, #15]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	58024400 	.word	0x58024400
 800e120:	ffff0007 	.word	0xffff0007

0800e124 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e132:	4b53      	ldr	r3, [pc, #332]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e136:	f003 0303 	and.w	r3, r3, #3
 800e13a:	2b03      	cmp	r3, #3
 800e13c:	d101      	bne.n	800e142 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	e099      	b.n	800e276 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e142:	4b4f      	ldr	r3, [pc, #316]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a4e      	ldr	r2, [pc, #312]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e14c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e14e:	f7f6 fb0b 	bl	8004768 <HAL_GetTick>
 800e152:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e154:	e008      	b.n	800e168 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e156:	f7f6 fb07 	bl	8004768 <HAL_GetTick>
 800e15a:	4602      	mov	r2, r0
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	2b02      	cmp	r3, #2
 800e162:	d901      	bls.n	800e168 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e164:	2303      	movs	r3, #3
 800e166:	e086      	b.n	800e276 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e168:	4b45      	ldr	r3, [pc, #276]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1f0      	bne.n	800e156 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e174:	4b42      	ldr	r3, [pc, #264]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e178:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	051b      	lsls	r3, r3, #20
 800e182:	493f      	ldr	r1, [pc, #252]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e184:	4313      	orrs	r3, r2
 800e186:	628b      	str	r3, [r1, #40]	@ 0x28
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	3b01      	subs	r3, #1
 800e18e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	3b01      	subs	r3, #1
 800e198:	025b      	lsls	r3, r3, #9
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	431a      	orrs	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	041b      	lsls	r3, r3, #16
 800e1a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e1aa:	431a      	orrs	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	061b      	lsls	r3, r3, #24
 800e1b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e1b8:	4931      	ldr	r1, [pc, #196]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e1be:	4b30      	ldr	r3, [pc, #192]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	695b      	ldr	r3, [r3, #20]
 800e1ca:	492d      	ldr	r1, [pc, #180]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e1d0:	4b2b      	ldr	r3, [pc, #172]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	4928      	ldr	r1, [pc, #160]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e1e2:	4b27      	ldr	r3, [pc, #156]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e6:	4a26      	ldr	r2, [pc, #152]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e1e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e1ee:	4b24      	ldr	r3, [pc, #144]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e1f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1f2:	4b24      	ldr	r3, [pc, #144]	@ (800e284 <RCCEx_PLL3_Config+0x160>)
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	69d2      	ldr	r2, [r2, #28]
 800e1fa:	00d2      	lsls	r2, r2, #3
 800e1fc:	4920      	ldr	r1, [pc, #128]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e1fe:	4313      	orrs	r3, r2
 800e200:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e202:	4b1f      	ldr	r3, [pc, #124]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e206:	4a1e      	ldr	r2, [pc, #120]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e20c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d106      	bne.n	800e222 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e214:	4b1a      	ldr	r3, [pc, #104]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e218:	4a19      	ldr	r2, [pc, #100]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e21a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e21e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e220:	e00f      	b.n	800e242 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d106      	bne.n	800e236 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e228:	4b15      	ldr	r3, [pc, #84]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e22c:	4a14      	ldr	r2, [pc, #80]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e22e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e232:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e234:	e005      	b.n	800e242 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e236:	4b12      	ldr	r3, [pc, #72]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e23a:	4a11      	ldr	r2, [pc, #68]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e23c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e240:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e242:	4b0f      	ldr	r3, [pc, #60]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a0e      	ldr	r2, [pc, #56]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e24c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e24e:	f7f6 fa8b 	bl	8004768 <HAL_GetTick>
 800e252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e254:	e008      	b.n	800e268 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e256:	f7f6 fa87 	bl	8004768 <HAL_GetTick>
 800e25a:	4602      	mov	r2, r0
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	1ad3      	subs	r3, r2, r3
 800e260:	2b02      	cmp	r3, #2
 800e262:	d901      	bls.n	800e268 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e264:	2303      	movs	r3, #3
 800e266:	e006      	b.n	800e276 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e268:	4b05      	ldr	r3, [pc, #20]	@ (800e280 <RCCEx_PLL3_Config+0x15c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d0f0      	beq.n	800e256 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e274:	7bfb      	ldrb	r3, [r7, #15]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	58024400 	.word	0x58024400
 800e284:	ffff0007 	.word	0xffff0007

0800e288 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b08a      	sub	sp, #40	@ 0x28
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d101      	bne.n	800e29a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	e075      	b.n	800e386 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d105      	bne.n	800e2b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7f5 fdc1 	bl	8003e34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2204      	movs	r2, #4
 800e2b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 f868 	bl	800e390 <HAL_SD_InitCard>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e05d      	b.n	800e386 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e2ca:	f107 0308 	add.w	r3, r7, #8
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 fdaf 	bl	800ee34 <HAL_SD_GetCardStatus>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e052      	b.n	800e386 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e2e0:	7e3b      	ldrb	r3, [r7, #24]
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e2e6:	7e7b      	ldrb	r3, [r7, #25]
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d10a      	bne.n	800e30a <HAL_SD_Init+0x82>
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d102      	bne.n	800e300 <HAL_SD_Init+0x78>
 800e2fa:	6a3b      	ldr	r3, [r7, #32]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d004      	beq.n	800e30a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e306:	659a      	str	r2, [r3, #88]	@ 0x58
 800e308:	e00b      	b.n	800e322 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d104      	bne.n	800e31c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e318:	659a      	str	r2, [r3, #88]	@ 0x58
 800e31a:	e002      	b.n	800e322 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	4619      	mov	r1, r3
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 fe6d 	bl	800f008 <HAL_SD_ConfigWideBusOperation>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	e026      	b.n	800e386 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e338:	f7f6 fa16 	bl	8004768 <HAL_GetTick>
 800e33c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e33e:	e011      	b.n	800e364 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e340:	f7f6 fa12 	bl	8004768 <HAL_GetTick>
 800e344:	4602      	mov	r2, r0
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34e:	d109      	bne.n	800e364 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e356:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800e360:	2303      	movs	r3, #3
 800e362:	e010      	b.n	800e386 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 ff61 	bl	800f22c <HAL_SD_GetCardState>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b04      	cmp	r3, #4
 800e36e:	d1e7      	bne.n	800e340 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3728      	adds	r7, #40	@ 0x28
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e390:	b590      	push	{r4, r7, lr}
 800e392:	b08d      	sub	sp, #52	@ 0x34
 800e394:	af02      	add	r7, sp, #8
 800e396:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e398:	2300      	movs	r3, #0
 800e39a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e39c:	2300      	movs	r3, #0
 800e39e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e3a8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e3ac:	f04f 0100 	mov.w	r1, #0
 800e3b0:	f7fe fd24 	bl	800cdfc <HAL_RCCEx_GetPeriphCLKFreq>
 800e3b4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d109      	bne.n	800e3d0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800e3ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e070      	b.n	800e4b2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d2:	0a1b      	lsrs	r3, r3, #8
 800e3d4:	4a39      	ldr	r2, [pc, #228]	@ (800e4bc <HAL_SD_InitCard+0x12c>)
 800e3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e3da:	091b      	lsrs	r3, r3, #4
 800e3dc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681c      	ldr	r4, [r3, #0]
 800e3e2:	466a      	mov	r2, sp
 800e3e4:	f107 0318 	add.w	r3, r7, #24
 800e3e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e3ec:	e882 0003 	stmia.w	r2, {r0, r1}
 800e3f0:	f107 030c 	add.w	r3, r7, #12
 800e3f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f005 f9a4 	bl	8013744 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4618      	mov	r0, r3
 800e402:	f005 f9e7 	bl	80137d4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d005      	beq.n	800e418 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	005b      	lsls	r3, r3, #1
 800e410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e412:	fbb2 f3f3 	udiv	r3, r2, r3
 800e416:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800e418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d007      	beq.n	800e42e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e41e:	4a28      	ldr	r2, [pc, #160]	@ (800e4c0 <HAL_SD_InitCard+0x130>)
 800e420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e422:	fbb2 f3f3 	udiv	r3, r2, r3
 800e426:	3301      	adds	r3, #1
 800e428:	4618      	mov	r0, r3
 800e42a:	f7f6 f9a9 	bl	8004780 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 ffea 	bl	800f408 <SD_PowerON>
 800e434:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e436:	6a3b      	ldr	r3, [r7, #32]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00b      	beq.n	800e454 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2201      	movs	r2, #1
 800e440:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e448:	6a3b      	ldr	r3, [r7, #32]
 800e44a:	431a      	orrs	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	e02e      	b.n	800e4b2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 ff09 	bl	800f26c <SD_InitCard>
 800e45a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e45c:	6a3b      	ldr	r3, [r7, #32]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00b      	beq.n	800e47a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2201      	movs	r2, #1
 800e466:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e46e:	6a3b      	ldr	r3, [r7, #32]
 800e470:	431a      	orrs	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e476:	2301      	movs	r3, #1
 800e478:	e01b      	b.n	800e4b2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e482:	4618      	mov	r0, r3
 800e484:	f005 fa3c 	bl	8013900 <SDMMC_CmdBlockLength>
 800e488:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e48a:	6a3b      	ldr	r3, [r7, #32]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00f      	beq.n	800e4b0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4a0b      	ldr	r2, [pc, #44]	@ (800e4c4 <HAL_SD_InitCard+0x134>)
 800e496:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e49c:	6a3b      	ldr	r3, [r7, #32]
 800e49e:	431a      	orrs	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e000      	b.n	800e4b2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	372c      	adds	r7, #44	@ 0x2c
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd90      	pop	{r4, r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	014f8b59 	.word	0x014f8b59
 800e4c0:	00012110 	.word	0x00012110
 800e4c4:	1fe00fff 	.word	0x1fe00fff

0800e4c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b08c      	sub	sp, #48	@ 0x30
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d107      	bne.n	800e4f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4e4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e08d      	b.n	800e60c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	f040 8086 	bne.w	800e60a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2200      	movs	r2, #0
 800e502:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	441a      	add	r2, r3
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e50e:	429a      	cmp	r2, r3
 800e510:	d907      	bls.n	800e522 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e516:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800e51e:	2301      	movs	r3, #1
 800e520:	e074      	b.n	800e60c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2203      	movs	r2, #3
 800e526:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2200      	movs	r2, #0
 800e530:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	68ba      	ldr	r2, [r7, #8]
 800e536:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	025a      	lsls	r2, r3, #9
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e544:	2b01      	cmp	r3, #1
 800e546:	d002      	beq.n	800e54e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e54a:	025b      	lsls	r3, r3, #9
 800e54c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e54e:	f04f 33ff 	mov.w	r3, #4294967295
 800e552:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	025b      	lsls	r3, r3, #9
 800e558:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e55a:	2390      	movs	r3, #144	@ 0x90
 800e55c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e55e:	2302      	movs	r3, #2
 800e560:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e562:	2300      	movs	r3, #0
 800e564:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e566:	2300      	movs	r3, #0
 800e568:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f107 0210 	add.w	r2, r7, #16
 800e572:	4611      	mov	r1, r2
 800e574:	4618      	mov	r0, r3
 800e576:	f005 f997 	bl	80138a8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	68da      	ldr	r2, [r3, #12]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e588:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2201      	movs	r2, #1
 800e598:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d90a      	bls.n	800e5b6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2282      	movs	r2, #130	@ 0x82
 800e5a4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f005 f9ed 	bl	801398c <SDMMC_CmdReadMultiBlock>
 800e5b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800e5b4:	e009      	b.n	800e5ca <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2281      	movs	r2, #129	@ 0x81
 800e5ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f005 f9bf 	bl	8013946 <SDMMC_CmdReadSingleBlock>
 800e5c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d012      	beq.n	800e5f6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4a0f      	ldr	r2, [pc, #60]	@ (800e614 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e5d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5de:	431a      	orrs	r2, r3
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e00a      	b.n	800e60c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800e604:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800e606:	2300      	movs	r3, #0
 800e608:	e000      	b.n	800e60c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e60a:	2302      	movs	r3, #2
  }
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3730      	adds	r7, #48	@ 0x30
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	1fe00fff 	.word	0x1fe00fff

0800e618 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b08c      	sub	sp, #48	@ 0x30
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
 800e624:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d107      	bne.n	800e640 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e634:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	e08d      	b.n	800e75c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e646:	b2db      	uxtb	r3, r3
 800e648:	2b01      	cmp	r3, #1
 800e64a:	f040 8086 	bne.w	800e75a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	441a      	add	r2, r3
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e65e:	429a      	cmp	r2, r3
 800e660:	d907      	bls.n	800e672 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e666:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	e074      	b.n	800e75c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2203      	movs	r2, #3
 800e676:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2200      	movs	r2, #0
 800e680:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	025a      	lsls	r2, r3, #9
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e694:	2b01      	cmp	r3, #1
 800e696:	d002      	beq.n	800e69e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e69a:	025b      	lsls	r3, r3, #9
 800e69c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e69e:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	025b      	lsls	r3, r3, #9
 800e6a8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e6aa:	2390      	movs	r3, #144	@ 0x90
 800e6ac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f107 0210 	add.w	r2, r7, #16
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f005 f8ef 	bl	80138a8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	68da      	ldr	r2, [r3, #12]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e6d8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	68ba      	ldr	r2, [r7, #8]
 800e6e0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d90a      	bls.n	800e706 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	22a0      	movs	r2, #160	@ 0xa0
 800e6f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f005 f98b 	bl	8013a18 <SDMMC_CmdWriteMultiBlock>
 800e702:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800e704:	e009      	b.n	800e71a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2290      	movs	r2, #144	@ 0x90
 800e70a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e712:	4618      	mov	r0, r3
 800e714:	f005 f95d 	bl	80139d2 <SDMMC_CmdWriteSingleBlock>
 800e718:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d012      	beq.n	800e746 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a0f      	ldr	r2, [pc, #60]	@ (800e764 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e726:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72e:	431a      	orrs	r2, r3
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2200      	movs	r2, #0
 800e740:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800e742:	2301      	movs	r3, #1
 800e744:	e00a      	b.n	800e75c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800e754:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e756:	2300      	movs	r3, #0
 800e758:	e000      	b.n	800e75c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e75a:	2302      	movs	r3, #2
  }
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3730      	adds	r7, #48	@ 0x30
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	1fe00fff 	.word	0x1fe00fff

0800e768 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e774:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e77c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e780:	2b00      	cmp	r3, #0
 800e782:	d008      	beq.n	800e796 <HAL_SD_IRQHandler+0x2e>
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f003 0308 	and.w	r3, r3, #8
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d003      	beq.n	800e796 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f001 f926 	bl	800f9e0 <SD_Read_IT>
 800e794:	e19a      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e79c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f000 80ac 	beq.w	800e8fe <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e7ae:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	4b59      	ldr	r3, [pc, #356]	@ (800e920 <HAL_SD_IRQHandler+0x1b8>)
 800e7bc:	400b      	ands	r3, r1
 800e7be:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800e7ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68da      	ldr	r2, [r3, #12]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e7de:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f003 0308 	and.w	r3, r3, #8
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d038      	beq.n	800e85c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f003 0302 	and.w	r3, r3, #2
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d104      	bne.n	800e7fe <HAL_SD_IRQHandler+0x96>
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f003 0320 	and.w	r3, r3, #32
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d011      	beq.n	800e822 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4618      	mov	r0, r3
 800e804:	f005 f92c 	bl	8013a60 <SDMMC_CmdStopTransfer>
 800e808:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d008      	beq.n	800e822 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	431a      	orrs	r2, r3
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 f95b 	bl	800ead8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a3f      	ldr	r2, [pc, #252]	@ (800e924 <HAL_SD_IRQHandler+0x1bc>)
 800e828:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f003 0301 	and.w	r3, r3, #1
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d104      	bne.n	800e84c <HAL_SD_IRQHandler+0xe4>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f003 0302 	and.w	r3, r3, #2
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d003      	beq.n	800e854 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f005 fdd7 	bl	8014400 <HAL_SD_RxCpltCallback>
 800e852:	e13b      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f005 fdc9 	bl	80143ec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e85a:	e137      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e862:	2b00      	cmp	r3, #0
 800e864:	f000 8132 	beq.w	800eacc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2200      	movs	r2, #0
 800e86e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2200      	movs	r2, #0
 800e876:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2200      	movs	r2, #0
 800e87e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f003 0302 	and.w	r3, r3, #2
 800e886:	2b00      	cmp	r3, #0
 800e888:	d104      	bne.n	800e894 <HAL_SD_IRQHandler+0x12c>
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f003 0320 	and.w	r3, r3, #32
 800e890:	2b00      	cmp	r3, #0
 800e892:	d011      	beq.n	800e8b8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4618      	mov	r0, r3
 800e89a:	f005 f8e1 	bl	8013a60 <SDMMC_CmdStopTransfer>
 800e89e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d008      	beq.n	800e8b8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	431a      	orrs	r2, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 f910 	bl	800ead8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f003 0310 	and.w	r3, r3, #16
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d104      	bne.n	800e8da <HAL_SD_IRQHandler+0x172>
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f003 0320 	and.w	r3, r3, #32
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d002      	beq.n	800e8e0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f005 fd86 	bl	80143ec <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d105      	bne.n	800e8f6 <HAL_SD_IRQHandler+0x18e>
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f003 0302 	and.w	r3, r3, #2
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f000 80eb 	beq.w	800eacc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f005 fd82 	bl	8014400 <HAL_SD_RxCpltCallback>
}
 800e8fc:	e0e6      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00d      	beq.n	800e928 <HAL_SD_IRQHandler+0x1c0>
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f003 0308 	and.w	r3, r3, #8
 800e912:	2b00      	cmp	r3, #0
 800e914:	d008      	beq.n	800e928 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f001 f8a8 	bl	800fa6c <SD_Write_IT>
 800e91c:	e0d6      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
 800e91e:	bf00      	nop
 800e920:	ffff3ec5 	.word	0xffff3ec5
 800e924:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e92e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800e932:	2b00      	cmp	r3, #0
 800e934:	f000 809d 	beq.w	800ea72 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e93e:	f003 0302 	and.w	r3, r3, #2
 800e942:	2b00      	cmp	r3, #0
 800e944:	d005      	beq.n	800e952 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e94a:	f043 0202 	orr.w	r2, r3, #2
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e958:	f003 0308 	and.w	r3, r3, #8
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d005      	beq.n	800e96c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e964:	f043 0208 	orr.w	r2, r3, #8
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e972:	f003 0320 	and.w	r3, r3, #32
 800e976:	2b00      	cmp	r3, #0
 800e978:	d005      	beq.n	800e986 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e97e:	f043 0220 	orr.w	r2, r3, #32
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e98c:	f003 0310 	and.w	r3, r3, #16
 800e990:	2b00      	cmp	r3, #0
 800e992:	d005      	beq.n	800e9a0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e998:	f043 0210 	orr.w	r2, r3, #16
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a4b      	ldr	r2, [pc, #300]	@ (800ead4 <HAL_SD_IRQHandler+0x36c>)
 800e9a6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800e9b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68da      	ldr	r2, [r3, #12]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e9c6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e9d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68da      	ldr	r2, [r3, #12]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800e9e6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f005 f837 	bl	8013a60 <SDMMC_CmdStopTransfer>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9f8:	431a      	orrs	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68da      	ldr	r2, [r3, #12]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ea0c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ea16:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f003 0308 	and.w	r3, r3, #8
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00a      	beq.n	800ea38 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2201      	movs	r2, #1
 800ea26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 f851 	bl	800ead8 <HAL_SD_ErrorCallback>
}
 800ea36:	e049      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d044      	beq.n	800eacc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d040      	beq.n	800eacc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800ea58:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f834 	bl	800ead8 <HAL_SD_ErrorCallback>
}
 800ea70:	e02c      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d025      	beq.n	800eacc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea88:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea90:	f003 0304 	and.w	r3, r3, #4
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d10c      	bne.n	800eab2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f003 0320 	and.w	r3, r3, #32
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d003      	beq.n	800eaaa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f001 f84a 	bl	800fb3c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800eaa8:	e010      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f001 f832 	bl	800fb14 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800eab0:	e00c      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f003 0320 	and.w	r3, r3, #32
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d003      	beq.n	800eac4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f001 f833 	bl	800fb28 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800eac2:	e003      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f001 f81b 	bl	800fb00 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800eaca:	e7ff      	b.n	800eacc <HAL_SD_IRQHandler+0x364>
 800eacc:	bf00      	nop
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	18000f3a 	.word	0x18000f3a

0800ead8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eafa:	0f9b      	lsrs	r3, r3, #30
 800eafc:	b2da      	uxtb	r2, r3
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb06:	0e9b      	lsrs	r3, r3, #26
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	f003 030f 	and.w	r3, r3, #15
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb18:	0e1b      	lsrs	r3, r3, #24
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	f003 0303 	and.w	r3, r3, #3
 800eb20:	b2da      	uxtb	r2, r3
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb2a:	0c1b      	lsrs	r3, r3, #16
 800eb2c:	b2da      	uxtb	r2, r3
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb36:	0a1b      	lsrs	r3, r3, #8
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb42:	b2da      	uxtb	r2, r3
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb4c:	0d1b      	lsrs	r3, r3, #20
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb58:	0c1b      	lsrs	r3, r3, #16
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	f003 030f 	and.w	r3, r3, #15
 800eb60:	b2da      	uxtb	r2, r3
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb6a:	0bdb      	lsrs	r3, r3, #15
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	f003 0301 	and.w	r3, r3, #1
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb7c:	0b9b      	lsrs	r3, r3, #14
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	f003 0301 	and.w	r3, r3, #1
 800eb84:	b2da      	uxtb	r2, r3
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb8e:	0b5b      	lsrs	r3, r3, #13
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	f003 0301 	and.w	r3, r3, #1
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eba0:	0b1b      	lsrs	r3, r3, #12
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	f003 0301 	and.w	r3, r3, #1
 800eba8:	b2da      	uxtb	r2, r3
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d163      	bne.n	800ec84 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ebc0:	009a      	lsls	r2, r3, #2
 800ebc2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ebc6:	4013      	ands	r3, r2
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800ebcc:	0f92      	lsrs	r2, r2, #30
 800ebce:	431a      	orrs	r2, r3
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebd8:	0edb      	lsrs	r3, r3, #27
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	f003 0307 	and.w	r3, r3, #7
 800ebe0:	b2da      	uxtb	r2, r3
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebea:	0e1b      	lsrs	r3, r3, #24
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	f003 0307 	and.w	r3, r3, #7
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebfc:	0d5b      	lsrs	r3, r3, #21
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	f003 0307 	and.w	r3, r3, #7
 800ec04:	b2da      	uxtb	r2, r3
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec0e:	0c9b      	lsrs	r3, r3, #18
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	f003 0307 	and.w	r3, r3, #7
 800ec16:	b2da      	uxtb	r2, r3
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec20:	0bdb      	lsrs	r3, r3, #15
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	f003 0307 	and.w	r3, r3, #7
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	691b      	ldr	r3, [r3, #16]
 800ec32:	1c5a      	adds	r2, r3, #1
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	7e1b      	ldrb	r3, [r3, #24]
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	f003 0307 	and.w	r3, r3, #7
 800ec42:	3302      	adds	r3, #2
 800ec44:	2201      	movs	r2, #1
 800ec46:	fa02 f303 	lsl.w	r3, r2, r3
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ec4e:	fb03 f202 	mul.w	r2, r3, r2
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	7a1b      	ldrb	r3, [r3, #8]
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	f003 030f 	and.w	r3, r3, #15
 800ec60:	2201      	movs	r2, #1
 800ec62:	409a      	lsls	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ec70:	0a52      	lsrs	r2, r2, #9
 800ec72:	fb03 f202 	mul.w	r2, r3, r2
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec80:	655a      	str	r2, [r3, #84]	@ 0x54
 800ec82:	e031      	b.n	800ece8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d11d      	bne.n	800ecc8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec90:	041b      	lsls	r3, r3, #16
 800ec92:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec9a:	0c1b      	lsrs	r3, r3, #16
 800ec9c:	431a      	orrs	r2, r3
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	3301      	adds	r3, #1
 800eca8:	029a      	lsls	r2, r3, #10
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecbc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	655a      	str	r2, [r3, #84]	@ 0x54
 800ecc6:	e00f      	b.n	800ece8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a58      	ldr	r2, [pc, #352]	@ (800ee30 <HAL_SD_GetCardCSD+0x344>)
 800ecce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800ece4:	2301      	movs	r3, #1
 800ece6:	e09d      	b.n	800ee24 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecec:	0b9b      	lsrs	r3, r3, #14
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	f003 0301 	and.w	r3, r3, #1
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecfe:	09db      	lsrs	r3, r3, #7
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed06:	b2da      	uxtb	r2, r3
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed10:	b2db      	uxtb	r3, r3
 800ed12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed16:	b2da      	uxtb	r2, r3
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed20:	0fdb      	lsrs	r3, r3, #31
 800ed22:	b2da      	uxtb	r2, r3
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed2c:	0f5b      	lsrs	r3, r3, #29
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	f003 0303 	and.w	r3, r3, #3
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed3e:	0e9b      	lsrs	r3, r3, #26
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	f003 0307 	and.w	r3, r3, #7
 800ed46:	b2da      	uxtb	r2, r3
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed50:	0d9b      	lsrs	r3, r3, #22
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	f003 030f 	and.w	r3, r3, #15
 800ed58:	b2da      	uxtb	r2, r3
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed62:	0d5b      	lsrs	r3, r3, #21
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	f003 0301 	and.w	r3, r3, #1
 800ed6a:	b2da      	uxtb	r2, r3
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed7e:	0c1b      	lsrs	r3, r3, #16
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	f003 0301 	and.w	r3, r3, #1
 800ed86:	b2da      	uxtb	r2, r3
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed92:	0bdb      	lsrs	r3, r3, #15
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	f003 0301 	and.w	r3, r3, #1
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eda6:	0b9b      	lsrs	r3, r3, #14
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	f003 0301 	and.w	r3, r3, #1
 800edae:	b2da      	uxtb	r2, r3
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edba:	0b5b      	lsrs	r3, r3, #13
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	f003 0301 	and.w	r3, r3, #1
 800edc2:	b2da      	uxtb	r2, r3
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edce:	0b1b      	lsrs	r3, r3, #12
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	f003 0301 	and.w	r3, r3, #1
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ede2:	0a9b      	lsrs	r3, r3, #10
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	f003 0303 	and.w	r3, r3, #3
 800edea:	b2da      	uxtb	r2, r3
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edf6:	0a1b      	lsrs	r3, r3, #8
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	f003 0303 	and.w	r3, r3, #3
 800edfe:	b2da      	uxtb	r2, r3
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee0a:	085b      	lsrs	r3, r3, #1
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	370c      	adds	r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr
 800ee30:	1fe00fff 	.word	0x1fe00fff

0800ee34 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b094      	sub	sp, #80	@ 0x50
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	2b03      	cmp	r3, #3
 800ee4e:	d101      	bne.n	800ee54 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ee50:	2301      	movs	r3, #1
 800ee52:	e0a7      	b.n	800efa4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ee54:	f107 0308 	add.w	r3, r7, #8
 800ee58:	4619      	mov	r1, r3
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 fb62 	bl	800f524 <SD_SendSDStatus>
 800ee60:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d011      	beq.n	800ee8c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a4f      	ldr	r2, [pc, #316]	@ (800efac <HAL_SD_GetCardStatus+0x178>)
 800ee6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee76:	431a      	orrs	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2201      	movs	r2, #1
 800ee80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ee84:	2301      	movs	r3, #1
 800ee86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ee8a:	e070      	b.n	800ef6e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	099b      	lsrs	r3, r3, #6
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	f003 0303 	and.w	r3, r3, #3
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	095b      	lsrs	r3, r3, #5
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	f003 0301 	and.w	r3, r3, #1
 800eea6:	b2da      	uxtb	r2, r3
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	0a1b      	lsrs	r3, r3, #8
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800eeb6:	b29a      	uxth	r2, r3
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	0e1b      	lsrs	r3, r3, #24
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	4313      	orrs	r3, r2
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	061a      	lsls	r2, r3, #24
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	021b      	lsls	r3, r3, #8
 800eece:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800eed2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	0a1b      	lsrs	r3, r3, #8
 800eed8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eedc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	0e1b      	lsrs	r3, r3, #24
 800eee2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	0a1b      	lsrs	r3, r3, #8
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	0d1b      	lsrs	r3, r3, #20
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	f003 030f 	and.w	r3, r3, #15
 800ef04:	b2da      	uxtb	r2, r3
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	0c1b      	lsrs	r3, r3, #16
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ef14:	b29a      	uxth	r2, r3
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	0a9b      	lsrs	r3, r3, #10
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ef30:	b2da      	uxtb	r2, r3
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	0a1b      	lsrs	r3, r3, #8
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	f003 0303 	and.w	r3, r3, #3
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	091b      	lsrs	r3, r3, #4
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	f003 030f 	and.w	r3, r3, #15
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	f003 030f 	and.w	r3, r3, #15
 800ef5e:	b2da      	uxtb	r2, r3
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	0e1b      	lsrs	r3, r3, #24
 800ef68:	b2da      	uxtb	r2, r3
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ef76:	4618      	mov	r0, r3
 800ef78:	f004 fcc2 	bl	8013900 <SDMMC_CmdBlockLength>
 800ef7c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00d      	beq.n	800efa0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a08      	ldr	r2, [pc, #32]	@ (800efac <HAL_SD_GetCardStatus+0x178>)
 800ef8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef90:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2201      	movs	r2, #1
 800ef96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800efa0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3750      	adds	r7, #80	@ 0x50
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	1fe00fff 	.word	0x1fe00fff

0800efb0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f008:	b590      	push	{r4, r7, lr}
 800f00a:	b08d      	sub	sp, #52	@ 0x34
 800f00c:	af02      	add	r7, sp, #8
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2203      	movs	r2, #3
 800f01c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f024:	2b03      	cmp	r3, #3
 800f026:	d02e      	beq.n	800f086 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f02e:	d106      	bne.n	800f03e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f034:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	635a      	str	r2, [r3, #52]	@ 0x34
 800f03c:	e029      	b.n	800f092 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f044:	d10a      	bne.n	800f05c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 fb64 	bl	800f714 <SD_WideBus_Enable>
 800f04c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f052:	6a3b      	ldr	r3, [r7, #32]
 800f054:	431a      	orrs	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	635a      	str	r2, [r3, #52]	@ 0x34
 800f05a:	e01a      	b.n	800f092 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d10a      	bne.n	800f078 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 fba1 	bl	800f7aa <SD_WideBus_Disable>
 800f068:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f06e:	6a3b      	ldr	r3, [r7, #32]
 800f070:	431a      	orrs	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	635a      	str	r2, [r3, #52]	@ 0x34
 800f076:	e00c      	b.n	800f092 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f07c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	635a      	str	r2, [r3, #52]	@ 0x34
 800f084:	e005      	b.n	800f092 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f08a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f096:	2b00      	cmp	r3, #0
 800f098:	d007      	beq.n	800f0aa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4a5f      	ldr	r2, [pc, #380]	@ (800f21c <HAL_SD_ConfigWideBusOperation+0x214>)
 800f0a0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f0a8:	e096      	b.n	800f1d8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f0aa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800f0ae:	f04f 0100 	mov.w	r1, #0
 800f0b2:	f7fd fea3 	bl	800cdfc <HAL_RCCEx_GetPeriphCLKFreq>
 800f0b6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f000 8083 	beq.w	800f1c6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	689b      	ldr	r3, [r3, #8]
 800f0ca:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	691b      	ldr	r3, [r3, #16]
 800f0d4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	695a      	ldr	r2, [r3, #20]
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	4950      	ldr	r1, [pc, #320]	@ (800f220 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f0de:	fba1 1303 	umull	r1, r3, r1, r3
 800f0e2:	0e1b      	lsrs	r3, r3, #24
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d303      	bcc.n	800f0f0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	61bb      	str	r3, [r7, #24]
 800f0ee:	e05a      	b.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0f8:	d103      	bne.n	800f102 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	695b      	ldr	r3, [r3, #20]
 800f0fe:	61bb      	str	r3, [r7, #24]
 800f100:	e051      	b.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f10a:	d126      	bne.n	800f15a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	695b      	ldr	r3, [r3, #20]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10e      	bne.n	800f132 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	4a43      	ldr	r2, [pc, #268]	@ (800f224 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d906      	bls.n	800f12a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	4a40      	ldr	r2, [pc, #256]	@ (800f220 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f120:	fba2 2303 	umull	r2, r3, r2, r3
 800f124:	0e5b      	lsrs	r3, r3, #25
 800f126:	61bb      	str	r3, [r7, #24]
 800f128:	e03d      	b.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	695b      	ldr	r3, [r3, #20]
 800f12e:	61bb      	str	r3, [r7, #24]
 800f130:	e039      	b.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	695b      	ldr	r3, [r3, #20]
 800f136:	005b      	lsls	r3, r3, #1
 800f138:	69fa      	ldr	r2, [r7, #28]
 800f13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f13e:	4a39      	ldr	r2, [pc, #228]	@ (800f224 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d906      	bls.n	800f152 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	4a36      	ldr	r2, [pc, #216]	@ (800f220 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f148:	fba2 2303 	umull	r2, r3, r2, r3
 800f14c:	0e5b      	lsrs	r3, r3, #25
 800f14e:	61bb      	str	r3, [r7, #24]
 800f150:	e029      	b.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	695b      	ldr	r3, [r3, #20]
 800f156:	61bb      	str	r3, [r7, #24]
 800f158:	e025      	b.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	695b      	ldr	r3, [r3, #20]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10e      	bne.n	800f180 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	4a30      	ldr	r2, [pc, #192]	@ (800f228 <HAL_SD_ConfigWideBusOperation+0x220>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d906      	bls.n	800f178 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	4a2c      	ldr	r2, [pc, #176]	@ (800f220 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f16e:	fba2 2303 	umull	r2, r3, r2, r3
 800f172:	0e1b      	lsrs	r3, r3, #24
 800f174:	61bb      	str	r3, [r7, #24]
 800f176:	e016      	b.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	61bb      	str	r3, [r7, #24]
 800f17e:	e012      	b.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	695b      	ldr	r3, [r3, #20]
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	69fa      	ldr	r2, [r7, #28]
 800f188:	fbb2 f3f3 	udiv	r3, r2, r3
 800f18c:	4a26      	ldr	r2, [pc, #152]	@ (800f228 <HAL_SD_ConfigWideBusOperation+0x220>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d906      	bls.n	800f1a0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	4a22      	ldr	r2, [pc, #136]	@ (800f220 <HAL_SD_ConfigWideBusOperation+0x218>)
 800f196:	fba2 2303 	umull	r2, r3, r2, r3
 800f19a:	0e1b      	lsrs	r3, r3, #24
 800f19c:	61bb      	str	r3, [r7, #24]
 800f19e:	e002      	b.n	800f1a6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	695b      	ldr	r3, [r3, #20]
 800f1a4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681c      	ldr	r4, [r3, #0]
 800f1aa:	466a      	mov	r2, sp
 800f1ac:	f107 0314 	add.w	r3, r7, #20
 800f1b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f1b4:	e882 0003 	stmia.w	r2, {r0, r1}
 800f1b8:	f107 0308 	add.w	r3, r7, #8
 800f1bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f004 fac0 	bl	8013744 <SDMMC_Init>
 800f1c4:	e008      	b.n	800f1d8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f004 fb8d 	bl	8013900 <SDMMC_CmdBlockLength>
 800f1e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00c      	beq.n	800f208 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	4a0a      	ldr	r2, [pc, #40]	@ (800f21c <HAL_SD_ConfigWideBusOperation+0x214>)
 800f1f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	431a      	orrs	r2, r3
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2201      	movs	r2, #1
 800f20c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800f210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f214:	4618      	mov	r0, r3
 800f216:	372c      	adds	r7, #44	@ 0x2c
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd90      	pop	{r4, r7, pc}
 800f21c:	1fe00fff 	.word	0x1fe00fff
 800f220:	55e63b89 	.word	0x55e63b89
 800f224:	02faf080 	.word	0x02faf080
 800f228:	017d7840 	.word	0x017d7840

0800f22c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b086      	sub	sp, #24
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f234:	2300      	movs	r3, #0
 800f236:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f238:	f107 030c 	add.w	r3, r7, #12
 800f23c:	4619      	mov	r1, r3
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 fa40 	bl	800f6c4 <SD_SendStatus>
 800f244:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d005      	beq.n	800f258 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	431a      	orrs	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	0a5b      	lsrs	r3, r3, #9
 800f25c:	f003 030f 	and.w	r3, r3, #15
 800f260:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f262:	693b      	ldr	r3, [r7, #16]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b090      	sub	sp, #64	@ 0x40
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800f274:	2300      	movs	r3, #0
 800f276:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800f278:	f7f5 fa76 	bl	8004768 <HAL_GetTick>
 800f27c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4618      	mov	r0, r3
 800f284:	f004 fab7 	bl	80137f6 <SDMMC_GetPowerState>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d102      	bne.n	800f294 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f28e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800f292:	e0b5      	b.n	800f400 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f298:	2b03      	cmp	r3, #3
 800f29a:	d02e      	beq.n	800f2fa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f004 fd02 	bl	8013caa <SDMMC_CmdSendCID>
 800f2a6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d001      	beq.n	800f2b2 <SD_InitCard+0x46>
    {
      return errorstate;
 800f2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2b0:	e0a6      	b.n	800f400 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2100      	movs	r1, #0
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f004 fae2 	bl	8013882 <SDMMC_GetResponse>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2104      	movs	r1, #4
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f004 fad9 	bl	8013882 <SDMMC_GetResponse>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2108      	movs	r1, #8
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f004 fad0 	bl	8013882 <SDMMC_GetResponse>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	210c      	movs	r1, #12
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f004 fac7 	bl	8013882 <SDMMC_GetResponse>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d01d      	beq.n	800f33e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800f302:	e019      	b.n	800f338 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f107 020a 	add.w	r2, r7, #10
 800f30c:	4611      	mov	r1, r2
 800f30e:	4618      	mov	r0, r3
 800f310:	f004 fd0a 	bl	8013d28 <SDMMC_CmdSetRelAdd>
 800f314:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800f316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d001      	beq.n	800f320 <SD_InitCard+0xb4>
      {
        return errorstate;
 800f31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31e:	e06f      	b.n	800f400 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800f320:	f7f5 fa22 	bl	8004768 <HAL_GetTick>
 800f324:	4602      	mov	r2, r0
 800f326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f328:	1ad3      	subs	r3, r2, r3
 800f32a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800f32e:	4293      	cmp	r3, r2
 800f330:	d902      	bls.n	800f338 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f332:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f336:	e063      	b.n	800f400 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f338:	897b      	ldrh	r3, [r7, #10]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d0e2      	beq.n	800f304 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f342:	2b03      	cmp	r3, #3
 800f344:	d036      	beq.n	800f3b4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f346:	897b      	ldrh	r3, [r7, #10]
 800f348:	461a      	mov	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f356:	041b      	lsls	r3, r3, #16
 800f358:	4619      	mov	r1, r3
 800f35a:	4610      	mov	r0, r2
 800f35c:	f004 fcc4 	bl	8013ce8 <SDMMC_CmdSendCSD>
 800f360:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <SD_InitCard+0x100>
    {
      return errorstate;
 800f368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f36a:	e049      	b.n	800f400 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2100      	movs	r1, #0
 800f372:	4618      	mov	r0, r3
 800f374:	f004 fa85 	bl	8013882 <SDMMC_GetResponse>
 800f378:	4602      	mov	r2, r0
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2104      	movs	r1, #4
 800f384:	4618      	mov	r0, r3
 800f386:	f004 fa7c 	bl	8013882 <SDMMC_GetResponse>
 800f38a:	4602      	mov	r2, r0
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2108      	movs	r1, #8
 800f396:	4618      	mov	r0, r3
 800f398:	f004 fa73 	bl	8013882 <SDMMC_GetResponse>
 800f39c:	4602      	mov	r2, r0
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	210c      	movs	r1, #12
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f004 fa6a 	bl	8013882 <SDMMC_GetResponse>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2104      	movs	r1, #4
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f004 fa61 	bl	8013882 <SDMMC_GetResponse>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	0d1a      	lsrs	r2, r3, #20
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f3c8:	f107 030c 	add.w	r3, r7, #12
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff fb8c 	bl	800eaec <HAL_SD_GetCardCSD>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d002      	beq.n	800f3e0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f3da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800f3de:	e00f      	b.n	800f400 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681a      	ldr	r2, [r3, #0]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3e8:	041b      	lsls	r3, r3, #16
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	f004 fb73 	bl	8013ad8 <SDMMC_CmdSelDesel>
 800f3f2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d001      	beq.n	800f3fe <SD_InitCard+0x192>
  {
    return errorstate;
 800f3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3fc:	e000      	b.n	800f400 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3740      	adds	r7, #64	@ 0x40
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f410:	2300      	movs	r3, #0
 800f412:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f414:	2300      	movs	r3, #0
 800f416:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f418:	2300      	movs	r3, #0
 800f41a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4618      	mov	r0, r3
 800f422:	f004 fb7c 	bl	8013b1e <SDMMC_CmdGoIdleState>
 800f426:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d001      	beq.n	800f432 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	e072      	b.n	800f518 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4618      	mov	r0, r3
 800f438:	f004 fb8f 	bl	8013b5a <SDMMC_CmdOperCond>
 800f43c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f444:	d10d      	bne.n	800f462 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4618      	mov	r0, r3
 800f452:	f004 fb64 	bl	8013b1e <SDMMC_CmdGoIdleState>
 800f456:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d004      	beq.n	800f468 <SD_PowerON+0x60>
    {
      return errorstate;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	e05a      	b.n	800f518 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2201      	movs	r2, #1
 800f466:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d137      	bne.n	800f4e0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2100      	movs	r1, #0
 800f476:	4618      	mov	r0, r3
 800f478:	f004 fb8f 	bl	8013b9a <SDMMC_CmdAppCommand>
 800f47c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d02d      	beq.n	800f4e0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f484:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800f488:	e046      	b.n	800f518 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2100      	movs	r1, #0
 800f490:	4618      	mov	r0, r3
 800f492:	f004 fb82 	bl	8013b9a <SDMMC_CmdAppCommand>
 800f496:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d001      	beq.n	800f4a2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	e03a      	b.n	800f518 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	491e      	ldr	r1, [pc, #120]	@ (800f520 <SD_PowerON+0x118>)
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f004 fb99 	bl	8013be0 <SDMMC_CmdAppOperCommand>
 800f4ae:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d002      	beq.n	800f4bc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f4b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800f4ba:	e02d      	b.n	800f518 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2100      	movs	r1, #0
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f004 f9dd 	bl	8013882 <SDMMC_GetResponse>
 800f4c8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	0fdb      	lsrs	r3, r3, #31
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d101      	bne.n	800f4d6 <SD_PowerON+0xce>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	e000      	b.n	800f4d8 <SD_PowerON+0xd0>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	613b      	str	r3, [r7, #16]

    count++;
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d802      	bhi.n	800f4f0 <SD_PowerON+0xe8>
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d0cc      	beq.n	800f48a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d902      	bls.n	800f500 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f4fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f4fe:	e00b      	b.n	800f518 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d002      	beq.n	800f516 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f516:	2300      	movs	r3, #0
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3718      	adds	r7, #24
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	c1100000 	.word	0xc1100000

0800f524 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b08c      	sub	sp, #48	@ 0x30
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f52e:	f7f5 f91b 	bl	8004768 <HAL_GetTick>
 800f532:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2100      	movs	r1, #0
 800f53e:	4618      	mov	r0, r3
 800f540:	f004 f99f 	bl	8013882 <SDMMC_GetResponse>
 800f544:	4603      	mov	r3, r0
 800f546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f54a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f54e:	d102      	bne.n	800f556 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f550:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f554:	e0b0      	b.n	800f6b8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2140      	movs	r1, #64	@ 0x40
 800f55c:	4618      	mov	r0, r3
 800f55e:	f004 f9cf 	bl	8013900 <SDMMC_CmdBlockLength>
 800f562:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f564:	6a3b      	ldr	r3, [r7, #32]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d005      	beq.n	800f576 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800f572:	6a3b      	ldr	r3, [r7, #32]
 800f574:	e0a0      	b.n	800f6b8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f57e:	041b      	lsls	r3, r3, #16
 800f580:	4619      	mov	r1, r3
 800f582:	4610      	mov	r0, r2
 800f584:	f004 fb09 	bl	8013b9a <SDMMC_CmdAppCommand>
 800f588:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f58a:	6a3b      	ldr	r3, [r7, #32]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d005      	beq.n	800f59c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800f598:	6a3b      	ldr	r3, [r7, #32]
 800f59a:	e08d      	b.n	800f6b8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f59c:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f5a2:	2340      	movs	r3, #64	@ 0x40
 800f5a4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f5a6:	2360      	movs	r3, #96	@ 0x60
 800f5a8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f5aa:	2302      	movs	r3, #2
 800f5ac:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f107 0208 	add.w	r2, r7, #8
 800f5be:	4611      	mov	r1, r2
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f004 f971 	bl	80138a8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f004 fbf1 	bl	8013db2 <SDMMC_CmdStatusRegister>
 800f5d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5d2:	6a3b      	ldr	r3, [r7, #32]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d02b      	beq.n	800f630 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800f5e0:	6a3b      	ldr	r3, [r7, #32]
 800f5e2:	e069      	b.n	800f6b8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d013      	beq.n	800f61a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5f6:	e00d      	b.n	800f614 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f004 f8cb 	bl	8013798 <SDMMC_ReadFIFO>
 800f602:	4602      	mov	r2, r0
 800f604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f606:	601a      	str	r2, [r3, #0]
        pData++;
 800f608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f60a:	3304      	adds	r3, #4
 800f60c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800f60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f610:	3301      	adds	r3, #1
 800f612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f616:	2b07      	cmp	r3, #7
 800f618:	d9ee      	bls.n	800f5f8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f61a:	f7f5 f8a5 	bl	8004768 <HAL_GetTick>
 800f61e:	4602      	mov	r2, r0
 800f620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f628:	d102      	bne.n	800f630 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f62a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f62e:	e043      	b.n	800f6b8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f636:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d0d2      	beq.n	800f5e4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f644:	f003 0308 	and.w	r3, r3, #8
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d001      	beq.n	800f650 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f64c:	2308      	movs	r3, #8
 800f64e:	e033      	b.n	800f6b8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f656:	f003 0302 	and.w	r3, r3, #2
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f65e:	2302      	movs	r3, #2
 800f660:	e02a      	b.n	800f6b8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f668:	f003 0320 	and.w	r3, r3, #32
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d017      	beq.n	800f6a0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f670:	2320      	movs	r3, #32
 800f672:	e021      	b.n	800f6b8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4618      	mov	r0, r3
 800f67a:	f004 f88d 	bl	8013798 <SDMMC_ReadFIFO>
 800f67e:	4602      	mov	r2, r0
 800f680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f682:	601a      	str	r2, [r3, #0]
    pData++;
 800f684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f686:	3304      	adds	r3, #4
 800f688:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f68a:	f7f5 f86d 	bl	8004768 <HAL_GetTick>
 800f68e:	4602      	mov	r2, r0
 800f690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f692:	1ad3      	subs	r3, r2, r3
 800f694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f698:	d102      	bne.n	800f6a0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f69a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f69e:	e00b      	b.n	800f6b8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1e2      	bne.n	800f674 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4a03      	ldr	r2, [pc, #12]	@ (800f6c0 <SD_SendSDStatus+0x19c>)
 800f6b4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800f6b6:	2300      	movs	r3, #0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3730      	adds	r7, #48	@ 0x30
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	18000f3a 	.word	0x18000f3a

0800f6c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d102      	bne.n	800f6da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f6d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f6d8:	e018      	b.n	800f70c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6e2:	041b      	lsls	r3, r3, #16
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	4610      	mov	r0, r2
 800f6e8:	f004 fb40 	bl	8013d6c <SDMMC_CmdSendStatus>
 800f6ec:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d001      	beq.n	800f6f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	e009      	b.n	800f70c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	4618      	mov	r0, r3
 800f700:	f004 f8bf 	bl	8013882 <SDMMC_GetResponse>
 800f704:	4602      	mov	r2, r0
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f70a:	2300      	movs	r3, #0
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b086      	sub	sp, #24
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f71c:	2300      	movs	r3, #0
 800f71e:	60fb      	str	r3, [r7, #12]
 800f720:	2300      	movs	r3, #0
 800f722:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2100      	movs	r1, #0
 800f72a:	4618      	mov	r0, r3
 800f72c:	f004 f8a9 	bl	8013882 <SDMMC_GetResponse>
 800f730:	4603      	mov	r3, r0
 800f732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f736:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f73a:	d102      	bne.n	800f742 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f73c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f740:	e02f      	b.n	800f7a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f742:	f107 030c 	add.w	r3, r7, #12
 800f746:	4619      	mov	r1, r3
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 f879 	bl	800f840 <SD_FindSCR>
 800f74e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d001      	beq.n	800f75a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	e023      	b.n	800f7a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f760:	2b00      	cmp	r3, #0
 800f762:	d01c      	beq.n	800f79e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f76c:	041b      	lsls	r3, r3, #16
 800f76e:	4619      	mov	r1, r3
 800f770:	4610      	mov	r0, r2
 800f772:	f004 fa12 	bl	8013b9a <SDMMC_CmdAppCommand>
 800f776:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	e00f      	b.n	800f7a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2102      	movs	r1, #2
 800f788:	4618      	mov	r0, r3
 800f78a:	f004 fa49 	bl	8013c20 <SDMMC_CmdBusWidth>
 800f78e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d001      	beq.n	800f79a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	e003      	b.n	800f7a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f79a:	2300      	movs	r3, #0
 800f79c:	e001      	b.n	800f7a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f79e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3718      	adds	r7, #24
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b086      	sub	sp, #24
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	60fb      	str	r3, [r7, #12]
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2100      	movs	r1, #0
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f004 f85e 	bl	8013882 <SDMMC_GetResponse>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f7cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f7d0:	d102      	bne.n	800f7d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f7d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f7d6:	e02f      	b.n	800f838 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f7d8:	f107 030c 	add.w	r3, r7, #12
 800f7dc:	4619      	mov	r1, r3
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 f82e 	bl	800f840 <SD_FindSCR>
 800f7e4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	e023      	b.n	800f838 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d01c      	beq.n	800f834 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681a      	ldr	r2, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f802:	041b      	lsls	r3, r3, #16
 800f804:	4619      	mov	r1, r3
 800f806:	4610      	mov	r0, r2
 800f808:	f004 f9c7 	bl	8013b9a <SDMMC_CmdAppCommand>
 800f80c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	e00f      	b.n	800f838 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2100      	movs	r1, #0
 800f81e:	4618      	mov	r0, r3
 800f820:	f004 f9fe 	bl	8013c20 <SDMMC_CmdBusWidth>
 800f824:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d001      	beq.n	800f830 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	e003      	b.n	800f838 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f830:	2300      	movs	r3, #0
 800f832:	e001      	b.n	800f838 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f834:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3718      	adds	r7, #24
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b08e      	sub	sp, #56	@ 0x38
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f84a:	f7f4 ff8d 	bl	8004768 <HAL_GetTick>
 800f84e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800f850:	2300      	movs	r3, #0
 800f852:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f854:	2300      	movs	r3, #0
 800f856:	60bb      	str	r3, [r7, #8]
 800f858:	2300      	movs	r3, #0
 800f85a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2108      	movs	r1, #8
 800f866:	4618      	mov	r0, r3
 800f868:	f004 f84a 	bl	8013900 <SDMMC_CmdBlockLength>
 800f86c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f870:	2b00      	cmp	r3, #0
 800f872:	d001      	beq.n	800f878 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f876:	e0ad      	b.n	800f9d4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f880:	041b      	lsls	r3, r3, #16
 800f882:	4619      	mov	r1, r3
 800f884:	4610      	mov	r0, r2
 800f886:	f004 f988 	bl	8013b9a <SDMMC_CmdAppCommand>
 800f88a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f894:	e09e      	b.n	800f9d4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f896:	f04f 33ff 	mov.w	r3, #4294967295
 800f89a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f89c:	2308      	movs	r3, #8
 800f89e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f8a0:	2330      	movs	r3, #48	@ 0x30
 800f8a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f8a4:	2302      	movs	r3, #2
 800f8a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f107 0210 	add.w	r2, r7, #16
 800f8b8:	4611      	mov	r1, r2
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f003 fff4 	bl	80138a8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f004 f9ce 	bl	8013c66 <SDMMC_CmdSendSCR>
 800f8ca:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d027      	beq.n	800f922 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d4:	e07e      	b.n	800f9d4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d113      	bne.n	800f90c <SD_FindSCR+0xcc>
 800f8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d110      	bne.n	800f90c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f003 ff52 	bl	8013798 <SDMMC_ReadFIFO>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f003 ff4b 	bl	8013798 <SDMMC_ReadFIFO>
 800f902:	4603      	mov	r3, r0
 800f904:	60fb      	str	r3, [r7, #12]
      index++;
 800f906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f908:	3301      	adds	r3, #1
 800f90a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f90c:	f7f4 ff2c 	bl	8004768 <HAL_GetTick>
 800f910:	4602      	mov	r2, r0
 800f912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f91a:	d102      	bne.n	800f922 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f91c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f920:	e058      	b.n	800f9d4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f928:	f240 532a 	movw	r3, #1322	@ 0x52a
 800f92c:	4013      	ands	r3, r2
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d0d1      	beq.n	800f8d6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f938:	f003 0308 	and.w	r3, r3, #8
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d005      	beq.n	800f94c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2208      	movs	r2, #8
 800f946:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f948:	2308      	movs	r3, #8
 800f94a:	e043      	b.n	800f9d4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f952:	f003 0302 	and.w	r3, r3, #2
 800f956:	2b00      	cmp	r3, #0
 800f958:	d005      	beq.n	800f966 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2202      	movs	r2, #2
 800f960:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f962:	2302      	movs	r3, #2
 800f964:	e036      	b.n	800f9d4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f96c:	f003 0320 	and.w	r3, r3, #32
 800f970:	2b00      	cmp	r3, #0
 800f972:	d005      	beq.n	800f980 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2220      	movs	r2, #32
 800f97a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f97c:	2320      	movs	r3, #32
 800f97e:	e029      	b.n	800f9d4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a15      	ldr	r2, [pc, #84]	@ (800f9dc <SD_FindSCR+0x19c>)
 800f986:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	061a      	lsls	r2, r3, #24
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	021b      	lsls	r3, r3, #8
 800f990:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f994:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	0a1b      	lsrs	r3, r3, #8
 800f99a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f99e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	0e1b      	lsrs	r3, r3, #24
 800f9a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a8:	601a      	str	r2, [r3, #0]
    scr++;
 800f9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ac:	3304      	adds	r3, #4
 800f9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	061a      	lsls	r2, r3, #24
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	021b      	lsls	r3, r3, #8
 800f9b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f9bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	0a1b      	lsrs	r3, r3, #8
 800f9c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f9c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	0e1b      	lsrs	r3, r3, #24
 800f9cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f9d2:	2300      	movs	r3, #0
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3738      	adds	r7, #56	@ 0x38
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	18000f3a 	.word	0x18000f3a

0800f9e0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b086      	sub	sp, #24
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9ec:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9f2:	2b1f      	cmp	r3, #31
 800f9f4:	d936      	bls.n	800fa64 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	617b      	str	r3, [r7, #20]
 800f9fa:	e027      	b.n	800fa4c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4618      	mov	r0, r3
 800fa02:	f003 fec9 	bl	8013798 <SDMMC_ReadFIFO>
 800fa06:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	b2da      	uxtb	r2, r3
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	3301      	adds	r3, #1
 800fa14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	0a1b      	lsrs	r3, r3, #8
 800fa1a:	b2da      	uxtb	r2, r3
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	3301      	adds	r3, #1
 800fa24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	0c1b      	lsrs	r3, r3, #16
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	3301      	adds	r3, #1
 800fa34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	0e1b      	lsrs	r3, r3, #24
 800fa3a:	b2da      	uxtb	r2, r3
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	3301      	adds	r3, #1
 800fa44:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	617b      	str	r3, [r7, #20]
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	2b07      	cmp	r3, #7
 800fa50:	d9d4      	bls.n	800f9fc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa5c:	f1a3 0220 	sub.w	r2, r3, #32
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800fa64:	bf00      	nop
 800fa66:	3718      	adds	r7, #24
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b086      	sub	sp, #24
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	69db      	ldr	r3, [r3, #28]
 800fa78:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6a1b      	ldr	r3, [r3, #32]
 800fa7e:	2b1f      	cmp	r3, #31
 800fa80:	d93a      	bls.n	800faf8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800fa82:	2300      	movs	r3, #0
 800fa84:	617b      	str	r3, [r7, #20]
 800fa86:	e02b      	b.n	800fae0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	3301      	adds	r3, #1
 800fa92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	021a      	lsls	r2, r3, #8
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	3301      	adds	r3, #1
 800faa4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	041a      	lsls	r2, r3, #16
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4313      	orrs	r3, r2
 800fab0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	3301      	adds	r3, #1
 800fab6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	061a      	lsls	r2, r3, #24
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	4313      	orrs	r3, r2
 800fac2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	3301      	adds	r3, #1
 800fac8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f107 020c 	add.w	r2, r7, #12
 800fad2:	4611      	mov	r1, r2
 800fad4:	4618      	mov	r0, r3
 800fad6:	f003 fe6c 	bl	80137b2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	3301      	adds	r3, #1
 800fade:	617b      	str	r3, [r7, #20]
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	2b07      	cmp	r3, #7
 800fae4:	d9d0      	bls.n	800fa88 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	693a      	ldr	r2, [r7, #16]
 800faea:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6a1b      	ldr	r3, [r3, #32]
 800faf0:	f1a3 0220 	sub.w	r2, r3, #32
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	621a      	str	r2, [r3, #32]
  }
}
 800faf8:	bf00      	nop
 800fafa:	3718      	adds	r7, #24
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fb08:	bf00      	nop
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fb1c:	bf00      	nop
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fb30:	bf00      	nop
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fb44:	bf00      	nop
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d101      	bne.n	800fb62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fb5e:	2301      	movs	r3, #1
 800fb60:	e10f      	b.n	800fd82 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2200      	movs	r2, #0
 800fb66:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4a87      	ldr	r2, [pc, #540]	@ (800fd8c <HAL_SPI_Init+0x23c>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d00f      	beq.n	800fb92 <HAL_SPI_Init+0x42>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4a86      	ldr	r2, [pc, #536]	@ (800fd90 <HAL_SPI_Init+0x240>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d00a      	beq.n	800fb92 <HAL_SPI_Init+0x42>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a84      	ldr	r2, [pc, #528]	@ (800fd94 <HAL_SPI_Init+0x244>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d005      	beq.n	800fb92 <HAL_SPI_Init+0x42>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	2b0f      	cmp	r3, #15
 800fb8c:	d901      	bls.n	800fb92 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	e0f7      	b.n	800fd82 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f001 f968 	bl	8010e68 <SPI_GetPacketSize>
 800fb98:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4a7b      	ldr	r2, [pc, #492]	@ (800fd8c <HAL_SPI_Init+0x23c>)
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d00c      	beq.n	800fbbe <HAL_SPI_Init+0x6e>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4a79      	ldr	r2, [pc, #484]	@ (800fd90 <HAL_SPI_Init+0x240>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d007      	beq.n	800fbbe <HAL_SPI_Init+0x6e>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4a78      	ldr	r2, [pc, #480]	@ (800fd94 <HAL_SPI_Init+0x244>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d002      	beq.n	800fbbe <HAL_SPI_Init+0x6e>
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2b08      	cmp	r3, #8
 800fbbc:	d811      	bhi.n	800fbe2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fbc2:	4a72      	ldr	r2, [pc, #456]	@ (800fd8c <HAL_SPI_Init+0x23c>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d009      	beq.n	800fbdc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a70      	ldr	r2, [pc, #448]	@ (800fd90 <HAL_SPI_Init+0x240>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d004      	beq.n	800fbdc <HAL_SPI_Init+0x8c>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	4a6f      	ldr	r2, [pc, #444]	@ (800fd94 <HAL_SPI_Init+0x244>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d104      	bne.n	800fbe6 <HAL_SPI_Init+0x96>
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2b10      	cmp	r3, #16
 800fbe0:	d901      	bls.n	800fbe6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	e0cd      	b.n	800fd82 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d106      	bne.n	800fc00 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f7f4 f9b0 	bl	8003f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2202      	movs	r2, #2
 800fc04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f022 0201 	bic.w	r2, r2, #1
 800fc16:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800fc22:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	699b      	ldr	r3, [r3, #24]
 800fc28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc2c:	d119      	bne.n	800fc62 <HAL_SPI_Init+0x112>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fc36:	d103      	bne.n	800fc40 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d008      	beq.n	800fc52 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d10c      	bne.n	800fc62 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fc4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc50:	d107      	bne.n	800fc62 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800fc60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00f      	beq.n	800fc8e <HAL_SPI_Init+0x13e>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	2b06      	cmp	r3, #6
 800fc74:	d90b      	bls.n	800fc8e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	430a      	orrs	r2, r1
 800fc8a:	601a      	str	r2, [r3, #0]
 800fc8c:	e007      	b.n	800fc9e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fc9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	69da      	ldr	r2, [r3, #28]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fca6:	431a      	orrs	r2, r3
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	431a      	orrs	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcb0:	ea42 0103 	orr.w	r1, r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	68da      	ldr	r2, [r3, #12]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	430a      	orrs	r2, r1
 800fcbe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcc8:	431a      	orrs	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcce:	431a      	orrs	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	431a      	orrs	r2, r3
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	691b      	ldr	r3, [r3, #16]
 800fcda:	431a      	orrs	r2, r3
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	695b      	ldr	r3, [r3, #20]
 800fce0:	431a      	orrs	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6a1b      	ldr	r3, [r3, #32]
 800fce6:	431a      	orrs	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	431a      	orrs	r2, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fcf2:	431a      	orrs	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	689b      	ldr	r3, [r3, #8]
 800fcf8:	431a      	orrs	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fcfe:	ea42 0103 	orr.w	r1, r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	430a      	orrs	r2, r1
 800fd0c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d113      	bne.n	800fd3e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fd28:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fd3c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f022 0201 	bic.w	r2, r2, #1
 800fd4c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00a      	beq.n	800fd70 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	430a      	orrs	r2, r1
 800fd6e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	40013000 	.word	0x40013000
 800fd90:	40003800 	.word	0x40003800
 800fd94:	40003c00 	.word	0x40003c00

0800fd98 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b088      	sub	sp, #32
 800fd9c:	af02      	add	r7, sp, #8
 800fd9e:	60f8      	str	r0, [r7, #12]
 800fda0:	60b9      	str	r1, [r7, #8]
 800fda2:	603b      	str	r3, [r7, #0]
 800fda4:	4613      	mov	r3, r2
 800fda6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	3320      	adds	r3, #32
 800fdae:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fdb0:	f7f4 fcda 	bl	8004768 <HAL_GetTick>
 800fdb4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d001      	beq.n	800fdc6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800fdc2:	2302      	movs	r3, #2
 800fdc4:	e1d1      	b.n	801016a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d002      	beq.n	800fdd2 <HAL_SPI_Transmit+0x3a>
 800fdcc:	88fb      	ldrh	r3, [r7, #6]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d101      	bne.n	800fdd6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e1c9      	b.n	801016a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d101      	bne.n	800fde4 <HAL_SPI_Transmit+0x4c>
 800fde0:	2302      	movs	r3, #2
 800fde2:	e1c2      	b.n	801016a <HAL_SPI_Transmit+0x3d2>
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2201      	movs	r2, #1
 800fde8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2203      	movs	r2, #3
 800fdf0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	68ba      	ldr	r2, [r7, #8]
 800fe00:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	88fa      	ldrh	r2, [r7, #6]
 800fe06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	88fa      	ldrh	r2, [r7, #6]
 800fe0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2200      	movs	r2, #0
 800fe16:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2200      	movs	r2, #0
 800fe24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2200      	movs	r2, #0
 800fe32:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	689b      	ldr	r3, [r3, #8]
 800fe38:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800fe3c:	d108      	bne.n	800fe50 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	e009      	b.n	800fe64 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68db      	ldr	r3, [r3, #12]
 800fe56:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800fe62:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	685a      	ldr	r2, [r3, #4]
 800fe6a:	4b96      	ldr	r3, [pc, #600]	@ (80100c4 <HAL_SPI_Transmit+0x32c>)
 800fe6c:	4013      	ands	r3, r2
 800fe6e:	88f9      	ldrh	r1, [r7, #6]
 800fe70:	68fa      	ldr	r2, [r7, #12]
 800fe72:	6812      	ldr	r2, [r2, #0]
 800fe74:	430b      	orrs	r3, r1
 800fe76:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	681a      	ldr	r2, [r3, #0]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f042 0201 	orr.w	r2, r2, #1
 800fe86:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fe90:	d107      	bne.n	800fea2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fea0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	2b0f      	cmp	r3, #15
 800fea8:	d947      	bls.n	800ff3a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800feaa:	e03f      	b.n	800ff2c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	695b      	ldr	r3, [r3, #20]
 800feb2:	f003 0302 	and.w	r3, r3, #2
 800feb6:	2b02      	cmp	r3, #2
 800feb8:	d114      	bne.n	800fee4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	6812      	ldr	r2, [r2, #0]
 800fec4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800feca:	1d1a      	adds	r2, r3, #4
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	3b01      	subs	r3, #1
 800feda:	b29a      	uxth	r2, r3
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800fee2:	e023      	b.n	800ff2c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fee4:	f7f4 fc40 	bl	8004768 <HAL_GetTick>
 800fee8:	4602      	mov	r2, r0
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	1ad3      	subs	r3, r2, r3
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d803      	bhi.n	800fefc <HAL_SPI_Transmit+0x164>
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fefa:	d102      	bne.n	800ff02 <HAL_SPI_Transmit+0x16a>
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d114      	bne.n	800ff2c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ff02:	68f8      	ldr	r0, [r7, #12]
 800ff04:	f000 fee2 	bl	8010ccc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2200      	movs	r2, #0
 800ff24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ff28:	2303      	movs	r3, #3
 800ff2a:	e11e      	b.n	801016a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1b9      	bne.n	800feac <HAL_SPI_Transmit+0x114>
 800ff38:	e0f1      	b.n	801011e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	2b07      	cmp	r3, #7
 800ff40:	f240 80e6 	bls.w	8010110 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ff44:	e05d      	b.n	8010002 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	695b      	ldr	r3, [r3, #20]
 800ff4c:	f003 0302 	and.w	r3, r3, #2
 800ff50:	2b02      	cmp	r3, #2
 800ff52:	d132      	bne.n	800ffba <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d918      	bls.n	800ff92 <HAL_SPI_Transmit+0x1fa>
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d014      	beq.n	800ff92 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	6812      	ldr	r2, [r2, #0]
 800ff72:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff78:	1d1a      	adds	r2, r3, #4
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	3b02      	subs	r3, #2
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ff90:	e037      	b.n	8010002 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff96:	881a      	ldrh	r2, [r3, #0]
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ffa0:	1c9a      	adds	r2, r3, #2
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ffb8:	e023      	b.n	8010002 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffba:	f7f4 fbd5 	bl	8004768 <HAL_GetTick>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	1ad3      	subs	r3, r2, r3
 800ffc4:	683a      	ldr	r2, [r7, #0]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d803      	bhi.n	800ffd2 <HAL_SPI_Transmit+0x23a>
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffd0:	d102      	bne.n	800ffd8 <HAL_SPI_Transmit+0x240>
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d114      	bne.n	8010002 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ffd8:	68f8      	ldr	r0, [r7, #12]
 800ffda:	f000 fe77 	bl	8010ccc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ffe4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2201      	movs	r2, #1
 800fff2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800fffe:	2303      	movs	r3, #3
 8010000:	e0b3      	b.n	801016a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010008:	b29b      	uxth	r3, r3
 801000a:	2b00      	cmp	r3, #0
 801000c:	d19b      	bne.n	800ff46 <HAL_SPI_Transmit+0x1ae>
 801000e:	e086      	b.n	801011e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	695b      	ldr	r3, [r3, #20]
 8010016:	f003 0302 	and.w	r3, r3, #2
 801001a:	2b02      	cmp	r3, #2
 801001c:	d154      	bne.n	80100c8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010024:	b29b      	uxth	r3, r3
 8010026:	2b03      	cmp	r3, #3
 8010028:	d918      	bls.n	801005c <HAL_SPI_Transmit+0x2c4>
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801002e:	2b40      	cmp	r3, #64	@ 0x40
 8010030:	d914      	bls.n	801005c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	6812      	ldr	r2, [r2, #0]
 801003c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010042:	1d1a      	adds	r2, r3, #4
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801004e:	b29b      	uxth	r3, r3
 8010050:	3b04      	subs	r3, #4
 8010052:	b29a      	uxth	r2, r3
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801005a:	e059      	b.n	8010110 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010062:	b29b      	uxth	r3, r3
 8010064:	2b01      	cmp	r3, #1
 8010066:	d917      	bls.n	8010098 <HAL_SPI_Transmit+0x300>
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801006c:	2b00      	cmp	r3, #0
 801006e:	d013      	beq.n	8010098 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010074:	881a      	ldrh	r2, [r3, #0]
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801007e:	1c9a      	adds	r2, r3, #2
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801008a:	b29b      	uxth	r3, r3
 801008c:	3b02      	subs	r3, #2
 801008e:	b29a      	uxth	r2, r3
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010096:	e03b      	b.n	8010110 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	3320      	adds	r3, #32
 80100a2:	7812      	ldrb	r2, [r2, #0]
 80100a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100aa:	1c5a      	adds	r2, r3, #1
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	3b01      	subs	r3, #1
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80100c2:	e025      	b.n	8010110 <HAL_SPI_Transmit+0x378>
 80100c4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100c8:	f7f4 fb4e 	bl	8004768 <HAL_GetTick>
 80100cc:	4602      	mov	r2, r0
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	1ad3      	subs	r3, r2, r3
 80100d2:	683a      	ldr	r2, [r7, #0]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d803      	bhi.n	80100e0 <HAL_SPI_Transmit+0x348>
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100de:	d102      	bne.n	80100e6 <HAL_SPI_Transmit+0x34e>
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d114      	bne.n	8010110 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	f000 fdf0 	bl	8010ccc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80100f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2201      	movs	r2, #1
 8010100:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2200      	movs	r2, #0
 8010108:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801010c:	2303      	movs	r3, #3
 801010e:	e02c      	b.n	801016a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010116:	b29b      	uxth	r3, r3
 8010118:	2b00      	cmp	r3, #0
 801011a:	f47f af79 	bne.w	8010010 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	2200      	movs	r2, #0
 8010126:	2108      	movs	r1, #8
 8010128:	68f8      	ldr	r0, [r7, #12]
 801012a:	f000 fe6f 	bl	8010e0c <SPI_WaitOnFlagUntilTimeout>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d007      	beq.n	8010144 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801013a:	f043 0220 	orr.w	r2, r3, #32
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	f000 fdc1 	bl	8010ccc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2201      	movs	r2, #1
 801014e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2200      	movs	r2, #0
 8010156:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010160:	2b00      	cmp	r3, #0
 8010162:	d001      	beq.n	8010168 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	e000      	b.n	801016a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8010168:	2300      	movs	r3, #0
  }
}
 801016a:	4618      	mov	r0, r3
 801016c:	3718      	adds	r7, #24
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	bf00      	nop

08010174 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b088      	sub	sp, #32
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	603b      	str	r3, [r7, #0]
 8010180:	4613      	mov	r3, r2
 8010182:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010188:	095b      	lsrs	r3, r3, #5
 801018a:	b29b      	uxth	r3, r3
 801018c:	3301      	adds	r3, #1
 801018e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	3330      	adds	r3, #48	@ 0x30
 8010196:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010198:	f7f4 fae6 	bl	8004768 <HAL_GetTick>
 801019c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d001      	beq.n	80101ae <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80101aa:	2302      	movs	r3, #2
 80101ac:	e250      	b.n	8010650 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d002      	beq.n	80101ba <HAL_SPI_Receive+0x46>
 80101b4:	88fb      	ldrh	r3, [r7, #6]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d101      	bne.n	80101be <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80101ba:	2301      	movs	r3, #1
 80101bc:	e248      	b.n	8010650 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d101      	bne.n	80101cc <HAL_SPI_Receive+0x58>
 80101c8:	2302      	movs	r3, #2
 80101ca:	e241      	b.n	8010650 <HAL_SPI_Receive+0x4dc>
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2204      	movs	r2, #4
 80101d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2200      	movs	r2, #0
 80101e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	88fa      	ldrh	r2, [r7, #6]
 80101ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	88fa      	ldrh	r2, [r7, #6]
 80101f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2200      	movs	r2, #0
 80101fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2200      	movs	r2, #0
 8010204:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2200      	movs	r2, #0
 801020c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2200      	movs	r2, #0
 8010214:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2200      	movs	r2, #0
 801021a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	689b      	ldr	r3, [r3, #8]
 8010220:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010224:	d108      	bne.n	8010238 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010234:	601a      	str	r2, [r3, #0]
 8010236:	e009      	b.n	801024c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801024a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	685a      	ldr	r2, [r3, #4]
 8010252:	4b95      	ldr	r3, [pc, #596]	@ (80104a8 <HAL_SPI_Receive+0x334>)
 8010254:	4013      	ands	r3, r2
 8010256:	88f9      	ldrh	r1, [r7, #6]
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	6812      	ldr	r2, [r2, #0]
 801025c:	430b      	orrs	r3, r1
 801025e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f042 0201 	orr.w	r2, r2, #1
 801026e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010278:	d107      	bne.n	801028a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010288:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	2b0f      	cmp	r3, #15
 8010290:	d96c      	bls.n	801036c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010292:	e064      	b.n	801035e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	695b      	ldr	r3, [r3, #20]
 801029a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	695b      	ldr	r3, [r3, #20]
 80102a2:	f003 0301 	and.w	r3, r3, #1
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d114      	bne.n	80102d4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80102b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102ba:	1d1a      	adds	r2, r3, #4
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	3b01      	subs	r3, #1
 80102ca:	b29a      	uxth	r2, r3
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80102d2:	e044      	b.n	801035e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80102da:	b29b      	uxth	r3, r3
 80102dc:	8bfa      	ldrh	r2, [r7, #30]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d919      	bls.n	8010316 <HAL_SPI_Receive+0x1a2>
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d014      	beq.n	8010316 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80102f6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102fc:	1d1a      	adds	r2, r3, #4
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010308:	b29b      	uxth	r3, r3
 801030a:	3b01      	subs	r3, #1
 801030c:	b29a      	uxth	r2, r3
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010314:	e023      	b.n	801035e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010316:	f7f4 fa27 	bl	8004768 <HAL_GetTick>
 801031a:	4602      	mov	r2, r0
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	1ad3      	subs	r3, r2, r3
 8010320:	683a      	ldr	r2, [r7, #0]
 8010322:	429a      	cmp	r2, r3
 8010324:	d803      	bhi.n	801032e <HAL_SPI_Receive+0x1ba>
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801032c:	d102      	bne.n	8010334 <HAL_SPI_Receive+0x1c0>
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d114      	bne.n	801035e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010334:	68f8      	ldr	r0, [r7, #12]
 8010336:	f000 fcc9 	bl	8010ccc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010340:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2201      	movs	r2, #1
 801034e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2200      	movs	r2, #0
 8010356:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801035a:	2303      	movs	r3, #3
 801035c:	e178      	b.n	8010650 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010364:	b29b      	uxth	r3, r3
 8010366:	2b00      	cmp	r3, #0
 8010368:	d194      	bne.n	8010294 <HAL_SPI_Receive+0x120>
 801036a:	e15e      	b.n	801062a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	2b07      	cmp	r3, #7
 8010372:	f240 8153 	bls.w	801061c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010376:	e08f      	b.n	8010498 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	695b      	ldr	r3, [r3, #20]
 801037e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	695b      	ldr	r3, [r3, #20]
 8010386:	f003 0301 	and.w	r3, r3, #1
 801038a:	2b01      	cmp	r3, #1
 801038c:	d114      	bne.n	80103b8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010392:	69ba      	ldr	r2, [r7, #24]
 8010394:	8812      	ldrh	r2, [r2, #0]
 8010396:	b292      	uxth	r2, r2
 8010398:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801039e:	1c9a      	adds	r2, r3, #2
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	3b01      	subs	r3, #1
 80103ae:	b29a      	uxth	r2, r3
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80103b6:	e06f      	b.n	8010498 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80103be:	b29b      	uxth	r3, r3
 80103c0:	8bfa      	ldrh	r2, [r7, #30]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d924      	bls.n	8010410 <HAL_SPI_Receive+0x29c>
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d01f      	beq.n	8010410 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80103d4:	69ba      	ldr	r2, [r7, #24]
 80103d6:	8812      	ldrh	r2, [r2, #0]
 80103d8:	b292      	uxth	r2, r2
 80103da:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80103e0:	1c9a      	adds	r2, r3, #2
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	8812      	ldrh	r2, [r2, #0]
 80103ee:	b292      	uxth	r2, r2
 80103f0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80103f6:	1c9a      	adds	r2, r3, #2
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010402:	b29b      	uxth	r3, r3
 8010404:	3b02      	subs	r3, #2
 8010406:	b29a      	uxth	r2, r3
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801040e:	e043      	b.n	8010498 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010416:	b29b      	uxth	r3, r3
 8010418:	2b01      	cmp	r3, #1
 801041a:	d119      	bne.n	8010450 <HAL_SPI_Receive+0x2dc>
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010422:	2b00      	cmp	r3, #0
 8010424:	d014      	beq.n	8010450 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801042a:	69ba      	ldr	r2, [r7, #24]
 801042c:	8812      	ldrh	r2, [r2, #0]
 801042e:	b292      	uxth	r2, r2
 8010430:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010436:	1c9a      	adds	r2, r3, #2
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010442:	b29b      	uxth	r3, r3
 8010444:	3b01      	subs	r3, #1
 8010446:	b29a      	uxth	r2, r3
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801044e:	e023      	b.n	8010498 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010450:	f7f4 f98a 	bl	8004768 <HAL_GetTick>
 8010454:	4602      	mov	r2, r0
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	683a      	ldr	r2, [r7, #0]
 801045c:	429a      	cmp	r2, r3
 801045e:	d803      	bhi.n	8010468 <HAL_SPI_Receive+0x2f4>
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010466:	d102      	bne.n	801046e <HAL_SPI_Receive+0x2fa>
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d114      	bne.n	8010498 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f000 fc2c 	bl	8010ccc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801047a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2201      	movs	r2, #1
 8010488:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2200      	movs	r2, #0
 8010490:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010494:	2303      	movs	r3, #3
 8010496:	e0db      	b.n	8010650 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801049e:	b29b      	uxth	r3, r3
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f47f af69 	bne.w	8010378 <HAL_SPI_Receive+0x204>
 80104a6:	e0c0      	b.n	801062a <HAL_SPI_Receive+0x4b6>
 80104a8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	695b      	ldr	r3, [r3, #20]
 80104b2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	695b      	ldr	r3, [r3, #20]
 80104ba:	f003 0301 	and.w	r3, r3, #1
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d117      	bne.n	80104f2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104ce:	7812      	ldrb	r2, [r2, #0]
 80104d0:	b2d2      	uxtb	r2, r2
 80104d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	3b01      	subs	r3, #1
 80104e8:	b29a      	uxth	r2, r3
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80104f0:	e094      	b.n	801061c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	8bfa      	ldrh	r2, [r7, #30]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d946      	bls.n	801058e <HAL_SPI_Receive+0x41a>
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010506:	2b00      	cmp	r3, #0
 8010508:	d041      	beq.n	801058e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010516:	7812      	ldrb	r2, [r2, #0]
 8010518:	b2d2      	uxtb	r2, r2
 801051a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010520:	1c5a      	adds	r2, r3, #1
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010532:	7812      	ldrb	r2, [r2, #0]
 8010534:	b2d2      	uxtb	r2, r2
 8010536:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801053c:	1c5a      	adds	r2, r3, #1
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801054e:	7812      	ldrb	r2, [r2, #0]
 8010550:	b2d2      	uxtb	r2, r2
 8010552:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010558:	1c5a      	adds	r2, r3, #1
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801056a:	7812      	ldrb	r2, [r2, #0]
 801056c:	b2d2      	uxtb	r2, r2
 801056e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010574:	1c5a      	adds	r2, r3, #1
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010580:	b29b      	uxth	r3, r3
 8010582:	3b04      	subs	r3, #4
 8010584:	b29a      	uxth	r2, r3
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801058c:	e046      	b.n	801061c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010594:	b29b      	uxth	r3, r3
 8010596:	2b03      	cmp	r3, #3
 8010598:	d81c      	bhi.n	80105d4 <HAL_SPI_Receive+0x460>
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d017      	beq.n	80105d4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105b0:	7812      	ldrb	r2, [r2, #0]
 80105b2:	b2d2      	uxtb	r2, r2
 80105b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105ba:	1c5a      	adds	r2, r3, #1
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	3b01      	subs	r3, #1
 80105ca:	b29a      	uxth	r2, r3
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80105d2:	e023      	b.n	801061c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80105d4:	f7f4 f8c8 	bl	8004768 <HAL_GetTick>
 80105d8:	4602      	mov	r2, r0
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	1ad3      	subs	r3, r2, r3
 80105de:	683a      	ldr	r2, [r7, #0]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d803      	bhi.n	80105ec <HAL_SPI_Receive+0x478>
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ea:	d102      	bne.n	80105f2 <HAL_SPI_Receive+0x47e>
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d114      	bne.n	801061c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	f000 fb6a 	bl	8010ccc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2201      	movs	r2, #1
 801060c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2200      	movs	r2, #0
 8010614:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010618:	2303      	movs	r3, #3
 801061a:	e019      	b.n	8010650 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010622:	b29b      	uxth	r3, r3
 8010624:	2b00      	cmp	r3, #0
 8010626:	f47f af41 	bne.w	80104ac <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f000 fb4e 	bl	8010ccc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2201      	movs	r2, #1
 8010634:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2200      	movs	r2, #0
 801063c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801064a:	2301      	movs	r3, #1
 801064c:	e000      	b.n	8010650 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 801064e:	2300      	movs	r3, #0
  }
}
 8010650:	4618      	mov	r0, r3
 8010652:	3720      	adds	r7, #32
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b08e      	sub	sp, #56	@ 0x38
 801065c:	af02      	add	r7, sp, #8
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	3320      	adds	r3, #32
 801066c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3330      	adds	r3, #48	@ 0x30
 8010674:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801067a:	095b      	lsrs	r3, r3, #5
 801067c:	b29b      	uxth	r3, r3
 801067e:	3301      	adds	r3, #1
 8010680:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010682:	f7f4 f871 	bl	8004768 <HAL_GetTick>
 8010686:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8010688:	887b      	ldrh	r3, [r7, #2]
 801068a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 801068c:	887b      	ldrh	r3, [r7, #2]
 801068e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010696:	b2db      	uxtb	r3, r3
 8010698:	2b01      	cmp	r3, #1
 801069a:	d001      	beq.n	80106a0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 801069c:	2302      	movs	r3, #2
 801069e:	e310      	b.n	8010cc2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d005      	beq.n	80106b2 <HAL_SPI_TransmitReceive+0x5a>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <HAL_SPI_TransmitReceive+0x5a>
 80106ac:	887b      	ldrh	r3, [r7, #2]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d101      	bne.n	80106b6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80106b2:	2301      	movs	r3, #1
 80106b4:	e305      	b.n	8010cc2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d101      	bne.n	80106c4 <HAL_SPI_TransmitReceive+0x6c>
 80106c0:	2302      	movs	r3, #2
 80106c2:	e2fe      	b.n	8010cc2 <HAL_SPI_TransmitReceive+0x66a>
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2201      	movs	r2, #1
 80106c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2205      	movs	r2, #5
 80106d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2200      	movs	r2, #0
 80106d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	887a      	ldrh	r2, [r7, #2]
 80106e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	887a      	ldrh	r2, [r7, #2]
 80106ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	887a      	ldrh	r2, [r7, #2]
 80106fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	887a      	ldrh	r2, [r7, #2]
 8010704:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2200      	movs	r2, #0
 801070c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2200      	movs	r2, #0
 8010712:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	68da      	ldr	r2, [r3, #12]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8010722:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	4a70      	ldr	r2, [pc, #448]	@ (80108ec <HAL_SPI_TransmitReceive+0x294>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d009      	beq.n	8010742 <HAL_SPI_TransmitReceive+0xea>
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4a6f      	ldr	r2, [pc, #444]	@ (80108f0 <HAL_SPI_TransmitReceive+0x298>)
 8010734:	4293      	cmp	r3, r2
 8010736:	d004      	beq.n	8010742 <HAL_SPI_TransmitReceive+0xea>
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	4a6d      	ldr	r2, [pc, #436]	@ (80108f4 <HAL_SPI_TransmitReceive+0x29c>)
 801073e:	4293      	cmp	r3, r2
 8010740:	d102      	bne.n	8010748 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8010742:	2310      	movs	r3, #16
 8010744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010746:	e001      	b.n	801074c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8010748:	2308      	movs	r3, #8
 801074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	685a      	ldr	r2, [r3, #4]
 8010752:	4b69      	ldr	r3, [pc, #420]	@ (80108f8 <HAL_SPI_TransmitReceive+0x2a0>)
 8010754:	4013      	ands	r3, r2
 8010756:	8879      	ldrh	r1, [r7, #2]
 8010758:	68fa      	ldr	r2, [r7, #12]
 801075a:	6812      	ldr	r2, [r2, #0]
 801075c:	430b      	orrs	r3, r1
 801075e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f042 0201 	orr.w	r2, r2, #1
 801076e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010778:	d107      	bne.n	801078a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	2b0f      	cmp	r3, #15
 8010790:	f240 80a2 	bls.w	80108d8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8010794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010796:	089b      	lsrs	r3, r3, #2
 8010798:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801079a:	e094      	b.n	80108c6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	695b      	ldr	r3, [r3, #20]
 80107a2:	f003 0302 	and.w	r3, r3, #2
 80107a6:	2b02      	cmp	r3, #2
 80107a8:	d120      	bne.n	80107ec <HAL_SPI_TransmitReceive+0x194>
 80107aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d01d      	beq.n	80107ec <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80107b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80107b2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80107b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d217      	bcs.n	80107ec <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	6812      	ldr	r2, [r2, #0]
 80107c6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80107cc:	1d1a      	adds	r2, r3, #4
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80107d8:	b29b      	uxth	r3, r3
 80107da:	3b01      	subs	r3, #1
 80107dc:	b29a      	uxth	r2, r3
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80107ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	695b      	ldr	r3, [r3, #20]
 80107f2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80107f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d065      	beq.n	80108c6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	695b      	ldr	r3, [r3, #20]
 8010800:	f003 0301 	and.w	r3, r3, #1
 8010804:	2b01      	cmp	r3, #1
 8010806:	d118      	bne.n	801083a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010810:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010812:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010818:	1d1a      	adds	r2, r3, #4
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010824:	b29b      	uxth	r3, r3
 8010826:	3b01      	subs	r3, #1
 8010828:	b29a      	uxth	r2, r3
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010836:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010838:	e045      	b.n	80108c6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801083a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801083c:	8bfb      	ldrh	r3, [r7, #30]
 801083e:	429a      	cmp	r2, r3
 8010840:	d21d      	bcs.n	801087e <HAL_SPI_TransmitReceive+0x226>
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010848:	2b00      	cmp	r3, #0
 801084a:	d018      	beq.n	801087e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010854:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010856:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801085c:	1d1a      	adds	r2, r3, #4
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010868:	b29b      	uxth	r3, r3
 801086a:	3b01      	subs	r3, #1
 801086c:	b29a      	uxth	r2, r3
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801087a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801087c:	e023      	b.n	80108c6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801087e:	f7f3 ff73 	bl	8004768 <HAL_GetTick>
 8010882:	4602      	mov	r2, r0
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	1ad3      	subs	r3, r2, r3
 8010888:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801088a:	429a      	cmp	r2, r3
 801088c:	d803      	bhi.n	8010896 <HAL_SPI_TransmitReceive+0x23e>
 801088e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010894:	d102      	bne.n	801089c <HAL_SPI_TransmitReceive+0x244>
 8010896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010898:	2b00      	cmp	r3, #0
 801089a:	d114      	bne.n	80108c6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f000 fa15 	bl	8010ccc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2201      	movs	r2, #1
 80108b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2200      	movs	r2, #0
 80108be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80108c2:	2303      	movs	r3, #3
 80108c4:	e1fd      	b.n	8010cc2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80108c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	f47f af67 	bne.w	801079c <HAL_SPI_TransmitReceive+0x144>
 80108ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f47f af63 	bne.w	801079c <HAL_SPI_TransmitReceive+0x144>
 80108d6:	e1ce      	b.n	8010c76 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	2b07      	cmp	r3, #7
 80108de:	f240 81c2 	bls.w	8010c66 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80108e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80108e8:	e0c9      	b.n	8010a7e <HAL_SPI_TransmitReceive+0x426>
 80108ea:	bf00      	nop
 80108ec:	40013000 	.word	0x40013000
 80108f0:	40003800 	.word	0x40003800
 80108f4:	40003c00 	.word	0x40003c00
 80108f8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	695b      	ldr	r3, [r3, #20]
 8010902:	f003 0302 	and.w	r3, r3, #2
 8010906:	2b02      	cmp	r3, #2
 8010908:	d11f      	bne.n	801094a <HAL_SPI_TransmitReceive+0x2f2>
 801090a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801090c:	2b00      	cmp	r3, #0
 801090e:	d01c      	beq.n	801094a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010910:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010912:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010916:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010918:	429a      	cmp	r2, r3
 801091a:	d216      	bcs.n	801094a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010920:	881a      	ldrh	r2, [r3, #0]
 8010922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010924:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801092a:	1c9a      	adds	r2, r3, #2
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010936:	b29b      	uxth	r3, r3
 8010938:	3b01      	subs	r3, #1
 801093a:	b29a      	uxth	r2, r3
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010948:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	695b      	ldr	r3, [r3, #20]
 8010950:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8010952:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010954:	2b00      	cmp	r3, #0
 8010956:	f000 8092 	beq.w	8010a7e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	695b      	ldr	r3, [r3, #20]
 8010960:	f003 0301 	and.w	r3, r3, #1
 8010964:	2b01      	cmp	r3, #1
 8010966:	d118      	bne.n	801099a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801096c:	6a3a      	ldr	r2, [r7, #32]
 801096e:	8812      	ldrh	r2, [r2, #0]
 8010970:	b292      	uxth	r2, r2
 8010972:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010978:	1c9a      	adds	r2, r3, #2
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010984:	b29b      	uxth	r3, r3
 8010986:	3b01      	subs	r3, #1
 8010988:	b29a      	uxth	r2, r3
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010996:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010998:	e071      	b.n	8010a7e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801099a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801099c:	8bfb      	ldrh	r3, [r7, #30]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d228      	bcs.n	80109f4 <HAL_SPI_TransmitReceive+0x39c>
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d023      	beq.n	80109f4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80109b0:	6a3a      	ldr	r2, [r7, #32]
 80109b2:	8812      	ldrh	r2, [r2, #0]
 80109b4:	b292      	uxth	r2, r2
 80109b6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80109bc:	1c9a      	adds	r2, r3, #2
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80109c6:	6a3a      	ldr	r2, [r7, #32]
 80109c8:	8812      	ldrh	r2, [r2, #0]
 80109ca:	b292      	uxth	r2, r2
 80109cc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80109d2:	1c9a      	adds	r2, r3, #2
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80109de:	b29b      	uxth	r3, r3
 80109e0:	3b02      	subs	r3, #2
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80109f0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80109f2:	e044      	b.n	8010a7e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80109f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d11d      	bne.n	8010a36 <HAL_SPI_TransmitReceive+0x3de>
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d018      	beq.n	8010a36 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a08:	6a3a      	ldr	r2, [r7, #32]
 8010a0a:	8812      	ldrh	r2, [r2, #0]
 8010a0c:	b292      	uxth	r2, r2
 8010a0e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a14:	1c9a      	adds	r2, r3, #2
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	3b01      	subs	r3, #1
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010a32:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010a34:	e023      	b.n	8010a7e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a36:	f7f3 fe97 	bl	8004768 <HAL_GetTick>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	1ad3      	subs	r3, r2, r3
 8010a40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d803      	bhi.n	8010a4e <HAL_SPI_TransmitReceive+0x3f6>
 8010a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a4c:	d102      	bne.n	8010a54 <HAL_SPI_TransmitReceive+0x3fc>
 8010a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d114      	bne.n	8010a7e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f000 f939 	bl	8010ccc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2200      	movs	r2, #0
 8010a76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010a7a:	2303      	movs	r3, #3
 8010a7c:	e121      	b.n	8010cc2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010a7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f47f af3b 	bne.w	80108fc <HAL_SPI_TransmitReceive+0x2a4>
 8010a86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f47f af37 	bne.w	80108fc <HAL_SPI_TransmitReceive+0x2a4>
 8010a8e:	e0f2      	b.n	8010c76 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	695b      	ldr	r3, [r3, #20]
 8010a96:	f003 0302 	and.w	r3, r3, #2
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d121      	bne.n	8010ae2 <HAL_SPI_TransmitReceive+0x48a>
 8010a9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d01e      	beq.n	8010ae2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010aa4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010aa6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aaa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d218      	bcs.n	8010ae2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	3320      	adds	r3, #32
 8010aba:	7812      	ldrb	r2, [r2, #0]
 8010abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010ae0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	695b      	ldr	r3, [r3, #20]
 8010ae8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8010aea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	f000 80ba 	beq.w	8010c66 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	695b      	ldr	r3, [r3, #20]
 8010af8:	f003 0301 	and.w	r3, r3, #1
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	d11b      	bne.n	8010b38 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b0c:	7812      	ldrb	r2, [r2, #0]
 8010b0e:	b2d2      	uxtb	r2, r2
 8010b10:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b16:	1c5a      	adds	r2, r3, #1
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	3b01      	subs	r3, #1
 8010b26:	b29a      	uxth	r2, r3
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b34:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010b36:	e096      	b.n	8010c66 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010b38:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010b3a:	8bfb      	ldrh	r3, [r7, #30]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d24a      	bcs.n	8010bd6 <HAL_SPI_TransmitReceive+0x57e>
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d045      	beq.n	8010bd6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b56:	7812      	ldrb	r2, [r2, #0]
 8010b58:	b2d2      	uxtb	r2, r2
 8010b5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b60:	1c5a      	adds	r2, r3, #1
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b72:	7812      	ldrb	r2, [r2, #0]
 8010b74:	b2d2      	uxtb	r2, r2
 8010b76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b7c:	1c5a      	adds	r2, r3, #1
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b8e:	7812      	ldrb	r2, [r2, #0]
 8010b90:	b2d2      	uxtb	r2, r2
 8010b92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b98:	1c5a      	adds	r2, r3, #1
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010baa:	7812      	ldrb	r2, [r2, #0]
 8010bac:	b2d2      	uxtb	r2, r2
 8010bae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	3b04      	subs	r3, #4
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010bd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010bd4:	e047      	b.n	8010c66 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8010bd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010bd8:	2b03      	cmp	r3, #3
 8010bda:	d820      	bhi.n	8010c1e <HAL_SPI_TransmitReceive+0x5c6>
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d01b      	beq.n	8010c1e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010bf2:	7812      	ldrb	r2, [r2, #0]
 8010bf4:	b2d2      	uxtb	r2, r2
 8010bf6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010bfc:	1c5a      	adds	r2, r3, #1
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	b29a      	uxth	r2, r3
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c1a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010c1c:	e023      	b.n	8010c66 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c1e:	f7f3 fda3 	bl	8004768 <HAL_GetTick>
 8010c22:	4602      	mov	r2, r0
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	1ad3      	subs	r3, r2, r3
 8010c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d803      	bhi.n	8010c36 <HAL_SPI_TransmitReceive+0x5de>
 8010c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c34:	d102      	bne.n	8010c3c <HAL_SPI_TransmitReceive+0x5e4>
 8010c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d114      	bne.n	8010c66 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8010c3c:	68f8      	ldr	r0, [r7, #12]
 8010c3e:	f000 f845 	bl	8010ccc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010c48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2201      	movs	r2, #1
 8010c56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010c62:	2303      	movs	r3, #3
 8010c64:	e02d      	b.n	8010cc2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010c66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	f47f af11 	bne.w	8010a90 <HAL_SPI_TransmitReceive+0x438>
 8010c6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	f47f af0d 	bne.w	8010a90 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010c76:	69bb      	ldr	r3, [r7, #24]
 8010c78:	9300      	str	r3, [sp, #0]
 8010c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	2108      	movs	r1, #8
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f000 f8c3 	bl	8010e0c <SPI_WaitOnFlagUntilTimeout>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d007      	beq.n	8010c9c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010c92:	f043 0220 	orr.w	r2, r3, #32
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f000 f815 	bl	8010ccc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2200      	movs	r2, #0
 8010cae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d001      	beq.n	8010cc0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	e000      	b.n	8010cc2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8010cc0:	2300      	movs	r3, #0
  }
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3730      	adds	r7, #48	@ 0x30
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop

08010ccc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b085      	sub	sp, #20
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	695b      	ldr	r3, [r3, #20]
 8010cda:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	699a      	ldr	r2, [r3, #24]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f042 0208 	orr.w	r2, r2, #8
 8010cea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	699a      	ldr	r2, [r3, #24]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	f042 0210 	orr.w	r2, r2, #16
 8010cfa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	681a      	ldr	r2, [r3, #0]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f022 0201 	bic.w	r2, r2, #1
 8010d0a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	6919      	ldr	r1, [r3, #16]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681a      	ldr	r2, [r3, #0]
 8010d16:	4b3c      	ldr	r3, [pc, #240]	@ (8010e08 <SPI_CloseTransfer+0x13c>)
 8010d18:	400b      	ands	r3, r1
 8010d1a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	689a      	ldr	r2, [r3, #8]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010d2a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	2b04      	cmp	r3, #4
 8010d36:	d014      	beq.n	8010d62 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f003 0320 	and.w	r3, r3, #32
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d00f      	beq.n	8010d62 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	699a      	ldr	r2, [r3, #24]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f042 0220 	orr.w	r2, r2, #32
 8010d60:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	2b03      	cmp	r3, #3
 8010d6c:	d014      	beq.n	8010d98 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d00f      	beq.n	8010d98 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d7e:	f043 0204 	orr.w	r2, r3, #4
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	699a      	ldr	r2, [r3, #24]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010d96:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d00f      	beq.n	8010dc2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010da8:	f043 0201 	orr.w	r2, r3, #1
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	699a      	ldr	r2, [r3, #24]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010dc0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d00f      	beq.n	8010dec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010dd2:	f043 0208 	orr.w	r2, r3, #8
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	699a      	ldr	r2, [r3, #24]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010dea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2200      	movs	r2, #0
 8010df0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2200      	movs	r2, #0
 8010df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8010dfc:	bf00      	nop
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr
 8010e08:	fffffc90 	.word	0xfffffc90

08010e0c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	603b      	str	r3, [r7, #0]
 8010e18:	4613      	mov	r3, r2
 8010e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010e1c:	e010      	b.n	8010e40 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e1e:	f7f3 fca3 	bl	8004768 <HAL_GetTick>
 8010e22:	4602      	mov	r2, r0
 8010e24:	69bb      	ldr	r3, [r7, #24]
 8010e26:	1ad3      	subs	r3, r2, r3
 8010e28:	683a      	ldr	r2, [r7, #0]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d803      	bhi.n	8010e36 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e34:	d102      	bne.n	8010e3c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d101      	bne.n	8010e40 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010e3c:	2303      	movs	r3, #3
 8010e3e:	e00f      	b.n	8010e60 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	695a      	ldr	r2, [r3, #20]
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	4013      	ands	r3, r2
 8010e4a:	68ba      	ldr	r2, [r7, #8]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	bf0c      	ite	eq
 8010e50:	2301      	moveq	r3, #1
 8010e52:	2300      	movne	r3, #0
 8010e54:	b2db      	uxtb	r3, r3
 8010e56:	461a      	mov	r2, r3
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d0df      	beq.n	8010e1e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010e5e:	2300      	movs	r3, #0
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b085      	sub	sp, #20
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e74:	095b      	lsrs	r3, r3, #5
 8010e76:	3301      	adds	r3, #1
 8010e78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	3301      	adds	r3, #1
 8010e80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	3307      	adds	r3, #7
 8010e86:	08db      	lsrs	r3, r3, #3
 8010e88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3714      	adds	r7, #20
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr

08010e9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b082      	sub	sp, #8
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d101      	bne.n	8010eb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010eac:	2301      	movs	r3, #1
 8010eae:	e049      	b.n	8010f44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d106      	bne.n	8010eca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f7f3 f8b3 	bl	8004030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2202      	movs	r2, #2
 8010ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	3304      	adds	r3, #4
 8010eda:	4619      	mov	r1, r3
 8010edc:	4610      	mov	r0, r2
 8010ede:	f000 fc57 	bl	8011790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2201      	movs	r2, #1
 8010eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2201      	movs	r2, #1
 8010efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2201      	movs	r2, #1
 8010f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2201      	movs	r2, #1
 8010f16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2201      	movs	r2, #1
 8010f26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2201      	movs	r2, #1
 8010f36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010f42:	2300      	movs	r3, #0
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d001      	beq.n	8010f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010f60:	2301      	movs	r3, #1
 8010f62:	e05e      	b.n	8011022 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2202      	movs	r2, #2
 8010f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	68da      	ldr	r2, [r3, #12]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	f042 0201 	orr.w	r2, r2, #1
 8010f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4a2b      	ldr	r2, [pc, #172]	@ (8011030 <HAL_TIM_Base_Start_IT+0xe4>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d02c      	beq.n	8010fe0 <HAL_TIM_Base_Start_IT+0x94>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f8e:	d027      	beq.n	8010fe0 <HAL_TIM_Base_Start_IT+0x94>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4a27      	ldr	r2, [pc, #156]	@ (8011034 <HAL_TIM_Base_Start_IT+0xe8>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d022      	beq.n	8010fe0 <HAL_TIM_Base_Start_IT+0x94>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	4a26      	ldr	r2, [pc, #152]	@ (8011038 <HAL_TIM_Base_Start_IT+0xec>)
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d01d      	beq.n	8010fe0 <HAL_TIM_Base_Start_IT+0x94>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4a24      	ldr	r2, [pc, #144]	@ (801103c <HAL_TIM_Base_Start_IT+0xf0>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d018      	beq.n	8010fe0 <HAL_TIM_Base_Start_IT+0x94>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	4a23      	ldr	r2, [pc, #140]	@ (8011040 <HAL_TIM_Base_Start_IT+0xf4>)
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	d013      	beq.n	8010fe0 <HAL_TIM_Base_Start_IT+0x94>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4a21      	ldr	r2, [pc, #132]	@ (8011044 <HAL_TIM_Base_Start_IT+0xf8>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d00e      	beq.n	8010fe0 <HAL_TIM_Base_Start_IT+0x94>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	4a20      	ldr	r2, [pc, #128]	@ (8011048 <HAL_TIM_Base_Start_IT+0xfc>)
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d009      	beq.n	8010fe0 <HAL_TIM_Base_Start_IT+0x94>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	4a1e      	ldr	r2, [pc, #120]	@ (801104c <HAL_TIM_Base_Start_IT+0x100>)
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d004      	beq.n	8010fe0 <HAL_TIM_Base_Start_IT+0x94>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4a1d      	ldr	r2, [pc, #116]	@ (8011050 <HAL_TIM_Base_Start_IT+0x104>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d115      	bne.n	801100c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	689a      	ldr	r2, [r3, #8]
 8010fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8011054 <HAL_TIM_Base_Start_IT+0x108>)
 8010fe8:	4013      	ands	r3, r2
 8010fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2b06      	cmp	r3, #6
 8010ff0:	d015      	beq.n	801101e <HAL_TIM_Base_Start_IT+0xd2>
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ff8:	d011      	beq.n	801101e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f042 0201 	orr.w	r2, r2, #1
 8011008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801100a:	e008      	b.n	801101e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	f042 0201 	orr.w	r2, r2, #1
 801101a:	601a      	str	r2, [r3, #0]
 801101c:	e000      	b.n	8011020 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801101e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011020:	2300      	movs	r3, #0
}
 8011022:	4618      	mov	r0, r3
 8011024:	3714      	adds	r7, #20
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	40010000 	.word	0x40010000
 8011034:	40000400 	.word	0x40000400
 8011038:	40000800 	.word	0x40000800
 801103c:	40000c00 	.word	0x40000c00
 8011040:	40010400 	.word	0x40010400
 8011044:	40001800 	.word	0x40001800
 8011048:	40014000 	.word	0x40014000
 801104c:	4000e000 	.word	0x4000e000
 8011050:	4000e400 	.word	0x4000e400
 8011054:	00010007 	.word	0x00010007

08011058 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d101      	bne.n	801106a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011066:	2301      	movs	r3, #1
 8011068:	e049      	b.n	80110fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011070:	b2db      	uxtb	r3, r3
 8011072:	2b00      	cmp	r3, #0
 8011074:	d106      	bne.n	8011084 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 f841 	bl	8011106 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2202      	movs	r2, #2
 8011088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	3304      	adds	r3, #4
 8011094:	4619      	mov	r1, r3
 8011096:	4610      	mov	r0, r2
 8011098:	f000 fb7a 	bl	8011790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2201      	movs	r2, #1
 80110a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2201      	movs	r2, #1
 80110a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2201      	movs	r2, #1
 80110b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2201      	movs	r2, #1
 80110b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2201      	movs	r2, #1
 80110c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2201      	movs	r2, #1
 80110c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2201      	movs	r2, #1
 80110d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2201      	movs	r2, #1
 80110d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2201      	movs	r2, #1
 80110e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2201      	movs	r2, #1
 80110e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2201      	movs	r2, #1
 80110f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2201      	movs	r2, #1
 80110f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80110fc:	2300      	movs	r3, #0
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3708      	adds	r7, #8
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011106:	b480      	push	{r7}
 8011108:	b083      	sub	sp, #12
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801110e:	bf00      	nop
 8011110:	370c      	adds	r7, #12
 8011112:	46bd      	mov	sp, r7
 8011114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011118:	4770      	bx	lr

0801111a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801111a:	b580      	push	{r7, lr}
 801111c:	b084      	sub	sp, #16
 801111e:	af00      	add	r7, sp, #0
 8011120:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	691b      	ldr	r3, [r3, #16]
 8011130:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	f003 0302 	and.w	r3, r3, #2
 8011138:	2b00      	cmp	r3, #0
 801113a:	d020      	beq.n	801117e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f003 0302 	and.w	r3, r3, #2
 8011142:	2b00      	cmp	r3, #0
 8011144:	d01b      	beq.n	801117e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	f06f 0202 	mvn.w	r2, #2
 801114e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2201      	movs	r2, #1
 8011154:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	699b      	ldr	r3, [r3, #24]
 801115c:	f003 0303 	and.w	r3, r3, #3
 8011160:	2b00      	cmp	r3, #0
 8011162:	d003      	beq.n	801116c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f000 faf5 	bl	8011754 <HAL_TIM_IC_CaptureCallback>
 801116a:	e005      	b.n	8011178 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f000 fae7 	bl	8011740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f000 faf8 	bl	8011768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	f003 0304 	and.w	r3, r3, #4
 8011184:	2b00      	cmp	r3, #0
 8011186:	d020      	beq.n	80111ca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	f003 0304 	and.w	r3, r3, #4
 801118e:	2b00      	cmp	r3, #0
 8011190:	d01b      	beq.n	80111ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	f06f 0204 	mvn.w	r2, #4
 801119a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2202      	movs	r2, #2
 80111a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	699b      	ldr	r3, [r3, #24]
 80111a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d003      	beq.n	80111b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f000 facf 	bl	8011754 <HAL_TIM_IC_CaptureCallback>
 80111b6:	e005      	b.n	80111c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f000 fac1 	bl	8011740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 fad2 	bl	8011768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	f003 0308 	and.w	r3, r3, #8
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d020      	beq.n	8011216 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f003 0308 	and.w	r3, r3, #8
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d01b      	beq.n	8011216 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f06f 0208 	mvn.w	r2, #8
 80111e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2204      	movs	r2, #4
 80111ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	69db      	ldr	r3, [r3, #28]
 80111f4:	f003 0303 	and.w	r3, r3, #3
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d003      	beq.n	8011204 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 faa9 	bl	8011754 <HAL_TIM_IC_CaptureCallback>
 8011202:	e005      	b.n	8011210 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f000 fa9b 	bl	8011740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 faac 	bl	8011768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	f003 0310 	and.w	r3, r3, #16
 801121c:	2b00      	cmp	r3, #0
 801121e:	d020      	beq.n	8011262 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f003 0310 	and.w	r3, r3, #16
 8011226:	2b00      	cmp	r3, #0
 8011228:	d01b      	beq.n	8011262 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f06f 0210 	mvn.w	r2, #16
 8011232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2208      	movs	r2, #8
 8011238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	69db      	ldr	r3, [r3, #28]
 8011240:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011244:	2b00      	cmp	r3, #0
 8011246:	d003      	beq.n	8011250 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fa83 	bl	8011754 <HAL_TIM_IC_CaptureCallback>
 801124e:	e005      	b.n	801125c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f000 fa75 	bl	8011740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 fa86 	bl	8011768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2200      	movs	r2, #0
 8011260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	f003 0301 	and.w	r3, r3, #1
 8011268:	2b00      	cmp	r3, #0
 801126a:	d00c      	beq.n	8011286 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f003 0301 	and.w	r3, r3, #1
 8011272:	2b00      	cmp	r3, #0
 8011274:	d007      	beq.n	8011286 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f06f 0201 	mvn.w	r2, #1
 801127e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7f1 fa41 	bl	8002708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801128c:	2b00      	cmp	r3, #0
 801128e:	d104      	bne.n	801129a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00c      	beq.n	80112b4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d007      	beq.n	80112b4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80112ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 ffc6 	bl	8012240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00c      	beq.n	80112d8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d007      	beq.n	80112d8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80112d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f000 ffbe 	bl	8012254 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00c      	beq.n	80112fc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d007      	beq.n	80112fc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80112f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f000 fa40 	bl	801177c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	f003 0320 	and.w	r3, r3, #32
 8011302:	2b00      	cmp	r3, #0
 8011304:	d00c      	beq.n	8011320 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	f003 0320 	and.w	r3, r3, #32
 801130c:	2b00      	cmp	r3, #0
 801130e:	d007      	beq.n	8011320 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	f06f 0220 	mvn.w	r2, #32
 8011318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f000 ff86 	bl	801222c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011320:	bf00      	nop
 8011322:	3710      	adds	r7, #16
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b086      	sub	sp, #24
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011334:	2300      	movs	r3, #0
 8011336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801133e:	2b01      	cmp	r3, #1
 8011340:	d101      	bne.n	8011346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011342:	2302      	movs	r3, #2
 8011344:	e0ff      	b.n	8011546 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2201      	movs	r2, #1
 801134a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2b14      	cmp	r3, #20
 8011352:	f200 80f0 	bhi.w	8011536 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011356:	a201      	add	r2, pc, #4	@ (adr r2, 801135c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801135c:	080113b1 	.word	0x080113b1
 8011360:	08011537 	.word	0x08011537
 8011364:	08011537 	.word	0x08011537
 8011368:	08011537 	.word	0x08011537
 801136c:	080113f1 	.word	0x080113f1
 8011370:	08011537 	.word	0x08011537
 8011374:	08011537 	.word	0x08011537
 8011378:	08011537 	.word	0x08011537
 801137c:	08011433 	.word	0x08011433
 8011380:	08011537 	.word	0x08011537
 8011384:	08011537 	.word	0x08011537
 8011388:	08011537 	.word	0x08011537
 801138c:	08011473 	.word	0x08011473
 8011390:	08011537 	.word	0x08011537
 8011394:	08011537 	.word	0x08011537
 8011398:	08011537 	.word	0x08011537
 801139c:	080114b5 	.word	0x080114b5
 80113a0:	08011537 	.word	0x08011537
 80113a4:	08011537 	.word	0x08011537
 80113a8:	08011537 	.word	0x08011537
 80113ac:	080114f5 	.word	0x080114f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	68b9      	ldr	r1, [r7, #8]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f000 fa9c 	bl	80118f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	699a      	ldr	r2, [r3, #24]
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f042 0208 	orr.w	r2, r2, #8
 80113ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	699a      	ldr	r2, [r3, #24]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f022 0204 	bic.w	r2, r2, #4
 80113da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	6999      	ldr	r1, [r3, #24]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	691a      	ldr	r2, [r3, #16]
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	430a      	orrs	r2, r1
 80113ec:	619a      	str	r2, [r3, #24]
      break;
 80113ee:	e0a5      	b.n	801153c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	68b9      	ldr	r1, [r7, #8]
 80113f6:	4618      	mov	r0, r3
 80113f8:	f000 fb0c 	bl	8011a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	699a      	ldr	r2, [r3, #24]
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801140a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	699a      	ldr	r2, [r3, #24]
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801141a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	6999      	ldr	r1, [r3, #24]
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	691b      	ldr	r3, [r3, #16]
 8011426:	021a      	lsls	r2, r3, #8
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	430a      	orrs	r2, r1
 801142e:	619a      	str	r2, [r3, #24]
      break;
 8011430:	e084      	b.n	801153c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	68b9      	ldr	r1, [r7, #8]
 8011438:	4618      	mov	r0, r3
 801143a:	f000 fb75 	bl	8011b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	69da      	ldr	r2, [r3, #28]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f042 0208 	orr.w	r2, r2, #8
 801144c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	69da      	ldr	r2, [r3, #28]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f022 0204 	bic.w	r2, r2, #4
 801145c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	69d9      	ldr	r1, [r3, #28]
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	691a      	ldr	r2, [r3, #16]
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	430a      	orrs	r2, r1
 801146e:	61da      	str	r2, [r3, #28]
      break;
 8011470:	e064      	b.n	801153c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	68b9      	ldr	r1, [r7, #8]
 8011478:	4618      	mov	r0, r3
 801147a:	f000 fbdd 	bl	8011c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	69da      	ldr	r2, [r3, #28]
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801148c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	69da      	ldr	r2, [r3, #28]
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801149c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	69d9      	ldr	r1, [r3, #28]
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	691b      	ldr	r3, [r3, #16]
 80114a8:	021a      	lsls	r2, r3, #8
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	430a      	orrs	r2, r1
 80114b0:	61da      	str	r2, [r3, #28]
      break;
 80114b2:	e043      	b.n	801153c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	68b9      	ldr	r1, [r7, #8]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f000 fc26 	bl	8011d0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f042 0208 	orr.w	r2, r2, #8
 80114ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f022 0204 	bic.w	r2, r2, #4
 80114de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	691a      	ldr	r2, [r3, #16]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	430a      	orrs	r2, r1
 80114f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80114f2:	e023      	b.n	801153c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	68b9      	ldr	r1, [r7, #8]
 80114fa:	4618      	mov	r0, r3
 80114fc:	f000 fc6a 	bl	8011dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801150e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801151e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	021a      	lsls	r2, r3, #8
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	430a      	orrs	r2, r1
 8011532:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011534:	e002      	b.n	801153c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011536:	2301      	movs	r3, #1
 8011538:	75fb      	strb	r3, [r7, #23]
      break;
 801153a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2200      	movs	r2, #0
 8011540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011544:	7dfb      	ldrb	r3, [r7, #23]
}
 8011546:	4618      	mov	r0, r3
 8011548:	3718      	adds	r7, #24
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop

08011550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b084      	sub	sp, #16
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801155a:	2300      	movs	r3, #0
 801155c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011564:	2b01      	cmp	r3, #1
 8011566:	d101      	bne.n	801156c <HAL_TIM_ConfigClockSource+0x1c>
 8011568:	2302      	movs	r3, #2
 801156a:	e0dc      	b.n	8011726 <HAL_TIM_ConfigClockSource+0x1d6>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2201      	movs	r2, #1
 8011570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2202      	movs	r2, #2
 8011578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	4b6a      	ldr	r3, [pc, #424]	@ (8011730 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011588:	4013      	ands	r3, r2
 801158a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	68ba      	ldr	r2, [r7, #8]
 801159a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4a64      	ldr	r2, [pc, #400]	@ (8011734 <HAL_TIM_ConfigClockSource+0x1e4>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	f000 80a9 	beq.w	80116fa <HAL_TIM_ConfigClockSource+0x1aa>
 80115a8:	4a62      	ldr	r2, [pc, #392]	@ (8011734 <HAL_TIM_ConfigClockSource+0x1e4>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	f200 80ae 	bhi.w	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 80115b0:	4a61      	ldr	r2, [pc, #388]	@ (8011738 <HAL_TIM_ConfigClockSource+0x1e8>)
 80115b2:	4293      	cmp	r3, r2
 80115b4:	f000 80a1 	beq.w	80116fa <HAL_TIM_ConfigClockSource+0x1aa>
 80115b8:	4a5f      	ldr	r2, [pc, #380]	@ (8011738 <HAL_TIM_ConfigClockSource+0x1e8>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	f200 80a6 	bhi.w	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 80115c0:	4a5e      	ldr	r2, [pc, #376]	@ (801173c <HAL_TIM_ConfigClockSource+0x1ec>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	f000 8099 	beq.w	80116fa <HAL_TIM_ConfigClockSource+0x1aa>
 80115c8:	4a5c      	ldr	r2, [pc, #368]	@ (801173c <HAL_TIM_ConfigClockSource+0x1ec>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	f200 809e 	bhi.w	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 80115d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80115d4:	f000 8091 	beq.w	80116fa <HAL_TIM_ConfigClockSource+0x1aa>
 80115d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80115dc:	f200 8096 	bhi.w	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 80115e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115e4:	f000 8089 	beq.w	80116fa <HAL_TIM_ConfigClockSource+0x1aa>
 80115e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115ec:	f200 808e 	bhi.w	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 80115f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80115f4:	d03e      	beq.n	8011674 <HAL_TIM_ConfigClockSource+0x124>
 80115f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80115fa:	f200 8087 	bhi.w	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 80115fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011602:	f000 8086 	beq.w	8011712 <HAL_TIM_ConfigClockSource+0x1c2>
 8011606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801160a:	d87f      	bhi.n	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 801160c:	2b70      	cmp	r3, #112	@ 0x70
 801160e:	d01a      	beq.n	8011646 <HAL_TIM_ConfigClockSource+0xf6>
 8011610:	2b70      	cmp	r3, #112	@ 0x70
 8011612:	d87b      	bhi.n	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 8011614:	2b60      	cmp	r3, #96	@ 0x60
 8011616:	d050      	beq.n	80116ba <HAL_TIM_ConfigClockSource+0x16a>
 8011618:	2b60      	cmp	r3, #96	@ 0x60
 801161a:	d877      	bhi.n	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 801161c:	2b50      	cmp	r3, #80	@ 0x50
 801161e:	d03c      	beq.n	801169a <HAL_TIM_ConfigClockSource+0x14a>
 8011620:	2b50      	cmp	r3, #80	@ 0x50
 8011622:	d873      	bhi.n	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 8011624:	2b40      	cmp	r3, #64	@ 0x40
 8011626:	d058      	beq.n	80116da <HAL_TIM_ConfigClockSource+0x18a>
 8011628:	2b40      	cmp	r3, #64	@ 0x40
 801162a:	d86f      	bhi.n	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 801162c:	2b30      	cmp	r3, #48	@ 0x30
 801162e:	d064      	beq.n	80116fa <HAL_TIM_ConfigClockSource+0x1aa>
 8011630:	2b30      	cmp	r3, #48	@ 0x30
 8011632:	d86b      	bhi.n	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 8011634:	2b20      	cmp	r3, #32
 8011636:	d060      	beq.n	80116fa <HAL_TIM_ConfigClockSource+0x1aa>
 8011638:	2b20      	cmp	r3, #32
 801163a:	d867      	bhi.n	801170c <HAL_TIM_ConfigClockSource+0x1bc>
 801163c:	2b00      	cmp	r3, #0
 801163e:	d05c      	beq.n	80116fa <HAL_TIM_ConfigClockSource+0x1aa>
 8011640:	2b10      	cmp	r3, #16
 8011642:	d05a      	beq.n	80116fa <HAL_TIM_ConfigClockSource+0x1aa>
 8011644:	e062      	b.n	801170c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011656:	f000 fca1 	bl	8011f9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	689b      	ldr	r3, [r3, #8]
 8011660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	68ba      	ldr	r2, [r7, #8]
 8011670:	609a      	str	r2, [r3, #8]
      break;
 8011672:	e04f      	b.n	8011714 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011684:	f000 fc8a 	bl	8011f9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	689a      	ldr	r2, [r3, #8]
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011696:	609a      	str	r2, [r3, #8]
      break;
 8011698:	e03c      	b.n	8011714 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80116a6:	461a      	mov	r2, r3
 80116a8:	f000 fbfa 	bl	8011ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2150      	movs	r1, #80	@ 0x50
 80116b2:	4618      	mov	r0, r3
 80116b4:	f000 fc54 	bl	8011f60 <TIM_ITRx_SetConfig>
      break;
 80116b8:	e02c      	b.n	8011714 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80116c6:	461a      	mov	r2, r3
 80116c8:	f000 fc19 	bl	8011efe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	2160      	movs	r1, #96	@ 0x60
 80116d2:	4618      	mov	r0, r3
 80116d4:	f000 fc44 	bl	8011f60 <TIM_ITRx_SetConfig>
      break;
 80116d8:	e01c      	b.n	8011714 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80116e6:	461a      	mov	r2, r3
 80116e8:	f000 fbda 	bl	8011ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	2140      	movs	r1, #64	@ 0x40
 80116f2:	4618      	mov	r0, r3
 80116f4:	f000 fc34 	bl	8011f60 <TIM_ITRx_SetConfig>
      break;
 80116f8:	e00c      	b.n	8011714 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681a      	ldr	r2, [r3, #0]
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	4619      	mov	r1, r3
 8011704:	4610      	mov	r0, r2
 8011706:	f000 fc2b 	bl	8011f60 <TIM_ITRx_SetConfig>
      break;
 801170a:	e003      	b.n	8011714 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801170c:	2301      	movs	r3, #1
 801170e:	73fb      	strb	r3, [r7, #15]
      break;
 8011710:	e000      	b.n	8011714 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2201      	movs	r2, #1
 8011718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2200      	movs	r2, #0
 8011720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011724:	7bfb      	ldrb	r3, [r7, #15]
}
 8011726:	4618      	mov	r0, r3
 8011728:	3710      	adds	r7, #16
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	ffceff88 	.word	0xffceff88
 8011734:	00100040 	.word	0x00100040
 8011738:	00100030 	.word	0x00100030
 801173c:	00100020 	.word	0x00100020

08011740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011740:	b480      	push	{r7}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011748:	bf00      	nop
 801174a:	370c      	adds	r7, #12
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801175c:	bf00      	nop
 801175e:	370c      	adds	r7, #12
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr

08011768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011770:	bf00      	nop
 8011772:	370c      	adds	r7, #12
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr

0801177c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011784:	bf00      	nop
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr

08011790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	4a4a      	ldr	r2, [pc, #296]	@ (80118cc <TIM_Base_SetConfig+0x13c>)
 80117a4:	4293      	cmp	r3, r2
 80117a6:	d013      	beq.n	80117d0 <TIM_Base_SetConfig+0x40>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80117ae:	d00f      	beq.n	80117d0 <TIM_Base_SetConfig+0x40>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	4a47      	ldr	r2, [pc, #284]	@ (80118d0 <TIM_Base_SetConfig+0x140>)
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d00b      	beq.n	80117d0 <TIM_Base_SetConfig+0x40>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	4a46      	ldr	r2, [pc, #280]	@ (80118d4 <TIM_Base_SetConfig+0x144>)
 80117bc:	4293      	cmp	r3, r2
 80117be:	d007      	beq.n	80117d0 <TIM_Base_SetConfig+0x40>
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	4a45      	ldr	r2, [pc, #276]	@ (80118d8 <TIM_Base_SetConfig+0x148>)
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d003      	beq.n	80117d0 <TIM_Base_SetConfig+0x40>
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	4a44      	ldr	r2, [pc, #272]	@ (80118dc <TIM_Base_SetConfig+0x14c>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d108      	bne.n	80117e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	68fa      	ldr	r2, [r7, #12]
 80117de:	4313      	orrs	r3, r2
 80117e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4a39      	ldr	r2, [pc, #228]	@ (80118cc <TIM_Base_SetConfig+0x13c>)
 80117e6:	4293      	cmp	r3, r2
 80117e8:	d027      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80117f0:	d023      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	4a36      	ldr	r2, [pc, #216]	@ (80118d0 <TIM_Base_SetConfig+0x140>)
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d01f      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4a35      	ldr	r2, [pc, #212]	@ (80118d4 <TIM_Base_SetConfig+0x144>)
 80117fe:	4293      	cmp	r3, r2
 8011800:	d01b      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	4a34      	ldr	r2, [pc, #208]	@ (80118d8 <TIM_Base_SetConfig+0x148>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d017      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	4a33      	ldr	r2, [pc, #204]	@ (80118dc <TIM_Base_SetConfig+0x14c>)
 801180e:	4293      	cmp	r3, r2
 8011810:	d013      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	4a32      	ldr	r2, [pc, #200]	@ (80118e0 <TIM_Base_SetConfig+0x150>)
 8011816:	4293      	cmp	r3, r2
 8011818:	d00f      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4a31      	ldr	r2, [pc, #196]	@ (80118e4 <TIM_Base_SetConfig+0x154>)
 801181e:	4293      	cmp	r3, r2
 8011820:	d00b      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4a30      	ldr	r2, [pc, #192]	@ (80118e8 <TIM_Base_SetConfig+0x158>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d007      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	4a2f      	ldr	r2, [pc, #188]	@ (80118ec <TIM_Base_SetConfig+0x15c>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d003      	beq.n	801183a <TIM_Base_SetConfig+0xaa>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4a2e      	ldr	r2, [pc, #184]	@ (80118f0 <TIM_Base_SetConfig+0x160>)
 8011836:	4293      	cmp	r3, r2
 8011838:	d108      	bne.n	801184c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	68fa      	ldr	r2, [r7, #12]
 8011848:	4313      	orrs	r3, r2
 801184a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	695b      	ldr	r3, [r3, #20]
 8011856:	4313      	orrs	r3, r2
 8011858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	689a      	ldr	r2, [r3, #8]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4a16      	ldr	r2, [pc, #88]	@ (80118cc <TIM_Base_SetConfig+0x13c>)
 8011874:	4293      	cmp	r3, r2
 8011876:	d00f      	beq.n	8011898 <TIM_Base_SetConfig+0x108>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	4a18      	ldr	r2, [pc, #96]	@ (80118dc <TIM_Base_SetConfig+0x14c>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d00b      	beq.n	8011898 <TIM_Base_SetConfig+0x108>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4a17      	ldr	r2, [pc, #92]	@ (80118e0 <TIM_Base_SetConfig+0x150>)
 8011884:	4293      	cmp	r3, r2
 8011886:	d007      	beq.n	8011898 <TIM_Base_SetConfig+0x108>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4a16      	ldr	r2, [pc, #88]	@ (80118e4 <TIM_Base_SetConfig+0x154>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d003      	beq.n	8011898 <TIM_Base_SetConfig+0x108>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	4a15      	ldr	r2, [pc, #84]	@ (80118e8 <TIM_Base_SetConfig+0x158>)
 8011894:	4293      	cmp	r3, r2
 8011896:	d103      	bne.n	80118a0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	691a      	ldr	r2, [r3, #16]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2201      	movs	r2, #1
 80118a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	691b      	ldr	r3, [r3, #16]
 80118aa:	f003 0301 	and.w	r3, r3, #1
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d105      	bne.n	80118be <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	691b      	ldr	r3, [r3, #16]
 80118b6:	f023 0201 	bic.w	r2, r3, #1
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	611a      	str	r2, [r3, #16]
  }
}
 80118be:	bf00      	nop
 80118c0:	3714      	adds	r7, #20
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	40010000 	.word	0x40010000
 80118d0:	40000400 	.word	0x40000400
 80118d4:	40000800 	.word	0x40000800
 80118d8:	40000c00 	.word	0x40000c00
 80118dc:	40010400 	.word	0x40010400
 80118e0:	40014000 	.word	0x40014000
 80118e4:	40014400 	.word	0x40014400
 80118e8:	40014800 	.word	0x40014800
 80118ec:	4000e000 	.word	0x4000e000
 80118f0:	4000e400 	.word	0x4000e400

080118f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b087      	sub	sp, #28
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6a1b      	ldr	r3, [r3, #32]
 8011902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6a1b      	ldr	r3, [r3, #32]
 8011908:	f023 0201 	bic.w	r2, r3, #1
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	699b      	ldr	r3, [r3, #24]
 801191a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	4b37      	ldr	r3, [pc, #220]	@ (80119fc <TIM_OC1_SetConfig+0x108>)
 8011920:	4013      	ands	r3, r2
 8011922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	f023 0303 	bic.w	r3, r3, #3
 801192a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	68fa      	ldr	r2, [r7, #12]
 8011932:	4313      	orrs	r3, r2
 8011934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	f023 0302 	bic.w	r3, r3, #2
 801193c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	689b      	ldr	r3, [r3, #8]
 8011942:	697a      	ldr	r2, [r7, #20]
 8011944:	4313      	orrs	r3, r2
 8011946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	4a2d      	ldr	r2, [pc, #180]	@ (8011a00 <TIM_OC1_SetConfig+0x10c>)
 801194c:	4293      	cmp	r3, r2
 801194e:	d00f      	beq.n	8011970 <TIM_OC1_SetConfig+0x7c>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	4a2c      	ldr	r2, [pc, #176]	@ (8011a04 <TIM_OC1_SetConfig+0x110>)
 8011954:	4293      	cmp	r3, r2
 8011956:	d00b      	beq.n	8011970 <TIM_OC1_SetConfig+0x7c>
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	4a2b      	ldr	r2, [pc, #172]	@ (8011a08 <TIM_OC1_SetConfig+0x114>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d007      	beq.n	8011970 <TIM_OC1_SetConfig+0x7c>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	4a2a      	ldr	r2, [pc, #168]	@ (8011a0c <TIM_OC1_SetConfig+0x118>)
 8011964:	4293      	cmp	r3, r2
 8011966:	d003      	beq.n	8011970 <TIM_OC1_SetConfig+0x7c>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	4a29      	ldr	r2, [pc, #164]	@ (8011a10 <TIM_OC1_SetConfig+0x11c>)
 801196c:	4293      	cmp	r3, r2
 801196e:	d10c      	bne.n	801198a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	f023 0308 	bic.w	r3, r3, #8
 8011976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	697a      	ldr	r2, [r7, #20]
 801197e:	4313      	orrs	r3, r2
 8011980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	f023 0304 	bic.w	r3, r3, #4
 8011988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4a1c      	ldr	r2, [pc, #112]	@ (8011a00 <TIM_OC1_SetConfig+0x10c>)
 801198e:	4293      	cmp	r3, r2
 8011990:	d00f      	beq.n	80119b2 <TIM_OC1_SetConfig+0xbe>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	4a1b      	ldr	r2, [pc, #108]	@ (8011a04 <TIM_OC1_SetConfig+0x110>)
 8011996:	4293      	cmp	r3, r2
 8011998:	d00b      	beq.n	80119b2 <TIM_OC1_SetConfig+0xbe>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	4a1a      	ldr	r2, [pc, #104]	@ (8011a08 <TIM_OC1_SetConfig+0x114>)
 801199e:	4293      	cmp	r3, r2
 80119a0:	d007      	beq.n	80119b2 <TIM_OC1_SetConfig+0xbe>
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4a19      	ldr	r2, [pc, #100]	@ (8011a0c <TIM_OC1_SetConfig+0x118>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d003      	beq.n	80119b2 <TIM_OC1_SetConfig+0xbe>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4a18      	ldr	r2, [pc, #96]	@ (8011a10 <TIM_OC1_SetConfig+0x11c>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d111      	bne.n	80119d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80119b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80119c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	695b      	ldr	r3, [r3, #20]
 80119c6:	693a      	ldr	r2, [r7, #16]
 80119c8:	4313      	orrs	r3, r2
 80119ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	699b      	ldr	r3, [r3, #24]
 80119d0:	693a      	ldr	r2, [r7, #16]
 80119d2:	4313      	orrs	r3, r2
 80119d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	693a      	ldr	r2, [r7, #16]
 80119da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	685a      	ldr	r2, [r3, #4]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	697a      	ldr	r2, [r7, #20]
 80119ee:	621a      	str	r2, [r3, #32]
}
 80119f0:	bf00      	nop
 80119f2:	371c      	adds	r7, #28
 80119f4:	46bd      	mov	sp, r7
 80119f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fa:	4770      	bx	lr
 80119fc:	fffeff8f 	.word	0xfffeff8f
 8011a00:	40010000 	.word	0x40010000
 8011a04:	40010400 	.word	0x40010400
 8011a08:	40014000 	.word	0x40014000
 8011a0c:	40014400 	.word	0x40014400
 8011a10:	40014800 	.word	0x40014800

08011a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b087      	sub	sp, #28
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6a1b      	ldr	r3, [r3, #32]
 8011a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6a1b      	ldr	r3, [r3, #32]
 8011a28:	f023 0210 	bic.w	r2, r3, #16
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	699b      	ldr	r3, [r3, #24]
 8011a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011a3c:	68fa      	ldr	r2, [r7, #12]
 8011a3e:	4b34      	ldr	r3, [pc, #208]	@ (8011b10 <TIM_OC2_SetConfig+0xfc>)
 8011a40:	4013      	ands	r3, r2
 8011a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	021b      	lsls	r3, r3, #8
 8011a52:	68fa      	ldr	r2, [r7, #12]
 8011a54:	4313      	orrs	r3, r2
 8011a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	f023 0320 	bic.w	r3, r3, #32
 8011a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	011b      	lsls	r3, r3, #4
 8011a66:	697a      	ldr	r2, [r7, #20]
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	4a29      	ldr	r2, [pc, #164]	@ (8011b14 <TIM_OC2_SetConfig+0x100>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d003      	beq.n	8011a7c <TIM_OC2_SetConfig+0x68>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	4a28      	ldr	r2, [pc, #160]	@ (8011b18 <TIM_OC2_SetConfig+0x104>)
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d10d      	bne.n	8011a98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	011b      	lsls	r3, r3, #4
 8011a8a:	697a      	ldr	r2, [r7, #20]
 8011a8c:	4313      	orrs	r3, r2
 8011a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8011b14 <TIM_OC2_SetConfig+0x100>)
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d00f      	beq.n	8011ac0 <TIM_OC2_SetConfig+0xac>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8011b18 <TIM_OC2_SetConfig+0x104>)
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d00b      	beq.n	8011ac0 <TIM_OC2_SetConfig+0xac>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8011b1c <TIM_OC2_SetConfig+0x108>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d007      	beq.n	8011ac0 <TIM_OC2_SetConfig+0xac>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8011b20 <TIM_OC2_SetConfig+0x10c>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d003      	beq.n	8011ac0 <TIM_OC2_SetConfig+0xac>
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	4a1a      	ldr	r2, [pc, #104]	@ (8011b24 <TIM_OC2_SetConfig+0x110>)
 8011abc:	4293      	cmp	r3, r2
 8011abe:	d113      	bne.n	8011ae8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	693a      	ldr	r2, [r7, #16]
 8011ad8:	4313      	orrs	r3, r2
 8011ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	699b      	ldr	r3, [r3, #24]
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	693a      	ldr	r2, [r7, #16]
 8011ae4:	4313      	orrs	r3, r2
 8011ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	693a      	ldr	r2, [r7, #16]
 8011aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	68fa      	ldr	r2, [r7, #12]
 8011af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	685a      	ldr	r2, [r3, #4]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	697a      	ldr	r2, [r7, #20]
 8011b00:	621a      	str	r2, [r3, #32]
}
 8011b02:	bf00      	nop
 8011b04:	371c      	adds	r7, #28
 8011b06:	46bd      	mov	sp, r7
 8011b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop
 8011b10:	feff8fff 	.word	0xfeff8fff
 8011b14:	40010000 	.word	0x40010000
 8011b18:	40010400 	.word	0x40010400
 8011b1c:	40014000 	.word	0x40014000
 8011b20:	40014400 	.word	0x40014400
 8011b24:	40014800 	.word	0x40014800

08011b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b087      	sub	sp, #28
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6a1b      	ldr	r3, [r3, #32]
 8011b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6a1b      	ldr	r3, [r3, #32]
 8011b3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	69db      	ldr	r3, [r3, #28]
 8011b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011b50:	68fa      	ldr	r2, [r7, #12]
 8011b52:	4b33      	ldr	r3, [pc, #204]	@ (8011c20 <TIM_OC3_SetConfig+0xf8>)
 8011b54:	4013      	ands	r3, r2
 8011b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	f023 0303 	bic.w	r3, r3, #3
 8011b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	68fa      	ldr	r2, [r7, #12]
 8011b66:	4313      	orrs	r3, r2
 8011b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	689b      	ldr	r3, [r3, #8]
 8011b76:	021b      	lsls	r3, r3, #8
 8011b78:	697a      	ldr	r2, [r7, #20]
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	4a28      	ldr	r2, [pc, #160]	@ (8011c24 <TIM_OC3_SetConfig+0xfc>)
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d003      	beq.n	8011b8e <TIM_OC3_SetConfig+0x66>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	4a27      	ldr	r2, [pc, #156]	@ (8011c28 <TIM_OC3_SetConfig+0x100>)
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d10d      	bne.n	8011baa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	021b      	lsls	r3, r3, #8
 8011b9c:	697a      	ldr	r2, [r7, #20]
 8011b9e:	4313      	orrs	r3, r2
 8011ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	4a1d      	ldr	r2, [pc, #116]	@ (8011c24 <TIM_OC3_SetConfig+0xfc>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d00f      	beq.n	8011bd2 <TIM_OC3_SetConfig+0xaa>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8011c28 <TIM_OC3_SetConfig+0x100>)
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d00b      	beq.n	8011bd2 <TIM_OC3_SetConfig+0xaa>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8011c2c <TIM_OC3_SetConfig+0x104>)
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	d007      	beq.n	8011bd2 <TIM_OC3_SetConfig+0xaa>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8011c30 <TIM_OC3_SetConfig+0x108>)
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	d003      	beq.n	8011bd2 <TIM_OC3_SetConfig+0xaa>
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	4a19      	ldr	r2, [pc, #100]	@ (8011c34 <TIM_OC3_SetConfig+0x10c>)
 8011bce:	4293      	cmp	r3, r2
 8011bd0:	d113      	bne.n	8011bfa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	695b      	ldr	r3, [r3, #20]
 8011be6:	011b      	lsls	r3, r3, #4
 8011be8:	693a      	ldr	r2, [r7, #16]
 8011bea:	4313      	orrs	r3, r2
 8011bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	699b      	ldr	r3, [r3, #24]
 8011bf2:	011b      	lsls	r3, r3, #4
 8011bf4:	693a      	ldr	r2, [r7, #16]
 8011bf6:	4313      	orrs	r3, r2
 8011bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	693a      	ldr	r2, [r7, #16]
 8011bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	68fa      	ldr	r2, [r7, #12]
 8011c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	685a      	ldr	r2, [r3, #4]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	697a      	ldr	r2, [r7, #20]
 8011c12:	621a      	str	r2, [r3, #32]
}
 8011c14:	bf00      	nop
 8011c16:	371c      	adds	r7, #28
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr
 8011c20:	fffeff8f 	.word	0xfffeff8f
 8011c24:	40010000 	.word	0x40010000
 8011c28:	40010400 	.word	0x40010400
 8011c2c:	40014000 	.word	0x40014000
 8011c30:	40014400 	.word	0x40014400
 8011c34:	40014800 	.word	0x40014800

08011c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b087      	sub	sp, #28
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6a1b      	ldr	r3, [r3, #32]
 8011c46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6a1b      	ldr	r3, [r3, #32]
 8011c4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	69db      	ldr	r3, [r3, #28]
 8011c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011c60:	68fa      	ldr	r2, [r7, #12]
 8011c62:	4b24      	ldr	r3, [pc, #144]	@ (8011cf4 <TIM_OC4_SetConfig+0xbc>)
 8011c64:	4013      	ands	r3, r2
 8011c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	021b      	lsls	r3, r3, #8
 8011c76:	68fa      	ldr	r2, [r7, #12]
 8011c78:	4313      	orrs	r3, r2
 8011c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	689b      	ldr	r3, [r3, #8]
 8011c88:	031b      	lsls	r3, r3, #12
 8011c8a:	693a      	ldr	r2, [r7, #16]
 8011c8c:	4313      	orrs	r3, r2
 8011c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	4a19      	ldr	r2, [pc, #100]	@ (8011cf8 <TIM_OC4_SetConfig+0xc0>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d00f      	beq.n	8011cb8 <TIM_OC4_SetConfig+0x80>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	4a18      	ldr	r2, [pc, #96]	@ (8011cfc <TIM_OC4_SetConfig+0xc4>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d00b      	beq.n	8011cb8 <TIM_OC4_SetConfig+0x80>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4a17      	ldr	r2, [pc, #92]	@ (8011d00 <TIM_OC4_SetConfig+0xc8>)
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	d007      	beq.n	8011cb8 <TIM_OC4_SetConfig+0x80>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4a16      	ldr	r2, [pc, #88]	@ (8011d04 <TIM_OC4_SetConfig+0xcc>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d003      	beq.n	8011cb8 <TIM_OC4_SetConfig+0x80>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	4a15      	ldr	r2, [pc, #84]	@ (8011d08 <TIM_OC4_SetConfig+0xd0>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d109      	bne.n	8011ccc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	695b      	ldr	r3, [r3, #20]
 8011cc4:	019b      	lsls	r3, r3, #6
 8011cc6:	697a      	ldr	r2, [r7, #20]
 8011cc8:	4313      	orrs	r3, r2
 8011cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	697a      	ldr	r2, [r7, #20]
 8011cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	685a      	ldr	r2, [r3, #4]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	693a      	ldr	r2, [r7, #16]
 8011ce4:	621a      	str	r2, [r3, #32]
}
 8011ce6:	bf00      	nop
 8011ce8:	371c      	adds	r7, #28
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	feff8fff 	.word	0xfeff8fff
 8011cf8:	40010000 	.word	0x40010000
 8011cfc:	40010400 	.word	0x40010400
 8011d00:	40014000 	.word	0x40014000
 8011d04:	40014400 	.word	0x40014400
 8011d08:	40014800 	.word	0x40014800

08011d0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b087      	sub	sp, #28
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6a1b      	ldr	r3, [r3, #32]
 8011d1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6a1b      	ldr	r3, [r3, #32]
 8011d20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011d34:	68fa      	ldr	r2, [r7, #12]
 8011d36:	4b21      	ldr	r3, [pc, #132]	@ (8011dbc <TIM_OC5_SetConfig+0xb0>)
 8011d38:	4013      	ands	r3, r2
 8011d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	68fa      	ldr	r2, [r7, #12]
 8011d42:	4313      	orrs	r3, r2
 8011d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011d4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	689b      	ldr	r3, [r3, #8]
 8011d52:	041b      	lsls	r3, r3, #16
 8011d54:	693a      	ldr	r2, [r7, #16]
 8011d56:	4313      	orrs	r3, r2
 8011d58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	4a18      	ldr	r2, [pc, #96]	@ (8011dc0 <TIM_OC5_SetConfig+0xb4>)
 8011d5e:	4293      	cmp	r3, r2
 8011d60:	d00f      	beq.n	8011d82 <TIM_OC5_SetConfig+0x76>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	4a17      	ldr	r2, [pc, #92]	@ (8011dc4 <TIM_OC5_SetConfig+0xb8>)
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d00b      	beq.n	8011d82 <TIM_OC5_SetConfig+0x76>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	4a16      	ldr	r2, [pc, #88]	@ (8011dc8 <TIM_OC5_SetConfig+0xbc>)
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	d007      	beq.n	8011d82 <TIM_OC5_SetConfig+0x76>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	4a15      	ldr	r2, [pc, #84]	@ (8011dcc <TIM_OC5_SetConfig+0xc0>)
 8011d76:	4293      	cmp	r3, r2
 8011d78:	d003      	beq.n	8011d82 <TIM_OC5_SetConfig+0x76>
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	4a14      	ldr	r2, [pc, #80]	@ (8011dd0 <TIM_OC5_SetConfig+0xc4>)
 8011d7e:	4293      	cmp	r3, r2
 8011d80:	d109      	bne.n	8011d96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	695b      	ldr	r3, [r3, #20]
 8011d8e:	021b      	lsls	r3, r3, #8
 8011d90:	697a      	ldr	r2, [r7, #20]
 8011d92:	4313      	orrs	r3, r2
 8011d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	697a      	ldr	r2, [r7, #20]
 8011d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	68fa      	ldr	r2, [r7, #12]
 8011da0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	685a      	ldr	r2, [r3, #4]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	693a      	ldr	r2, [r7, #16]
 8011dae:	621a      	str	r2, [r3, #32]
}
 8011db0:	bf00      	nop
 8011db2:	371c      	adds	r7, #28
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	fffeff8f 	.word	0xfffeff8f
 8011dc0:	40010000 	.word	0x40010000
 8011dc4:	40010400 	.word	0x40010400
 8011dc8:	40014000 	.word	0x40014000
 8011dcc:	40014400 	.word	0x40014400
 8011dd0:	40014800 	.word	0x40014800

08011dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b087      	sub	sp, #28
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6a1b      	ldr	r3, [r3, #32]
 8011de2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6a1b      	ldr	r3, [r3, #32]
 8011de8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	4b22      	ldr	r3, [pc, #136]	@ (8011e88 <TIM_OC6_SetConfig+0xb4>)
 8011e00:	4013      	ands	r3, r2
 8011e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	021b      	lsls	r3, r3, #8
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	689b      	ldr	r3, [r3, #8]
 8011e1c:	051b      	lsls	r3, r3, #20
 8011e1e:	693a      	ldr	r2, [r7, #16]
 8011e20:	4313      	orrs	r3, r2
 8011e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	4a19      	ldr	r2, [pc, #100]	@ (8011e8c <TIM_OC6_SetConfig+0xb8>)
 8011e28:	4293      	cmp	r3, r2
 8011e2a:	d00f      	beq.n	8011e4c <TIM_OC6_SetConfig+0x78>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	4a18      	ldr	r2, [pc, #96]	@ (8011e90 <TIM_OC6_SetConfig+0xbc>)
 8011e30:	4293      	cmp	r3, r2
 8011e32:	d00b      	beq.n	8011e4c <TIM_OC6_SetConfig+0x78>
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	4a17      	ldr	r2, [pc, #92]	@ (8011e94 <TIM_OC6_SetConfig+0xc0>)
 8011e38:	4293      	cmp	r3, r2
 8011e3a:	d007      	beq.n	8011e4c <TIM_OC6_SetConfig+0x78>
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	4a16      	ldr	r2, [pc, #88]	@ (8011e98 <TIM_OC6_SetConfig+0xc4>)
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d003      	beq.n	8011e4c <TIM_OC6_SetConfig+0x78>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	4a15      	ldr	r2, [pc, #84]	@ (8011e9c <TIM_OC6_SetConfig+0xc8>)
 8011e48:	4293      	cmp	r3, r2
 8011e4a:	d109      	bne.n	8011e60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011e52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	695b      	ldr	r3, [r3, #20]
 8011e58:	029b      	lsls	r3, r3, #10
 8011e5a:	697a      	ldr	r2, [r7, #20]
 8011e5c:	4313      	orrs	r3, r2
 8011e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	697a      	ldr	r2, [r7, #20]
 8011e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	68fa      	ldr	r2, [r7, #12]
 8011e6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	685a      	ldr	r2, [r3, #4]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	693a      	ldr	r2, [r7, #16]
 8011e78:	621a      	str	r2, [r3, #32]
}
 8011e7a:	bf00      	nop
 8011e7c:	371c      	adds	r7, #28
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e84:	4770      	bx	lr
 8011e86:	bf00      	nop
 8011e88:	feff8fff 	.word	0xfeff8fff
 8011e8c:	40010000 	.word	0x40010000
 8011e90:	40010400 	.word	0x40010400
 8011e94:	40014000 	.word	0x40014000
 8011e98:	40014400 	.word	0x40014400
 8011e9c:	40014800 	.word	0x40014800

08011ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b087      	sub	sp, #28
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	60f8      	str	r0, [r7, #12]
 8011ea8:	60b9      	str	r1, [r7, #8]
 8011eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	6a1b      	ldr	r3, [r3, #32]
 8011eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	6a1b      	ldr	r3, [r3, #32]
 8011eb6:	f023 0201 	bic.w	r2, r3, #1
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	699b      	ldr	r3, [r3, #24]
 8011ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	011b      	lsls	r3, r3, #4
 8011ed0:	693a      	ldr	r2, [r7, #16]
 8011ed2:	4313      	orrs	r3, r2
 8011ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	f023 030a 	bic.w	r3, r3, #10
 8011edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011ede:	697a      	ldr	r2, [r7, #20]
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	693a      	ldr	r2, [r7, #16]
 8011eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	697a      	ldr	r2, [r7, #20]
 8011ef0:	621a      	str	r2, [r3, #32]
}
 8011ef2:	bf00      	nop
 8011ef4:	371c      	adds	r7, #28
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011efe:	b480      	push	{r7}
 8011f00:	b087      	sub	sp, #28
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	60f8      	str	r0, [r7, #12]
 8011f06:	60b9      	str	r1, [r7, #8]
 8011f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	6a1b      	ldr	r3, [r3, #32]
 8011f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	6a1b      	ldr	r3, [r3, #32]
 8011f14:	f023 0210 	bic.w	r2, r3, #16
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	699b      	ldr	r3, [r3, #24]
 8011f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	031b      	lsls	r3, r3, #12
 8011f2e:	693a      	ldr	r2, [r7, #16]
 8011f30:	4313      	orrs	r3, r2
 8011f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	011b      	lsls	r3, r3, #4
 8011f40:	697a      	ldr	r2, [r7, #20]
 8011f42:	4313      	orrs	r3, r2
 8011f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	693a      	ldr	r2, [r7, #16]
 8011f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	697a      	ldr	r2, [r7, #20]
 8011f50:	621a      	str	r2, [r3, #32]
}
 8011f52:	bf00      	nop
 8011f54:	371c      	adds	r7, #28
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr
	...

08011f60 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011f60:	b480      	push	{r7}
 8011f62:	b085      	sub	sp, #20
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	689b      	ldr	r3, [r3, #8]
 8011f6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011f70:	68fa      	ldr	r2, [r7, #12]
 8011f72:	4b09      	ldr	r3, [pc, #36]	@ (8011f98 <TIM_ITRx_SetConfig+0x38>)
 8011f74:	4013      	ands	r3, r2
 8011f76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011f78:	683a      	ldr	r2, [r7, #0]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	4313      	orrs	r3, r2
 8011f7e:	f043 0307 	orr.w	r3, r3, #7
 8011f82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	68fa      	ldr	r2, [r7, #12]
 8011f88:	609a      	str	r2, [r3, #8]
}
 8011f8a:	bf00      	nop
 8011f8c:	3714      	adds	r7, #20
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f94:	4770      	bx	lr
 8011f96:	bf00      	nop
 8011f98:	ffcfff8f 	.word	0xffcfff8f

08011f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b087      	sub	sp, #28
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
 8011fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	689b      	ldr	r3, [r3, #8]
 8011fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	021a      	lsls	r2, r3, #8
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	431a      	orrs	r2, r3
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	4313      	orrs	r3, r2
 8011fc4:	697a      	ldr	r2, [r7, #20]
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	697a      	ldr	r2, [r7, #20]
 8011fce:	609a      	str	r2, [r3, #8]
}
 8011fd0:	bf00      	nop
 8011fd2:	371c      	adds	r7, #28
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011fdc:	b480      	push	{r7}
 8011fde:	b085      	sub	sp, #20
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	d101      	bne.n	8011ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011ff0:	2302      	movs	r3, #2
 8011ff2:	e077      	b.n	80120e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2202      	movs	r2, #2
 8012000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	689b      	ldr	r3, [r3, #8]
 8012012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	4a35      	ldr	r2, [pc, #212]	@ (80120f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801201a:	4293      	cmp	r3, r2
 801201c:	d004      	beq.n	8012028 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	4a34      	ldr	r2, [pc, #208]	@ (80120f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012024:	4293      	cmp	r3, r2
 8012026:	d108      	bne.n	801203a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801202e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	68fa      	ldr	r2, [r7, #12]
 8012036:	4313      	orrs	r3, r2
 8012038:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012040:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	4313      	orrs	r3, r2
 801204a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	68fa      	ldr	r2, [r7, #12]
 8012052:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	4a25      	ldr	r2, [pc, #148]	@ (80120f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801205a:	4293      	cmp	r3, r2
 801205c:	d02c      	beq.n	80120b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012066:	d027      	beq.n	80120b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	4a22      	ldr	r2, [pc, #136]	@ (80120f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801206e:	4293      	cmp	r3, r2
 8012070:	d022      	beq.n	80120b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	4a21      	ldr	r2, [pc, #132]	@ (80120fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8012078:	4293      	cmp	r3, r2
 801207a:	d01d      	beq.n	80120b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4a1f      	ldr	r2, [pc, #124]	@ (8012100 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8012082:	4293      	cmp	r3, r2
 8012084:	d018      	beq.n	80120b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	4a1a      	ldr	r2, [pc, #104]	@ (80120f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801208c:	4293      	cmp	r3, r2
 801208e:	d013      	beq.n	80120b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	4a1b      	ldr	r2, [pc, #108]	@ (8012104 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8012096:	4293      	cmp	r3, r2
 8012098:	d00e      	beq.n	80120b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	4a1a      	ldr	r2, [pc, #104]	@ (8012108 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80120a0:	4293      	cmp	r3, r2
 80120a2:	d009      	beq.n	80120b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	4a18      	ldr	r2, [pc, #96]	@ (801210c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80120aa:	4293      	cmp	r3, r2
 80120ac:	d004      	beq.n	80120b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	4a17      	ldr	r2, [pc, #92]	@ (8012110 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80120b4:	4293      	cmp	r3, r2
 80120b6:	d10c      	bne.n	80120d2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80120be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	4313      	orrs	r3, r2
 80120c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	68ba      	ldr	r2, [r7, #8]
 80120d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2201      	movs	r2, #1
 80120d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80120e2:	2300      	movs	r3, #0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3714      	adds	r7, #20
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr
 80120f0:	40010000 	.word	0x40010000
 80120f4:	40010400 	.word	0x40010400
 80120f8:	40000400 	.word	0x40000400
 80120fc:	40000800 	.word	0x40000800
 8012100:	40000c00 	.word	0x40000c00
 8012104:	40001800 	.word	0x40001800
 8012108:	40014000 	.word	0x40014000
 801210c:	4000e000 	.word	0x4000e000
 8012110:	4000e400 	.word	0x4000e400

08012114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012114:	b480      	push	{r7}
 8012116:	b085      	sub	sp, #20
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801211e:	2300      	movs	r3, #0
 8012120:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012128:	2b01      	cmp	r3, #1
 801212a:	d101      	bne.n	8012130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801212c:	2302      	movs	r3, #2
 801212e:	e073      	b.n	8012218 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2201      	movs	r2, #1
 8012134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	68db      	ldr	r3, [r3, #12]
 8012142:	4313      	orrs	r3, r2
 8012144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	4313      	orrs	r3, r2
 8012152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	4313      	orrs	r3, r2
 8012160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	4313      	orrs	r3, r2
 801216e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	691b      	ldr	r3, [r3, #16]
 801217a:	4313      	orrs	r3, r2
 801217c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	695b      	ldr	r3, [r3, #20]
 8012188:	4313      	orrs	r3, r2
 801218a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012196:	4313      	orrs	r3, r2
 8012198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	699b      	ldr	r3, [r3, #24]
 80121a4:	041b      	lsls	r3, r3, #16
 80121a6:	4313      	orrs	r3, r2
 80121a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	69db      	ldr	r3, [r3, #28]
 80121b4:	4313      	orrs	r3, r2
 80121b6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	4a19      	ldr	r2, [pc, #100]	@ (8012224 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80121be:	4293      	cmp	r3, r2
 80121c0:	d004      	beq.n	80121cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4a18      	ldr	r2, [pc, #96]	@ (8012228 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80121c8:	4293      	cmp	r3, r2
 80121ca:	d11c      	bne.n	8012206 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121d6:	051b      	lsls	r3, r3, #20
 80121d8:	4313      	orrs	r3, r2
 80121da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	6a1b      	ldr	r3, [r3, #32]
 80121e6:	4313      	orrs	r3, r2
 80121e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121f4:	4313      	orrs	r3, r2
 80121f6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012202:	4313      	orrs	r3, r2
 8012204:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	68fa      	ldr	r2, [r7, #12]
 801220c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2200      	movs	r2, #0
 8012212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012216:	2300      	movs	r3, #0
}
 8012218:	4618      	mov	r0, r3
 801221a:	3714      	adds	r7, #20
 801221c:	46bd      	mov	sp, r7
 801221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012222:	4770      	bx	lr
 8012224:	40010000 	.word	0x40010000
 8012228:	40010400 	.word	0x40010400

0801222c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012234:	bf00      	nop
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr

08012240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012248:	bf00      	nop
 801224a:	370c      	adds	r7, #12
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012254:	b480      	push	{r7}
 8012256:	b083      	sub	sp, #12
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801225c:	bf00      	nop
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012276:	2301      	movs	r3, #1
 8012278:	e042      	b.n	8012300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012280:	2b00      	cmp	r3, #0
 8012282:	d106      	bne.n	8012292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2200      	movs	r2, #0
 8012288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7f1 ff4b 	bl	8004128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2224      	movs	r2, #36	@ 0x24
 8012296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	681a      	ldr	r2, [r3, #0]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f022 0201 	bic.w	r2, r2, #1
 80122a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d002      	beq.n	80122b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 ff22 	bl	80130fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 f8b3 	bl	8012424 <UART_SetConfig>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	d101      	bne.n	80122c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80122c4:	2301      	movs	r3, #1
 80122c6:	e01b      	b.n	8012300 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	685a      	ldr	r2, [r3, #4]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80122d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	689a      	ldr	r2, [r3, #8]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80122e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	681a      	ldr	r2, [r3, #0]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f042 0201 	orr.w	r2, r2, #1
 80122f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f000 ffa1 	bl	8013240 <UART_CheckIdleState>
 80122fe:	4603      	mov	r3, r0
}
 8012300:	4618      	mov	r0, r3
 8012302:	3708      	adds	r7, #8
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b08a      	sub	sp, #40	@ 0x28
 801230c:	af02      	add	r7, sp, #8
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	60b9      	str	r1, [r7, #8]
 8012312:	603b      	str	r3, [r7, #0]
 8012314:	4613      	mov	r3, r2
 8012316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801231e:	2b20      	cmp	r3, #32
 8012320:	d17b      	bne.n	801241a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <HAL_UART_Transmit+0x26>
 8012328:	88fb      	ldrh	r3, [r7, #6]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d101      	bne.n	8012332 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801232e:	2301      	movs	r3, #1
 8012330:	e074      	b.n	801241c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2200      	movs	r2, #0
 8012336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2221      	movs	r2, #33	@ 0x21
 801233e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012342:	f7f2 fa11 	bl	8004768 <HAL_GetTick>
 8012346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	88fa      	ldrh	r2, [r7, #6]
 801234c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	88fa      	ldrh	r2, [r7, #6]
 8012354:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012360:	d108      	bne.n	8012374 <HAL_UART_Transmit+0x6c>
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	691b      	ldr	r3, [r3, #16]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d104      	bne.n	8012374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801236a:	2300      	movs	r3, #0
 801236c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	61bb      	str	r3, [r7, #24]
 8012372:	e003      	b.n	801237c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012378:	2300      	movs	r3, #0
 801237a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801237c:	e030      	b.n	80123e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	9300      	str	r3, [sp, #0]
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	2200      	movs	r2, #0
 8012386:	2180      	movs	r1, #128	@ 0x80
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f001 f803 	bl	8013394 <UART_WaitOnFlagUntilTimeout>
 801238e:	4603      	mov	r3, r0
 8012390:	2b00      	cmp	r3, #0
 8012392:	d005      	beq.n	80123a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	2220      	movs	r2, #32
 8012398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801239c:	2303      	movs	r3, #3
 801239e:	e03d      	b.n	801241c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d10b      	bne.n	80123be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80123a6:	69bb      	ldr	r3, [r7, #24]
 80123a8:	881b      	ldrh	r3, [r3, #0]
 80123aa:	461a      	mov	r2, r3
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80123b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	3302      	adds	r3, #2
 80123ba:	61bb      	str	r3, [r7, #24]
 80123bc:	e007      	b.n	80123ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80123be:	69fb      	ldr	r3, [r7, #28]
 80123c0:	781a      	ldrb	r2, [r3, #0]
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	3301      	adds	r3, #1
 80123cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	3b01      	subs	r3, #1
 80123d8:	b29a      	uxth	r2, r3
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d1c8      	bne.n	801237e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	9300      	str	r3, [sp, #0]
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	2200      	movs	r2, #0
 80123f4:	2140      	movs	r1, #64	@ 0x40
 80123f6:	68f8      	ldr	r0, [r7, #12]
 80123f8:	f000 ffcc 	bl	8013394 <UART_WaitOnFlagUntilTimeout>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d005      	beq.n	801240e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	2220      	movs	r2, #32
 8012406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801240a:	2303      	movs	r3, #3
 801240c:	e006      	b.n	801241c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	2220      	movs	r2, #32
 8012412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8012416:	2300      	movs	r3, #0
 8012418:	e000      	b.n	801241c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801241a:	2302      	movs	r3, #2
  }
}
 801241c:	4618      	mov	r0, r3
 801241e:	3720      	adds	r7, #32
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012428:	b092      	sub	sp, #72	@ 0x48
 801242a:	af00      	add	r7, sp, #0
 801242c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801242e:	2300      	movs	r3, #0
 8012430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	689a      	ldr	r2, [r3, #8]
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	691b      	ldr	r3, [r3, #16]
 801243c:	431a      	orrs	r2, r3
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	695b      	ldr	r3, [r3, #20]
 8012442:	431a      	orrs	r2, r3
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	69db      	ldr	r3, [r3, #28]
 8012448:	4313      	orrs	r3, r2
 801244a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	681a      	ldr	r2, [r3, #0]
 8012452:	4bbe      	ldr	r3, [pc, #760]	@ (801274c <UART_SetConfig+0x328>)
 8012454:	4013      	ands	r3, r2
 8012456:	697a      	ldr	r2, [r7, #20]
 8012458:	6812      	ldr	r2, [r2, #0]
 801245a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801245c:	430b      	orrs	r3, r1
 801245e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	68da      	ldr	r2, [r3, #12]
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	430a      	orrs	r2, r1
 8012474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	699b      	ldr	r3, [r3, #24]
 801247a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4ab3      	ldr	r2, [pc, #716]	@ (8012750 <UART_SetConfig+0x32c>)
 8012482:	4293      	cmp	r3, r2
 8012484:	d004      	beq.n	8012490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	6a1b      	ldr	r3, [r3, #32]
 801248a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801248c:	4313      	orrs	r3, r2
 801248e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	689a      	ldr	r2, [r3, #8]
 8012496:	4baf      	ldr	r3, [pc, #700]	@ (8012754 <UART_SetConfig+0x330>)
 8012498:	4013      	ands	r3, r2
 801249a:	697a      	ldr	r2, [r7, #20]
 801249c:	6812      	ldr	r2, [r2, #0]
 801249e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80124a0:	430b      	orrs	r3, r1
 80124a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124aa:	f023 010f 	bic.w	r1, r3, #15
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	430a      	orrs	r2, r1
 80124b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4aa6      	ldr	r2, [pc, #664]	@ (8012758 <UART_SetConfig+0x334>)
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d177      	bne.n	80125b4 <UART_SetConfig+0x190>
 80124c4:	4ba5      	ldr	r3, [pc, #660]	@ (801275c <UART_SetConfig+0x338>)
 80124c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80124cc:	2b28      	cmp	r3, #40	@ 0x28
 80124ce:	d86d      	bhi.n	80125ac <UART_SetConfig+0x188>
 80124d0:	a201      	add	r2, pc, #4	@ (adr r2, 80124d8 <UART_SetConfig+0xb4>)
 80124d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124d6:	bf00      	nop
 80124d8:	0801257d 	.word	0x0801257d
 80124dc:	080125ad 	.word	0x080125ad
 80124e0:	080125ad 	.word	0x080125ad
 80124e4:	080125ad 	.word	0x080125ad
 80124e8:	080125ad 	.word	0x080125ad
 80124ec:	080125ad 	.word	0x080125ad
 80124f0:	080125ad 	.word	0x080125ad
 80124f4:	080125ad 	.word	0x080125ad
 80124f8:	08012585 	.word	0x08012585
 80124fc:	080125ad 	.word	0x080125ad
 8012500:	080125ad 	.word	0x080125ad
 8012504:	080125ad 	.word	0x080125ad
 8012508:	080125ad 	.word	0x080125ad
 801250c:	080125ad 	.word	0x080125ad
 8012510:	080125ad 	.word	0x080125ad
 8012514:	080125ad 	.word	0x080125ad
 8012518:	0801258d 	.word	0x0801258d
 801251c:	080125ad 	.word	0x080125ad
 8012520:	080125ad 	.word	0x080125ad
 8012524:	080125ad 	.word	0x080125ad
 8012528:	080125ad 	.word	0x080125ad
 801252c:	080125ad 	.word	0x080125ad
 8012530:	080125ad 	.word	0x080125ad
 8012534:	080125ad 	.word	0x080125ad
 8012538:	08012595 	.word	0x08012595
 801253c:	080125ad 	.word	0x080125ad
 8012540:	080125ad 	.word	0x080125ad
 8012544:	080125ad 	.word	0x080125ad
 8012548:	080125ad 	.word	0x080125ad
 801254c:	080125ad 	.word	0x080125ad
 8012550:	080125ad 	.word	0x080125ad
 8012554:	080125ad 	.word	0x080125ad
 8012558:	0801259d 	.word	0x0801259d
 801255c:	080125ad 	.word	0x080125ad
 8012560:	080125ad 	.word	0x080125ad
 8012564:	080125ad 	.word	0x080125ad
 8012568:	080125ad 	.word	0x080125ad
 801256c:	080125ad 	.word	0x080125ad
 8012570:	080125ad 	.word	0x080125ad
 8012574:	080125ad 	.word	0x080125ad
 8012578:	080125a5 	.word	0x080125a5
 801257c:	2301      	movs	r3, #1
 801257e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012582:	e326      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012584:	2304      	movs	r3, #4
 8012586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801258a:	e322      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 801258c:	2308      	movs	r3, #8
 801258e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012592:	e31e      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012594:	2310      	movs	r3, #16
 8012596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801259a:	e31a      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 801259c:	2320      	movs	r3, #32
 801259e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125a2:	e316      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80125a4:	2340      	movs	r3, #64	@ 0x40
 80125a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125aa:	e312      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80125ac:	2380      	movs	r3, #128	@ 0x80
 80125ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125b2:	e30e      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4a69      	ldr	r2, [pc, #420]	@ (8012760 <UART_SetConfig+0x33c>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d130      	bne.n	8012620 <UART_SetConfig+0x1fc>
 80125be:	4b67      	ldr	r3, [pc, #412]	@ (801275c <UART_SetConfig+0x338>)
 80125c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125c2:	f003 0307 	and.w	r3, r3, #7
 80125c6:	2b05      	cmp	r3, #5
 80125c8:	d826      	bhi.n	8012618 <UART_SetConfig+0x1f4>
 80125ca:	a201      	add	r2, pc, #4	@ (adr r2, 80125d0 <UART_SetConfig+0x1ac>)
 80125cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125d0:	080125e9 	.word	0x080125e9
 80125d4:	080125f1 	.word	0x080125f1
 80125d8:	080125f9 	.word	0x080125f9
 80125dc:	08012601 	.word	0x08012601
 80125e0:	08012609 	.word	0x08012609
 80125e4:	08012611 	.word	0x08012611
 80125e8:	2300      	movs	r3, #0
 80125ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125ee:	e2f0      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80125f0:	2304      	movs	r3, #4
 80125f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125f6:	e2ec      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80125f8:	2308      	movs	r3, #8
 80125fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125fe:	e2e8      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012600:	2310      	movs	r3, #16
 8012602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012606:	e2e4      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012608:	2320      	movs	r3, #32
 801260a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801260e:	e2e0      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012610:	2340      	movs	r3, #64	@ 0x40
 8012612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012616:	e2dc      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012618:	2380      	movs	r3, #128	@ 0x80
 801261a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801261e:	e2d8      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4a4f      	ldr	r2, [pc, #316]	@ (8012764 <UART_SetConfig+0x340>)
 8012626:	4293      	cmp	r3, r2
 8012628:	d130      	bne.n	801268c <UART_SetConfig+0x268>
 801262a:	4b4c      	ldr	r3, [pc, #304]	@ (801275c <UART_SetConfig+0x338>)
 801262c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801262e:	f003 0307 	and.w	r3, r3, #7
 8012632:	2b05      	cmp	r3, #5
 8012634:	d826      	bhi.n	8012684 <UART_SetConfig+0x260>
 8012636:	a201      	add	r2, pc, #4	@ (adr r2, 801263c <UART_SetConfig+0x218>)
 8012638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801263c:	08012655 	.word	0x08012655
 8012640:	0801265d 	.word	0x0801265d
 8012644:	08012665 	.word	0x08012665
 8012648:	0801266d 	.word	0x0801266d
 801264c:	08012675 	.word	0x08012675
 8012650:	0801267d 	.word	0x0801267d
 8012654:	2300      	movs	r3, #0
 8012656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801265a:	e2ba      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 801265c:	2304      	movs	r3, #4
 801265e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012662:	e2b6      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012664:	2308      	movs	r3, #8
 8012666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801266a:	e2b2      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 801266c:	2310      	movs	r3, #16
 801266e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012672:	e2ae      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012674:	2320      	movs	r3, #32
 8012676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801267a:	e2aa      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 801267c:	2340      	movs	r3, #64	@ 0x40
 801267e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012682:	e2a6      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012684:	2380      	movs	r3, #128	@ 0x80
 8012686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801268a:	e2a2      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	4a35      	ldr	r2, [pc, #212]	@ (8012768 <UART_SetConfig+0x344>)
 8012692:	4293      	cmp	r3, r2
 8012694:	d130      	bne.n	80126f8 <UART_SetConfig+0x2d4>
 8012696:	4b31      	ldr	r3, [pc, #196]	@ (801275c <UART_SetConfig+0x338>)
 8012698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801269a:	f003 0307 	and.w	r3, r3, #7
 801269e:	2b05      	cmp	r3, #5
 80126a0:	d826      	bhi.n	80126f0 <UART_SetConfig+0x2cc>
 80126a2:	a201      	add	r2, pc, #4	@ (adr r2, 80126a8 <UART_SetConfig+0x284>)
 80126a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126a8:	080126c1 	.word	0x080126c1
 80126ac:	080126c9 	.word	0x080126c9
 80126b0:	080126d1 	.word	0x080126d1
 80126b4:	080126d9 	.word	0x080126d9
 80126b8:	080126e1 	.word	0x080126e1
 80126bc:	080126e9 	.word	0x080126e9
 80126c0:	2300      	movs	r3, #0
 80126c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126c6:	e284      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80126c8:	2304      	movs	r3, #4
 80126ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126ce:	e280      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80126d0:	2308      	movs	r3, #8
 80126d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126d6:	e27c      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80126d8:	2310      	movs	r3, #16
 80126da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126de:	e278      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80126e0:	2320      	movs	r3, #32
 80126e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126e6:	e274      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80126e8:	2340      	movs	r3, #64	@ 0x40
 80126ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126ee:	e270      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80126f0:	2380      	movs	r3, #128	@ 0x80
 80126f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126f6:	e26c      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	4a1b      	ldr	r2, [pc, #108]	@ (801276c <UART_SetConfig+0x348>)
 80126fe:	4293      	cmp	r3, r2
 8012700:	d142      	bne.n	8012788 <UART_SetConfig+0x364>
 8012702:	4b16      	ldr	r3, [pc, #88]	@ (801275c <UART_SetConfig+0x338>)
 8012704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012706:	f003 0307 	and.w	r3, r3, #7
 801270a:	2b05      	cmp	r3, #5
 801270c:	d838      	bhi.n	8012780 <UART_SetConfig+0x35c>
 801270e:	a201      	add	r2, pc, #4	@ (adr r2, 8012714 <UART_SetConfig+0x2f0>)
 8012710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012714:	0801272d 	.word	0x0801272d
 8012718:	08012735 	.word	0x08012735
 801271c:	0801273d 	.word	0x0801273d
 8012720:	08012745 	.word	0x08012745
 8012724:	08012771 	.word	0x08012771
 8012728:	08012779 	.word	0x08012779
 801272c:	2300      	movs	r3, #0
 801272e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012732:	e24e      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012734:	2304      	movs	r3, #4
 8012736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801273a:	e24a      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 801273c:	2308      	movs	r3, #8
 801273e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012742:	e246      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012744:	2310      	movs	r3, #16
 8012746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801274a:	e242      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 801274c:	cfff69f3 	.word	0xcfff69f3
 8012750:	58000c00 	.word	0x58000c00
 8012754:	11fff4ff 	.word	0x11fff4ff
 8012758:	40011000 	.word	0x40011000
 801275c:	58024400 	.word	0x58024400
 8012760:	40004400 	.word	0x40004400
 8012764:	40004800 	.word	0x40004800
 8012768:	40004c00 	.word	0x40004c00
 801276c:	40005000 	.word	0x40005000
 8012770:	2320      	movs	r3, #32
 8012772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012776:	e22c      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012778:	2340      	movs	r3, #64	@ 0x40
 801277a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801277e:	e228      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012780:	2380      	movs	r3, #128	@ 0x80
 8012782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012786:	e224      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4ab1      	ldr	r2, [pc, #708]	@ (8012a54 <UART_SetConfig+0x630>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d176      	bne.n	8012880 <UART_SetConfig+0x45c>
 8012792:	4bb1      	ldr	r3, [pc, #708]	@ (8012a58 <UART_SetConfig+0x634>)
 8012794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801279a:	2b28      	cmp	r3, #40	@ 0x28
 801279c:	d86c      	bhi.n	8012878 <UART_SetConfig+0x454>
 801279e:	a201      	add	r2, pc, #4	@ (adr r2, 80127a4 <UART_SetConfig+0x380>)
 80127a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127a4:	08012849 	.word	0x08012849
 80127a8:	08012879 	.word	0x08012879
 80127ac:	08012879 	.word	0x08012879
 80127b0:	08012879 	.word	0x08012879
 80127b4:	08012879 	.word	0x08012879
 80127b8:	08012879 	.word	0x08012879
 80127bc:	08012879 	.word	0x08012879
 80127c0:	08012879 	.word	0x08012879
 80127c4:	08012851 	.word	0x08012851
 80127c8:	08012879 	.word	0x08012879
 80127cc:	08012879 	.word	0x08012879
 80127d0:	08012879 	.word	0x08012879
 80127d4:	08012879 	.word	0x08012879
 80127d8:	08012879 	.word	0x08012879
 80127dc:	08012879 	.word	0x08012879
 80127e0:	08012879 	.word	0x08012879
 80127e4:	08012859 	.word	0x08012859
 80127e8:	08012879 	.word	0x08012879
 80127ec:	08012879 	.word	0x08012879
 80127f0:	08012879 	.word	0x08012879
 80127f4:	08012879 	.word	0x08012879
 80127f8:	08012879 	.word	0x08012879
 80127fc:	08012879 	.word	0x08012879
 8012800:	08012879 	.word	0x08012879
 8012804:	08012861 	.word	0x08012861
 8012808:	08012879 	.word	0x08012879
 801280c:	08012879 	.word	0x08012879
 8012810:	08012879 	.word	0x08012879
 8012814:	08012879 	.word	0x08012879
 8012818:	08012879 	.word	0x08012879
 801281c:	08012879 	.word	0x08012879
 8012820:	08012879 	.word	0x08012879
 8012824:	08012869 	.word	0x08012869
 8012828:	08012879 	.word	0x08012879
 801282c:	08012879 	.word	0x08012879
 8012830:	08012879 	.word	0x08012879
 8012834:	08012879 	.word	0x08012879
 8012838:	08012879 	.word	0x08012879
 801283c:	08012879 	.word	0x08012879
 8012840:	08012879 	.word	0x08012879
 8012844:	08012871 	.word	0x08012871
 8012848:	2301      	movs	r3, #1
 801284a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801284e:	e1c0      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012850:	2304      	movs	r3, #4
 8012852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012856:	e1bc      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012858:	2308      	movs	r3, #8
 801285a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801285e:	e1b8      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012860:	2310      	movs	r3, #16
 8012862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012866:	e1b4      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012868:	2320      	movs	r3, #32
 801286a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801286e:	e1b0      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012870:	2340      	movs	r3, #64	@ 0x40
 8012872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012876:	e1ac      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012878:	2380      	movs	r3, #128	@ 0x80
 801287a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801287e:	e1a8      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	4a75      	ldr	r2, [pc, #468]	@ (8012a5c <UART_SetConfig+0x638>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d130      	bne.n	80128ec <UART_SetConfig+0x4c8>
 801288a:	4b73      	ldr	r3, [pc, #460]	@ (8012a58 <UART_SetConfig+0x634>)
 801288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801288e:	f003 0307 	and.w	r3, r3, #7
 8012892:	2b05      	cmp	r3, #5
 8012894:	d826      	bhi.n	80128e4 <UART_SetConfig+0x4c0>
 8012896:	a201      	add	r2, pc, #4	@ (adr r2, 801289c <UART_SetConfig+0x478>)
 8012898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801289c:	080128b5 	.word	0x080128b5
 80128a0:	080128bd 	.word	0x080128bd
 80128a4:	080128c5 	.word	0x080128c5
 80128a8:	080128cd 	.word	0x080128cd
 80128ac:	080128d5 	.word	0x080128d5
 80128b0:	080128dd 	.word	0x080128dd
 80128b4:	2300      	movs	r3, #0
 80128b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128ba:	e18a      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80128bc:	2304      	movs	r3, #4
 80128be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128c2:	e186      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80128c4:	2308      	movs	r3, #8
 80128c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128ca:	e182      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80128cc:	2310      	movs	r3, #16
 80128ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128d2:	e17e      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80128d4:	2320      	movs	r3, #32
 80128d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128da:	e17a      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80128dc:	2340      	movs	r3, #64	@ 0x40
 80128de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128e2:	e176      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80128e4:	2380      	movs	r3, #128	@ 0x80
 80128e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128ea:	e172      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4a5b      	ldr	r2, [pc, #364]	@ (8012a60 <UART_SetConfig+0x63c>)
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d130      	bne.n	8012958 <UART_SetConfig+0x534>
 80128f6:	4b58      	ldr	r3, [pc, #352]	@ (8012a58 <UART_SetConfig+0x634>)
 80128f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128fa:	f003 0307 	and.w	r3, r3, #7
 80128fe:	2b05      	cmp	r3, #5
 8012900:	d826      	bhi.n	8012950 <UART_SetConfig+0x52c>
 8012902:	a201      	add	r2, pc, #4	@ (adr r2, 8012908 <UART_SetConfig+0x4e4>)
 8012904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012908:	08012921 	.word	0x08012921
 801290c:	08012929 	.word	0x08012929
 8012910:	08012931 	.word	0x08012931
 8012914:	08012939 	.word	0x08012939
 8012918:	08012941 	.word	0x08012941
 801291c:	08012949 	.word	0x08012949
 8012920:	2300      	movs	r3, #0
 8012922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012926:	e154      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012928:	2304      	movs	r3, #4
 801292a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801292e:	e150      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012930:	2308      	movs	r3, #8
 8012932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012936:	e14c      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012938:	2310      	movs	r3, #16
 801293a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801293e:	e148      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012940:	2320      	movs	r3, #32
 8012942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012946:	e144      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012948:	2340      	movs	r3, #64	@ 0x40
 801294a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801294e:	e140      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012950:	2380      	movs	r3, #128	@ 0x80
 8012952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012956:	e13c      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	4a41      	ldr	r2, [pc, #260]	@ (8012a64 <UART_SetConfig+0x640>)
 801295e:	4293      	cmp	r3, r2
 8012960:	f040 8082 	bne.w	8012a68 <UART_SetConfig+0x644>
 8012964:	4b3c      	ldr	r3, [pc, #240]	@ (8012a58 <UART_SetConfig+0x634>)
 8012966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801296c:	2b28      	cmp	r3, #40	@ 0x28
 801296e:	d86d      	bhi.n	8012a4c <UART_SetConfig+0x628>
 8012970:	a201      	add	r2, pc, #4	@ (adr r2, 8012978 <UART_SetConfig+0x554>)
 8012972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012976:	bf00      	nop
 8012978:	08012a1d 	.word	0x08012a1d
 801297c:	08012a4d 	.word	0x08012a4d
 8012980:	08012a4d 	.word	0x08012a4d
 8012984:	08012a4d 	.word	0x08012a4d
 8012988:	08012a4d 	.word	0x08012a4d
 801298c:	08012a4d 	.word	0x08012a4d
 8012990:	08012a4d 	.word	0x08012a4d
 8012994:	08012a4d 	.word	0x08012a4d
 8012998:	08012a25 	.word	0x08012a25
 801299c:	08012a4d 	.word	0x08012a4d
 80129a0:	08012a4d 	.word	0x08012a4d
 80129a4:	08012a4d 	.word	0x08012a4d
 80129a8:	08012a4d 	.word	0x08012a4d
 80129ac:	08012a4d 	.word	0x08012a4d
 80129b0:	08012a4d 	.word	0x08012a4d
 80129b4:	08012a4d 	.word	0x08012a4d
 80129b8:	08012a2d 	.word	0x08012a2d
 80129bc:	08012a4d 	.word	0x08012a4d
 80129c0:	08012a4d 	.word	0x08012a4d
 80129c4:	08012a4d 	.word	0x08012a4d
 80129c8:	08012a4d 	.word	0x08012a4d
 80129cc:	08012a4d 	.word	0x08012a4d
 80129d0:	08012a4d 	.word	0x08012a4d
 80129d4:	08012a4d 	.word	0x08012a4d
 80129d8:	08012a35 	.word	0x08012a35
 80129dc:	08012a4d 	.word	0x08012a4d
 80129e0:	08012a4d 	.word	0x08012a4d
 80129e4:	08012a4d 	.word	0x08012a4d
 80129e8:	08012a4d 	.word	0x08012a4d
 80129ec:	08012a4d 	.word	0x08012a4d
 80129f0:	08012a4d 	.word	0x08012a4d
 80129f4:	08012a4d 	.word	0x08012a4d
 80129f8:	08012a3d 	.word	0x08012a3d
 80129fc:	08012a4d 	.word	0x08012a4d
 8012a00:	08012a4d 	.word	0x08012a4d
 8012a04:	08012a4d 	.word	0x08012a4d
 8012a08:	08012a4d 	.word	0x08012a4d
 8012a0c:	08012a4d 	.word	0x08012a4d
 8012a10:	08012a4d 	.word	0x08012a4d
 8012a14:	08012a4d 	.word	0x08012a4d
 8012a18:	08012a45 	.word	0x08012a45
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a22:	e0d6      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012a24:	2304      	movs	r3, #4
 8012a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a2a:	e0d2      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012a2c:	2308      	movs	r3, #8
 8012a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a32:	e0ce      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012a34:	2310      	movs	r3, #16
 8012a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a3a:	e0ca      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012a3c:	2320      	movs	r3, #32
 8012a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a42:	e0c6      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012a44:	2340      	movs	r3, #64	@ 0x40
 8012a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a4a:	e0c2      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012a4c:	2380      	movs	r3, #128	@ 0x80
 8012a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a52:	e0be      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012a54:	40011400 	.word	0x40011400
 8012a58:	58024400 	.word	0x58024400
 8012a5c:	40007800 	.word	0x40007800
 8012a60:	40007c00 	.word	0x40007c00
 8012a64:	40011800 	.word	0x40011800
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	4aad      	ldr	r2, [pc, #692]	@ (8012d24 <UART_SetConfig+0x900>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d176      	bne.n	8012b60 <UART_SetConfig+0x73c>
 8012a72:	4bad      	ldr	r3, [pc, #692]	@ (8012d28 <UART_SetConfig+0x904>)
 8012a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012a7a:	2b28      	cmp	r3, #40	@ 0x28
 8012a7c:	d86c      	bhi.n	8012b58 <UART_SetConfig+0x734>
 8012a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8012a84 <UART_SetConfig+0x660>)
 8012a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a84:	08012b29 	.word	0x08012b29
 8012a88:	08012b59 	.word	0x08012b59
 8012a8c:	08012b59 	.word	0x08012b59
 8012a90:	08012b59 	.word	0x08012b59
 8012a94:	08012b59 	.word	0x08012b59
 8012a98:	08012b59 	.word	0x08012b59
 8012a9c:	08012b59 	.word	0x08012b59
 8012aa0:	08012b59 	.word	0x08012b59
 8012aa4:	08012b31 	.word	0x08012b31
 8012aa8:	08012b59 	.word	0x08012b59
 8012aac:	08012b59 	.word	0x08012b59
 8012ab0:	08012b59 	.word	0x08012b59
 8012ab4:	08012b59 	.word	0x08012b59
 8012ab8:	08012b59 	.word	0x08012b59
 8012abc:	08012b59 	.word	0x08012b59
 8012ac0:	08012b59 	.word	0x08012b59
 8012ac4:	08012b39 	.word	0x08012b39
 8012ac8:	08012b59 	.word	0x08012b59
 8012acc:	08012b59 	.word	0x08012b59
 8012ad0:	08012b59 	.word	0x08012b59
 8012ad4:	08012b59 	.word	0x08012b59
 8012ad8:	08012b59 	.word	0x08012b59
 8012adc:	08012b59 	.word	0x08012b59
 8012ae0:	08012b59 	.word	0x08012b59
 8012ae4:	08012b41 	.word	0x08012b41
 8012ae8:	08012b59 	.word	0x08012b59
 8012aec:	08012b59 	.word	0x08012b59
 8012af0:	08012b59 	.word	0x08012b59
 8012af4:	08012b59 	.word	0x08012b59
 8012af8:	08012b59 	.word	0x08012b59
 8012afc:	08012b59 	.word	0x08012b59
 8012b00:	08012b59 	.word	0x08012b59
 8012b04:	08012b49 	.word	0x08012b49
 8012b08:	08012b59 	.word	0x08012b59
 8012b0c:	08012b59 	.word	0x08012b59
 8012b10:	08012b59 	.word	0x08012b59
 8012b14:	08012b59 	.word	0x08012b59
 8012b18:	08012b59 	.word	0x08012b59
 8012b1c:	08012b59 	.word	0x08012b59
 8012b20:	08012b59 	.word	0x08012b59
 8012b24:	08012b51 	.word	0x08012b51
 8012b28:	2301      	movs	r3, #1
 8012b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b2e:	e050      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012b30:	2304      	movs	r3, #4
 8012b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b36:	e04c      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012b38:	2308      	movs	r3, #8
 8012b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b3e:	e048      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012b40:	2310      	movs	r3, #16
 8012b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b46:	e044      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012b48:	2320      	movs	r3, #32
 8012b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b4e:	e040      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012b50:	2340      	movs	r3, #64	@ 0x40
 8012b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b56:	e03c      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012b58:	2380      	movs	r3, #128	@ 0x80
 8012b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b5e:	e038      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4a71      	ldr	r2, [pc, #452]	@ (8012d2c <UART_SetConfig+0x908>)
 8012b66:	4293      	cmp	r3, r2
 8012b68:	d130      	bne.n	8012bcc <UART_SetConfig+0x7a8>
 8012b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8012d28 <UART_SetConfig+0x904>)
 8012b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b6e:	f003 0307 	and.w	r3, r3, #7
 8012b72:	2b05      	cmp	r3, #5
 8012b74:	d826      	bhi.n	8012bc4 <UART_SetConfig+0x7a0>
 8012b76:	a201      	add	r2, pc, #4	@ (adr r2, 8012b7c <UART_SetConfig+0x758>)
 8012b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b7c:	08012b95 	.word	0x08012b95
 8012b80:	08012b9d 	.word	0x08012b9d
 8012b84:	08012ba5 	.word	0x08012ba5
 8012b88:	08012bad 	.word	0x08012bad
 8012b8c:	08012bb5 	.word	0x08012bb5
 8012b90:	08012bbd 	.word	0x08012bbd
 8012b94:	2302      	movs	r3, #2
 8012b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b9a:	e01a      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012b9c:	2304      	movs	r3, #4
 8012b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ba2:	e016      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012ba4:	2308      	movs	r3, #8
 8012ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012baa:	e012      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012bac:	2310      	movs	r3, #16
 8012bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bb2:	e00e      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012bb4:	2320      	movs	r3, #32
 8012bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bba:	e00a      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012bbc:	2340      	movs	r3, #64	@ 0x40
 8012bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bc2:	e006      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012bc4:	2380      	movs	r3, #128	@ 0x80
 8012bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bca:	e002      	b.n	8012bd2 <UART_SetConfig+0x7ae>
 8012bcc:	2380      	movs	r3, #128	@ 0x80
 8012bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4a55      	ldr	r2, [pc, #340]	@ (8012d2c <UART_SetConfig+0x908>)
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	f040 80f8 	bne.w	8012dce <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012bde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012be2:	2b20      	cmp	r3, #32
 8012be4:	dc46      	bgt.n	8012c74 <UART_SetConfig+0x850>
 8012be6:	2b02      	cmp	r3, #2
 8012be8:	db75      	blt.n	8012cd6 <UART_SetConfig+0x8b2>
 8012bea:	3b02      	subs	r3, #2
 8012bec:	2b1e      	cmp	r3, #30
 8012bee:	d872      	bhi.n	8012cd6 <UART_SetConfig+0x8b2>
 8012bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8012bf8 <UART_SetConfig+0x7d4>)
 8012bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bf6:	bf00      	nop
 8012bf8:	08012c7b 	.word	0x08012c7b
 8012bfc:	08012cd7 	.word	0x08012cd7
 8012c00:	08012c83 	.word	0x08012c83
 8012c04:	08012cd7 	.word	0x08012cd7
 8012c08:	08012cd7 	.word	0x08012cd7
 8012c0c:	08012cd7 	.word	0x08012cd7
 8012c10:	08012c93 	.word	0x08012c93
 8012c14:	08012cd7 	.word	0x08012cd7
 8012c18:	08012cd7 	.word	0x08012cd7
 8012c1c:	08012cd7 	.word	0x08012cd7
 8012c20:	08012cd7 	.word	0x08012cd7
 8012c24:	08012cd7 	.word	0x08012cd7
 8012c28:	08012cd7 	.word	0x08012cd7
 8012c2c:	08012cd7 	.word	0x08012cd7
 8012c30:	08012ca3 	.word	0x08012ca3
 8012c34:	08012cd7 	.word	0x08012cd7
 8012c38:	08012cd7 	.word	0x08012cd7
 8012c3c:	08012cd7 	.word	0x08012cd7
 8012c40:	08012cd7 	.word	0x08012cd7
 8012c44:	08012cd7 	.word	0x08012cd7
 8012c48:	08012cd7 	.word	0x08012cd7
 8012c4c:	08012cd7 	.word	0x08012cd7
 8012c50:	08012cd7 	.word	0x08012cd7
 8012c54:	08012cd7 	.word	0x08012cd7
 8012c58:	08012cd7 	.word	0x08012cd7
 8012c5c:	08012cd7 	.word	0x08012cd7
 8012c60:	08012cd7 	.word	0x08012cd7
 8012c64:	08012cd7 	.word	0x08012cd7
 8012c68:	08012cd7 	.word	0x08012cd7
 8012c6c:	08012cd7 	.word	0x08012cd7
 8012c70:	08012cc9 	.word	0x08012cc9
 8012c74:	2b40      	cmp	r3, #64	@ 0x40
 8012c76:	d02a      	beq.n	8012cce <UART_SetConfig+0x8aa>
 8012c78:	e02d      	b.n	8012cd6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012c7a:	f7fa fd91 	bl	800d7a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8012c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012c80:	e02f      	b.n	8012ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7fa fda0 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c90:	e027      	b.n	8012ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c92:	f107 0318 	add.w	r3, r7, #24
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7fa feec 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ca0:	e01f      	b.n	8012ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012ca2:	4b21      	ldr	r3, [pc, #132]	@ (8012d28 <UART_SetConfig+0x904>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	f003 0320 	and.w	r3, r3, #32
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d009      	beq.n	8012cc2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012cae:	4b1e      	ldr	r3, [pc, #120]	@ (8012d28 <UART_SetConfig+0x904>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	08db      	lsrs	r3, r3, #3
 8012cb4:	f003 0303 	and.w	r3, r3, #3
 8012cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8012d30 <UART_SetConfig+0x90c>)
 8012cba:	fa22 f303 	lsr.w	r3, r2, r3
 8012cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012cc0:	e00f      	b.n	8012ce2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8012d30 <UART_SetConfig+0x90c>)
 8012cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cc6:	e00c      	b.n	8012ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8012d34 <UART_SetConfig+0x910>)
 8012cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ccc:	e009      	b.n	8012ce2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cd4:	e005      	b.n	8012ce2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012cda:	2301      	movs	r3, #1
 8012cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012ce0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	f000 81ee 	beq.w	80130c6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cee:	4a12      	ldr	r2, [pc, #72]	@ (8012d38 <UART_SetConfig+0x914>)
 8012cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8012cfc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	685a      	ldr	r2, [r3, #4]
 8012d02:	4613      	mov	r3, r2
 8012d04:	005b      	lsls	r3, r3, #1
 8012d06:	4413      	add	r3, r2
 8012d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d305      	bcc.n	8012d1a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d910      	bls.n	8012d3c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012d20:	e1d1      	b.n	80130c6 <UART_SetConfig+0xca2>
 8012d22:	bf00      	nop
 8012d24:	40011c00 	.word	0x40011c00
 8012d28:	58024400 	.word	0x58024400
 8012d2c:	58000c00 	.word	0x58000c00
 8012d30:	03d09000 	.word	0x03d09000
 8012d34:	003d0900 	.word	0x003d0900
 8012d38:	080195dc 	.word	0x080195dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d3e:	2200      	movs	r2, #0
 8012d40:	60bb      	str	r3, [r7, #8]
 8012d42:	60fa      	str	r2, [r7, #12]
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d48:	4ac0      	ldr	r2, [pc, #768]	@ (801304c <UART_SetConfig+0xc28>)
 8012d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	2200      	movs	r2, #0
 8012d52:	603b      	str	r3, [r7, #0]
 8012d54:	607a      	str	r2, [r7, #4]
 8012d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012d5e:	f7ed fceb 	bl	8000738 <__aeabi_uldivmod>
 8012d62:	4602      	mov	r2, r0
 8012d64:	460b      	mov	r3, r1
 8012d66:	4610      	mov	r0, r2
 8012d68:	4619      	mov	r1, r3
 8012d6a:	f04f 0200 	mov.w	r2, #0
 8012d6e:	f04f 0300 	mov.w	r3, #0
 8012d72:	020b      	lsls	r3, r1, #8
 8012d74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012d78:	0202      	lsls	r2, r0, #8
 8012d7a:	6979      	ldr	r1, [r7, #20]
 8012d7c:	6849      	ldr	r1, [r1, #4]
 8012d7e:	0849      	lsrs	r1, r1, #1
 8012d80:	2000      	movs	r0, #0
 8012d82:	460c      	mov	r4, r1
 8012d84:	4605      	mov	r5, r0
 8012d86:	eb12 0804 	adds.w	r8, r2, r4
 8012d8a:	eb43 0905 	adc.w	r9, r3, r5
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	2200      	movs	r2, #0
 8012d94:	469a      	mov	sl, r3
 8012d96:	4693      	mov	fp, r2
 8012d98:	4652      	mov	r2, sl
 8012d9a:	465b      	mov	r3, fp
 8012d9c:	4640      	mov	r0, r8
 8012d9e:	4649      	mov	r1, r9
 8012da0:	f7ed fcca 	bl	8000738 <__aeabi_uldivmod>
 8012da4:	4602      	mov	r2, r0
 8012da6:	460b      	mov	r3, r1
 8012da8:	4613      	mov	r3, r2
 8012daa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012db2:	d308      	bcc.n	8012dc6 <UART_SetConfig+0x9a2>
 8012db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012dba:	d204      	bcs.n	8012dc6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012dc2:	60da      	str	r2, [r3, #12]
 8012dc4:	e17f      	b.n	80130c6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012dcc:	e17b      	b.n	80130c6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	69db      	ldr	r3, [r3, #28]
 8012dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012dd6:	f040 80bd 	bne.w	8012f54 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012dda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012dde:	2b20      	cmp	r3, #32
 8012de0:	dc48      	bgt.n	8012e74 <UART_SetConfig+0xa50>
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	db7b      	blt.n	8012ede <UART_SetConfig+0xaba>
 8012de6:	2b20      	cmp	r3, #32
 8012de8:	d879      	bhi.n	8012ede <UART_SetConfig+0xaba>
 8012dea:	a201      	add	r2, pc, #4	@ (adr r2, 8012df0 <UART_SetConfig+0x9cc>)
 8012dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012df0:	08012e7b 	.word	0x08012e7b
 8012df4:	08012e83 	.word	0x08012e83
 8012df8:	08012edf 	.word	0x08012edf
 8012dfc:	08012edf 	.word	0x08012edf
 8012e00:	08012e8b 	.word	0x08012e8b
 8012e04:	08012edf 	.word	0x08012edf
 8012e08:	08012edf 	.word	0x08012edf
 8012e0c:	08012edf 	.word	0x08012edf
 8012e10:	08012e9b 	.word	0x08012e9b
 8012e14:	08012edf 	.word	0x08012edf
 8012e18:	08012edf 	.word	0x08012edf
 8012e1c:	08012edf 	.word	0x08012edf
 8012e20:	08012edf 	.word	0x08012edf
 8012e24:	08012edf 	.word	0x08012edf
 8012e28:	08012edf 	.word	0x08012edf
 8012e2c:	08012edf 	.word	0x08012edf
 8012e30:	08012eab 	.word	0x08012eab
 8012e34:	08012edf 	.word	0x08012edf
 8012e38:	08012edf 	.word	0x08012edf
 8012e3c:	08012edf 	.word	0x08012edf
 8012e40:	08012edf 	.word	0x08012edf
 8012e44:	08012edf 	.word	0x08012edf
 8012e48:	08012edf 	.word	0x08012edf
 8012e4c:	08012edf 	.word	0x08012edf
 8012e50:	08012edf 	.word	0x08012edf
 8012e54:	08012edf 	.word	0x08012edf
 8012e58:	08012edf 	.word	0x08012edf
 8012e5c:	08012edf 	.word	0x08012edf
 8012e60:	08012edf 	.word	0x08012edf
 8012e64:	08012edf 	.word	0x08012edf
 8012e68:	08012edf 	.word	0x08012edf
 8012e6c:	08012edf 	.word	0x08012edf
 8012e70:	08012ed1 	.word	0x08012ed1
 8012e74:	2b40      	cmp	r3, #64	@ 0x40
 8012e76:	d02e      	beq.n	8012ed6 <UART_SetConfig+0xab2>
 8012e78:	e031      	b.n	8012ede <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012e7a:	f7f8 fdf3 	bl	800ba64 <HAL_RCC_GetPCLK1Freq>
 8012e7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012e80:	e033      	b.n	8012eea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012e82:	f7f8 fe05 	bl	800ba90 <HAL_RCC_GetPCLK2Freq>
 8012e86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012e88:	e02f      	b.n	8012eea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7fa fc9c 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e98:	e027      	b.n	8012eea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e9a:	f107 0318 	add.w	r3, r7, #24
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7fa fde8 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ea8:	e01f      	b.n	8012eea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012eaa:	4b69      	ldr	r3, [pc, #420]	@ (8013050 <UART_SetConfig+0xc2c>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	f003 0320 	and.w	r3, r3, #32
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d009      	beq.n	8012eca <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012eb6:	4b66      	ldr	r3, [pc, #408]	@ (8013050 <UART_SetConfig+0xc2c>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	08db      	lsrs	r3, r3, #3
 8012ebc:	f003 0303 	and.w	r3, r3, #3
 8012ec0:	4a64      	ldr	r2, [pc, #400]	@ (8013054 <UART_SetConfig+0xc30>)
 8012ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8012ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012ec8:	e00f      	b.n	8012eea <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012eca:	4b62      	ldr	r3, [pc, #392]	@ (8013054 <UART_SetConfig+0xc30>)
 8012ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ece:	e00c      	b.n	8012eea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012ed0:	4b61      	ldr	r3, [pc, #388]	@ (8013058 <UART_SetConfig+0xc34>)
 8012ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ed4:	e009      	b.n	8012eea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012edc:	e005      	b.n	8012eea <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012ee8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f000 80ea 	beq.w	80130c6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ef6:	4a55      	ldr	r2, [pc, #340]	@ (801304c <UART_SetConfig+0xc28>)
 8012ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012efc:	461a      	mov	r2, r3
 8012efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f04:	005a      	lsls	r2, r3, #1
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	085b      	lsrs	r3, r3, #1
 8012f0c:	441a      	add	r2, r3
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	685b      	ldr	r3, [r3, #4]
 8012f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f1a:	2b0f      	cmp	r3, #15
 8012f1c:	d916      	bls.n	8012f4c <UART_SetConfig+0xb28>
 8012f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f24:	d212      	bcs.n	8012f4c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	f023 030f 	bic.w	r3, r3, #15
 8012f2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f32:	085b      	lsrs	r3, r3, #1
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	f003 0307 	and.w	r3, r3, #7
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012f3e:	4313      	orrs	r3, r2
 8012f40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8012f42:	697b      	ldr	r3, [r7, #20]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012f48:	60da      	str	r2, [r3, #12]
 8012f4a:	e0bc      	b.n	80130c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012f52:	e0b8      	b.n	80130c6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012f54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012f58:	2b20      	cmp	r3, #32
 8012f5a:	dc4b      	bgt.n	8012ff4 <UART_SetConfig+0xbd0>
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	f2c0 8087 	blt.w	8013070 <UART_SetConfig+0xc4c>
 8012f62:	2b20      	cmp	r3, #32
 8012f64:	f200 8084 	bhi.w	8013070 <UART_SetConfig+0xc4c>
 8012f68:	a201      	add	r2, pc, #4	@ (adr r2, 8012f70 <UART_SetConfig+0xb4c>)
 8012f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f6e:	bf00      	nop
 8012f70:	08012ffb 	.word	0x08012ffb
 8012f74:	08013003 	.word	0x08013003
 8012f78:	08013071 	.word	0x08013071
 8012f7c:	08013071 	.word	0x08013071
 8012f80:	0801300b 	.word	0x0801300b
 8012f84:	08013071 	.word	0x08013071
 8012f88:	08013071 	.word	0x08013071
 8012f8c:	08013071 	.word	0x08013071
 8012f90:	0801301b 	.word	0x0801301b
 8012f94:	08013071 	.word	0x08013071
 8012f98:	08013071 	.word	0x08013071
 8012f9c:	08013071 	.word	0x08013071
 8012fa0:	08013071 	.word	0x08013071
 8012fa4:	08013071 	.word	0x08013071
 8012fa8:	08013071 	.word	0x08013071
 8012fac:	08013071 	.word	0x08013071
 8012fb0:	0801302b 	.word	0x0801302b
 8012fb4:	08013071 	.word	0x08013071
 8012fb8:	08013071 	.word	0x08013071
 8012fbc:	08013071 	.word	0x08013071
 8012fc0:	08013071 	.word	0x08013071
 8012fc4:	08013071 	.word	0x08013071
 8012fc8:	08013071 	.word	0x08013071
 8012fcc:	08013071 	.word	0x08013071
 8012fd0:	08013071 	.word	0x08013071
 8012fd4:	08013071 	.word	0x08013071
 8012fd8:	08013071 	.word	0x08013071
 8012fdc:	08013071 	.word	0x08013071
 8012fe0:	08013071 	.word	0x08013071
 8012fe4:	08013071 	.word	0x08013071
 8012fe8:	08013071 	.word	0x08013071
 8012fec:	08013071 	.word	0x08013071
 8012ff0:	08013063 	.word	0x08013063
 8012ff4:	2b40      	cmp	r3, #64	@ 0x40
 8012ff6:	d037      	beq.n	8013068 <UART_SetConfig+0xc44>
 8012ff8:	e03a      	b.n	8013070 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012ffa:	f7f8 fd33 	bl	800ba64 <HAL_RCC_GetPCLK1Freq>
 8012ffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013000:	e03c      	b.n	801307c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013002:	f7f8 fd45 	bl	800ba90 <HAL_RCC_GetPCLK2Freq>
 8013006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013008:	e038      	b.n	801307c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801300a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801300e:	4618      	mov	r0, r3
 8013010:	f7fa fbdc 	bl	800d7cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013018:	e030      	b.n	801307c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801301a:	f107 0318 	add.w	r3, r7, #24
 801301e:	4618      	mov	r0, r3
 8013020:	f7fa fd28 	bl	800da74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013024:	69fb      	ldr	r3, [r7, #28]
 8013026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013028:	e028      	b.n	801307c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801302a:	4b09      	ldr	r3, [pc, #36]	@ (8013050 <UART_SetConfig+0xc2c>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	f003 0320 	and.w	r3, r3, #32
 8013032:	2b00      	cmp	r3, #0
 8013034:	d012      	beq.n	801305c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013036:	4b06      	ldr	r3, [pc, #24]	@ (8013050 <UART_SetConfig+0xc2c>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	08db      	lsrs	r3, r3, #3
 801303c:	f003 0303 	and.w	r3, r3, #3
 8013040:	4a04      	ldr	r2, [pc, #16]	@ (8013054 <UART_SetConfig+0xc30>)
 8013042:	fa22 f303 	lsr.w	r3, r2, r3
 8013046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013048:	e018      	b.n	801307c <UART_SetConfig+0xc58>
 801304a:	bf00      	nop
 801304c:	080195dc 	.word	0x080195dc
 8013050:	58024400 	.word	0x58024400
 8013054:	03d09000 	.word	0x03d09000
 8013058:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801305c:	4b24      	ldr	r3, [pc, #144]	@ (80130f0 <UART_SetConfig+0xccc>)
 801305e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013060:	e00c      	b.n	801307c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013062:	4b24      	ldr	r3, [pc, #144]	@ (80130f4 <UART_SetConfig+0xcd0>)
 8013064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013066:	e009      	b.n	801307c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013068:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801306c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801306e:	e005      	b.n	801307c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8013070:	2300      	movs	r3, #0
 8013072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013074:	2301      	movs	r3, #1
 8013076:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801307a:	bf00      	nop
    }

    if (pclk != 0U)
 801307c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801307e:	2b00      	cmp	r3, #0
 8013080:	d021      	beq.n	80130c6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013086:	4a1c      	ldr	r2, [pc, #112]	@ (80130f8 <UART_SetConfig+0xcd4>)
 8013088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801308c:	461a      	mov	r2, r3
 801308e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013090:	fbb3 f2f2 	udiv	r2, r3, r2
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	085b      	lsrs	r3, r3, #1
 801309a:	441a      	add	r2, r3
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80130a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80130a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130a8:	2b0f      	cmp	r3, #15
 80130aa:	d909      	bls.n	80130c0 <UART_SetConfig+0xc9c>
 80130ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80130b2:	d205      	bcs.n	80130c0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80130b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130b6:	b29a      	uxth	r2, r3
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	60da      	str	r2, [r3, #12]
 80130be:	e002      	b.n	80130c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	2201      	movs	r2, #1
 80130ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	2201      	movs	r2, #1
 80130d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	2200      	movs	r2, #0
 80130da:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	2200      	movs	r2, #0
 80130e0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80130e2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3748      	adds	r7, #72	@ 0x48
 80130ea:	46bd      	mov	sp, r7
 80130ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80130f0:	03d09000 	.word	0x03d09000
 80130f4:	003d0900 	.word	0x003d0900
 80130f8:	080195dc 	.word	0x080195dc

080130fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80130fc:	b480      	push	{r7}
 80130fe:	b083      	sub	sp, #12
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013108:	f003 0308 	and.w	r3, r3, #8
 801310c:	2b00      	cmp	r3, #0
 801310e:	d00a      	beq.n	8013126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	430a      	orrs	r2, r1
 8013124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801312a:	f003 0301 	and.w	r3, r3, #1
 801312e:	2b00      	cmp	r3, #0
 8013130:	d00a      	beq.n	8013148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	685b      	ldr	r3, [r3, #4]
 8013138:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	430a      	orrs	r2, r1
 8013146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801314c:	f003 0302 	and.w	r3, r3, #2
 8013150:	2b00      	cmp	r3, #0
 8013152:	d00a      	beq.n	801316a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	430a      	orrs	r2, r1
 8013168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801316e:	f003 0304 	and.w	r3, r3, #4
 8013172:	2b00      	cmp	r3, #0
 8013174:	d00a      	beq.n	801318c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	430a      	orrs	r2, r1
 801318a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013190:	f003 0310 	and.w	r3, r3, #16
 8013194:	2b00      	cmp	r3, #0
 8013196:	d00a      	beq.n	80131ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	689b      	ldr	r3, [r3, #8]
 801319e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	430a      	orrs	r2, r1
 80131ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131b2:	f003 0320 	and.w	r3, r3, #32
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d00a      	beq.n	80131d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	689b      	ldr	r3, [r3, #8]
 80131c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	430a      	orrs	r2, r1
 80131ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d01a      	beq.n	8013212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	430a      	orrs	r2, r1
 80131f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80131fa:	d10a      	bne.n	8013212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	430a      	orrs	r2, r1
 8013210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801321a:	2b00      	cmp	r3, #0
 801321c:	d00a      	beq.n	8013234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	430a      	orrs	r2, r1
 8013232:	605a      	str	r2, [r3, #4]
  }
}
 8013234:	bf00      	nop
 8013236:	370c      	adds	r7, #12
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr

08013240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b098      	sub	sp, #96	@ 0x60
 8013244:	af02      	add	r7, sp, #8
 8013246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2200      	movs	r2, #0
 801324c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013250:	f7f1 fa8a 	bl	8004768 <HAL_GetTick>
 8013254:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	f003 0308 	and.w	r3, r3, #8
 8013260:	2b08      	cmp	r3, #8
 8013262:	d12f      	bne.n	80132c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013264:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013268:	9300      	str	r3, [sp, #0]
 801326a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801326c:	2200      	movs	r2, #0
 801326e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f000 f88e 	bl	8013394 <UART_WaitOnFlagUntilTimeout>
 8013278:	4603      	mov	r3, r0
 801327a:	2b00      	cmp	r3, #0
 801327c:	d022      	beq.n	80132c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013286:	e853 3f00 	ldrex	r3, [r3]
 801328a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801328c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801328e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013292:	653b      	str	r3, [r7, #80]	@ 0x50
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	461a      	mov	r2, r3
 801329a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801329c:	647b      	str	r3, [r7, #68]	@ 0x44
 801329e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80132a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80132a4:	e841 2300 	strex	r3, r2, [r1]
 80132a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80132aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d1e6      	bne.n	801327e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2220      	movs	r2, #32
 80132b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2200      	movs	r2, #0
 80132bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80132c0:	2303      	movs	r3, #3
 80132c2:	e063      	b.n	801338c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f003 0304 	and.w	r3, r3, #4
 80132ce:	2b04      	cmp	r3, #4
 80132d0:	d149      	bne.n	8013366 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80132d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80132d6:	9300      	str	r3, [sp, #0]
 80132d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132da:	2200      	movs	r2, #0
 80132dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f000 f857 	bl	8013394 <UART_WaitOnFlagUntilTimeout>
 80132e6:	4603      	mov	r3, r0
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d03c      	beq.n	8013366 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f4:	e853 3f00 	ldrex	r3, [r3]
 80132f8:	623b      	str	r3, [r7, #32]
   return(result);
 80132fa:	6a3b      	ldr	r3, [r7, #32]
 80132fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	461a      	mov	r2, r3
 8013308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801330a:	633b      	str	r3, [r7, #48]	@ 0x30
 801330c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801330e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013312:	e841 2300 	strex	r3, r2, [r1]
 8013316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1e6      	bne.n	80132ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	3308      	adds	r3, #8
 8013324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	e853 3f00 	ldrex	r3, [r3]
 801332c:	60fb      	str	r3, [r7, #12]
   return(result);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	f023 0301 	bic.w	r3, r3, #1
 8013334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	3308      	adds	r3, #8
 801333c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801333e:	61fa      	str	r2, [r7, #28]
 8013340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013342:	69b9      	ldr	r1, [r7, #24]
 8013344:	69fa      	ldr	r2, [r7, #28]
 8013346:	e841 2300 	strex	r3, r2, [r1]
 801334a:	617b      	str	r3, [r7, #20]
   return(result);
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d1e5      	bne.n	801331e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2220      	movs	r2, #32
 8013356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2200      	movs	r2, #0
 801335e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013362:	2303      	movs	r3, #3
 8013364:	e012      	b.n	801338c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2220      	movs	r2, #32
 801336a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2220      	movs	r2, #32
 8013372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2200      	movs	r2, #0
 8013380:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2200      	movs	r2, #0
 8013386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801338a:	2300      	movs	r3, #0
}
 801338c:	4618      	mov	r0, r3
 801338e:	3758      	adds	r7, #88	@ 0x58
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}

08013394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b084      	sub	sp, #16
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	603b      	str	r3, [r7, #0]
 80133a0:	4613      	mov	r3, r2
 80133a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80133a4:	e04f      	b.n	8013446 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ac:	d04b      	beq.n	8013446 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80133ae:	f7f1 f9db 	bl	8004768 <HAL_GetTick>
 80133b2:	4602      	mov	r2, r0
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	1ad3      	subs	r3, r2, r3
 80133b8:	69ba      	ldr	r2, [r7, #24]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d302      	bcc.n	80133c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d101      	bne.n	80133c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80133c4:	2303      	movs	r3, #3
 80133c6:	e04e      	b.n	8013466 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	f003 0304 	and.w	r3, r3, #4
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d037      	beq.n	8013446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	2b80      	cmp	r3, #128	@ 0x80
 80133da:	d034      	beq.n	8013446 <UART_WaitOnFlagUntilTimeout+0xb2>
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	2b40      	cmp	r3, #64	@ 0x40
 80133e0:	d031      	beq.n	8013446 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	69db      	ldr	r3, [r3, #28]
 80133e8:	f003 0308 	and.w	r3, r3, #8
 80133ec:	2b08      	cmp	r3, #8
 80133ee:	d110      	bne.n	8013412 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	2208      	movs	r2, #8
 80133f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80133f8:	68f8      	ldr	r0, [r7, #12]
 80133fa:	f000 f839 	bl	8013470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	2208      	movs	r2, #8
 8013402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2200      	movs	r2, #0
 801340a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801340e:	2301      	movs	r3, #1
 8013410:	e029      	b.n	8013466 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	69db      	ldr	r3, [r3, #28]
 8013418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801341c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013420:	d111      	bne.n	8013446 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801342a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801342c:	68f8      	ldr	r0, [r7, #12]
 801342e:	f000 f81f 	bl	8013470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2220      	movs	r2, #32
 8013436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	2200      	movs	r2, #0
 801343e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013442:	2303      	movs	r3, #3
 8013444:	e00f      	b.n	8013466 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	69da      	ldr	r2, [r3, #28]
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	4013      	ands	r3, r2
 8013450:	68ba      	ldr	r2, [r7, #8]
 8013452:	429a      	cmp	r2, r3
 8013454:	bf0c      	ite	eq
 8013456:	2301      	moveq	r3, #1
 8013458:	2300      	movne	r3, #0
 801345a:	b2db      	uxtb	r3, r3
 801345c:	461a      	mov	r2, r3
 801345e:	79fb      	ldrb	r3, [r7, #7]
 8013460:	429a      	cmp	r2, r3
 8013462:	d0a0      	beq.n	80133a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013464:	2300      	movs	r3, #0
}
 8013466:	4618      	mov	r0, r3
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
	...

08013470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013470:	b480      	push	{r7}
 8013472:	b095      	sub	sp, #84	@ 0x54
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801347e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013480:	e853 3f00 	ldrex	r3, [r3]
 8013484:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013488:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801348c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	461a      	mov	r2, r3
 8013494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013496:	643b      	str	r3, [r7, #64]	@ 0x40
 8013498:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801349a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801349c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801349e:	e841 2300 	strex	r3, r2, [r1]
 80134a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80134a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d1e6      	bne.n	8013478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	3308      	adds	r3, #8
 80134b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134b2:	6a3b      	ldr	r3, [r7, #32]
 80134b4:	e853 3f00 	ldrex	r3, [r3]
 80134b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80134ba:	69fa      	ldr	r2, [r7, #28]
 80134bc:	4b1e      	ldr	r3, [pc, #120]	@ (8013538 <UART_EndRxTransfer+0xc8>)
 80134be:	4013      	ands	r3, r2
 80134c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	3308      	adds	r3, #8
 80134c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80134ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80134cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80134d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80134d2:	e841 2300 	strex	r3, r2, [r1]
 80134d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80134d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d1e5      	bne.n	80134aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80134e2:	2b01      	cmp	r3, #1
 80134e4:	d118      	bne.n	8013518 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	e853 3f00 	ldrex	r3, [r3]
 80134f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	f023 0310 	bic.w	r3, r3, #16
 80134fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	461a      	mov	r2, r3
 8013502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013504:	61bb      	str	r3, [r7, #24]
 8013506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013508:	6979      	ldr	r1, [r7, #20]
 801350a:	69ba      	ldr	r2, [r7, #24]
 801350c:	e841 2300 	strex	r3, r2, [r1]
 8013510:	613b      	str	r3, [r7, #16]
   return(result);
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d1e6      	bne.n	80134e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2220      	movs	r2, #32
 801351c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2200      	movs	r2, #0
 8013524:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2200      	movs	r2, #0
 801352a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801352c:	bf00      	nop
 801352e:	3754      	adds	r7, #84	@ 0x54
 8013530:	46bd      	mov	sp, r7
 8013532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013536:	4770      	bx	lr
 8013538:	effffffe 	.word	0xeffffffe

0801353c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801353c:	b480      	push	{r7}
 801353e:	b085      	sub	sp, #20
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801354a:	2b01      	cmp	r3, #1
 801354c:	d101      	bne.n	8013552 <HAL_UARTEx_DisableFifoMode+0x16>
 801354e:	2302      	movs	r3, #2
 8013550:	e027      	b.n	80135a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2201      	movs	r2, #1
 8013556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2224      	movs	r2, #36	@ 0x24
 801355e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	681a      	ldr	r2, [r3, #0]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	f022 0201 	bic.w	r2, r2, #1
 8013578:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013580:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2200      	movs	r2, #0
 8013586:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	68fa      	ldr	r2, [r7, #12]
 801358e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2220      	movs	r2, #32
 8013594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2200      	movs	r2, #0
 801359c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80135a0:	2300      	movs	r3, #0
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3714      	adds	r7, #20
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr

080135ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b084      	sub	sp, #16
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
 80135b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80135be:	2b01      	cmp	r3, #1
 80135c0:	d101      	bne.n	80135c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80135c2:	2302      	movs	r3, #2
 80135c4:	e02d      	b.n	8013622 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2201      	movs	r2, #1
 80135ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2224      	movs	r2, #36	@ 0x24
 80135d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	681a      	ldr	r2, [r3, #0]
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f022 0201 	bic.w	r2, r2, #1
 80135ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	683a      	ldr	r2, [r7, #0]
 80135fe:	430a      	orrs	r2, r1
 8013600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f000 f850 	bl	80136a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	68fa      	ldr	r2, [r7, #12]
 801360e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2220      	movs	r2, #32
 8013614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2200      	movs	r2, #0
 801361c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013620:	2300      	movs	r3, #0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3710      	adds	r7, #16
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801362a:	b580      	push	{r7, lr}
 801362c:	b084      	sub	sp, #16
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
 8013632:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801363a:	2b01      	cmp	r3, #1
 801363c:	d101      	bne.n	8013642 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801363e:	2302      	movs	r3, #2
 8013640:	e02d      	b.n	801369e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2201      	movs	r2, #1
 8013646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2224      	movs	r2, #36	@ 0x24
 801364e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	f022 0201 	bic.w	r2, r2, #1
 8013668:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	689b      	ldr	r3, [r3, #8]
 8013670:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	683a      	ldr	r2, [r7, #0]
 801367a:	430a      	orrs	r2, r1
 801367c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f000 f812 	bl	80136a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	68fa      	ldr	r2, [r7, #12]
 801368a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2220      	movs	r2, #32
 8013690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2200      	movs	r2, #0
 8013698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801369c:	2300      	movs	r3, #0
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
	...

080136a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80136a8:	b480      	push	{r7}
 80136aa:	b085      	sub	sp, #20
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d108      	bne.n	80136ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	2201      	movs	r2, #1
 80136bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2201      	movs	r2, #1
 80136c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80136c8:	e031      	b.n	801372e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80136ca:	2310      	movs	r3, #16
 80136cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80136ce:	2310      	movs	r3, #16
 80136d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	689b      	ldr	r3, [r3, #8]
 80136d8:	0e5b      	lsrs	r3, r3, #25
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	f003 0307 	and.w	r3, r3, #7
 80136e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	689b      	ldr	r3, [r3, #8]
 80136e8:	0f5b      	lsrs	r3, r3, #29
 80136ea:	b2db      	uxtb	r3, r3
 80136ec:	f003 0307 	and.w	r3, r3, #7
 80136f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80136f2:	7bbb      	ldrb	r3, [r7, #14]
 80136f4:	7b3a      	ldrb	r2, [r7, #12]
 80136f6:	4911      	ldr	r1, [pc, #68]	@ (801373c <UARTEx_SetNbDataToProcess+0x94>)
 80136f8:	5c8a      	ldrb	r2, [r1, r2]
 80136fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80136fe:	7b3a      	ldrb	r2, [r7, #12]
 8013700:	490f      	ldr	r1, [pc, #60]	@ (8013740 <UARTEx_SetNbDataToProcess+0x98>)
 8013702:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013704:	fb93 f3f2 	sdiv	r3, r3, r2
 8013708:	b29a      	uxth	r2, r3
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013710:	7bfb      	ldrb	r3, [r7, #15]
 8013712:	7b7a      	ldrb	r2, [r7, #13]
 8013714:	4909      	ldr	r1, [pc, #36]	@ (801373c <UARTEx_SetNbDataToProcess+0x94>)
 8013716:	5c8a      	ldrb	r2, [r1, r2]
 8013718:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801371c:	7b7a      	ldrb	r2, [r7, #13]
 801371e:	4908      	ldr	r1, [pc, #32]	@ (8013740 <UARTEx_SetNbDataToProcess+0x98>)
 8013720:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013722:	fb93 f3f2 	sdiv	r3, r3, r2
 8013726:	b29a      	uxth	r2, r3
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801372e:	bf00      	nop
 8013730:	3714      	adds	r7, #20
 8013732:	46bd      	mov	sp, r7
 8013734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013738:	4770      	bx	lr
 801373a:	bf00      	nop
 801373c:	080195f4 	.word	0x080195f4
 8013740:	080195fc 	.word	0x080195fc

08013744 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8013744:	b084      	sub	sp, #16
 8013746:	b480      	push	{r7}
 8013748:	b085      	sub	sp, #20
 801374a:	af00      	add	r7, sp, #0
 801374c:	6078      	str	r0, [r7, #4]
 801374e:	f107 001c 	add.w	r0, r7, #28
 8013752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8013756:	2300      	movs	r3, #0
 8013758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801375a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801375c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801375e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8013760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8013762:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8013764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8013766:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801376a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801376c:	68fa      	ldr	r2, [r7, #12]
 801376e:	4313      	orrs	r3, r2
 8013770:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	685a      	ldr	r2, [r3, #4]
 8013776:	4b07      	ldr	r3, [pc, #28]	@ (8013794 <SDMMC_Init+0x50>)
 8013778:	4013      	ands	r3, r2
 801377a:	68fa      	ldr	r2, [r7, #12]
 801377c:	431a      	orrs	r2, r3
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8013782:	2300      	movs	r3, #0
}
 8013784:	4618      	mov	r0, r3
 8013786:	3714      	adds	r7, #20
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	b004      	add	sp, #16
 8013790:	4770      	bx	lr
 8013792:	bf00      	nop
 8013794:	ffc02c00 	.word	0xffc02c00

08013798 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8013798:	b480      	push	{r7}
 801379a:	b083      	sub	sp, #12
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	370c      	adds	r7, #12
 80137aa:	46bd      	mov	sp, r7
 80137ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b0:	4770      	bx	lr

080137b2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80137b2:	b480      	push	{r7}
 80137b4:	b083      	sub	sp, #12
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	6078      	str	r0, [r7, #4]
 80137ba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80137c6:	2300      	movs	r3, #0
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	370c      	adds	r7, #12
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr

080137d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	f043 0203 	orr.w	r2, r3, #3
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80137e8:	2300      	movs	r3, #0
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	370c      	adds	r7, #12
 80137ee:	46bd      	mov	sp, r7
 80137f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f4:	4770      	bx	lr

080137f6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80137f6:	b480      	push	{r7}
 80137f8:	b083      	sub	sp, #12
 80137fa:	af00      	add	r7, sp, #0
 80137fc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	f003 0303 	and.w	r3, r3, #3
}
 8013806:	4618      	mov	r0, r3
 8013808:	370c      	adds	r7, #12
 801380a:	46bd      	mov	sp, r7
 801380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013810:	4770      	bx	lr
	...

08013814 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013814:	b480      	push	{r7}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801381e:	2300      	movs	r3, #0
 8013820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013832:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8013838:	431a      	orrs	r2, r3
                       Command->CPSM);
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801383e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013840:	68fa      	ldr	r2, [r7, #12]
 8013842:	4313      	orrs	r3, r2
 8013844:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	68da      	ldr	r2, [r3, #12]
 801384a:	4b06      	ldr	r3, [pc, #24]	@ (8013864 <SDMMC_SendCommand+0x50>)
 801384c:	4013      	ands	r3, r2
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	431a      	orrs	r2, r3
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013856:	2300      	movs	r3, #0
}
 8013858:	4618      	mov	r0, r3
 801385a:	3714      	adds	r7, #20
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr
 8013864:	fffee0c0 	.word	0xfffee0c0

08013868 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	691b      	ldr	r3, [r3, #16]
 8013874:	b2db      	uxtb	r3, r3
}
 8013876:	4618      	mov	r0, r3
 8013878:	370c      	adds	r7, #12
 801387a:	46bd      	mov	sp, r7
 801387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013880:	4770      	bx	lr

08013882 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013882:	b480      	push	{r7}
 8013884:	b085      	sub	sp, #20
 8013886:	af00      	add	r7, sp, #0
 8013888:	6078      	str	r0, [r7, #4]
 801388a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	3314      	adds	r3, #20
 8013890:	461a      	mov	r2, r3
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	4413      	add	r3, r2
 8013896:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	681b      	ldr	r3, [r3, #0]
}
 801389c:	4618      	mov	r0, r3
 801389e:	3714      	adds	r7, #20
 80138a0:	46bd      	mov	sp, r7
 80138a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a6:	4770      	bx	lr

080138a8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80138a8:	b480      	push	{r7}
 80138aa:	b085      	sub	sp, #20
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80138b2:	2300      	movs	r3, #0
 80138b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	681a      	ldr	r2, [r3, #0]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	685a      	ldr	r2, [r3, #4]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80138ce:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80138d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80138da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80138dc:	68fa      	ldr	r2, [r7, #12]
 80138de:	4313      	orrs	r3, r2
 80138e0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	431a      	orrs	r2, r3
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80138f2:	2300      	movs	r3, #0

}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3714      	adds	r7, #20
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr

08013900 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b088      	sub	sp, #32
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801390e:	2310      	movs	r3, #16
 8013910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013918:	2300      	movs	r3, #0
 801391a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801391c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013920:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013922:	f107 0308 	add.w	r3, r7, #8
 8013926:	4619      	mov	r1, r3
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7ff ff73 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801392e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013932:	2110      	movs	r1, #16
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	f000 fa5f 	bl	8013df8 <SDMMC_GetCmdResp1>
 801393a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801393c:	69fb      	ldr	r3, [r7, #28]
}
 801393e:	4618      	mov	r0, r3
 8013940:	3720      	adds	r7, #32
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}

08013946 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013946:	b580      	push	{r7, lr}
 8013948:	b088      	sub	sp, #32
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
 801394e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013954:	2311      	movs	r3, #17
 8013956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013958:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801395c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801395e:	2300      	movs	r3, #0
 8013960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013968:	f107 0308 	add.w	r3, r7, #8
 801396c:	4619      	mov	r1, r3
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7ff ff50 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013978:	2111      	movs	r1, #17
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f000 fa3c 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013982:	69fb      	ldr	r3, [r7, #28]
}
 8013984:	4618      	mov	r0, r3
 8013986:	3720      	adds	r7, #32
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}

0801398c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b088      	sub	sp, #32
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801399a:	2312      	movs	r3, #18
 801399c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801399e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80139a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80139a4:	2300      	movs	r3, #0
 80139a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80139a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80139ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80139ae:	f107 0308 	add.w	r3, r7, #8
 80139b2:	4619      	mov	r1, r3
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7ff ff2d 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80139ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80139be:	2112      	movs	r1, #18
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f000 fa19 	bl	8013df8 <SDMMC_GetCmdResp1>
 80139c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80139c8:	69fb      	ldr	r3, [r7, #28]
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3720      	adds	r7, #32
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}

080139d2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b088      	sub	sp, #32
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	6078      	str	r0, [r7, #4]
 80139da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80139e0:	2318      	movs	r3, #24
 80139e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80139e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80139e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80139ea:	2300      	movs	r3, #0
 80139ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80139ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80139f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80139f4:	f107 0308 	add.w	r3, r7, #8
 80139f8:	4619      	mov	r1, r3
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f7ff ff0a 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013a04:	2118      	movs	r1, #24
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f000 f9f6 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013a0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013a0e:	69fb      	ldr	r3, [r7, #28]
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3720      	adds	r7, #32
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b088      	sub	sp, #32
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
 8013a20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013a26:	2319      	movs	r3, #25
 8013a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a30:	2300      	movs	r3, #0
 8013a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013a3a:	f107 0308 	add.w	r3, r7, #8
 8013a3e:	4619      	mov	r1, r3
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f7ff fee7 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013a4a:	2119      	movs	r1, #25
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f000 f9d3 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013a54:	69fb      	ldr	r3, [r7, #28]
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3720      	adds	r7, #32
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
	...

08013a60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b088      	sub	sp, #32
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013a6c:	230c      	movs	r3, #12
 8013a6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013a74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a76:	2300      	movs	r3, #0
 8013a78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013a7e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	68db      	ldr	r3, [r3, #12]
 8013a84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013a98:	f107 0308 	add.w	r3, r7, #8
 8013a9c:	4619      	mov	r1, r3
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f7ff feb8 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8013ad4 <SDMMC_CmdStopTransfer+0x74>)
 8013aa6:	210c      	movs	r1, #12
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f000 f9a5 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013aae:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	68db      	ldr	r3, [r3, #12]
 8013ab4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013ac2:	d101      	bne.n	8013ac8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013ac8:	69fb      	ldr	r3, [r7, #28]
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3720      	adds	r7, #32
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	05f5e100 	.word	0x05f5e100

08013ad8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b088      	sub	sp, #32
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013ae6:	2307      	movs	r3, #7
 8013ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013aea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013af0:	2300      	movs	r3, #0
 8013af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013afa:	f107 0308 	add.w	r3, r7, #8
 8013afe:	4619      	mov	r1, r3
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f7ff fe87 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013b0a:	2107      	movs	r1, #7
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 f973 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b14:	69fb      	ldr	r3, [r7, #28]
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	3720      	adds	r7, #32
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}

08013b1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013b1e:	b580      	push	{r7, lr}
 8013b20:	b088      	sub	sp, #32
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013b26:	2300      	movs	r3, #0
 8013b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013b32:	2300      	movs	r3, #0
 8013b34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013b3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013b3c:	f107 0308 	add.w	r3, r7, #8
 8013b40:	4619      	mov	r1, r3
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f7ff fe66 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f000 fb97 	bl	801427c <SDMMC_GetCmdError>
 8013b4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b50:	69fb      	ldr	r3, [r7, #28]
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3720      	adds	r7, #32
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}

08013b5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8013b5a:	b580      	push	{r7, lr}
 8013b5c:	b088      	sub	sp, #32
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013b62:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8013b66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013b68:	2308      	movs	r3, #8
 8013b6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013b72:	2300      	movs	r3, #0
 8013b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013b7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013b7c:	f107 0308 	add.w	r3, r7, #8
 8013b80:	4619      	mov	r1, r3
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f7ff fe46 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f000 fb29 	bl	80141e0 <SDMMC_GetCmdResp7>
 8013b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b90:	69fb      	ldr	r3, [r7, #28]
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3720      	adds	r7, #32
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}

08013b9a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013b9a:	b580      	push	{r7, lr}
 8013b9c:	b088      	sub	sp, #32
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	6078      	str	r0, [r7, #4]
 8013ba2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8013ba8:	2337      	movs	r3, #55	@ 0x37
 8013baa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013bac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013bb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013bba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013bbc:	f107 0308 	add.w	r3, r7, #8
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f7ff fe26 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013bcc:	2137      	movs	r1, #55	@ 0x37
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f000 f912 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013bd6:	69fb      	ldr	r3, [r7, #28]
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3720      	adds	r7, #32
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b088      	sub	sp, #32
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013bee:	2329      	movs	r3, #41	@ 0x29
 8013bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013bf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013c02:	f107 0308 	add.w	r3, r7, #8
 8013c06:	4619      	mov	r1, r3
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f7ff fe03 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f000 fa2e 	bl	8014070 <SDMMC_GetCmdResp3>
 8013c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013c16:	69fb      	ldr	r3, [r7, #28]
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3720      	adds	r7, #32
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b088      	sub	sp, #32
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013c2e:	2306      	movs	r3, #6
 8013c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013c32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013c42:	f107 0308 	add.w	r3, r7, #8
 8013c46:	4619      	mov	r1, r3
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f7ff fde3 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013c52:	2106      	movs	r1, #6
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 f8cf 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013c5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013c5c:	69fb      	ldr	r3, [r7, #28]
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3720      	adds	r7, #32
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}

08013c66 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8013c66:	b580      	push	{r7, lr}
 8013c68:	b088      	sub	sp, #32
 8013c6a:	af00      	add	r7, sp, #0
 8013c6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013c72:	2333      	movs	r3, #51	@ 0x33
 8013c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013c76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013c84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013c86:	f107 0308 	add.w	r3, r7, #8
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f7ff fdc1 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013c96:	2133      	movs	r1, #51	@ 0x33
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f000 f8ad 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013c9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013ca0:	69fb      	ldr	r3, [r7, #28]
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3720      	adds	r7, #32
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}

08013caa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8013caa:	b580      	push	{r7, lr}
 8013cac:	b088      	sub	sp, #32
 8013cae:	af00      	add	r7, sp, #0
 8013cb0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013cb6:	2302      	movs	r3, #2
 8013cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013cba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8013cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013cc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013cca:	f107 0308 	add.w	r3, r7, #8
 8013cce:	4619      	mov	r1, r3
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f7ff fd9f 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f000 f980 	bl	8013fdc <SDMMC_GetCmdResp2>
 8013cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013cde:	69fb      	ldr	r3, [r7, #28]
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3720      	adds	r7, #32
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b088      	sub	sp, #32
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013cf6:	2309      	movs	r3, #9
 8013cf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013cfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8013cfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013d00:	2300      	movs	r3, #0
 8013d02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013d08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013d0a:	f107 0308 	add.w	r3, r7, #8
 8013d0e:	4619      	mov	r1, r3
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f7ff fd7f 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f000 f960 	bl	8013fdc <SDMMC_GetCmdResp2>
 8013d1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d1e:	69fb      	ldr	r3, [r7, #28]
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3720      	adds	r7, #32
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b088      	sub	sp, #32
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013d32:	2300      	movs	r3, #0
 8013d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013d36:	2303      	movs	r3, #3
 8013d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013d3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013d3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013d40:	2300      	movs	r3, #0
 8013d42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013d48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013d4a:	f107 0308 	add.w	r3, r7, #8
 8013d4e:	4619      	mov	r1, r3
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f7ff fd5f 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013d56:	683a      	ldr	r2, [r7, #0]
 8013d58:	2103      	movs	r1, #3
 8013d5a:	6878      	ldr	r0, [r7, #4]
 8013d5c:	f000 f9c8 	bl	80140f0 <SDMMC_GetCmdResp6>
 8013d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d62:	69fb      	ldr	r3, [r7, #28]
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3720      	adds	r7, #32
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}

08013d6c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b088      	sub	sp, #32
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013d7a:	230d      	movs	r3, #13
 8013d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013d7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013d82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013d84:	2300      	movs	r3, #0
 8013d86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013d8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013d8e:	f107 0308 	add.w	r3, r7, #8
 8013d92:	4619      	mov	r1, r3
 8013d94:	6878      	ldr	r0, [r7, #4]
 8013d96:	f7ff fd3d 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013d9e:	210d      	movs	r1, #13
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f000 f829 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013da6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013da8:	69fb      	ldr	r3, [r7, #28]
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3720      	adds	r7, #32
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}

08013db2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013db2:	b580      	push	{r7, lr}
 8013db4:	b088      	sub	sp, #32
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013dbe:	230d      	movs	r3, #13
 8013dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013dc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013dd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013dd2:	f107 0308 	add.w	r3, r7, #8
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	6878      	ldr	r0, [r7, #4]
 8013dda:	f7ff fd1b 	bl	8013814 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013de2:	210d      	movs	r1, #13
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f000 f807 	bl	8013df8 <SDMMC_GetCmdResp1>
 8013dea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013dec:	69fb      	ldr	r3, [r7, #28]
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	3720      	adds	r7, #32
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd80      	pop	{r7, pc}
	...

08013df8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b088      	sub	sp, #32
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	460b      	mov	r3, r1
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013e06:	4b70      	ldr	r3, [pc, #448]	@ (8013fc8 <SDMMC_GetCmdResp1+0x1d0>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	4a70      	ldr	r2, [pc, #448]	@ (8013fcc <SDMMC_GetCmdResp1+0x1d4>)
 8013e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8013e10:	0a5a      	lsrs	r2, r3, #9
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	fb02 f303 	mul.w	r3, r2, r3
 8013e18:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013e1a:	69fb      	ldr	r3, [r7, #28]
 8013e1c:	1e5a      	subs	r2, r3, #1
 8013e1e:	61fa      	str	r2, [r7, #28]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d102      	bne.n	8013e2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013e24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013e28:	e0c9      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e2e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013e30:	69ba      	ldr	r2, [r7, #24]
 8013e32:	4b67      	ldr	r3, [pc, #412]	@ (8013fd0 <SDMMC_GetCmdResp1+0x1d8>)
 8013e34:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d0ef      	beq.n	8013e1a <SDMMC_GetCmdResp1+0x22>
 8013e3a:	69bb      	ldr	r3, [r7, #24]
 8013e3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d1ea      	bne.n	8013e1a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e48:	f003 0304 	and.w	r3, r3, #4
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d004      	beq.n	8013e5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2204      	movs	r2, #4
 8013e54:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013e56:	2304      	movs	r3, #4
 8013e58:	e0b1      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e5e:	f003 0301 	and.w	r3, r3, #1
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d004      	beq.n	8013e70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	e0a6      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	4a58      	ldr	r2, [pc, #352]	@ (8013fd4 <SDMMC_GetCmdResp1+0x1dc>)
 8013e74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013e76:	68f8      	ldr	r0, [r7, #12]
 8013e78:	f7ff fcf6 	bl	8013868 <SDMMC_GetCommandResponse>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	461a      	mov	r2, r3
 8013e80:	7afb      	ldrb	r3, [r7, #11]
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d001      	beq.n	8013e8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013e86:	2301      	movs	r3, #1
 8013e88:	e099      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013e8a:	2100      	movs	r1, #0
 8013e8c:	68f8      	ldr	r0, [r7, #12]
 8013e8e:	f7ff fcf8 	bl	8013882 <SDMMC_GetResponse>
 8013e92:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013e94:	697a      	ldr	r2, [r7, #20]
 8013e96:	4b50      	ldr	r3, [pc, #320]	@ (8013fd8 <SDMMC_GetCmdResp1+0x1e0>)
 8013e98:	4013      	ands	r3, r2
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d101      	bne.n	8013ea2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	e08d      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	da02      	bge.n	8013eae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013ea8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8013eac:	e087      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d001      	beq.n	8013ebc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013eb8:	2340      	movs	r3, #64	@ 0x40
 8013eba:	e080      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d001      	beq.n	8013eca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013ec6:	2380      	movs	r3, #128	@ 0x80
 8013ec8:	e079      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d002      	beq.n	8013eda <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013ed8:	e071      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d002      	beq.n	8013eea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013ee8:	e069      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d002      	beq.n	8013efa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013ef4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013ef8:	e061      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d002      	beq.n	8013f0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013f04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013f08:	e059      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d002      	beq.n	8013f1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013f18:	e051      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d002      	beq.n	8013f2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013f28:	e049      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d002      	beq.n	8013f3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013f34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8013f38:	e041      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d002      	beq.n	8013f4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013f44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013f48:	e039      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d002      	beq.n	8013f5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013f54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8013f58:	e031      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013f5a:	697b      	ldr	r3, [r7, #20]
 8013f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d002      	beq.n	8013f6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013f64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8013f68:	e029      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013f6a:	697b      	ldr	r3, [r7, #20]
 8013f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d002      	beq.n	8013f7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013f74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013f78:	e021      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d002      	beq.n	8013f8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013f84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013f88:	e019      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d002      	beq.n	8013f9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013f94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8013f98:	e011      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d002      	beq.n	8013faa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013fa4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8013fa8:	e009      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	f003 0308 	and.w	r3, r3, #8
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d002      	beq.n	8013fba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013fb4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8013fb8:	e001      	b.n	8013fbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013fba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3720      	adds	r7, #32
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	24000014 	.word	0x24000014
 8013fcc:	10624dd3 	.word	0x10624dd3
 8013fd0:	00200045 	.word	0x00200045
 8013fd4:	002000c5 	.word	0x002000c5
 8013fd8:	fdffe008 	.word	0xfdffe008

08013fdc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013fdc:	b480      	push	{r7}
 8013fde:	b085      	sub	sp, #20
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8014064 <SDMMC_GetCmdResp2+0x88>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8014068 <SDMMC_GetCmdResp2+0x8c>)
 8013fea:	fba2 2303 	umull	r2, r3, r2, r3
 8013fee:	0a5b      	lsrs	r3, r3, #9
 8013ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013ff4:	fb02 f303 	mul.w	r3, r2, r3
 8013ff8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	1e5a      	subs	r2, r3, #1
 8013ffe:	60fa      	str	r2, [r7, #12]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d102      	bne.n	801400a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014004:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014008:	e026      	b.n	8014058 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801400e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014016:	2b00      	cmp	r3, #0
 8014018:	d0ef      	beq.n	8013ffa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014020:	2b00      	cmp	r3, #0
 8014022:	d1ea      	bne.n	8013ffa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014028:	f003 0304 	and.w	r3, r3, #4
 801402c:	2b00      	cmp	r3, #0
 801402e:	d004      	beq.n	801403a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2204      	movs	r2, #4
 8014034:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014036:	2304      	movs	r3, #4
 8014038:	e00e      	b.n	8014058 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801403e:	f003 0301 	and.w	r3, r3, #1
 8014042:	2b00      	cmp	r3, #0
 8014044:	d004      	beq.n	8014050 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2201      	movs	r2, #1
 801404a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801404c:	2301      	movs	r3, #1
 801404e:	e003      	b.n	8014058 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	4a06      	ldr	r2, [pc, #24]	@ (801406c <SDMMC_GetCmdResp2+0x90>)
 8014054:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8014056:	2300      	movs	r3, #0
}
 8014058:	4618      	mov	r0, r3
 801405a:	3714      	adds	r7, #20
 801405c:	46bd      	mov	sp, r7
 801405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014062:	4770      	bx	lr
 8014064:	24000014 	.word	0x24000014
 8014068:	10624dd3 	.word	0x10624dd3
 801406c:	002000c5 	.word	0x002000c5

08014070 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014070:	b480      	push	{r7}
 8014072:	b085      	sub	sp, #20
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014078:	4b1a      	ldr	r3, [pc, #104]	@ (80140e4 <SDMMC_GetCmdResp3+0x74>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	4a1a      	ldr	r2, [pc, #104]	@ (80140e8 <SDMMC_GetCmdResp3+0x78>)
 801407e:	fba2 2303 	umull	r2, r3, r2, r3
 8014082:	0a5b      	lsrs	r3, r3, #9
 8014084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014088:	fb02 f303 	mul.w	r3, r2, r3
 801408c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	1e5a      	subs	r2, r3, #1
 8014092:	60fa      	str	r2, [r7, #12]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d102      	bne.n	801409e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014098:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801409c:	e01b      	b.n	80140d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d0ef      	beq.n	801408e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d1ea      	bne.n	801408e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140bc:	f003 0304 	and.w	r3, r3, #4
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d004      	beq.n	80140ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2204      	movs	r2, #4
 80140c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80140ca:	2304      	movs	r3, #4
 80140cc:	e003      	b.n	80140d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	4a06      	ldr	r2, [pc, #24]	@ (80140ec <SDMMC_GetCmdResp3+0x7c>)
 80140d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80140d4:	2300      	movs	r3, #0
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3714      	adds	r7, #20
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr
 80140e2:	bf00      	nop
 80140e4:	24000014 	.word	0x24000014
 80140e8:	10624dd3 	.word	0x10624dd3
 80140ec:	002000c5 	.word	0x002000c5

080140f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b088      	sub	sp, #32
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	460b      	mov	r3, r1
 80140fa:	607a      	str	r2, [r7, #4]
 80140fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80140fe:	4b35      	ldr	r3, [pc, #212]	@ (80141d4 <SDMMC_GetCmdResp6+0xe4>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	4a35      	ldr	r2, [pc, #212]	@ (80141d8 <SDMMC_GetCmdResp6+0xe8>)
 8014104:	fba2 2303 	umull	r2, r3, r2, r3
 8014108:	0a5b      	lsrs	r3, r3, #9
 801410a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801410e:	fb02 f303 	mul.w	r3, r2, r3
 8014112:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014114:	69fb      	ldr	r3, [r7, #28]
 8014116:	1e5a      	subs	r2, r3, #1
 8014118:	61fa      	str	r2, [r7, #28]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d102      	bne.n	8014124 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801411e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014122:	e052      	b.n	80141ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014128:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801412a:	69bb      	ldr	r3, [r7, #24]
 801412c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014130:	2b00      	cmp	r3, #0
 8014132:	d0ef      	beq.n	8014114 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801413a:	2b00      	cmp	r3, #0
 801413c:	d1ea      	bne.n	8014114 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014142:	f003 0304 	and.w	r3, r3, #4
 8014146:	2b00      	cmp	r3, #0
 8014148:	d004      	beq.n	8014154 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	2204      	movs	r2, #4
 801414e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014150:	2304      	movs	r3, #4
 8014152:	e03a      	b.n	80141ca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014158:	f003 0301 	and.w	r3, r3, #1
 801415c:	2b00      	cmp	r3, #0
 801415e:	d004      	beq.n	801416a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	2201      	movs	r2, #1
 8014164:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014166:	2301      	movs	r3, #1
 8014168:	e02f      	b.n	80141ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801416a:	68f8      	ldr	r0, [r7, #12]
 801416c:	f7ff fb7c 	bl	8013868 <SDMMC_GetCommandResponse>
 8014170:	4603      	mov	r3, r0
 8014172:	461a      	mov	r2, r3
 8014174:	7afb      	ldrb	r3, [r7, #11]
 8014176:	4293      	cmp	r3, r2
 8014178:	d001      	beq.n	801417e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801417a:	2301      	movs	r3, #1
 801417c:	e025      	b.n	80141ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	4a16      	ldr	r2, [pc, #88]	@ (80141dc <SDMMC_GetCmdResp6+0xec>)
 8014182:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014184:	2100      	movs	r1, #0
 8014186:	68f8      	ldr	r0, [r7, #12]
 8014188:	f7ff fb7b 	bl	8013882 <SDMMC_GetResponse>
 801418c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8014194:	2b00      	cmp	r3, #0
 8014196:	d106      	bne.n	80141a6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	0c1b      	lsrs	r3, r3, #16
 801419c:	b29a      	uxth	r2, r3
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80141a2:	2300      	movs	r3, #0
 80141a4:	e011      	b.n	80141ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d002      	beq.n	80141b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80141b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80141b4:	e009      	b.n	80141ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d002      	beq.n	80141c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80141c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80141c4:	e001      	b.n	80141ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80141c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	3720      	adds	r7, #32
 80141ce:	46bd      	mov	sp, r7
 80141d0:	bd80      	pop	{r7, pc}
 80141d2:	bf00      	nop
 80141d4:	24000014 	.word	0x24000014
 80141d8:	10624dd3 	.word	0x10624dd3
 80141dc:	002000c5 	.word	0x002000c5

080141e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80141e0:	b480      	push	{r7}
 80141e2:	b085      	sub	sp, #20
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80141e8:	4b22      	ldr	r3, [pc, #136]	@ (8014274 <SDMMC_GetCmdResp7+0x94>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	4a22      	ldr	r2, [pc, #136]	@ (8014278 <SDMMC_GetCmdResp7+0x98>)
 80141ee:	fba2 2303 	umull	r2, r3, r2, r3
 80141f2:	0a5b      	lsrs	r3, r3, #9
 80141f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80141f8:	fb02 f303 	mul.w	r3, r2, r3
 80141fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	1e5a      	subs	r2, r3, #1
 8014202:	60fa      	str	r2, [r7, #12]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d102      	bne.n	801420e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014208:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801420c:	e02c      	b.n	8014268 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014212:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801421a:	2b00      	cmp	r3, #0
 801421c:	d0ef      	beq.n	80141fe <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014224:	2b00      	cmp	r3, #0
 8014226:	d1ea      	bne.n	80141fe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801422c:	f003 0304 	and.w	r3, r3, #4
 8014230:	2b00      	cmp	r3, #0
 8014232:	d004      	beq.n	801423e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2204      	movs	r2, #4
 8014238:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801423a:	2304      	movs	r3, #4
 801423c:	e014      	b.n	8014268 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014242:	f003 0301 	and.w	r3, r3, #1
 8014246:	2b00      	cmp	r3, #0
 8014248:	d004      	beq.n	8014254 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2201      	movs	r2, #1
 801424e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014250:	2301      	movs	r3, #1
 8014252:	e009      	b.n	8014268 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801425c:	2b00      	cmp	r3, #0
 801425e:	d002      	beq.n	8014266 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2240      	movs	r2, #64	@ 0x40
 8014264:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8014266:	2300      	movs	r3, #0

}
 8014268:	4618      	mov	r0, r3
 801426a:	3714      	adds	r7, #20
 801426c:	46bd      	mov	sp, r7
 801426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014272:	4770      	bx	lr
 8014274:	24000014 	.word	0x24000014
 8014278:	10624dd3 	.word	0x10624dd3

0801427c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801427c:	b480      	push	{r7}
 801427e:	b085      	sub	sp, #20
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014284:	4b11      	ldr	r3, [pc, #68]	@ (80142cc <SDMMC_GetCmdError+0x50>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	4a11      	ldr	r2, [pc, #68]	@ (80142d0 <SDMMC_GetCmdError+0x54>)
 801428a:	fba2 2303 	umull	r2, r3, r2, r3
 801428e:	0a5b      	lsrs	r3, r3, #9
 8014290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014294:	fb02 f303 	mul.w	r3, r2, r3
 8014298:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	1e5a      	subs	r2, r3, #1
 801429e:	60fa      	str	r2, [r7, #12]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d102      	bne.n	80142aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80142a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80142a8:	e009      	b.n	80142be <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d0f1      	beq.n	801429a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	4a06      	ldr	r2, [pc, #24]	@ (80142d4 <SDMMC_GetCmdError+0x58>)
 80142ba:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80142bc:	2300      	movs	r3, #0
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3714      	adds	r7, #20
 80142c2:	46bd      	mov	sp, r7
 80142c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c8:	4770      	bx	lr
 80142ca:	bf00      	nop
 80142cc:	24000014 	.word	0x24000014
 80142d0:	10624dd3 	.word	0x10624dd3
 80142d4:	002000c5 	.word	0x002000c5

080142d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80142dc:	4904      	ldr	r1, [pc, #16]	@ (80142f0 <MX_FATFS_Init+0x18>)
 80142de:	4805      	ldr	r0, [pc, #20]	@ (80142f4 <MX_FATFS_Init+0x1c>)
 80142e0:	f000 fa8e 	bl	8014800 <FATFS_LinkDriver>
 80142e4:	4603      	mov	r3, r0
 80142e6:	461a      	mov	r2, r3
 80142e8:	4b03      	ldr	r3, [pc, #12]	@ (80142f8 <MX_FATFS_Init+0x20>)
 80142ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80142ec:	bf00      	nop
 80142ee:	bd80      	pop	{r7, pc}
 80142f0:	24000ae0 	.word	0x24000ae0
 80142f4:	08019604 	.word	0x08019604
 80142f8:	24000adc 	.word	0x24000adc

080142fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014302:	2300      	movs	r3, #0
 8014304:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014306:	f000 f885 	bl	8014414 <BSP_SD_IsDetected>
 801430a:	4603      	mov	r3, r0
 801430c:	2b01      	cmp	r3, #1
 801430e:	d001      	beq.n	8014314 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014310:	2302      	movs	r3, #2
 8014312:	e012      	b.n	801433a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8014314:	480b      	ldr	r0, [pc, #44]	@ (8014344 <BSP_SD_Init+0x48>)
 8014316:	f7f9 ffb7 	bl	800e288 <HAL_SD_Init>
 801431a:	4603      	mov	r3, r0
 801431c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801431e:	79fb      	ldrb	r3, [r7, #7]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d109      	bne.n	8014338 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014324:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8014328:	4806      	ldr	r0, [pc, #24]	@ (8014344 <BSP_SD_Init+0x48>)
 801432a:	f7fa fe6d 	bl	800f008 <HAL_SD_ConfigWideBusOperation>
 801432e:	4603      	mov	r3, r0
 8014330:	2b00      	cmp	r3, #0
 8014332:	d001      	beq.n	8014338 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014334:	2301      	movs	r3, #1
 8014336:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014338:	79fb      	ldrb	r3, [r7, #7]
}
 801433a:	4618      	mov	r0, r3
 801433c:	3708      	adds	r7, #8
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
 8014342:	bf00      	nop
 8014344:	2400054c 	.word	0x2400054c

08014348 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b086      	sub	sp, #24
 801434c:	af00      	add	r7, sp, #0
 801434e:	60f8      	str	r0, [r7, #12]
 8014350:	60b9      	str	r1, [r7, #8]
 8014352:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014354:	2300      	movs	r3, #0
 8014356:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	68ba      	ldr	r2, [r7, #8]
 801435c:	68f9      	ldr	r1, [r7, #12]
 801435e:	4806      	ldr	r0, [pc, #24]	@ (8014378 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014360:	f7fa f8b2 	bl	800e4c8 <HAL_SD_ReadBlocks_DMA>
 8014364:	4603      	mov	r3, r0
 8014366:	2b00      	cmp	r3, #0
 8014368:	d001      	beq.n	801436e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801436a:	2301      	movs	r3, #1
 801436c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801436e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014370:	4618      	mov	r0, r3
 8014372:	3718      	adds	r7, #24
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}
 8014378:	2400054c 	.word	0x2400054c

0801437c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b086      	sub	sp, #24
 8014380:	af00      	add	r7, sp, #0
 8014382:	60f8      	str	r0, [r7, #12]
 8014384:	60b9      	str	r1, [r7, #8]
 8014386:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014388:	2300      	movs	r3, #0
 801438a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	68ba      	ldr	r2, [r7, #8]
 8014390:	68f9      	ldr	r1, [r7, #12]
 8014392:	4806      	ldr	r0, [pc, #24]	@ (80143ac <BSP_SD_WriteBlocks_DMA+0x30>)
 8014394:	f7fa f940 	bl	800e618 <HAL_SD_WriteBlocks_DMA>
 8014398:	4603      	mov	r3, r0
 801439a:	2b00      	cmp	r3, #0
 801439c:	d001      	beq.n	80143a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801439e:	2301      	movs	r3, #1
 80143a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80143a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3718      	adds	r7, #24
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	2400054c 	.word	0x2400054c

080143b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80143b4:	4805      	ldr	r0, [pc, #20]	@ (80143cc <BSP_SD_GetCardState+0x1c>)
 80143b6:	f7fa ff39 	bl	800f22c <HAL_SD_GetCardState>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2b04      	cmp	r3, #4
 80143be:	bf14      	ite	ne
 80143c0:	2301      	movne	r3, #1
 80143c2:	2300      	moveq	r3, #0
 80143c4:	b2db      	uxtb	r3, r3
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	bd80      	pop	{r7, pc}
 80143ca:	bf00      	nop
 80143cc:	2400054c 	.word	0x2400054c

080143d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80143d8:	6879      	ldr	r1, [r7, #4]
 80143da:	4803      	ldr	r0, [pc, #12]	@ (80143e8 <BSP_SD_GetCardInfo+0x18>)
 80143dc:	f7fa fde8 	bl	800efb0 <HAL_SD_GetCardInfo>
}
 80143e0:	bf00      	nop
 80143e2:	3708      	adds	r7, #8
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}
 80143e8:	2400054c 	.word	0x2400054c

080143ec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b082      	sub	sp, #8
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80143f4:	f000 f9a0 	bl	8014738 <BSP_SD_WriteCpltCallback>
}
 80143f8:	bf00      	nop
 80143fa:	3708      	adds	r7, #8
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b082      	sub	sp, #8
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014408:	f000 f9a2 	bl	8014750 <BSP_SD_ReadCpltCallback>
}
 801440c:	bf00      	nop
 801440e:	3708      	adds	r7, #8
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}

08014414 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801441a:	2301      	movs	r3, #1
 801441c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801441e:	f000 f80b 	bl	8014438 <BSP_PlatformIsDetected>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d101      	bne.n	801442c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014428:	2300      	movs	r3, #0
 801442a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801442c:	79fb      	ldrb	r3, [r7, #7]
 801442e:	b2db      	uxtb	r3, r3
}
 8014430:	4618      	mov	r0, r3
 8014432:	3708      	adds	r7, #8
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801443e:	2301      	movs	r3, #1
 8014440:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014442:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8014446:	4806      	ldr	r0, [pc, #24]	@ (8014460 <BSP_PlatformIsDetected+0x28>)
 8014448:	f7f6 fb66 	bl	800ab18 <HAL_GPIO_ReadPin>
 801444c:	4603      	mov	r3, r0
 801444e:	2b00      	cmp	r3, #0
 8014450:	d001      	beq.n	8014456 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8014452:	2300      	movs	r3, #0
 8014454:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014456:	79fb      	ldrb	r3, [r7, #7]
}
 8014458:	4618      	mov	r0, r3
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}
 8014460:	58021400 	.word	0x58021400

08014464 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b084      	sub	sp, #16
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801446c:	f7f0 f97c 	bl	8004768 <HAL_GetTick>
 8014470:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014472:	e006      	b.n	8014482 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014474:	f7ff ff9c 	bl	80143b0 <BSP_SD_GetCardState>
 8014478:	4603      	mov	r3, r0
 801447a:	2b00      	cmp	r3, #0
 801447c:	d101      	bne.n	8014482 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801447e:	2300      	movs	r3, #0
 8014480:	e009      	b.n	8014496 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014482:	f7f0 f971 	bl	8004768 <HAL_GetTick>
 8014486:	4602      	mov	r2, r0
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	1ad3      	subs	r3, r2, r3
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	429a      	cmp	r2, r3
 8014490:	d8f0      	bhi.n	8014474 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014496:	4618      	mov	r0, r3
 8014498:	3710      	adds	r7, #16
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
	...

080144a0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	4603      	mov	r3, r0
 80144a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80144aa:	4b0b      	ldr	r3, [pc, #44]	@ (80144d8 <SD_CheckStatus+0x38>)
 80144ac:	2201      	movs	r2, #1
 80144ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80144b0:	f7ff ff7e 	bl	80143b0 <BSP_SD_GetCardState>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d107      	bne.n	80144ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80144ba:	4b07      	ldr	r3, [pc, #28]	@ (80144d8 <SD_CheckStatus+0x38>)
 80144bc:	781b      	ldrb	r3, [r3, #0]
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	f023 0301 	bic.w	r3, r3, #1
 80144c4:	b2da      	uxtb	r2, r3
 80144c6:	4b04      	ldr	r3, [pc, #16]	@ (80144d8 <SD_CheckStatus+0x38>)
 80144c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80144ca:	4b03      	ldr	r3, [pc, #12]	@ (80144d8 <SD_CheckStatus+0x38>)
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	b2db      	uxtb	r3, r3
}
 80144d0:	4618      	mov	r0, r3
 80144d2:	3708      	adds	r7, #8
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	24000021 	.word	0x24000021

080144dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b082      	sub	sp, #8
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	4603      	mov	r3, r0
 80144e4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80144e6:	f7ff ff09 	bl	80142fc <BSP_SD_Init>
 80144ea:	4603      	mov	r3, r0
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d107      	bne.n	8014500 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80144f0:	79fb      	ldrb	r3, [r7, #7]
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7ff ffd4 	bl	80144a0 <SD_CheckStatus>
 80144f8:	4603      	mov	r3, r0
 80144fa:	461a      	mov	r2, r3
 80144fc:	4b04      	ldr	r3, [pc, #16]	@ (8014510 <SD_initialize+0x34>)
 80144fe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014500:	4b03      	ldr	r3, [pc, #12]	@ (8014510 <SD_initialize+0x34>)
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	b2db      	uxtb	r3, r3
}
 8014506:	4618      	mov	r0, r3
 8014508:	3708      	adds	r7, #8
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop
 8014510:	24000021 	.word	0x24000021

08014514 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b082      	sub	sp, #8
 8014518:	af00      	add	r7, sp, #0
 801451a:	4603      	mov	r3, r0
 801451c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801451e:	79fb      	ldrb	r3, [r7, #7]
 8014520:	4618      	mov	r0, r3
 8014522:	f7ff ffbd 	bl	80144a0 <SD_CheckStatus>
 8014526:	4603      	mov	r3, r0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3708      	adds	r7, #8
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	60b9      	str	r1, [r7, #8]
 8014538:	607a      	str	r2, [r7, #4]
 801453a:	603b      	str	r3, [r7, #0]
 801453c:	4603      	mov	r3, r0
 801453e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014540:	2301      	movs	r3, #1
 8014542:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014544:	f247 5030 	movw	r0, #30000	@ 0x7530
 8014548:	f7ff ff8c 	bl	8014464 <SD_CheckStatusWithTimeout>
 801454c:	4603      	mov	r3, r0
 801454e:	2b00      	cmp	r3, #0
 8014550:	da01      	bge.n	8014556 <SD_read+0x26>
  {
    return res;
 8014552:	7dfb      	ldrb	r3, [r7, #23]
 8014554:	e03b      	b.n	80145ce <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014556:	683a      	ldr	r2, [r7, #0]
 8014558:	6879      	ldr	r1, [r7, #4]
 801455a:	68b8      	ldr	r0, [r7, #8]
 801455c:	f7ff fef4 	bl	8014348 <BSP_SD_ReadBlocks_DMA>
 8014560:	4603      	mov	r3, r0
 8014562:	2b00      	cmp	r3, #0
 8014564:	d132      	bne.n	80145cc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014566:	4b1c      	ldr	r3, [pc, #112]	@ (80145d8 <SD_read+0xa8>)
 8014568:	2200      	movs	r2, #0
 801456a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801456c:	f7f0 f8fc 	bl	8004768 <HAL_GetTick>
 8014570:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014572:	bf00      	nop
 8014574:	4b18      	ldr	r3, [pc, #96]	@ (80145d8 <SD_read+0xa8>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d108      	bne.n	801458e <SD_read+0x5e>
 801457c:	f7f0 f8f4 	bl	8004768 <HAL_GetTick>
 8014580:	4602      	mov	r2, r0
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	1ad3      	subs	r3, r2, r3
 8014586:	f247 522f 	movw	r2, #29999	@ 0x752f
 801458a:	4293      	cmp	r3, r2
 801458c:	d9f2      	bls.n	8014574 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801458e:	4b12      	ldr	r3, [pc, #72]	@ (80145d8 <SD_read+0xa8>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d102      	bne.n	801459c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014596:	2301      	movs	r3, #1
 8014598:	75fb      	strb	r3, [r7, #23]
 801459a:	e017      	b.n	80145cc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801459c:	4b0e      	ldr	r3, [pc, #56]	@ (80145d8 <SD_read+0xa8>)
 801459e:	2200      	movs	r2, #0
 80145a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80145a2:	f7f0 f8e1 	bl	8004768 <HAL_GetTick>
 80145a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80145a8:	e007      	b.n	80145ba <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80145aa:	f7ff ff01 	bl	80143b0 <BSP_SD_GetCardState>
 80145ae:	4603      	mov	r3, r0
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d102      	bne.n	80145ba <SD_read+0x8a>
          {
            res = RES_OK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80145b8:	e008      	b.n	80145cc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80145ba:	f7f0 f8d5 	bl	8004768 <HAL_GetTick>
 80145be:	4602      	mov	r2, r0
 80145c0:	693b      	ldr	r3, [r7, #16]
 80145c2:	1ad3      	subs	r3, r2, r3
 80145c4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80145c8:	4293      	cmp	r3, r2
 80145ca:	d9ee      	bls.n	80145aa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80145cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3718      	adds	r7, #24
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}
 80145d6:	bf00      	nop
 80145d8:	24000ae8 	.word	0x24000ae8

080145dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b086      	sub	sp, #24
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	60b9      	str	r1, [r7, #8]
 80145e4:	607a      	str	r2, [r7, #4]
 80145e6:	603b      	str	r3, [r7, #0]
 80145e8:	4603      	mov	r3, r0
 80145ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80145ec:	2301      	movs	r3, #1
 80145ee:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80145f0:	4b24      	ldr	r3, [pc, #144]	@ (8014684 <SD_write+0xa8>)
 80145f2:	2200      	movs	r2, #0
 80145f4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80145f6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80145fa:	f7ff ff33 	bl	8014464 <SD_CheckStatusWithTimeout>
 80145fe:	4603      	mov	r3, r0
 8014600:	2b00      	cmp	r3, #0
 8014602:	da01      	bge.n	8014608 <SD_write+0x2c>
  {
    return res;
 8014604:	7dfb      	ldrb	r3, [r7, #23]
 8014606:	e038      	b.n	801467a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014608:	683a      	ldr	r2, [r7, #0]
 801460a:	6879      	ldr	r1, [r7, #4]
 801460c:	68b8      	ldr	r0, [r7, #8]
 801460e:	f7ff feb5 	bl	801437c <BSP_SD_WriteBlocks_DMA>
 8014612:	4603      	mov	r3, r0
 8014614:	2b00      	cmp	r3, #0
 8014616:	d12f      	bne.n	8014678 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014618:	f7f0 f8a6 	bl	8004768 <HAL_GetTick>
 801461c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801461e:	bf00      	nop
 8014620:	4b18      	ldr	r3, [pc, #96]	@ (8014684 <SD_write+0xa8>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d108      	bne.n	801463a <SD_write+0x5e>
 8014628:	f7f0 f89e 	bl	8004768 <HAL_GetTick>
 801462c:	4602      	mov	r2, r0
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	1ad3      	subs	r3, r2, r3
 8014632:	f247 522f 	movw	r2, #29999	@ 0x752f
 8014636:	4293      	cmp	r3, r2
 8014638:	d9f2      	bls.n	8014620 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801463a:	4b12      	ldr	r3, [pc, #72]	@ (8014684 <SD_write+0xa8>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d102      	bne.n	8014648 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014642:	2301      	movs	r3, #1
 8014644:	75fb      	strb	r3, [r7, #23]
 8014646:	e017      	b.n	8014678 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014648:	4b0e      	ldr	r3, [pc, #56]	@ (8014684 <SD_write+0xa8>)
 801464a:	2200      	movs	r2, #0
 801464c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801464e:	f7f0 f88b 	bl	8004768 <HAL_GetTick>
 8014652:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014654:	e007      	b.n	8014666 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014656:	f7ff feab 	bl	80143b0 <BSP_SD_GetCardState>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d102      	bne.n	8014666 <SD_write+0x8a>
          {
            res = RES_OK;
 8014660:	2300      	movs	r3, #0
 8014662:	75fb      	strb	r3, [r7, #23]
            break;
 8014664:	e008      	b.n	8014678 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014666:	f7f0 f87f 	bl	8004768 <HAL_GetTick>
 801466a:	4602      	mov	r2, r0
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	1ad3      	subs	r3, r2, r3
 8014670:	f247 522f 	movw	r2, #29999	@ 0x752f
 8014674:	4293      	cmp	r3, r2
 8014676:	d9ee      	bls.n	8014656 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014678:	7dfb      	ldrb	r3, [r7, #23]
}
 801467a:	4618      	mov	r0, r3
 801467c:	3718      	adds	r7, #24
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	24000ae4 	.word	0x24000ae4

08014688 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b08c      	sub	sp, #48	@ 0x30
 801468c:	af00      	add	r7, sp, #0
 801468e:	4603      	mov	r3, r0
 8014690:	603a      	str	r2, [r7, #0]
 8014692:	71fb      	strb	r3, [r7, #7]
 8014694:	460b      	mov	r3, r1
 8014696:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014698:	2301      	movs	r3, #1
 801469a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801469e:	4b25      	ldr	r3, [pc, #148]	@ (8014734 <SD_ioctl+0xac>)
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	b2db      	uxtb	r3, r3
 80146a4:	f003 0301 	and.w	r3, r3, #1
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d001      	beq.n	80146b0 <SD_ioctl+0x28>
 80146ac:	2303      	movs	r3, #3
 80146ae:	e03c      	b.n	801472a <SD_ioctl+0xa2>

  switch (cmd)
 80146b0:	79bb      	ldrb	r3, [r7, #6]
 80146b2:	2b03      	cmp	r3, #3
 80146b4:	d834      	bhi.n	8014720 <SD_ioctl+0x98>
 80146b6:	a201      	add	r2, pc, #4	@ (adr r2, 80146bc <SD_ioctl+0x34>)
 80146b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146bc:	080146cd 	.word	0x080146cd
 80146c0:	080146d5 	.word	0x080146d5
 80146c4:	080146ed 	.word	0x080146ed
 80146c8:	08014707 	.word	0x08014707
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80146cc:	2300      	movs	r3, #0
 80146ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80146d2:	e028      	b.n	8014726 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80146d4:	f107 0308 	add.w	r3, r7, #8
 80146d8:	4618      	mov	r0, r3
 80146da:	f7ff fe79 	bl	80143d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80146de:	6a3a      	ldr	r2, [r7, #32]
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80146e4:	2300      	movs	r3, #0
 80146e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80146ea:	e01c      	b.n	8014726 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80146ec:	f107 0308 	add.w	r3, r7, #8
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7ff fe6d 	bl	80143d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80146f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146f8:	b29a      	uxth	r2, r3
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80146fe:	2300      	movs	r3, #0
 8014700:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8014704:	e00f      	b.n	8014726 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014706:	f107 0308 	add.w	r3, r7, #8
 801470a:	4618      	mov	r0, r3
 801470c:	f7ff fe60 	bl	80143d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014712:	0a5a      	lsrs	r2, r3, #9
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014718:	2300      	movs	r3, #0
 801471a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801471e:	e002      	b.n	8014726 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014720:	2304      	movs	r3, #4
 8014722:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8014726:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801472a:	4618      	mov	r0, r3
 801472c:	3730      	adds	r7, #48	@ 0x30
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	24000021 	.word	0x24000021

08014738 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014738:	b480      	push	{r7}
 801473a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801473c:	4b03      	ldr	r3, [pc, #12]	@ (801474c <BSP_SD_WriteCpltCallback+0x14>)
 801473e:	2201      	movs	r2, #1
 8014740:	601a      	str	r2, [r3, #0]
}
 8014742:	bf00      	nop
 8014744:	46bd      	mov	sp, r7
 8014746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474a:	4770      	bx	lr
 801474c:	24000ae4 	.word	0x24000ae4

08014750 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014750:	b480      	push	{r7}
 8014752:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014754:	4b03      	ldr	r3, [pc, #12]	@ (8014764 <BSP_SD_ReadCpltCallback+0x14>)
 8014756:	2201      	movs	r2, #1
 8014758:	601a      	str	r2, [r3, #0]
}
 801475a:	bf00      	nop
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr
 8014764:	24000ae8 	.word	0x24000ae8

08014768 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014768:	b480      	push	{r7}
 801476a:	b087      	sub	sp, #28
 801476c:	af00      	add	r7, sp, #0
 801476e:	60f8      	str	r0, [r7, #12]
 8014770:	60b9      	str	r1, [r7, #8]
 8014772:	4613      	mov	r3, r2
 8014774:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014776:	2301      	movs	r3, #1
 8014778:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801477a:	2300      	movs	r3, #0
 801477c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801477e:	4b1f      	ldr	r3, [pc, #124]	@ (80147fc <FATFS_LinkDriverEx+0x94>)
 8014780:	7a5b      	ldrb	r3, [r3, #9]
 8014782:	b2db      	uxtb	r3, r3
 8014784:	2b00      	cmp	r3, #0
 8014786:	d131      	bne.n	80147ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014788:	4b1c      	ldr	r3, [pc, #112]	@ (80147fc <FATFS_LinkDriverEx+0x94>)
 801478a:	7a5b      	ldrb	r3, [r3, #9]
 801478c:	b2db      	uxtb	r3, r3
 801478e:	461a      	mov	r2, r3
 8014790:	4b1a      	ldr	r3, [pc, #104]	@ (80147fc <FATFS_LinkDriverEx+0x94>)
 8014792:	2100      	movs	r1, #0
 8014794:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014796:	4b19      	ldr	r3, [pc, #100]	@ (80147fc <FATFS_LinkDriverEx+0x94>)
 8014798:	7a5b      	ldrb	r3, [r3, #9]
 801479a:	b2db      	uxtb	r3, r3
 801479c:	4a17      	ldr	r2, [pc, #92]	@ (80147fc <FATFS_LinkDriverEx+0x94>)
 801479e:	009b      	lsls	r3, r3, #2
 80147a0:	4413      	add	r3, r2
 80147a2:	68fa      	ldr	r2, [r7, #12]
 80147a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80147a6:	4b15      	ldr	r3, [pc, #84]	@ (80147fc <FATFS_LinkDriverEx+0x94>)
 80147a8:	7a5b      	ldrb	r3, [r3, #9]
 80147aa:	b2db      	uxtb	r3, r3
 80147ac:	461a      	mov	r2, r3
 80147ae:	4b13      	ldr	r3, [pc, #76]	@ (80147fc <FATFS_LinkDriverEx+0x94>)
 80147b0:	4413      	add	r3, r2
 80147b2:	79fa      	ldrb	r2, [r7, #7]
 80147b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80147b6:	4b11      	ldr	r3, [pc, #68]	@ (80147fc <FATFS_LinkDriverEx+0x94>)
 80147b8:	7a5b      	ldrb	r3, [r3, #9]
 80147ba:	b2db      	uxtb	r3, r3
 80147bc:	1c5a      	adds	r2, r3, #1
 80147be:	b2d1      	uxtb	r1, r2
 80147c0:	4a0e      	ldr	r2, [pc, #56]	@ (80147fc <FATFS_LinkDriverEx+0x94>)
 80147c2:	7251      	strb	r1, [r2, #9]
 80147c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80147c6:	7dbb      	ldrb	r3, [r7, #22]
 80147c8:	3330      	adds	r3, #48	@ 0x30
 80147ca:	b2da      	uxtb	r2, r3
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	3301      	adds	r3, #1
 80147d4:	223a      	movs	r2, #58	@ 0x3a
 80147d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	3302      	adds	r3, #2
 80147dc:	222f      	movs	r2, #47	@ 0x2f
 80147de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	3303      	adds	r3, #3
 80147e4:	2200      	movs	r2, #0
 80147e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80147e8:	2300      	movs	r3, #0
 80147ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80147ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	371c      	adds	r7, #28
 80147f2:	46bd      	mov	sp, r7
 80147f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f8:	4770      	bx	lr
 80147fa:	bf00      	nop
 80147fc:	24000aec 	.word	0x24000aec

08014800 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801480a:	2200      	movs	r2, #0
 801480c:	6839      	ldr	r1, [r7, #0]
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f7ff ffaa 	bl	8014768 <FATFS_LinkDriverEx>
 8014814:	4603      	mov	r3, r0
}
 8014816:	4618      	mov	r0, r3
 8014818:	3708      	adds	r7, #8
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <__cvt>:
 801481e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014820:	ed2d 8b02 	vpush	{d8}
 8014824:	eeb0 8b40 	vmov.f64	d8, d0
 8014828:	b085      	sub	sp, #20
 801482a:	4617      	mov	r7, r2
 801482c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801482e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014830:	ee18 2a90 	vmov	r2, s17
 8014834:	f025 0520 	bic.w	r5, r5, #32
 8014838:	2a00      	cmp	r2, #0
 801483a:	bfb6      	itet	lt
 801483c:	222d      	movlt	r2, #45	@ 0x2d
 801483e:	2200      	movge	r2, #0
 8014840:	eeb1 8b40 	vneglt.f64	d8, d0
 8014844:	2d46      	cmp	r5, #70	@ 0x46
 8014846:	460c      	mov	r4, r1
 8014848:	701a      	strb	r2, [r3, #0]
 801484a:	d004      	beq.n	8014856 <__cvt+0x38>
 801484c:	2d45      	cmp	r5, #69	@ 0x45
 801484e:	d100      	bne.n	8014852 <__cvt+0x34>
 8014850:	3401      	adds	r4, #1
 8014852:	2102      	movs	r1, #2
 8014854:	e000      	b.n	8014858 <__cvt+0x3a>
 8014856:	2103      	movs	r1, #3
 8014858:	ab03      	add	r3, sp, #12
 801485a:	9301      	str	r3, [sp, #4]
 801485c:	ab02      	add	r3, sp, #8
 801485e:	9300      	str	r3, [sp, #0]
 8014860:	4622      	mov	r2, r4
 8014862:	4633      	mov	r3, r6
 8014864:	eeb0 0b48 	vmov.f64	d0, d8
 8014868:	f001 f946 	bl	8015af8 <_dtoa_r>
 801486c:	2d47      	cmp	r5, #71	@ 0x47
 801486e:	d114      	bne.n	801489a <__cvt+0x7c>
 8014870:	07fb      	lsls	r3, r7, #31
 8014872:	d50a      	bpl.n	801488a <__cvt+0x6c>
 8014874:	1902      	adds	r2, r0, r4
 8014876:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801487e:	bf08      	it	eq
 8014880:	9203      	streq	r2, [sp, #12]
 8014882:	2130      	movs	r1, #48	@ 0x30
 8014884:	9b03      	ldr	r3, [sp, #12]
 8014886:	4293      	cmp	r3, r2
 8014888:	d319      	bcc.n	80148be <__cvt+0xa0>
 801488a:	9b03      	ldr	r3, [sp, #12]
 801488c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801488e:	1a1b      	subs	r3, r3, r0
 8014890:	6013      	str	r3, [r2, #0]
 8014892:	b005      	add	sp, #20
 8014894:	ecbd 8b02 	vpop	{d8}
 8014898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801489a:	2d46      	cmp	r5, #70	@ 0x46
 801489c:	eb00 0204 	add.w	r2, r0, r4
 80148a0:	d1e9      	bne.n	8014876 <__cvt+0x58>
 80148a2:	7803      	ldrb	r3, [r0, #0]
 80148a4:	2b30      	cmp	r3, #48	@ 0x30
 80148a6:	d107      	bne.n	80148b8 <__cvt+0x9a>
 80148a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80148ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148b0:	bf1c      	itt	ne
 80148b2:	f1c4 0401 	rsbne	r4, r4, #1
 80148b6:	6034      	strne	r4, [r6, #0]
 80148b8:	6833      	ldr	r3, [r6, #0]
 80148ba:	441a      	add	r2, r3
 80148bc:	e7db      	b.n	8014876 <__cvt+0x58>
 80148be:	1c5c      	adds	r4, r3, #1
 80148c0:	9403      	str	r4, [sp, #12]
 80148c2:	7019      	strb	r1, [r3, #0]
 80148c4:	e7de      	b.n	8014884 <__cvt+0x66>

080148c6 <__exponent>:
 80148c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148c8:	2900      	cmp	r1, #0
 80148ca:	bfba      	itte	lt
 80148cc:	4249      	neglt	r1, r1
 80148ce:	232d      	movlt	r3, #45	@ 0x2d
 80148d0:	232b      	movge	r3, #43	@ 0x2b
 80148d2:	2909      	cmp	r1, #9
 80148d4:	7002      	strb	r2, [r0, #0]
 80148d6:	7043      	strb	r3, [r0, #1]
 80148d8:	dd29      	ble.n	801492e <__exponent+0x68>
 80148da:	f10d 0307 	add.w	r3, sp, #7
 80148de:	461d      	mov	r5, r3
 80148e0:	270a      	movs	r7, #10
 80148e2:	461a      	mov	r2, r3
 80148e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80148e8:	fb07 1416 	mls	r4, r7, r6, r1
 80148ec:	3430      	adds	r4, #48	@ 0x30
 80148ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80148f2:	460c      	mov	r4, r1
 80148f4:	2c63      	cmp	r4, #99	@ 0x63
 80148f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80148fa:	4631      	mov	r1, r6
 80148fc:	dcf1      	bgt.n	80148e2 <__exponent+0x1c>
 80148fe:	3130      	adds	r1, #48	@ 0x30
 8014900:	1e94      	subs	r4, r2, #2
 8014902:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014906:	1c41      	adds	r1, r0, #1
 8014908:	4623      	mov	r3, r4
 801490a:	42ab      	cmp	r3, r5
 801490c:	d30a      	bcc.n	8014924 <__exponent+0x5e>
 801490e:	f10d 0309 	add.w	r3, sp, #9
 8014912:	1a9b      	subs	r3, r3, r2
 8014914:	42ac      	cmp	r4, r5
 8014916:	bf88      	it	hi
 8014918:	2300      	movhi	r3, #0
 801491a:	3302      	adds	r3, #2
 801491c:	4403      	add	r3, r0
 801491e:	1a18      	subs	r0, r3, r0
 8014920:	b003      	add	sp, #12
 8014922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014924:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014928:	f801 6f01 	strb.w	r6, [r1, #1]!
 801492c:	e7ed      	b.n	801490a <__exponent+0x44>
 801492e:	2330      	movs	r3, #48	@ 0x30
 8014930:	3130      	adds	r1, #48	@ 0x30
 8014932:	7083      	strb	r3, [r0, #2]
 8014934:	70c1      	strb	r1, [r0, #3]
 8014936:	1d03      	adds	r3, r0, #4
 8014938:	e7f1      	b.n	801491e <__exponent+0x58>
 801493a:	0000      	movs	r0, r0
 801493c:	0000      	movs	r0, r0
	...

08014940 <_printf_float>:
 8014940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014944:	b08d      	sub	sp, #52	@ 0x34
 8014946:	460c      	mov	r4, r1
 8014948:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801494c:	4616      	mov	r6, r2
 801494e:	461f      	mov	r7, r3
 8014950:	4605      	mov	r5, r0
 8014952:	f000 ffbb 	bl	80158cc <_localeconv_r>
 8014956:	f8d0 b000 	ldr.w	fp, [r0]
 801495a:	4658      	mov	r0, fp
 801495c:	f7eb fd28 	bl	80003b0 <strlen>
 8014960:	2300      	movs	r3, #0
 8014962:	930a      	str	r3, [sp, #40]	@ 0x28
 8014964:	f8d8 3000 	ldr.w	r3, [r8]
 8014968:	f894 9018 	ldrb.w	r9, [r4, #24]
 801496c:	6822      	ldr	r2, [r4, #0]
 801496e:	9005      	str	r0, [sp, #20]
 8014970:	3307      	adds	r3, #7
 8014972:	f023 0307 	bic.w	r3, r3, #7
 8014976:	f103 0108 	add.w	r1, r3, #8
 801497a:	f8c8 1000 	str.w	r1, [r8]
 801497e:	ed93 0b00 	vldr	d0, [r3]
 8014982:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8014be0 <_printf_float+0x2a0>
 8014986:	eeb0 7bc0 	vabs.f64	d7, d0
 801498a:	eeb4 7b46 	vcmp.f64	d7, d6
 801498e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014992:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8014996:	dd24      	ble.n	80149e2 <_printf_float+0xa2>
 8014998:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801499c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a0:	d502      	bpl.n	80149a8 <_printf_float+0x68>
 80149a2:	232d      	movs	r3, #45	@ 0x2d
 80149a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80149a8:	498f      	ldr	r1, [pc, #572]	@ (8014be8 <_printf_float+0x2a8>)
 80149aa:	4b90      	ldr	r3, [pc, #576]	@ (8014bec <_printf_float+0x2ac>)
 80149ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80149b0:	bf8c      	ite	hi
 80149b2:	4688      	movhi	r8, r1
 80149b4:	4698      	movls	r8, r3
 80149b6:	f022 0204 	bic.w	r2, r2, #4
 80149ba:	2303      	movs	r3, #3
 80149bc:	6123      	str	r3, [r4, #16]
 80149be:	6022      	str	r2, [r4, #0]
 80149c0:	f04f 0a00 	mov.w	sl, #0
 80149c4:	9700      	str	r7, [sp, #0]
 80149c6:	4633      	mov	r3, r6
 80149c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80149ca:	4621      	mov	r1, r4
 80149cc:	4628      	mov	r0, r5
 80149ce:	f000 f9d1 	bl	8014d74 <_printf_common>
 80149d2:	3001      	adds	r0, #1
 80149d4:	f040 8089 	bne.w	8014aea <_printf_float+0x1aa>
 80149d8:	f04f 30ff 	mov.w	r0, #4294967295
 80149dc:	b00d      	add	sp, #52	@ 0x34
 80149de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80149e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ea:	d709      	bvc.n	8014a00 <_printf_float+0xc0>
 80149ec:	ee10 3a90 	vmov	r3, s1
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	bfbc      	itt	lt
 80149f4:	232d      	movlt	r3, #45	@ 0x2d
 80149f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80149fa:	497d      	ldr	r1, [pc, #500]	@ (8014bf0 <_printf_float+0x2b0>)
 80149fc:	4b7d      	ldr	r3, [pc, #500]	@ (8014bf4 <_printf_float+0x2b4>)
 80149fe:	e7d5      	b.n	80149ac <_printf_float+0x6c>
 8014a00:	6863      	ldr	r3, [r4, #4]
 8014a02:	1c59      	adds	r1, r3, #1
 8014a04:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8014a08:	d139      	bne.n	8014a7e <_printf_float+0x13e>
 8014a0a:	2306      	movs	r3, #6
 8014a0c:	6063      	str	r3, [r4, #4]
 8014a0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014a12:	2300      	movs	r3, #0
 8014a14:	6022      	str	r2, [r4, #0]
 8014a16:	9303      	str	r3, [sp, #12]
 8014a18:	ab0a      	add	r3, sp, #40	@ 0x28
 8014a1a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014a1e:	ab09      	add	r3, sp, #36	@ 0x24
 8014a20:	9300      	str	r3, [sp, #0]
 8014a22:	6861      	ldr	r1, [r4, #4]
 8014a24:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014a28:	4628      	mov	r0, r5
 8014a2a:	f7ff fef8 	bl	801481e <__cvt>
 8014a2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014a32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014a34:	4680      	mov	r8, r0
 8014a36:	d129      	bne.n	8014a8c <_printf_float+0x14c>
 8014a38:	1cc8      	adds	r0, r1, #3
 8014a3a:	db02      	blt.n	8014a42 <_printf_float+0x102>
 8014a3c:	6863      	ldr	r3, [r4, #4]
 8014a3e:	4299      	cmp	r1, r3
 8014a40:	dd41      	ble.n	8014ac6 <_printf_float+0x186>
 8014a42:	f1a9 0902 	sub.w	r9, r9, #2
 8014a46:	fa5f f989 	uxtb.w	r9, r9
 8014a4a:	3901      	subs	r1, #1
 8014a4c:	464a      	mov	r2, r9
 8014a4e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014a52:	9109      	str	r1, [sp, #36]	@ 0x24
 8014a54:	f7ff ff37 	bl	80148c6 <__exponent>
 8014a58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014a5a:	1813      	adds	r3, r2, r0
 8014a5c:	2a01      	cmp	r2, #1
 8014a5e:	4682      	mov	sl, r0
 8014a60:	6123      	str	r3, [r4, #16]
 8014a62:	dc02      	bgt.n	8014a6a <_printf_float+0x12a>
 8014a64:	6822      	ldr	r2, [r4, #0]
 8014a66:	07d2      	lsls	r2, r2, #31
 8014a68:	d501      	bpl.n	8014a6e <_printf_float+0x12e>
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	6123      	str	r3, [r4, #16]
 8014a6e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d0a6      	beq.n	80149c4 <_printf_float+0x84>
 8014a76:	232d      	movs	r3, #45	@ 0x2d
 8014a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a7c:	e7a2      	b.n	80149c4 <_printf_float+0x84>
 8014a7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014a82:	d1c4      	bne.n	8014a0e <_printf_float+0xce>
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d1c2      	bne.n	8014a0e <_printf_float+0xce>
 8014a88:	2301      	movs	r3, #1
 8014a8a:	e7bf      	b.n	8014a0c <_printf_float+0xcc>
 8014a8c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014a90:	d9db      	bls.n	8014a4a <_printf_float+0x10a>
 8014a92:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8014a96:	d118      	bne.n	8014aca <_printf_float+0x18a>
 8014a98:	2900      	cmp	r1, #0
 8014a9a:	6863      	ldr	r3, [r4, #4]
 8014a9c:	dd0b      	ble.n	8014ab6 <_printf_float+0x176>
 8014a9e:	6121      	str	r1, [r4, #16]
 8014aa0:	b913      	cbnz	r3, 8014aa8 <_printf_float+0x168>
 8014aa2:	6822      	ldr	r2, [r4, #0]
 8014aa4:	07d0      	lsls	r0, r2, #31
 8014aa6:	d502      	bpl.n	8014aae <_printf_float+0x16e>
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	440b      	add	r3, r1
 8014aac:	6123      	str	r3, [r4, #16]
 8014aae:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014ab0:	f04f 0a00 	mov.w	sl, #0
 8014ab4:	e7db      	b.n	8014a6e <_printf_float+0x12e>
 8014ab6:	b913      	cbnz	r3, 8014abe <_printf_float+0x17e>
 8014ab8:	6822      	ldr	r2, [r4, #0]
 8014aba:	07d2      	lsls	r2, r2, #31
 8014abc:	d501      	bpl.n	8014ac2 <_printf_float+0x182>
 8014abe:	3302      	adds	r3, #2
 8014ac0:	e7f4      	b.n	8014aac <_printf_float+0x16c>
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	e7f2      	b.n	8014aac <_printf_float+0x16c>
 8014ac6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8014aca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014acc:	4299      	cmp	r1, r3
 8014ace:	db05      	blt.n	8014adc <_printf_float+0x19c>
 8014ad0:	6823      	ldr	r3, [r4, #0]
 8014ad2:	6121      	str	r1, [r4, #16]
 8014ad4:	07d8      	lsls	r0, r3, #31
 8014ad6:	d5ea      	bpl.n	8014aae <_printf_float+0x16e>
 8014ad8:	1c4b      	adds	r3, r1, #1
 8014ada:	e7e7      	b.n	8014aac <_printf_float+0x16c>
 8014adc:	2900      	cmp	r1, #0
 8014ade:	bfd4      	ite	le
 8014ae0:	f1c1 0202 	rsble	r2, r1, #2
 8014ae4:	2201      	movgt	r2, #1
 8014ae6:	4413      	add	r3, r2
 8014ae8:	e7e0      	b.n	8014aac <_printf_float+0x16c>
 8014aea:	6823      	ldr	r3, [r4, #0]
 8014aec:	055a      	lsls	r2, r3, #21
 8014aee:	d407      	bmi.n	8014b00 <_printf_float+0x1c0>
 8014af0:	6923      	ldr	r3, [r4, #16]
 8014af2:	4642      	mov	r2, r8
 8014af4:	4631      	mov	r1, r6
 8014af6:	4628      	mov	r0, r5
 8014af8:	47b8      	blx	r7
 8014afa:	3001      	adds	r0, #1
 8014afc:	d12a      	bne.n	8014b54 <_printf_float+0x214>
 8014afe:	e76b      	b.n	80149d8 <_printf_float+0x98>
 8014b00:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014b04:	f240 80e0 	bls.w	8014cc8 <_printf_float+0x388>
 8014b08:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014b0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b14:	d133      	bne.n	8014b7e <_printf_float+0x23e>
 8014b16:	4a38      	ldr	r2, [pc, #224]	@ (8014bf8 <_printf_float+0x2b8>)
 8014b18:	2301      	movs	r3, #1
 8014b1a:	4631      	mov	r1, r6
 8014b1c:	4628      	mov	r0, r5
 8014b1e:	47b8      	blx	r7
 8014b20:	3001      	adds	r0, #1
 8014b22:	f43f af59 	beq.w	80149d8 <_printf_float+0x98>
 8014b26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014b2a:	4543      	cmp	r3, r8
 8014b2c:	db02      	blt.n	8014b34 <_printf_float+0x1f4>
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	07d8      	lsls	r0, r3, #31
 8014b32:	d50f      	bpl.n	8014b54 <_printf_float+0x214>
 8014b34:	9b05      	ldr	r3, [sp, #20]
 8014b36:	465a      	mov	r2, fp
 8014b38:	4631      	mov	r1, r6
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	47b8      	blx	r7
 8014b3e:	3001      	adds	r0, #1
 8014b40:	f43f af4a 	beq.w	80149d8 <_printf_float+0x98>
 8014b44:	f04f 0900 	mov.w	r9, #0
 8014b48:	f108 38ff 	add.w	r8, r8, #4294967295
 8014b4c:	f104 0a1a 	add.w	sl, r4, #26
 8014b50:	45c8      	cmp	r8, r9
 8014b52:	dc09      	bgt.n	8014b68 <_printf_float+0x228>
 8014b54:	6823      	ldr	r3, [r4, #0]
 8014b56:	079b      	lsls	r3, r3, #30
 8014b58:	f100 8107 	bmi.w	8014d6a <_printf_float+0x42a>
 8014b5c:	68e0      	ldr	r0, [r4, #12]
 8014b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014b60:	4298      	cmp	r0, r3
 8014b62:	bfb8      	it	lt
 8014b64:	4618      	movlt	r0, r3
 8014b66:	e739      	b.n	80149dc <_printf_float+0x9c>
 8014b68:	2301      	movs	r3, #1
 8014b6a:	4652      	mov	r2, sl
 8014b6c:	4631      	mov	r1, r6
 8014b6e:	4628      	mov	r0, r5
 8014b70:	47b8      	blx	r7
 8014b72:	3001      	adds	r0, #1
 8014b74:	f43f af30 	beq.w	80149d8 <_printf_float+0x98>
 8014b78:	f109 0901 	add.w	r9, r9, #1
 8014b7c:	e7e8      	b.n	8014b50 <_printf_float+0x210>
 8014b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	dc3b      	bgt.n	8014bfc <_printf_float+0x2bc>
 8014b84:	4a1c      	ldr	r2, [pc, #112]	@ (8014bf8 <_printf_float+0x2b8>)
 8014b86:	2301      	movs	r3, #1
 8014b88:	4631      	mov	r1, r6
 8014b8a:	4628      	mov	r0, r5
 8014b8c:	47b8      	blx	r7
 8014b8e:	3001      	adds	r0, #1
 8014b90:	f43f af22 	beq.w	80149d8 <_printf_float+0x98>
 8014b94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014b98:	ea59 0303 	orrs.w	r3, r9, r3
 8014b9c:	d102      	bne.n	8014ba4 <_printf_float+0x264>
 8014b9e:	6823      	ldr	r3, [r4, #0]
 8014ba0:	07d9      	lsls	r1, r3, #31
 8014ba2:	d5d7      	bpl.n	8014b54 <_printf_float+0x214>
 8014ba4:	9b05      	ldr	r3, [sp, #20]
 8014ba6:	465a      	mov	r2, fp
 8014ba8:	4631      	mov	r1, r6
 8014baa:	4628      	mov	r0, r5
 8014bac:	47b8      	blx	r7
 8014bae:	3001      	adds	r0, #1
 8014bb0:	f43f af12 	beq.w	80149d8 <_printf_float+0x98>
 8014bb4:	f04f 0a00 	mov.w	sl, #0
 8014bb8:	f104 0b1a 	add.w	fp, r4, #26
 8014bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bbe:	425b      	negs	r3, r3
 8014bc0:	4553      	cmp	r3, sl
 8014bc2:	dc01      	bgt.n	8014bc8 <_printf_float+0x288>
 8014bc4:	464b      	mov	r3, r9
 8014bc6:	e794      	b.n	8014af2 <_printf_float+0x1b2>
 8014bc8:	2301      	movs	r3, #1
 8014bca:	465a      	mov	r2, fp
 8014bcc:	4631      	mov	r1, r6
 8014bce:	4628      	mov	r0, r5
 8014bd0:	47b8      	blx	r7
 8014bd2:	3001      	adds	r0, #1
 8014bd4:	f43f af00 	beq.w	80149d8 <_printf_float+0x98>
 8014bd8:	f10a 0a01 	add.w	sl, sl, #1
 8014bdc:	e7ee      	b.n	8014bbc <_printf_float+0x27c>
 8014bde:	bf00      	nop
 8014be0:	ffffffff 	.word	0xffffffff
 8014be4:	7fefffff 	.word	0x7fefffff
 8014be8:	0801961c 	.word	0x0801961c
 8014bec:	08019618 	.word	0x08019618
 8014bf0:	08019624 	.word	0x08019624
 8014bf4:	08019620 	.word	0x08019620
 8014bf8:	08019628 	.word	0x08019628
 8014bfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014bfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014c02:	4553      	cmp	r3, sl
 8014c04:	bfa8      	it	ge
 8014c06:	4653      	movge	r3, sl
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	4699      	mov	r9, r3
 8014c0c:	dc37      	bgt.n	8014c7e <_printf_float+0x33e>
 8014c0e:	2300      	movs	r3, #0
 8014c10:	9307      	str	r3, [sp, #28]
 8014c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014c16:	f104 021a 	add.w	r2, r4, #26
 8014c1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014c1c:	9907      	ldr	r1, [sp, #28]
 8014c1e:	9306      	str	r3, [sp, #24]
 8014c20:	eba3 0309 	sub.w	r3, r3, r9
 8014c24:	428b      	cmp	r3, r1
 8014c26:	dc31      	bgt.n	8014c8c <_printf_float+0x34c>
 8014c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c2a:	459a      	cmp	sl, r3
 8014c2c:	dc3b      	bgt.n	8014ca6 <_printf_float+0x366>
 8014c2e:	6823      	ldr	r3, [r4, #0]
 8014c30:	07da      	lsls	r2, r3, #31
 8014c32:	d438      	bmi.n	8014ca6 <_printf_float+0x366>
 8014c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c36:	ebaa 0903 	sub.w	r9, sl, r3
 8014c3a:	9b06      	ldr	r3, [sp, #24]
 8014c3c:	ebaa 0303 	sub.w	r3, sl, r3
 8014c40:	4599      	cmp	r9, r3
 8014c42:	bfa8      	it	ge
 8014c44:	4699      	movge	r9, r3
 8014c46:	f1b9 0f00 	cmp.w	r9, #0
 8014c4a:	dc34      	bgt.n	8014cb6 <_printf_float+0x376>
 8014c4c:	f04f 0800 	mov.w	r8, #0
 8014c50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014c54:	f104 0b1a 	add.w	fp, r4, #26
 8014c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c5a:	ebaa 0303 	sub.w	r3, sl, r3
 8014c5e:	eba3 0309 	sub.w	r3, r3, r9
 8014c62:	4543      	cmp	r3, r8
 8014c64:	f77f af76 	ble.w	8014b54 <_printf_float+0x214>
 8014c68:	2301      	movs	r3, #1
 8014c6a:	465a      	mov	r2, fp
 8014c6c:	4631      	mov	r1, r6
 8014c6e:	4628      	mov	r0, r5
 8014c70:	47b8      	blx	r7
 8014c72:	3001      	adds	r0, #1
 8014c74:	f43f aeb0 	beq.w	80149d8 <_printf_float+0x98>
 8014c78:	f108 0801 	add.w	r8, r8, #1
 8014c7c:	e7ec      	b.n	8014c58 <_printf_float+0x318>
 8014c7e:	4642      	mov	r2, r8
 8014c80:	4631      	mov	r1, r6
 8014c82:	4628      	mov	r0, r5
 8014c84:	47b8      	blx	r7
 8014c86:	3001      	adds	r0, #1
 8014c88:	d1c1      	bne.n	8014c0e <_printf_float+0x2ce>
 8014c8a:	e6a5      	b.n	80149d8 <_printf_float+0x98>
 8014c8c:	2301      	movs	r3, #1
 8014c8e:	4631      	mov	r1, r6
 8014c90:	4628      	mov	r0, r5
 8014c92:	9206      	str	r2, [sp, #24]
 8014c94:	47b8      	blx	r7
 8014c96:	3001      	adds	r0, #1
 8014c98:	f43f ae9e 	beq.w	80149d8 <_printf_float+0x98>
 8014c9c:	9b07      	ldr	r3, [sp, #28]
 8014c9e:	9a06      	ldr	r2, [sp, #24]
 8014ca0:	3301      	adds	r3, #1
 8014ca2:	9307      	str	r3, [sp, #28]
 8014ca4:	e7b9      	b.n	8014c1a <_printf_float+0x2da>
 8014ca6:	9b05      	ldr	r3, [sp, #20]
 8014ca8:	465a      	mov	r2, fp
 8014caa:	4631      	mov	r1, r6
 8014cac:	4628      	mov	r0, r5
 8014cae:	47b8      	blx	r7
 8014cb0:	3001      	adds	r0, #1
 8014cb2:	d1bf      	bne.n	8014c34 <_printf_float+0x2f4>
 8014cb4:	e690      	b.n	80149d8 <_printf_float+0x98>
 8014cb6:	9a06      	ldr	r2, [sp, #24]
 8014cb8:	464b      	mov	r3, r9
 8014cba:	4442      	add	r2, r8
 8014cbc:	4631      	mov	r1, r6
 8014cbe:	4628      	mov	r0, r5
 8014cc0:	47b8      	blx	r7
 8014cc2:	3001      	adds	r0, #1
 8014cc4:	d1c2      	bne.n	8014c4c <_printf_float+0x30c>
 8014cc6:	e687      	b.n	80149d8 <_printf_float+0x98>
 8014cc8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8014ccc:	f1b9 0f01 	cmp.w	r9, #1
 8014cd0:	dc01      	bgt.n	8014cd6 <_printf_float+0x396>
 8014cd2:	07db      	lsls	r3, r3, #31
 8014cd4:	d536      	bpl.n	8014d44 <_printf_float+0x404>
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	4642      	mov	r2, r8
 8014cda:	4631      	mov	r1, r6
 8014cdc:	4628      	mov	r0, r5
 8014cde:	47b8      	blx	r7
 8014ce0:	3001      	adds	r0, #1
 8014ce2:	f43f ae79 	beq.w	80149d8 <_printf_float+0x98>
 8014ce6:	9b05      	ldr	r3, [sp, #20]
 8014ce8:	465a      	mov	r2, fp
 8014cea:	4631      	mov	r1, r6
 8014cec:	4628      	mov	r0, r5
 8014cee:	47b8      	blx	r7
 8014cf0:	3001      	adds	r0, #1
 8014cf2:	f43f ae71 	beq.w	80149d8 <_printf_float+0x98>
 8014cf6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014cfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d02:	f109 39ff 	add.w	r9, r9, #4294967295
 8014d06:	d018      	beq.n	8014d3a <_printf_float+0x3fa>
 8014d08:	464b      	mov	r3, r9
 8014d0a:	f108 0201 	add.w	r2, r8, #1
 8014d0e:	4631      	mov	r1, r6
 8014d10:	4628      	mov	r0, r5
 8014d12:	47b8      	blx	r7
 8014d14:	3001      	adds	r0, #1
 8014d16:	d10c      	bne.n	8014d32 <_printf_float+0x3f2>
 8014d18:	e65e      	b.n	80149d8 <_printf_float+0x98>
 8014d1a:	2301      	movs	r3, #1
 8014d1c:	465a      	mov	r2, fp
 8014d1e:	4631      	mov	r1, r6
 8014d20:	4628      	mov	r0, r5
 8014d22:	47b8      	blx	r7
 8014d24:	3001      	adds	r0, #1
 8014d26:	f43f ae57 	beq.w	80149d8 <_printf_float+0x98>
 8014d2a:	f108 0801 	add.w	r8, r8, #1
 8014d2e:	45c8      	cmp	r8, r9
 8014d30:	dbf3      	blt.n	8014d1a <_printf_float+0x3da>
 8014d32:	4653      	mov	r3, sl
 8014d34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014d38:	e6dc      	b.n	8014af4 <_printf_float+0x1b4>
 8014d3a:	f04f 0800 	mov.w	r8, #0
 8014d3e:	f104 0b1a 	add.w	fp, r4, #26
 8014d42:	e7f4      	b.n	8014d2e <_printf_float+0x3ee>
 8014d44:	2301      	movs	r3, #1
 8014d46:	4642      	mov	r2, r8
 8014d48:	e7e1      	b.n	8014d0e <_printf_float+0x3ce>
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	464a      	mov	r2, r9
 8014d4e:	4631      	mov	r1, r6
 8014d50:	4628      	mov	r0, r5
 8014d52:	47b8      	blx	r7
 8014d54:	3001      	adds	r0, #1
 8014d56:	f43f ae3f 	beq.w	80149d8 <_printf_float+0x98>
 8014d5a:	f108 0801 	add.w	r8, r8, #1
 8014d5e:	68e3      	ldr	r3, [r4, #12]
 8014d60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014d62:	1a5b      	subs	r3, r3, r1
 8014d64:	4543      	cmp	r3, r8
 8014d66:	dcf0      	bgt.n	8014d4a <_printf_float+0x40a>
 8014d68:	e6f8      	b.n	8014b5c <_printf_float+0x21c>
 8014d6a:	f04f 0800 	mov.w	r8, #0
 8014d6e:	f104 0919 	add.w	r9, r4, #25
 8014d72:	e7f4      	b.n	8014d5e <_printf_float+0x41e>

08014d74 <_printf_common>:
 8014d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d78:	4616      	mov	r6, r2
 8014d7a:	4698      	mov	r8, r3
 8014d7c:	688a      	ldr	r2, [r1, #8]
 8014d7e:	690b      	ldr	r3, [r1, #16]
 8014d80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014d84:	4293      	cmp	r3, r2
 8014d86:	bfb8      	it	lt
 8014d88:	4613      	movlt	r3, r2
 8014d8a:	6033      	str	r3, [r6, #0]
 8014d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014d90:	4607      	mov	r7, r0
 8014d92:	460c      	mov	r4, r1
 8014d94:	b10a      	cbz	r2, 8014d9a <_printf_common+0x26>
 8014d96:	3301      	adds	r3, #1
 8014d98:	6033      	str	r3, [r6, #0]
 8014d9a:	6823      	ldr	r3, [r4, #0]
 8014d9c:	0699      	lsls	r1, r3, #26
 8014d9e:	bf42      	ittt	mi
 8014da0:	6833      	ldrmi	r3, [r6, #0]
 8014da2:	3302      	addmi	r3, #2
 8014da4:	6033      	strmi	r3, [r6, #0]
 8014da6:	6825      	ldr	r5, [r4, #0]
 8014da8:	f015 0506 	ands.w	r5, r5, #6
 8014dac:	d106      	bne.n	8014dbc <_printf_common+0x48>
 8014dae:	f104 0a19 	add.w	sl, r4, #25
 8014db2:	68e3      	ldr	r3, [r4, #12]
 8014db4:	6832      	ldr	r2, [r6, #0]
 8014db6:	1a9b      	subs	r3, r3, r2
 8014db8:	42ab      	cmp	r3, r5
 8014dba:	dc26      	bgt.n	8014e0a <_printf_common+0x96>
 8014dbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014dc0:	6822      	ldr	r2, [r4, #0]
 8014dc2:	3b00      	subs	r3, #0
 8014dc4:	bf18      	it	ne
 8014dc6:	2301      	movne	r3, #1
 8014dc8:	0692      	lsls	r2, r2, #26
 8014dca:	d42b      	bmi.n	8014e24 <_printf_common+0xb0>
 8014dcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014dd0:	4641      	mov	r1, r8
 8014dd2:	4638      	mov	r0, r7
 8014dd4:	47c8      	blx	r9
 8014dd6:	3001      	adds	r0, #1
 8014dd8:	d01e      	beq.n	8014e18 <_printf_common+0xa4>
 8014dda:	6823      	ldr	r3, [r4, #0]
 8014ddc:	6922      	ldr	r2, [r4, #16]
 8014dde:	f003 0306 	and.w	r3, r3, #6
 8014de2:	2b04      	cmp	r3, #4
 8014de4:	bf02      	ittt	eq
 8014de6:	68e5      	ldreq	r5, [r4, #12]
 8014de8:	6833      	ldreq	r3, [r6, #0]
 8014dea:	1aed      	subeq	r5, r5, r3
 8014dec:	68a3      	ldr	r3, [r4, #8]
 8014dee:	bf0c      	ite	eq
 8014df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014df4:	2500      	movne	r5, #0
 8014df6:	4293      	cmp	r3, r2
 8014df8:	bfc4      	itt	gt
 8014dfa:	1a9b      	subgt	r3, r3, r2
 8014dfc:	18ed      	addgt	r5, r5, r3
 8014dfe:	2600      	movs	r6, #0
 8014e00:	341a      	adds	r4, #26
 8014e02:	42b5      	cmp	r5, r6
 8014e04:	d11a      	bne.n	8014e3c <_printf_common+0xc8>
 8014e06:	2000      	movs	r0, #0
 8014e08:	e008      	b.n	8014e1c <_printf_common+0xa8>
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	4652      	mov	r2, sl
 8014e0e:	4641      	mov	r1, r8
 8014e10:	4638      	mov	r0, r7
 8014e12:	47c8      	blx	r9
 8014e14:	3001      	adds	r0, #1
 8014e16:	d103      	bne.n	8014e20 <_printf_common+0xac>
 8014e18:	f04f 30ff 	mov.w	r0, #4294967295
 8014e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e20:	3501      	adds	r5, #1
 8014e22:	e7c6      	b.n	8014db2 <_printf_common+0x3e>
 8014e24:	18e1      	adds	r1, r4, r3
 8014e26:	1c5a      	adds	r2, r3, #1
 8014e28:	2030      	movs	r0, #48	@ 0x30
 8014e2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014e2e:	4422      	add	r2, r4
 8014e30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014e34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014e38:	3302      	adds	r3, #2
 8014e3a:	e7c7      	b.n	8014dcc <_printf_common+0x58>
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	4622      	mov	r2, r4
 8014e40:	4641      	mov	r1, r8
 8014e42:	4638      	mov	r0, r7
 8014e44:	47c8      	blx	r9
 8014e46:	3001      	adds	r0, #1
 8014e48:	d0e6      	beq.n	8014e18 <_printf_common+0xa4>
 8014e4a:	3601      	adds	r6, #1
 8014e4c:	e7d9      	b.n	8014e02 <_printf_common+0x8e>
	...

08014e50 <_printf_i>:
 8014e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014e54:	7e0f      	ldrb	r7, [r1, #24]
 8014e56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014e58:	2f78      	cmp	r7, #120	@ 0x78
 8014e5a:	4691      	mov	r9, r2
 8014e5c:	4680      	mov	r8, r0
 8014e5e:	460c      	mov	r4, r1
 8014e60:	469a      	mov	sl, r3
 8014e62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014e66:	d807      	bhi.n	8014e78 <_printf_i+0x28>
 8014e68:	2f62      	cmp	r7, #98	@ 0x62
 8014e6a:	d80a      	bhi.n	8014e82 <_printf_i+0x32>
 8014e6c:	2f00      	cmp	r7, #0
 8014e6e:	f000 80d1 	beq.w	8015014 <_printf_i+0x1c4>
 8014e72:	2f58      	cmp	r7, #88	@ 0x58
 8014e74:	f000 80b8 	beq.w	8014fe8 <_printf_i+0x198>
 8014e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014e7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014e80:	e03a      	b.n	8014ef8 <_printf_i+0xa8>
 8014e82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014e86:	2b15      	cmp	r3, #21
 8014e88:	d8f6      	bhi.n	8014e78 <_printf_i+0x28>
 8014e8a:	a101      	add	r1, pc, #4	@ (adr r1, 8014e90 <_printf_i+0x40>)
 8014e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014e90:	08014ee9 	.word	0x08014ee9
 8014e94:	08014efd 	.word	0x08014efd
 8014e98:	08014e79 	.word	0x08014e79
 8014e9c:	08014e79 	.word	0x08014e79
 8014ea0:	08014e79 	.word	0x08014e79
 8014ea4:	08014e79 	.word	0x08014e79
 8014ea8:	08014efd 	.word	0x08014efd
 8014eac:	08014e79 	.word	0x08014e79
 8014eb0:	08014e79 	.word	0x08014e79
 8014eb4:	08014e79 	.word	0x08014e79
 8014eb8:	08014e79 	.word	0x08014e79
 8014ebc:	08014ffb 	.word	0x08014ffb
 8014ec0:	08014f27 	.word	0x08014f27
 8014ec4:	08014fb5 	.word	0x08014fb5
 8014ec8:	08014e79 	.word	0x08014e79
 8014ecc:	08014e79 	.word	0x08014e79
 8014ed0:	0801501d 	.word	0x0801501d
 8014ed4:	08014e79 	.word	0x08014e79
 8014ed8:	08014f27 	.word	0x08014f27
 8014edc:	08014e79 	.word	0x08014e79
 8014ee0:	08014e79 	.word	0x08014e79
 8014ee4:	08014fbd 	.word	0x08014fbd
 8014ee8:	6833      	ldr	r3, [r6, #0]
 8014eea:	1d1a      	adds	r2, r3, #4
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	6032      	str	r2, [r6, #0]
 8014ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014ef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014ef8:	2301      	movs	r3, #1
 8014efa:	e09c      	b.n	8015036 <_printf_i+0x1e6>
 8014efc:	6833      	ldr	r3, [r6, #0]
 8014efe:	6820      	ldr	r0, [r4, #0]
 8014f00:	1d19      	adds	r1, r3, #4
 8014f02:	6031      	str	r1, [r6, #0]
 8014f04:	0606      	lsls	r6, r0, #24
 8014f06:	d501      	bpl.n	8014f0c <_printf_i+0xbc>
 8014f08:	681d      	ldr	r5, [r3, #0]
 8014f0a:	e003      	b.n	8014f14 <_printf_i+0xc4>
 8014f0c:	0645      	lsls	r5, r0, #25
 8014f0e:	d5fb      	bpl.n	8014f08 <_printf_i+0xb8>
 8014f10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014f14:	2d00      	cmp	r5, #0
 8014f16:	da03      	bge.n	8014f20 <_printf_i+0xd0>
 8014f18:	232d      	movs	r3, #45	@ 0x2d
 8014f1a:	426d      	negs	r5, r5
 8014f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014f20:	4858      	ldr	r0, [pc, #352]	@ (8015084 <_printf_i+0x234>)
 8014f22:	230a      	movs	r3, #10
 8014f24:	e011      	b.n	8014f4a <_printf_i+0xfa>
 8014f26:	6821      	ldr	r1, [r4, #0]
 8014f28:	6833      	ldr	r3, [r6, #0]
 8014f2a:	0608      	lsls	r0, r1, #24
 8014f2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014f30:	d402      	bmi.n	8014f38 <_printf_i+0xe8>
 8014f32:	0649      	lsls	r1, r1, #25
 8014f34:	bf48      	it	mi
 8014f36:	b2ad      	uxthmi	r5, r5
 8014f38:	2f6f      	cmp	r7, #111	@ 0x6f
 8014f3a:	4852      	ldr	r0, [pc, #328]	@ (8015084 <_printf_i+0x234>)
 8014f3c:	6033      	str	r3, [r6, #0]
 8014f3e:	bf14      	ite	ne
 8014f40:	230a      	movne	r3, #10
 8014f42:	2308      	moveq	r3, #8
 8014f44:	2100      	movs	r1, #0
 8014f46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014f4a:	6866      	ldr	r6, [r4, #4]
 8014f4c:	60a6      	str	r6, [r4, #8]
 8014f4e:	2e00      	cmp	r6, #0
 8014f50:	db05      	blt.n	8014f5e <_printf_i+0x10e>
 8014f52:	6821      	ldr	r1, [r4, #0]
 8014f54:	432e      	orrs	r6, r5
 8014f56:	f021 0104 	bic.w	r1, r1, #4
 8014f5a:	6021      	str	r1, [r4, #0]
 8014f5c:	d04b      	beq.n	8014ff6 <_printf_i+0x1a6>
 8014f5e:	4616      	mov	r6, r2
 8014f60:	fbb5 f1f3 	udiv	r1, r5, r3
 8014f64:	fb03 5711 	mls	r7, r3, r1, r5
 8014f68:	5dc7      	ldrb	r7, [r0, r7]
 8014f6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014f6e:	462f      	mov	r7, r5
 8014f70:	42bb      	cmp	r3, r7
 8014f72:	460d      	mov	r5, r1
 8014f74:	d9f4      	bls.n	8014f60 <_printf_i+0x110>
 8014f76:	2b08      	cmp	r3, #8
 8014f78:	d10b      	bne.n	8014f92 <_printf_i+0x142>
 8014f7a:	6823      	ldr	r3, [r4, #0]
 8014f7c:	07df      	lsls	r7, r3, #31
 8014f7e:	d508      	bpl.n	8014f92 <_printf_i+0x142>
 8014f80:	6923      	ldr	r3, [r4, #16]
 8014f82:	6861      	ldr	r1, [r4, #4]
 8014f84:	4299      	cmp	r1, r3
 8014f86:	bfde      	ittt	le
 8014f88:	2330      	movle	r3, #48	@ 0x30
 8014f8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014f8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014f92:	1b92      	subs	r2, r2, r6
 8014f94:	6122      	str	r2, [r4, #16]
 8014f96:	f8cd a000 	str.w	sl, [sp]
 8014f9a:	464b      	mov	r3, r9
 8014f9c:	aa03      	add	r2, sp, #12
 8014f9e:	4621      	mov	r1, r4
 8014fa0:	4640      	mov	r0, r8
 8014fa2:	f7ff fee7 	bl	8014d74 <_printf_common>
 8014fa6:	3001      	adds	r0, #1
 8014fa8:	d14a      	bne.n	8015040 <_printf_i+0x1f0>
 8014faa:	f04f 30ff 	mov.w	r0, #4294967295
 8014fae:	b004      	add	sp, #16
 8014fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fb4:	6823      	ldr	r3, [r4, #0]
 8014fb6:	f043 0320 	orr.w	r3, r3, #32
 8014fba:	6023      	str	r3, [r4, #0]
 8014fbc:	4832      	ldr	r0, [pc, #200]	@ (8015088 <_printf_i+0x238>)
 8014fbe:	2778      	movs	r7, #120	@ 0x78
 8014fc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014fc4:	6823      	ldr	r3, [r4, #0]
 8014fc6:	6831      	ldr	r1, [r6, #0]
 8014fc8:	061f      	lsls	r7, r3, #24
 8014fca:	f851 5b04 	ldr.w	r5, [r1], #4
 8014fce:	d402      	bmi.n	8014fd6 <_printf_i+0x186>
 8014fd0:	065f      	lsls	r7, r3, #25
 8014fd2:	bf48      	it	mi
 8014fd4:	b2ad      	uxthmi	r5, r5
 8014fd6:	6031      	str	r1, [r6, #0]
 8014fd8:	07d9      	lsls	r1, r3, #31
 8014fda:	bf44      	itt	mi
 8014fdc:	f043 0320 	orrmi.w	r3, r3, #32
 8014fe0:	6023      	strmi	r3, [r4, #0]
 8014fe2:	b11d      	cbz	r5, 8014fec <_printf_i+0x19c>
 8014fe4:	2310      	movs	r3, #16
 8014fe6:	e7ad      	b.n	8014f44 <_printf_i+0xf4>
 8014fe8:	4826      	ldr	r0, [pc, #152]	@ (8015084 <_printf_i+0x234>)
 8014fea:	e7e9      	b.n	8014fc0 <_printf_i+0x170>
 8014fec:	6823      	ldr	r3, [r4, #0]
 8014fee:	f023 0320 	bic.w	r3, r3, #32
 8014ff2:	6023      	str	r3, [r4, #0]
 8014ff4:	e7f6      	b.n	8014fe4 <_printf_i+0x194>
 8014ff6:	4616      	mov	r6, r2
 8014ff8:	e7bd      	b.n	8014f76 <_printf_i+0x126>
 8014ffa:	6833      	ldr	r3, [r6, #0]
 8014ffc:	6825      	ldr	r5, [r4, #0]
 8014ffe:	6961      	ldr	r1, [r4, #20]
 8015000:	1d18      	adds	r0, r3, #4
 8015002:	6030      	str	r0, [r6, #0]
 8015004:	062e      	lsls	r6, r5, #24
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	d501      	bpl.n	801500e <_printf_i+0x1be>
 801500a:	6019      	str	r1, [r3, #0]
 801500c:	e002      	b.n	8015014 <_printf_i+0x1c4>
 801500e:	0668      	lsls	r0, r5, #25
 8015010:	d5fb      	bpl.n	801500a <_printf_i+0x1ba>
 8015012:	8019      	strh	r1, [r3, #0]
 8015014:	2300      	movs	r3, #0
 8015016:	6123      	str	r3, [r4, #16]
 8015018:	4616      	mov	r6, r2
 801501a:	e7bc      	b.n	8014f96 <_printf_i+0x146>
 801501c:	6833      	ldr	r3, [r6, #0]
 801501e:	1d1a      	adds	r2, r3, #4
 8015020:	6032      	str	r2, [r6, #0]
 8015022:	681e      	ldr	r6, [r3, #0]
 8015024:	6862      	ldr	r2, [r4, #4]
 8015026:	2100      	movs	r1, #0
 8015028:	4630      	mov	r0, r6
 801502a:	f7eb f971 	bl	8000310 <memchr>
 801502e:	b108      	cbz	r0, 8015034 <_printf_i+0x1e4>
 8015030:	1b80      	subs	r0, r0, r6
 8015032:	6060      	str	r0, [r4, #4]
 8015034:	6863      	ldr	r3, [r4, #4]
 8015036:	6123      	str	r3, [r4, #16]
 8015038:	2300      	movs	r3, #0
 801503a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801503e:	e7aa      	b.n	8014f96 <_printf_i+0x146>
 8015040:	6923      	ldr	r3, [r4, #16]
 8015042:	4632      	mov	r2, r6
 8015044:	4649      	mov	r1, r9
 8015046:	4640      	mov	r0, r8
 8015048:	47d0      	blx	sl
 801504a:	3001      	adds	r0, #1
 801504c:	d0ad      	beq.n	8014faa <_printf_i+0x15a>
 801504e:	6823      	ldr	r3, [r4, #0]
 8015050:	079b      	lsls	r3, r3, #30
 8015052:	d413      	bmi.n	801507c <_printf_i+0x22c>
 8015054:	68e0      	ldr	r0, [r4, #12]
 8015056:	9b03      	ldr	r3, [sp, #12]
 8015058:	4298      	cmp	r0, r3
 801505a:	bfb8      	it	lt
 801505c:	4618      	movlt	r0, r3
 801505e:	e7a6      	b.n	8014fae <_printf_i+0x15e>
 8015060:	2301      	movs	r3, #1
 8015062:	4632      	mov	r2, r6
 8015064:	4649      	mov	r1, r9
 8015066:	4640      	mov	r0, r8
 8015068:	47d0      	blx	sl
 801506a:	3001      	adds	r0, #1
 801506c:	d09d      	beq.n	8014faa <_printf_i+0x15a>
 801506e:	3501      	adds	r5, #1
 8015070:	68e3      	ldr	r3, [r4, #12]
 8015072:	9903      	ldr	r1, [sp, #12]
 8015074:	1a5b      	subs	r3, r3, r1
 8015076:	42ab      	cmp	r3, r5
 8015078:	dcf2      	bgt.n	8015060 <_printf_i+0x210>
 801507a:	e7eb      	b.n	8015054 <_printf_i+0x204>
 801507c:	2500      	movs	r5, #0
 801507e:	f104 0619 	add.w	r6, r4, #25
 8015082:	e7f5      	b.n	8015070 <_printf_i+0x220>
 8015084:	0801962a 	.word	0x0801962a
 8015088:	0801963b 	.word	0x0801963b

0801508c <_scanf_float>:
 801508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015090:	b087      	sub	sp, #28
 8015092:	4691      	mov	r9, r2
 8015094:	9303      	str	r3, [sp, #12]
 8015096:	688b      	ldr	r3, [r1, #8]
 8015098:	1e5a      	subs	r2, r3, #1
 801509a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801509e:	bf81      	itttt	hi
 80150a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80150a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80150a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80150ac:	608b      	strhi	r3, [r1, #8]
 80150ae:	680b      	ldr	r3, [r1, #0]
 80150b0:	460a      	mov	r2, r1
 80150b2:	f04f 0500 	mov.w	r5, #0
 80150b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80150ba:	f842 3b1c 	str.w	r3, [r2], #28
 80150be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80150c2:	4680      	mov	r8, r0
 80150c4:	460c      	mov	r4, r1
 80150c6:	bf98      	it	ls
 80150c8:	f04f 0b00 	movls.w	fp, #0
 80150cc:	9201      	str	r2, [sp, #4]
 80150ce:	4616      	mov	r6, r2
 80150d0:	46aa      	mov	sl, r5
 80150d2:	462f      	mov	r7, r5
 80150d4:	9502      	str	r5, [sp, #8]
 80150d6:	68a2      	ldr	r2, [r4, #8]
 80150d8:	b15a      	cbz	r2, 80150f2 <_scanf_float+0x66>
 80150da:	f8d9 3000 	ldr.w	r3, [r9]
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80150e2:	d863      	bhi.n	80151ac <_scanf_float+0x120>
 80150e4:	2b40      	cmp	r3, #64	@ 0x40
 80150e6:	d83b      	bhi.n	8015160 <_scanf_float+0xd4>
 80150e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80150ec:	b2c8      	uxtb	r0, r1
 80150ee:	280e      	cmp	r0, #14
 80150f0:	d939      	bls.n	8015166 <_scanf_float+0xda>
 80150f2:	b11f      	cbz	r7, 80150fc <_scanf_float+0x70>
 80150f4:	6823      	ldr	r3, [r4, #0]
 80150f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80150fa:	6023      	str	r3, [r4, #0]
 80150fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015100:	f1ba 0f01 	cmp.w	sl, #1
 8015104:	f200 8114 	bhi.w	8015330 <_scanf_float+0x2a4>
 8015108:	9b01      	ldr	r3, [sp, #4]
 801510a:	429e      	cmp	r6, r3
 801510c:	f200 8105 	bhi.w	801531a <_scanf_float+0x28e>
 8015110:	2001      	movs	r0, #1
 8015112:	b007      	add	sp, #28
 8015114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015118:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801511c:	2a0d      	cmp	r2, #13
 801511e:	d8e8      	bhi.n	80150f2 <_scanf_float+0x66>
 8015120:	a101      	add	r1, pc, #4	@ (adr r1, 8015128 <_scanf_float+0x9c>)
 8015122:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015126:	bf00      	nop
 8015128:	08015271 	.word	0x08015271
 801512c:	080150f3 	.word	0x080150f3
 8015130:	080150f3 	.word	0x080150f3
 8015134:	080150f3 	.word	0x080150f3
 8015138:	080152cd 	.word	0x080152cd
 801513c:	080152a7 	.word	0x080152a7
 8015140:	080150f3 	.word	0x080150f3
 8015144:	080150f3 	.word	0x080150f3
 8015148:	0801527f 	.word	0x0801527f
 801514c:	080150f3 	.word	0x080150f3
 8015150:	080150f3 	.word	0x080150f3
 8015154:	080150f3 	.word	0x080150f3
 8015158:	080150f3 	.word	0x080150f3
 801515c:	0801523b 	.word	0x0801523b
 8015160:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8015164:	e7da      	b.n	801511c <_scanf_float+0x90>
 8015166:	290e      	cmp	r1, #14
 8015168:	d8c3      	bhi.n	80150f2 <_scanf_float+0x66>
 801516a:	a001      	add	r0, pc, #4	@ (adr r0, 8015170 <_scanf_float+0xe4>)
 801516c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015170:	0801522b 	.word	0x0801522b
 8015174:	080150f3 	.word	0x080150f3
 8015178:	0801522b 	.word	0x0801522b
 801517c:	080152bb 	.word	0x080152bb
 8015180:	080150f3 	.word	0x080150f3
 8015184:	080151cd 	.word	0x080151cd
 8015188:	08015211 	.word	0x08015211
 801518c:	08015211 	.word	0x08015211
 8015190:	08015211 	.word	0x08015211
 8015194:	08015211 	.word	0x08015211
 8015198:	08015211 	.word	0x08015211
 801519c:	08015211 	.word	0x08015211
 80151a0:	08015211 	.word	0x08015211
 80151a4:	08015211 	.word	0x08015211
 80151a8:	08015211 	.word	0x08015211
 80151ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80151ae:	d809      	bhi.n	80151c4 <_scanf_float+0x138>
 80151b0:	2b60      	cmp	r3, #96	@ 0x60
 80151b2:	d8b1      	bhi.n	8015118 <_scanf_float+0x8c>
 80151b4:	2b54      	cmp	r3, #84	@ 0x54
 80151b6:	d07b      	beq.n	80152b0 <_scanf_float+0x224>
 80151b8:	2b59      	cmp	r3, #89	@ 0x59
 80151ba:	d19a      	bne.n	80150f2 <_scanf_float+0x66>
 80151bc:	2d07      	cmp	r5, #7
 80151be:	d198      	bne.n	80150f2 <_scanf_float+0x66>
 80151c0:	2508      	movs	r5, #8
 80151c2:	e02f      	b.n	8015224 <_scanf_float+0x198>
 80151c4:	2b74      	cmp	r3, #116	@ 0x74
 80151c6:	d073      	beq.n	80152b0 <_scanf_float+0x224>
 80151c8:	2b79      	cmp	r3, #121	@ 0x79
 80151ca:	e7f6      	b.n	80151ba <_scanf_float+0x12e>
 80151cc:	6821      	ldr	r1, [r4, #0]
 80151ce:	05c8      	lsls	r0, r1, #23
 80151d0:	d51e      	bpl.n	8015210 <_scanf_float+0x184>
 80151d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80151d6:	6021      	str	r1, [r4, #0]
 80151d8:	3701      	adds	r7, #1
 80151da:	f1bb 0f00 	cmp.w	fp, #0
 80151de:	d003      	beq.n	80151e8 <_scanf_float+0x15c>
 80151e0:	3201      	adds	r2, #1
 80151e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80151e6:	60a2      	str	r2, [r4, #8]
 80151e8:	68a3      	ldr	r3, [r4, #8]
 80151ea:	3b01      	subs	r3, #1
 80151ec:	60a3      	str	r3, [r4, #8]
 80151ee:	6923      	ldr	r3, [r4, #16]
 80151f0:	3301      	adds	r3, #1
 80151f2:	6123      	str	r3, [r4, #16]
 80151f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80151f8:	3b01      	subs	r3, #1
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	f8c9 3004 	str.w	r3, [r9, #4]
 8015200:	f340 8082 	ble.w	8015308 <_scanf_float+0x27c>
 8015204:	f8d9 3000 	ldr.w	r3, [r9]
 8015208:	3301      	adds	r3, #1
 801520a:	f8c9 3000 	str.w	r3, [r9]
 801520e:	e762      	b.n	80150d6 <_scanf_float+0x4a>
 8015210:	eb1a 0105 	adds.w	r1, sl, r5
 8015214:	f47f af6d 	bne.w	80150f2 <_scanf_float+0x66>
 8015218:	6822      	ldr	r2, [r4, #0]
 801521a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801521e:	6022      	str	r2, [r4, #0]
 8015220:	460d      	mov	r5, r1
 8015222:	468a      	mov	sl, r1
 8015224:	f806 3b01 	strb.w	r3, [r6], #1
 8015228:	e7de      	b.n	80151e8 <_scanf_float+0x15c>
 801522a:	6822      	ldr	r2, [r4, #0]
 801522c:	0610      	lsls	r0, r2, #24
 801522e:	f57f af60 	bpl.w	80150f2 <_scanf_float+0x66>
 8015232:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8015236:	6022      	str	r2, [r4, #0]
 8015238:	e7f4      	b.n	8015224 <_scanf_float+0x198>
 801523a:	f1ba 0f00 	cmp.w	sl, #0
 801523e:	d10c      	bne.n	801525a <_scanf_float+0x1ce>
 8015240:	b977      	cbnz	r7, 8015260 <_scanf_float+0x1d4>
 8015242:	6822      	ldr	r2, [r4, #0]
 8015244:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8015248:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801524c:	d108      	bne.n	8015260 <_scanf_float+0x1d4>
 801524e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015252:	6022      	str	r2, [r4, #0]
 8015254:	f04f 0a01 	mov.w	sl, #1
 8015258:	e7e4      	b.n	8015224 <_scanf_float+0x198>
 801525a:	f1ba 0f02 	cmp.w	sl, #2
 801525e:	d050      	beq.n	8015302 <_scanf_float+0x276>
 8015260:	2d01      	cmp	r5, #1
 8015262:	d002      	beq.n	801526a <_scanf_float+0x1de>
 8015264:	2d04      	cmp	r5, #4
 8015266:	f47f af44 	bne.w	80150f2 <_scanf_float+0x66>
 801526a:	3501      	adds	r5, #1
 801526c:	b2ed      	uxtb	r5, r5
 801526e:	e7d9      	b.n	8015224 <_scanf_float+0x198>
 8015270:	f1ba 0f01 	cmp.w	sl, #1
 8015274:	f47f af3d 	bne.w	80150f2 <_scanf_float+0x66>
 8015278:	f04f 0a02 	mov.w	sl, #2
 801527c:	e7d2      	b.n	8015224 <_scanf_float+0x198>
 801527e:	b975      	cbnz	r5, 801529e <_scanf_float+0x212>
 8015280:	2f00      	cmp	r7, #0
 8015282:	f47f af37 	bne.w	80150f4 <_scanf_float+0x68>
 8015286:	6822      	ldr	r2, [r4, #0]
 8015288:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801528c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8015290:	f040 80fc 	bne.w	801548c <_scanf_float+0x400>
 8015294:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015298:	6022      	str	r2, [r4, #0]
 801529a:	2501      	movs	r5, #1
 801529c:	e7c2      	b.n	8015224 <_scanf_float+0x198>
 801529e:	2d03      	cmp	r5, #3
 80152a0:	d0e3      	beq.n	801526a <_scanf_float+0x1de>
 80152a2:	2d05      	cmp	r5, #5
 80152a4:	e7df      	b.n	8015266 <_scanf_float+0x1da>
 80152a6:	2d02      	cmp	r5, #2
 80152a8:	f47f af23 	bne.w	80150f2 <_scanf_float+0x66>
 80152ac:	2503      	movs	r5, #3
 80152ae:	e7b9      	b.n	8015224 <_scanf_float+0x198>
 80152b0:	2d06      	cmp	r5, #6
 80152b2:	f47f af1e 	bne.w	80150f2 <_scanf_float+0x66>
 80152b6:	2507      	movs	r5, #7
 80152b8:	e7b4      	b.n	8015224 <_scanf_float+0x198>
 80152ba:	6822      	ldr	r2, [r4, #0]
 80152bc:	0591      	lsls	r1, r2, #22
 80152be:	f57f af18 	bpl.w	80150f2 <_scanf_float+0x66>
 80152c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80152c6:	6022      	str	r2, [r4, #0]
 80152c8:	9702      	str	r7, [sp, #8]
 80152ca:	e7ab      	b.n	8015224 <_scanf_float+0x198>
 80152cc:	6822      	ldr	r2, [r4, #0]
 80152ce:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80152d2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80152d6:	d005      	beq.n	80152e4 <_scanf_float+0x258>
 80152d8:	0550      	lsls	r0, r2, #21
 80152da:	f57f af0a 	bpl.w	80150f2 <_scanf_float+0x66>
 80152de:	2f00      	cmp	r7, #0
 80152e0:	f000 80d4 	beq.w	801548c <_scanf_float+0x400>
 80152e4:	0591      	lsls	r1, r2, #22
 80152e6:	bf58      	it	pl
 80152e8:	9902      	ldrpl	r1, [sp, #8]
 80152ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80152ee:	bf58      	it	pl
 80152f0:	1a79      	subpl	r1, r7, r1
 80152f2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80152f6:	bf58      	it	pl
 80152f8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80152fc:	6022      	str	r2, [r4, #0]
 80152fe:	2700      	movs	r7, #0
 8015300:	e790      	b.n	8015224 <_scanf_float+0x198>
 8015302:	f04f 0a03 	mov.w	sl, #3
 8015306:	e78d      	b.n	8015224 <_scanf_float+0x198>
 8015308:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801530c:	4649      	mov	r1, r9
 801530e:	4640      	mov	r0, r8
 8015310:	4798      	blx	r3
 8015312:	2800      	cmp	r0, #0
 8015314:	f43f aedf 	beq.w	80150d6 <_scanf_float+0x4a>
 8015318:	e6eb      	b.n	80150f2 <_scanf_float+0x66>
 801531a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801531e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015322:	464a      	mov	r2, r9
 8015324:	4640      	mov	r0, r8
 8015326:	4798      	blx	r3
 8015328:	6923      	ldr	r3, [r4, #16]
 801532a:	3b01      	subs	r3, #1
 801532c:	6123      	str	r3, [r4, #16]
 801532e:	e6eb      	b.n	8015108 <_scanf_float+0x7c>
 8015330:	1e6b      	subs	r3, r5, #1
 8015332:	2b06      	cmp	r3, #6
 8015334:	d824      	bhi.n	8015380 <_scanf_float+0x2f4>
 8015336:	2d02      	cmp	r5, #2
 8015338:	d836      	bhi.n	80153a8 <_scanf_float+0x31c>
 801533a:	9b01      	ldr	r3, [sp, #4]
 801533c:	429e      	cmp	r6, r3
 801533e:	f67f aee7 	bls.w	8015110 <_scanf_float+0x84>
 8015342:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015346:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801534a:	464a      	mov	r2, r9
 801534c:	4640      	mov	r0, r8
 801534e:	4798      	blx	r3
 8015350:	6923      	ldr	r3, [r4, #16]
 8015352:	3b01      	subs	r3, #1
 8015354:	6123      	str	r3, [r4, #16]
 8015356:	e7f0      	b.n	801533a <_scanf_float+0x2ae>
 8015358:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801535c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8015360:	464a      	mov	r2, r9
 8015362:	4640      	mov	r0, r8
 8015364:	4798      	blx	r3
 8015366:	6923      	ldr	r3, [r4, #16]
 8015368:	3b01      	subs	r3, #1
 801536a:	6123      	str	r3, [r4, #16]
 801536c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015370:	fa5f fa8a 	uxtb.w	sl, sl
 8015374:	f1ba 0f02 	cmp.w	sl, #2
 8015378:	d1ee      	bne.n	8015358 <_scanf_float+0x2cc>
 801537a:	3d03      	subs	r5, #3
 801537c:	b2ed      	uxtb	r5, r5
 801537e:	1b76      	subs	r6, r6, r5
 8015380:	6823      	ldr	r3, [r4, #0]
 8015382:	05da      	lsls	r2, r3, #23
 8015384:	d530      	bpl.n	80153e8 <_scanf_float+0x35c>
 8015386:	055b      	lsls	r3, r3, #21
 8015388:	d511      	bpl.n	80153ae <_scanf_float+0x322>
 801538a:	9b01      	ldr	r3, [sp, #4]
 801538c:	429e      	cmp	r6, r3
 801538e:	f67f aebf 	bls.w	8015110 <_scanf_float+0x84>
 8015392:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015396:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801539a:	464a      	mov	r2, r9
 801539c:	4640      	mov	r0, r8
 801539e:	4798      	blx	r3
 80153a0:	6923      	ldr	r3, [r4, #16]
 80153a2:	3b01      	subs	r3, #1
 80153a4:	6123      	str	r3, [r4, #16]
 80153a6:	e7f0      	b.n	801538a <_scanf_float+0x2fe>
 80153a8:	46aa      	mov	sl, r5
 80153aa:	46b3      	mov	fp, r6
 80153ac:	e7de      	b.n	801536c <_scanf_float+0x2e0>
 80153ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80153b2:	6923      	ldr	r3, [r4, #16]
 80153b4:	2965      	cmp	r1, #101	@ 0x65
 80153b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80153ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80153be:	6123      	str	r3, [r4, #16]
 80153c0:	d00c      	beq.n	80153dc <_scanf_float+0x350>
 80153c2:	2945      	cmp	r1, #69	@ 0x45
 80153c4:	d00a      	beq.n	80153dc <_scanf_float+0x350>
 80153c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80153ca:	464a      	mov	r2, r9
 80153cc:	4640      	mov	r0, r8
 80153ce:	4798      	blx	r3
 80153d0:	6923      	ldr	r3, [r4, #16]
 80153d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80153d6:	3b01      	subs	r3, #1
 80153d8:	1eb5      	subs	r5, r6, #2
 80153da:	6123      	str	r3, [r4, #16]
 80153dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80153e0:	464a      	mov	r2, r9
 80153e2:	4640      	mov	r0, r8
 80153e4:	4798      	blx	r3
 80153e6:	462e      	mov	r6, r5
 80153e8:	6822      	ldr	r2, [r4, #0]
 80153ea:	f012 0210 	ands.w	r2, r2, #16
 80153ee:	d001      	beq.n	80153f4 <_scanf_float+0x368>
 80153f0:	2000      	movs	r0, #0
 80153f2:	e68e      	b.n	8015112 <_scanf_float+0x86>
 80153f4:	7032      	strb	r2, [r6, #0]
 80153f6:	6823      	ldr	r3, [r4, #0]
 80153f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80153fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015400:	d123      	bne.n	801544a <_scanf_float+0x3be>
 8015402:	9b02      	ldr	r3, [sp, #8]
 8015404:	429f      	cmp	r7, r3
 8015406:	d00a      	beq.n	801541e <_scanf_float+0x392>
 8015408:	1bda      	subs	r2, r3, r7
 801540a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801540e:	429e      	cmp	r6, r3
 8015410:	bf28      	it	cs
 8015412:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8015416:	491e      	ldr	r1, [pc, #120]	@ (8015490 <_scanf_float+0x404>)
 8015418:	4630      	mov	r0, r6
 801541a:	f000 f9e9 	bl	80157f0 <siprintf>
 801541e:	9901      	ldr	r1, [sp, #4]
 8015420:	2200      	movs	r2, #0
 8015422:	4640      	mov	r0, r8
 8015424:	f002 fc22 	bl	8017c6c <_strtod_r>
 8015428:	9b03      	ldr	r3, [sp, #12]
 801542a:	6821      	ldr	r1, [r4, #0]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	f011 0f02 	tst.w	r1, #2
 8015432:	f103 0204 	add.w	r2, r3, #4
 8015436:	d015      	beq.n	8015464 <_scanf_float+0x3d8>
 8015438:	9903      	ldr	r1, [sp, #12]
 801543a:	600a      	str	r2, [r1, #0]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	ed83 0b00 	vstr	d0, [r3]
 8015442:	68e3      	ldr	r3, [r4, #12]
 8015444:	3301      	adds	r3, #1
 8015446:	60e3      	str	r3, [r4, #12]
 8015448:	e7d2      	b.n	80153f0 <_scanf_float+0x364>
 801544a:	9b04      	ldr	r3, [sp, #16]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d0e6      	beq.n	801541e <_scanf_float+0x392>
 8015450:	9905      	ldr	r1, [sp, #20]
 8015452:	230a      	movs	r3, #10
 8015454:	3101      	adds	r1, #1
 8015456:	4640      	mov	r0, r8
 8015458:	f002 fc88 	bl	8017d6c <_strtol_r>
 801545c:	9b04      	ldr	r3, [sp, #16]
 801545e:	9e05      	ldr	r6, [sp, #20]
 8015460:	1ac2      	subs	r2, r0, r3
 8015462:	e7d2      	b.n	801540a <_scanf_float+0x37e>
 8015464:	f011 0f04 	tst.w	r1, #4
 8015468:	9903      	ldr	r1, [sp, #12]
 801546a:	600a      	str	r2, [r1, #0]
 801546c:	d1e6      	bne.n	801543c <_scanf_float+0x3b0>
 801546e:	eeb4 0b40 	vcmp.f64	d0, d0
 8015472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015476:	681d      	ldr	r5, [r3, #0]
 8015478:	d705      	bvc.n	8015486 <_scanf_float+0x3fa>
 801547a:	4806      	ldr	r0, [pc, #24]	@ (8015494 <_scanf_float+0x408>)
 801547c:	f000 faac 	bl	80159d8 <nanf>
 8015480:	ed85 0a00 	vstr	s0, [r5]
 8015484:	e7dd      	b.n	8015442 <_scanf_float+0x3b6>
 8015486:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801548a:	e7f9      	b.n	8015480 <_scanf_float+0x3f4>
 801548c:	2700      	movs	r7, #0
 801548e:	e635      	b.n	80150fc <_scanf_float+0x70>
 8015490:	0801964c 	.word	0x0801964c
 8015494:	0801978d 	.word	0x0801978d

08015498 <std>:
 8015498:	2300      	movs	r3, #0
 801549a:	b510      	push	{r4, lr}
 801549c:	4604      	mov	r4, r0
 801549e:	e9c0 3300 	strd	r3, r3, [r0]
 80154a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80154a6:	6083      	str	r3, [r0, #8]
 80154a8:	8181      	strh	r1, [r0, #12]
 80154aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80154ac:	81c2      	strh	r2, [r0, #14]
 80154ae:	6183      	str	r3, [r0, #24]
 80154b0:	4619      	mov	r1, r3
 80154b2:	2208      	movs	r2, #8
 80154b4:	305c      	adds	r0, #92	@ 0x5c
 80154b6:	f000 fa00 	bl	80158ba <memset>
 80154ba:	4b0d      	ldr	r3, [pc, #52]	@ (80154f0 <std+0x58>)
 80154bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80154be:	4b0d      	ldr	r3, [pc, #52]	@ (80154f4 <std+0x5c>)
 80154c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80154c2:	4b0d      	ldr	r3, [pc, #52]	@ (80154f8 <std+0x60>)
 80154c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80154c6:	4b0d      	ldr	r3, [pc, #52]	@ (80154fc <std+0x64>)
 80154c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80154ca:	4b0d      	ldr	r3, [pc, #52]	@ (8015500 <std+0x68>)
 80154cc:	6224      	str	r4, [r4, #32]
 80154ce:	429c      	cmp	r4, r3
 80154d0:	d006      	beq.n	80154e0 <std+0x48>
 80154d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80154d6:	4294      	cmp	r4, r2
 80154d8:	d002      	beq.n	80154e0 <std+0x48>
 80154da:	33d0      	adds	r3, #208	@ 0xd0
 80154dc:	429c      	cmp	r4, r3
 80154de:	d105      	bne.n	80154ec <std+0x54>
 80154e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80154e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154e8:	f000 ba64 	b.w	80159b4 <__retarget_lock_init_recursive>
 80154ec:	bd10      	pop	{r4, pc}
 80154ee:	bf00      	nop
 80154f0:	08015835 	.word	0x08015835
 80154f4:	08015857 	.word	0x08015857
 80154f8:	0801588f 	.word	0x0801588f
 80154fc:	080158b3 	.word	0x080158b3
 8015500:	24000af8 	.word	0x24000af8

08015504 <stdio_exit_handler>:
 8015504:	4a02      	ldr	r2, [pc, #8]	@ (8015510 <stdio_exit_handler+0xc>)
 8015506:	4903      	ldr	r1, [pc, #12]	@ (8015514 <stdio_exit_handler+0x10>)
 8015508:	4803      	ldr	r0, [pc, #12]	@ (8015518 <stdio_exit_handler+0x14>)
 801550a:	f000 b869 	b.w	80155e0 <_fwalk_sglue>
 801550e:	bf00      	nop
 8015510:	24000024 	.word	0x24000024
 8015514:	08018129 	.word	0x08018129
 8015518:	24000034 	.word	0x24000034

0801551c <cleanup_stdio>:
 801551c:	6841      	ldr	r1, [r0, #4]
 801551e:	4b0c      	ldr	r3, [pc, #48]	@ (8015550 <cleanup_stdio+0x34>)
 8015520:	4299      	cmp	r1, r3
 8015522:	b510      	push	{r4, lr}
 8015524:	4604      	mov	r4, r0
 8015526:	d001      	beq.n	801552c <cleanup_stdio+0x10>
 8015528:	f002 fdfe 	bl	8018128 <_fflush_r>
 801552c:	68a1      	ldr	r1, [r4, #8]
 801552e:	4b09      	ldr	r3, [pc, #36]	@ (8015554 <cleanup_stdio+0x38>)
 8015530:	4299      	cmp	r1, r3
 8015532:	d002      	beq.n	801553a <cleanup_stdio+0x1e>
 8015534:	4620      	mov	r0, r4
 8015536:	f002 fdf7 	bl	8018128 <_fflush_r>
 801553a:	68e1      	ldr	r1, [r4, #12]
 801553c:	4b06      	ldr	r3, [pc, #24]	@ (8015558 <cleanup_stdio+0x3c>)
 801553e:	4299      	cmp	r1, r3
 8015540:	d004      	beq.n	801554c <cleanup_stdio+0x30>
 8015542:	4620      	mov	r0, r4
 8015544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015548:	f002 bdee 	b.w	8018128 <_fflush_r>
 801554c:	bd10      	pop	{r4, pc}
 801554e:	bf00      	nop
 8015550:	24000af8 	.word	0x24000af8
 8015554:	24000b60 	.word	0x24000b60
 8015558:	24000bc8 	.word	0x24000bc8

0801555c <global_stdio_init.part.0>:
 801555c:	b510      	push	{r4, lr}
 801555e:	4b0b      	ldr	r3, [pc, #44]	@ (801558c <global_stdio_init.part.0+0x30>)
 8015560:	4c0b      	ldr	r4, [pc, #44]	@ (8015590 <global_stdio_init.part.0+0x34>)
 8015562:	4a0c      	ldr	r2, [pc, #48]	@ (8015594 <global_stdio_init.part.0+0x38>)
 8015564:	601a      	str	r2, [r3, #0]
 8015566:	4620      	mov	r0, r4
 8015568:	2200      	movs	r2, #0
 801556a:	2104      	movs	r1, #4
 801556c:	f7ff ff94 	bl	8015498 <std>
 8015570:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015574:	2201      	movs	r2, #1
 8015576:	2109      	movs	r1, #9
 8015578:	f7ff ff8e 	bl	8015498 <std>
 801557c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015580:	2202      	movs	r2, #2
 8015582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015586:	2112      	movs	r1, #18
 8015588:	f7ff bf86 	b.w	8015498 <std>
 801558c:	24000c30 	.word	0x24000c30
 8015590:	24000af8 	.word	0x24000af8
 8015594:	08015505 	.word	0x08015505

08015598 <__sfp_lock_acquire>:
 8015598:	4801      	ldr	r0, [pc, #4]	@ (80155a0 <__sfp_lock_acquire+0x8>)
 801559a:	f000 ba0c 	b.w	80159b6 <__retarget_lock_acquire_recursive>
 801559e:	bf00      	nop
 80155a0:	24000c39 	.word	0x24000c39

080155a4 <__sfp_lock_release>:
 80155a4:	4801      	ldr	r0, [pc, #4]	@ (80155ac <__sfp_lock_release+0x8>)
 80155a6:	f000 ba07 	b.w	80159b8 <__retarget_lock_release_recursive>
 80155aa:	bf00      	nop
 80155ac:	24000c39 	.word	0x24000c39

080155b0 <__sinit>:
 80155b0:	b510      	push	{r4, lr}
 80155b2:	4604      	mov	r4, r0
 80155b4:	f7ff fff0 	bl	8015598 <__sfp_lock_acquire>
 80155b8:	6a23      	ldr	r3, [r4, #32]
 80155ba:	b11b      	cbz	r3, 80155c4 <__sinit+0x14>
 80155bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155c0:	f7ff bff0 	b.w	80155a4 <__sfp_lock_release>
 80155c4:	4b04      	ldr	r3, [pc, #16]	@ (80155d8 <__sinit+0x28>)
 80155c6:	6223      	str	r3, [r4, #32]
 80155c8:	4b04      	ldr	r3, [pc, #16]	@ (80155dc <__sinit+0x2c>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1f5      	bne.n	80155bc <__sinit+0xc>
 80155d0:	f7ff ffc4 	bl	801555c <global_stdio_init.part.0>
 80155d4:	e7f2      	b.n	80155bc <__sinit+0xc>
 80155d6:	bf00      	nop
 80155d8:	0801551d 	.word	0x0801551d
 80155dc:	24000c30 	.word	0x24000c30

080155e0 <_fwalk_sglue>:
 80155e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155e4:	4607      	mov	r7, r0
 80155e6:	4688      	mov	r8, r1
 80155e8:	4614      	mov	r4, r2
 80155ea:	2600      	movs	r6, #0
 80155ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80155f0:	f1b9 0901 	subs.w	r9, r9, #1
 80155f4:	d505      	bpl.n	8015602 <_fwalk_sglue+0x22>
 80155f6:	6824      	ldr	r4, [r4, #0]
 80155f8:	2c00      	cmp	r4, #0
 80155fa:	d1f7      	bne.n	80155ec <_fwalk_sglue+0xc>
 80155fc:	4630      	mov	r0, r6
 80155fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015602:	89ab      	ldrh	r3, [r5, #12]
 8015604:	2b01      	cmp	r3, #1
 8015606:	d907      	bls.n	8015618 <_fwalk_sglue+0x38>
 8015608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801560c:	3301      	adds	r3, #1
 801560e:	d003      	beq.n	8015618 <_fwalk_sglue+0x38>
 8015610:	4629      	mov	r1, r5
 8015612:	4638      	mov	r0, r7
 8015614:	47c0      	blx	r8
 8015616:	4306      	orrs	r6, r0
 8015618:	3568      	adds	r5, #104	@ 0x68
 801561a:	e7e9      	b.n	80155f0 <_fwalk_sglue+0x10>

0801561c <setvbuf>:
 801561c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015620:	461d      	mov	r5, r3
 8015622:	4b57      	ldr	r3, [pc, #348]	@ (8015780 <setvbuf+0x164>)
 8015624:	681f      	ldr	r7, [r3, #0]
 8015626:	4604      	mov	r4, r0
 8015628:	460e      	mov	r6, r1
 801562a:	4690      	mov	r8, r2
 801562c:	b127      	cbz	r7, 8015638 <setvbuf+0x1c>
 801562e:	6a3b      	ldr	r3, [r7, #32]
 8015630:	b913      	cbnz	r3, 8015638 <setvbuf+0x1c>
 8015632:	4638      	mov	r0, r7
 8015634:	f7ff ffbc 	bl	80155b0 <__sinit>
 8015638:	f1b8 0f02 	cmp.w	r8, #2
 801563c:	d006      	beq.n	801564c <setvbuf+0x30>
 801563e:	f1b8 0f01 	cmp.w	r8, #1
 8015642:	f200 809a 	bhi.w	801577a <setvbuf+0x15e>
 8015646:	2d00      	cmp	r5, #0
 8015648:	f2c0 8097 	blt.w	801577a <setvbuf+0x15e>
 801564c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801564e:	07d9      	lsls	r1, r3, #31
 8015650:	d405      	bmi.n	801565e <setvbuf+0x42>
 8015652:	89a3      	ldrh	r3, [r4, #12]
 8015654:	059a      	lsls	r2, r3, #22
 8015656:	d402      	bmi.n	801565e <setvbuf+0x42>
 8015658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801565a:	f000 f9ac 	bl	80159b6 <__retarget_lock_acquire_recursive>
 801565e:	4621      	mov	r1, r4
 8015660:	4638      	mov	r0, r7
 8015662:	f002 fd61 	bl	8018128 <_fflush_r>
 8015666:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015668:	b141      	cbz	r1, 801567c <setvbuf+0x60>
 801566a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801566e:	4299      	cmp	r1, r3
 8015670:	d002      	beq.n	8015678 <setvbuf+0x5c>
 8015672:	4638      	mov	r0, r7
 8015674:	f000 ff9e 	bl	80165b4 <_free_r>
 8015678:	2300      	movs	r3, #0
 801567a:	6363      	str	r3, [r4, #52]	@ 0x34
 801567c:	2300      	movs	r3, #0
 801567e:	61a3      	str	r3, [r4, #24]
 8015680:	6063      	str	r3, [r4, #4]
 8015682:	89a3      	ldrh	r3, [r4, #12]
 8015684:	061b      	lsls	r3, r3, #24
 8015686:	d503      	bpl.n	8015690 <setvbuf+0x74>
 8015688:	6921      	ldr	r1, [r4, #16]
 801568a:	4638      	mov	r0, r7
 801568c:	f000 ff92 	bl	80165b4 <_free_r>
 8015690:	89a3      	ldrh	r3, [r4, #12]
 8015692:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8015696:	f023 0303 	bic.w	r3, r3, #3
 801569a:	f1b8 0f02 	cmp.w	r8, #2
 801569e:	81a3      	strh	r3, [r4, #12]
 80156a0:	d061      	beq.n	8015766 <setvbuf+0x14a>
 80156a2:	ab01      	add	r3, sp, #4
 80156a4:	466a      	mov	r2, sp
 80156a6:	4621      	mov	r1, r4
 80156a8:	4638      	mov	r0, r7
 80156aa:	f002 fd65 	bl	8018178 <__swhatbuf_r>
 80156ae:	89a3      	ldrh	r3, [r4, #12]
 80156b0:	4318      	orrs	r0, r3
 80156b2:	81a0      	strh	r0, [r4, #12]
 80156b4:	bb2d      	cbnz	r5, 8015702 <setvbuf+0xe6>
 80156b6:	9d00      	ldr	r5, [sp, #0]
 80156b8:	4628      	mov	r0, r5
 80156ba:	f000 ffc5 	bl	8016648 <malloc>
 80156be:	4606      	mov	r6, r0
 80156c0:	2800      	cmp	r0, #0
 80156c2:	d152      	bne.n	801576a <setvbuf+0x14e>
 80156c4:	f8dd 9000 	ldr.w	r9, [sp]
 80156c8:	45a9      	cmp	r9, r5
 80156ca:	d140      	bne.n	801574e <setvbuf+0x132>
 80156cc:	f04f 35ff 	mov.w	r5, #4294967295
 80156d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156d4:	f043 0202 	orr.w	r2, r3, #2
 80156d8:	81a2      	strh	r2, [r4, #12]
 80156da:	2200      	movs	r2, #0
 80156dc:	60a2      	str	r2, [r4, #8]
 80156de:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80156e2:	6022      	str	r2, [r4, #0]
 80156e4:	6122      	str	r2, [r4, #16]
 80156e6:	2201      	movs	r2, #1
 80156e8:	6162      	str	r2, [r4, #20]
 80156ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80156ec:	07d6      	lsls	r6, r2, #31
 80156ee:	d404      	bmi.n	80156fa <setvbuf+0xde>
 80156f0:	0598      	lsls	r0, r3, #22
 80156f2:	d402      	bmi.n	80156fa <setvbuf+0xde>
 80156f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156f6:	f000 f95f 	bl	80159b8 <__retarget_lock_release_recursive>
 80156fa:	4628      	mov	r0, r5
 80156fc:	b003      	add	sp, #12
 80156fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015702:	2e00      	cmp	r6, #0
 8015704:	d0d8      	beq.n	80156b8 <setvbuf+0x9c>
 8015706:	6a3b      	ldr	r3, [r7, #32]
 8015708:	b913      	cbnz	r3, 8015710 <setvbuf+0xf4>
 801570a:	4638      	mov	r0, r7
 801570c:	f7ff ff50 	bl	80155b0 <__sinit>
 8015710:	f1b8 0f01 	cmp.w	r8, #1
 8015714:	bf08      	it	eq
 8015716:	89a3      	ldrheq	r3, [r4, #12]
 8015718:	6026      	str	r6, [r4, #0]
 801571a:	bf04      	itt	eq
 801571c:	f043 0301 	orreq.w	r3, r3, #1
 8015720:	81a3      	strheq	r3, [r4, #12]
 8015722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015726:	f013 0208 	ands.w	r2, r3, #8
 801572a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801572e:	d01e      	beq.n	801576e <setvbuf+0x152>
 8015730:	07d9      	lsls	r1, r3, #31
 8015732:	bf41      	itttt	mi
 8015734:	2200      	movmi	r2, #0
 8015736:	426d      	negmi	r5, r5
 8015738:	60a2      	strmi	r2, [r4, #8]
 801573a:	61a5      	strmi	r5, [r4, #24]
 801573c:	bf58      	it	pl
 801573e:	60a5      	strpl	r5, [r4, #8]
 8015740:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015742:	07d2      	lsls	r2, r2, #31
 8015744:	d401      	bmi.n	801574a <setvbuf+0x12e>
 8015746:	059b      	lsls	r3, r3, #22
 8015748:	d513      	bpl.n	8015772 <setvbuf+0x156>
 801574a:	2500      	movs	r5, #0
 801574c:	e7d5      	b.n	80156fa <setvbuf+0xde>
 801574e:	4648      	mov	r0, r9
 8015750:	f000 ff7a 	bl	8016648 <malloc>
 8015754:	4606      	mov	r6, r0
 8015756:	2800      	cmp	r0, #0
 8015758:	d0b8      	beq.n	80156cc <setvbuf+0xb0>
 801575a:	89a3      	ldrh	r3, [r4, #12]
 801575c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015760:	81a3      	strh	r3, [r4, #12]
 8015762:	464d      	mov	r5, r9
 8015764:	e7cf      	b.n	8015706 <setvbuf+0xea>
 8015766:	2500      	movs	r5, #0
 8015768:	e7b2      	b.n	80156d0 <setvbuf+0xb4>
 801576a:	46a9      	mov	r9, r5
 801576c:	e7f5      	b.n	801575a <setvbuf+0x13e>
 801576e:	60a2      	str	r2, [r4, #8]
 8015770:	e7e6      	b.n	8015740 <setvbuf+0x124>
 8015772:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015774:	f000 f920 	bl	80159b8 <__retarget_lock_release_recursive>
 8015778:	e7e7      	b.n	801574a <setvbuf+0x12e>
 801577a:	f04f 35ff 	mov.w	r5, #4294967295
 801577e:	e7bc      	b.n	80156fa <setvbuf+0xde>
 8015780:	24000030 	.word	0x24000030

08015784 <sniprintf>:
 8015784:	b40c      	push	{r2, r3}
 8015786:	b530      	push	{r4, r5, lr}
 8015788:	4b18      	ldr	r3, [pc, #96]	@ (80157ec <sniprintf+0x68>)
 801578a:	1e0c      	subs	r4, r1, #0
 801578c:	681d      	ldr	r5, [r3, #0]
 801578e:	b09d      	sub	sp, #116	@ 0x74
 8015790:	da08      	bge.n	80157a4 <sniprintf+0x20>
 8015792:	238b      	movs	r3, #139	@ 0x8b
 8015794:	602b      	str	r3, [r5, #0]
 8015796:	f04f 30ff 	mov.w	r0, #4294967295
 801579a:	b01d      	add	sp, #116	@ 0x74
 801579c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80157a0:	b002      	add	sp, #8
 80157a2:	4770      	bx	lr
 80157a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80157a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80157ac:	f04f 0300 	mov.w	r3, #0
 80157b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80157b2:	bf14      	ite	ne
 80157b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80157b8:	4623      	moveq	r3, r4
 80157ba:	9304      	str	r3, [sp, #16]
 80157bc:	9307      	str	r3, [sp, #28]
 80157be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80157c2:	9002      	str	r0, [sp, #8]
 80157c4:	9006      	str	r0, [sp, #24]
 80157c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80157ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80157cc:	ab21      	add	r3, sp, #132	@ 0x84
 80157ce:	a902      	add	r1, sp, #8
 80157d0:	4628      	mov	r0, r5
 80157d2:	9301      	str	r3, [sp, #4]
 80157d4:	f002 fb28 	bl	8017e28 <_svfiprintf_r>
 80157d8:	1c43      	adds	r3, r0, #1
 80157da:	bfbc      	itt	lt
 80157dc:	238b      	movlt	r3, #139	@ 0x8b
 80157de:	602b      	strlt	r3, [r5, #0]
 80157e0:	2c00      	cmp	r4, #0
 80157e2:	d0da      	beq.n	801579a <sniprintf+0x16>
 80157e4:	9b02      	ldr	r3, [sp, #8]
 80157e6:	2200      	movs	r2, #0
 80157e8:	701a      	strb	r2, [r3, #0]
 80157ea:	e7d6      	b.n	801579a <sniprintf+0x16>
 80157ec:	24000030 	.word	0x24000030

080157f0 <siprintf>:
 80157f0:	b40e      	push	{r1, r2, r3}
 80157f2:	b510      	push	{r4, lr}
 80157f4:	b09d      	sub	sp, #116	@ 0x74
 80157f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80157f8:	9002      	str	r0, [sp, #8]
 80157fa:	9006      	str	r0, [sp, #24]
 80157fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015800:	480a      	ldr	r0, [pc, #40]	@ (801582c <siprintf+0x3c>)
 8015802:	9107      	str	r1, [sp, #28]
 8015804:	9104      	str	r1, [sp, #16]
 8015806:	490a      	ldr	r1, [pc, #40]	@ (8015830 <siprintf+0x40>)
 8015808:	f853 2b04 	ldr.w	r2, [r3], #4
 801580c:	9105      	str	r1, [sp, #20]
 801580e:	2400      	movs	r4, #0
 8015810:	a902      	add	r1, sp, #8
 8015812:	6800      	ldr	r0, [r0, #0]
 8015814:	9301      	str	r3, [sp, #4]
 8015816:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015818:	f002 fb06 	bl	8017e28 <_svfiprintf_r>
 801581c:	9b02      	ldr	r3, [sp, #8]
 801581e:	701c      	strb	r4, [r3, #0]
 8015820:	b01d      	add	sp, #116	@ 0x74
 8015822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015826:	b003      	add	sp, #12
 8015828:	4770      	bx	lr
 801582a:	bf00      	nop
 801582c:	24000030 	.word	0x24000030
 8015830:	ffff0208 	.word	0xffff0208

08015834 <__sread>:
 8015834:	b510      	push	{r4, lr}
 8015836:	460c      	mov	r4, r1
 8015838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801583c:	f000 f86c 	bl	8015918 <_read_r>
 8015840:	2800      	cmp	r0, #0
 8015842:	bfab      	itete	ge
 8015844:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015846:	89a3      	ldrhlt	r3, [r4, #12]
 8015848:	181b      	addge	r3, r3, r0
 801584a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801584e:	bfac      	ite	ge
 8015850:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015852:	81a3      	strhlt	r3, [r4, #12]
 8015854:	bd10      	pop	{r4, pc}

08015856 <__swrite>:
 8015856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801585a:	461f      	mov	r7, r3
 801585c:	898b      	ldrh	r3, [r1, #12]
 801585e:	05db      	lsls	r3, r3, #23
 8015860:	4605      	mov	r5, r0
 8015862:	460c      	mov	r4, r1
 8015864:	4616      	mov	r6, r2
 8015866:	d505      	bpl.n	8015874 <__swrite+0x1e>
 8015868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801586c:	2302      	movs	r3, #2
 801586e:	2200      	movs	r2, #0
 8015870:	f000 f840 	bl	80158f4 <_lseek_r>
 8015874:	89a3      	ldrh	r3, [r4, #12]
 8015876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801587a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801587e:	81a3      	strh	r3, [r4, #12]
 8015880:	4632      	mov	r2, r6
 8015882:	463b      	mov	r3, r7
 8015884:	4628      	mov	r0, r5
 8015886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801588a:	f000 b857 	b.w	801593c <_write_r>

0801588e <__sseek>:
 801588e:	b510      	push	{r4, lr}
 8015890:	460c      	mov	r4, r1
 8015892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015896:	f000 f82d 	bl	80158f4 <_lseek_r>
 801589a:	1c43      	adds	r3, r0, #1
 801589c:	89a3      	ldrh	r3, [r4, #12]
 801589e:	bf15      	itete	ne
 80158a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80158a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80158a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80158aa:	81a3      	strheq	r3, [r4, #12]
 80158ac:	bf18      	it	ne
 80158ae:	81a3      	strhne	r3, [r4, #12]
 80158b0:	bd10      	pop	{r4, pc}

080158b2 <__sclose>:
 80158b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158b6:	f000 b80d 	b.w	80158d4 <_close_r>

080158ba <memset>:
 80158ba:	4402      	add	r2, r0
 80158bc:	4603      	mov	r3, r0
 80158be:	4293      	cmp	r3, r2
 80158c0:	d100      	bne.n	80158c4 <memset+0xa>
 80158c2:	4770      	bx	lr
 80158c4:	f803 1b01 	strb.w	r1, [r3], #1
 80158c8:	e7f9      	b.n	80158be <memset+0x4>
	...

080158cc <_localeconv_r>:
 80158cc:	4800      	ldr	r0, [pc, #0]	@ (80158d0 <_localeconv_r+0x4>)
 80158ce:	4770      	bx	lr
 80158d0:	24000170 	.word	0x24000170

080158d4 <_close_r>:
 80158d4:	b538      	push	{r3, r4, r5, lr}
 80158d6:	4d06      	ldr	r5, [pc, #24]	@ (80158f0 <_close_r+0x1c>)
 80158d8:	2300      	movs	r3, #0
 80158da:	4604      	mov	r4, r0
 80158dc:	4608      	mov	r0, r1
 80158de:	602b      	str	r3, [r5, #0]
 80158e0:	f7ee fdb0 	bl	8004444 <_close>
 80158e4:	1c43      	adds	r3, r0, #1
 80158e6:	d102      	bne.n	80158ee <_close_r+0x1a>
 80158e8:	682b      	ldr	r3, [r5, #0]
 80158ea:	b103      	cbz	r3, 80158ee <_close_r+0x1a>
 80158ec:	6023      	str	r3, [r4, #0]
 80158ee:	bd38      	pop	{r3, r4, r5, pc}
 80158f0:	24000c34 	.word	0x24000c34

080158f4 <_lseek_r>:
 80158f4:	b538      	push	{r3, r4, r5, lr}
 80158f6:	4d07      	ldr	r5, [pc, #28]	@ (8015914 <_lseek_r+0x20>)
 80158f8:	4604      	mov	r4, r0
 80158fa:	4608      	mov	r0, r1
 80158fc:	4611      	mov	r1, r2
 80158fe:	2200      	movs	r2, #0
 8015900:	602a      	str	r2, [r5, #0]
 8015902:	461a      	mov	r2, r3
 8015904:	f7ee fdc5 	bl	8004492 <_lseek>
 8015908:	1c43      	adds	r3, r0, #1
 801590a:	d102      	bne.n	8015912 <_lseek_r+0x1e>
 801590c:	682b      	ldr	r3, [r5, #0]
 801590e:	b103      	cbz	r3, 8015912 <_lseek_r+0x1e>
 8015910:	6023      	str	r3, [r4, #0]
 8015912:	bd38      	pop	{r3, r4, r5, pc}
 8015914:	24000c34 	.word	0x24000c34

08015918 <_read_r>:
 8015918:	b538      	push	{r3, r4, r5, lr}
 801591a:	4d07      	ldr	r5, [pc, #28]	@ (8015938 <_read_r+0x20>)
 801591c:	4604      	mov	r4, r0
 801591e:	4608      	mov	r0, r1
 8015920:	4611      	mov	r1, r2
 8015922:	2200      	movs	r2, #0
 8015924:	602a      	str	r2, [r5, #0]
 8015926:	461a      	mov	r2, r3
 8015928:	f7ee fd53 	bl	80043d2 <_read>
 801592c:	1c43      	adds	r3, r0, #1
 801592e:	d102      	bne.n	8015936 <_read_r+0x1e>
 8015930:	682b      	ldr	r3, [r5, #0]
 8015932:	b103      	cbz	r3, 8015936 <_read_r+0x1e>
 8015934:	6023      	str	r3, [r4, #0]
 8015936:	bd38      	pop	{r3, r4, r5, pc}
 8015938:	24000c34 	.word	0x24000c34

0801593c <_write_r>:
 801593c:	b538      	push	{r3, r4, r5, lr}
 801593e:	4d07      	ldr	r5, [pc, #28]	@ (801595c <_write_r+0x20>)
 8015940:	4604      	mov	r4, r0
 8015942:	4608      	mov	r0, r1
 8015944:	4611      	mov	r1, r2
 8015946:	2200      	movs	r2, #0
 8015948:	602a      	str	r2, [r5, #0]
 801594a:	461a      	mov	r2, r3
 801594c:	f7ee fd5e 	bl	800440c <_write>
 8015950:	1c43      	adds	r3, r0, #1
 8015952:	d102      	bne.n	801595a <_write_r+0x1e>
 8015954:	682b      	ldr	r3, [r5, #0]
 8015956:	b103      	cbz	r3, 801595a <_write_r+0x1e>
 8015958:	6023      	str	r3, [r4, #0]
 801595a:	bd38      	pop	{r3, r4, r5, pc}
 801595c:	24000c34 	.word	0x24000c34

08015960 <__errno>:
 8015960:	4b01      	ldr	r3, [pc, #4]	@ (8015968 <__errno+0x8>)
 8015962:	6818      	ldr	r0, [r3, #0]
 8015964:	4770      	bx	lr
 8015966:	bf00      	nop
 8015968:	24000030 	.word	0x24000030

0801596c <__libc_init_array>:
 801596c:	b570      	push	{r4, r5, r6, lr}
 801596e:	4d0d      	ldr	r5, [pc, #52]	@ (80159a4 <__libc_init_array+0x38>)
 8015970:	4c0d      	ldr	r4, [pc, #52]	@ (80159a8 <__libc_init_array+0x3c>)
 8015972:	1b64      	subs	r4, r4, r5
 8015974:	10a4      	asrs	r4, r4, #2
 8015976:	2600      	movs	r6, #0
 8015978:	42a6      	cmp	r6, r4
 801597a:	d109      	bne.n	8015990 <__libc_init_array+0x24>
 801597c:	4d0b      	ldr	r5, [pc, #44]	@ (80159ac <__libc_init_array+0x40>)
 801597e:	4c0c      	ldr	r4, [pc, #48]	@ (80159b0 <__libc_init_array+0x44>)
 8015980:	f003 fab4 	bl	8018eec <_init>
 8015984:	1b64      	subs	r4, r4, r5
 8015986:	10a4      	asrs	r4, r4, #2
 8015988:	2600      	movs	r6, #0
 801598a:	42a6      	cmp	r6, r4
 801598c:	d105      	bne.n	801599a <__libc_init_array+0x2e>
 801598e:	bd70      	pop	{r4, r5, r6, pc}
 8015990:	f855 3b04 	ldr.w	r3, [r5], #4
 8015994:	4798      	blx	r3
 8015996:	3601      	adds	r6, #1
 8015998:	e7ee      	b.n	8015978 <__libc_init_array+0xc>
 801599a:	f855 3b04 	ldr.w	r3, [r5], #4
 801599e:	4798      	blx	r3
 80159a0:	3601      	adds	r6, #1
 80159a2:	e7f2      	b.n	801598a <__libc_init_array+0x1e>
 80159a4:	08019a4c 	.word	0x08019a4c
 80159a8:	08019a4c 	.word	0x08019a4c
 80159ac:	08019a4c 	.word	0x08019a4c
 80159b0:	08019a50 	.word	0x08019a50

080159b4 <__retarget_lock_init_recursive>:
 80159b4:	4770      	bx	lr

080159b6 <__retarget_lock_acquire_recursive>:
 80159b6:	4770      	bx	lr

080159b8 <__retarget_lock_release_recursive>:
 80159b8:	4770      	bx	lr

080159ba <memcpy>:
 80159ba:	440a      	add	r2, r1
 80159bc:	4291      	cmp	r1, r2
 80159be:	f100 33ff 	add.w	r3, r0, #4294967295
 80159c2:	d100      	bne.n	80159c6 <memcpy+0xc>
 80159c4:	4770      	bx	lr
 80159c6:	b510      	push	{r4, lr}
 80159c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80159d0:	4291      	cmp	r1, r2
 80159d2:	d1f9      	bne.n	80159c8 <memcpy+0xe>
 80159d4:	bd10      	pop	{r4, pc}
	...

080159d8 <nanf>:
 80159d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80159e0 <nanf+0x8>
 80159dc:	4770      	bx	lr
 80159de:	bf00      	nop
 80159e0:	7fc00000 	.word	0x7fc00000

080159e4 <quorem>:
 80159e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159e8:	6903      	ldr	r3, [r0, #16]
 80159ea:	690c      	ldr	r4, [r1, #16]
 80159ec:	42a3      	cmp	r3, r4
 80159ee:	4607      	mov	r7, r0
 80159f0:	db7e      	blt.n	8015af0 <quorem+0x10c>
 80159f2:	3c01      	subs	r4, #1
 80159f4:	f101 0814 	add.w	r8, r1, #20
 80159f8:	00a3      	lsls	r3, r4, #2
 80159fa:	f100 0514 	add.w	r5, r0, #20
 80159fe:	9300      	str	r3, [sp, #0]
 8015a00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015a04:	9301      	str	r3, [sp, #4]
 8015a06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015a0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015a0e:	3301      	adds	r3, #1
 8015a10:	429a      	cmp	r2, r3
 8015a12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015a16:	fbb2 f6f3 	udiv	r6, r2, r3
 8015a1a:	d32e      	bcc.n	8015a7a <quorem+0x96>
 8015a1c:	f04f 0a00 	mov.w	sl, #0
 8015a20:	46c4      	mov	ip, r8
 8015a22:	46ae      	mov	lr, r5
 8015a24:	46d3      	mov	fp, sl
 8015a26:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015a2a:	b298      	uxth	r0, r3
 8015a2c:	fb06 a000 	mla	r0, r6, r0, sl
 8015a30:	0c02      	lsrs	r2, r0, #16
 8015a32:	0c1b      	lsrs	r3, r3, #16
 8015a34:	fb06 2303 	mla	r3, r6, r3, r2
 8015a38:	f8de 2000 	ldr.w	r2, [lr]
 8015a3c:	b280      	uxth	r0, r0
 8015a3e:	b292      	uxth	r2, r2
 8015a40:	1a12      	subs	r2, r2, r0
 8015a42:	445a      	add	r2, fp
 8015a44:	f8de 0000 	ldr.w	r0, [lr]
 8015a48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015a52:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015a56:	b292      	uxth	r2, r2
 8015a58:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015a5c:	45e1      	cmp	r9, ip
 8015a5e:	f84e 2b04 	str.w	r2, [lr], #4
 8015a62:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015a66:	d2de      	bcs.n	8015a26 <quorem+0x42>
 8015a68:	9b00      	ldr	r3, [sp, #0]
 8015a6a:	58eb      	ldr	r3, [r5, r3]
 8015a6c:	b92b      	cbnz	r3, 8015a7a <quorem+0x96>
 8015a6e:	9b01      	ldr	r3, [sp, #4]
 8015a70:	3b04      	subs	r3, #4
 8015a72:	429d      	cmp	r5, r3
 8015a74:	461a      	mov	r2, r3
 8015a76:	d32f      	bcc.n	8015ad8 <quorem+0xf4>
 8015a78:	613c      	str	r4, [r7, #16]
 8015a7a:	4638      	mov	r0, r7
 8015a7c:	f001 f956 	bl	8016d2c <__mcmp>
 8015a80:	2800      	cmp	r0, #0
 8015a82:	db25      	blt.n	8015ad0 <quorem+0xec>
 8015a84:	4629      	mov	r1, r5
 8015a86:	2000      	movs	r0, #0
 8015a88:	f858 2b04 	ldr.w	r2, [r8], #4
 8015a8c:	f8d1 c000 	ldr.w	ip, [r1]
 8015a90:	fa1f fe82 	uxth.w	lr, r2
 8015a94:	fa1f f38c 	uxth.w	r3, ip
 8015a98:	eba3 030e 	sub.w	r3, r3, lr
 8015a9c:	4403      	add	r3, r0
 8015a9e:	0c12      	lsrs	r2, r2, #16
 8015aa0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015aa4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015aa8:	b29b      	uxth	r3, r3
 8015aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015aae:	45c1      	cmp	r9, r8
 8015ab0:	f841 3b04 	str.w	r3, [r1], #4
 8015ab4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015ab8:	d2e6      	bcs.n	8015a88 <quorem+0xa4>
 8015aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015ac2:	b922      	cbnz	r2, 8015ace <quorem+0xea>
 8015ac4:	3b04      	subs	r3, #4
 8015ac6:	429d      	cmp	r5, r3
 8015ac8:	461a      	mov	r2, r3
 8015aca:	d30b      	bcc.n	8015ae4 <quorem+0x100>
 8015acc:	613c      	str	r4, [r7, #16]
 8015ace:	3601      	adds	r6, #1
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	b003      	add	sp, #12
 8015ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad8:	6812      	ldr	r2, [r2, #0]
 8015ada:	3b04      	subs	r3, #4
 8015adc:	2a00      	cmp	r2, #0
 8015ade:	d1cb      	bne.n	8015a78 <quorem+0x94>
 8015ae0:	3c01      	subs	r4, #1
 8015ae2:	e7c6      	b.n	8015a72 <quorem+0x8e>
 8015ae4:	6812      	ldr	r2, [r2, #0]
 8015ae6:	3b04      	subs	r3, #4
 8015ae8:	2a00      	cmp	r2, #0
 8015aea:	d1ef      	bne.n	8015acc <quorem+0xe8>
 8015aec:	3c01      	subs	r4, #1
 8015aee:	e7ea      	b.n	8015ac6 <quorem+0xe2>
 8015af0:	2000      	movs	r0, #0
 8015af2:	e7ee      	b.n	8015ad2 <quorem+0xee>
 8015af4:	0000      	movs	r0, r0
	...

08015af8 <_dtoa_r>:
 8015af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015afc:	ed2d 8b02 	vpush	{d8}
 8015b00:	69c7      	ldr	r7, [r0, #28]
 8015b02:	b091      	sub	sp, #68	@ 0x44
 8015b04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015b08:	ec55 4b10 	vmov	r4, r5, d0
 8015b0c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8015b0e:	9107      	str	r1, [sp, #28]
 8015b10:	4681      	mov	r9, r0
 8015b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b14:	930d      	str	r3, [sp, #52]	@ 0x34
 8015b16:	b97f      	cbnz	r7, 8015b38 <_dtoa_r+0x40>
 8015b18:	2010      	movs	r0, #16
 8015b1a:	f000 fd95 	bl	8016648 <malloc>
 8015b1e:	4602      	mov	r2, r0
 8015b20:	f8c9 001c 	str.w	r0, [r9, #28]
 8015b24:	b920      	cbnz	r0, 8015b30 <_dtoa_r+0x38>
 8015b26:	4ba0      	ldr	r3, [pc, #640]	@ (8015da8 <_dtoa_r+0x2b0>)
 8015b28:	21ef      	movs	r1, #239	@ 0xef
 8015b2a:	48a0      	ldr	r0, [pc, #640]	@ (8015dac <_dtoa_r+0x2b4>)
 8015b2c:	f002 fbec 	bl	8018308 <__assert_func>
 8015b30:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015b34:	6007      	str	r7, [r0, #0]
 8015b36:	60c7      	str	r7, [r0, #12]
 8015b38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015b3c:	6819      	ldr	r1, [r3, #0]
 8015b3e:	b159      	cbz	r1, 8015b58 <_dtoa_r+0x60>
 8015b40:	685a      	ldr	r2, [r3, #4]
 8015b42:	604a      	str	r2, [r1, #4]
 8015b44:	2301      	movs	r3, #1
 8015b46:	4093      	lsls	r3, r2
 8015b48:	608b      	str	r3, [r1, #8]
 8015b4a:	4648      	mov	r0, r9
 8015b4c:	f000 fe72 	bl	8016834 <_Bfree>
 8015b50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015b54:	2200      	movs	r2, #0
 8015b56:	601a      	str	r2, [r3, #0]
 8015b58:	1e2b      	subs	r3, r5, #0
 8015b5a:	bfbb      	ittet	lt
 8015b5c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015b60:	9303      	strlt	r3, [sp, #12]
 8015b62:	2300      	movge	r3, #0
 8015b64:	2201      	movlt	r2, #1
 8015b66:	bfac      	ite	ge
 8015b68:	6033      	strge	r3, [r6, #0]
 8015b6a:	6032      	strlt	r2, [r6, #0]
 8015b6c:	4b90      	ldr	r3, [pc, #576]	@ (8015db0 <_dtoa_r+0x2b8>)
 8015b6e:	9e03      	ldr	r6, [sp, #12]
 8015b70:	43b3      	bics	r3, r6
 8015b72:	d110      	bne.n	8015b96 <_dtoa_r+0x9e>
 8015b74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015b76:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015b7a:	6013      	str	r3, [r2, #0]
 8015b7c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8015b80:	4323      	orrs	r3, r4
 8015b82:	f000 84e6 	beq.w	8016552 <_dtoa_r+0xa5a>
 8015b86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015b88:	4f8a      	ldr	r7, [pc, #552]	@ (8015db4 <_dtoa_r+0x2bc>)
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	f000 84e8 	beq.w	8016560 <_dtoa_r+0xa68>
 8015b90:	1cfb      	adds	r3, r7, #3
 8015b92:	f000 bce3 	b.w	801655c <_dtoa_r+0xa64>
 8015b96:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015b9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ba2:	d10a      	bne.n	8015bba <_dtoa_r+0xc2>
 8015ba4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015ba6:	2301      	movs	r3, #1
 8015ba8:	6013      	str	r3, [r2, #0]
 8015baa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015bac:	b113      	cbz	r3, 8015bb4 <_dtoa_r+0xbc>
 8015bae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8015bb0:	4b81      	ldr	r3, [pc, #516]	@ (8015db8 <_dtoa_r+0x2c0>)
 8015bb2:	6013      	str	r3, [r2, #0]
 8015bb4:	4f81      	ldr	r7, [pc, #516]	@ (8015dbc <_dtoa_r+0x2c4>)
 8015bb6:	f000 bcd3 	b.w	8016560 <_dtoa_r+0xa68>
 8015bba:	aa0e      	add	r2, sp, #56	@ 0x38
 8015bbc:	a90f      	add	r1, sp, #60	@ 0x3c
 8015bbe:	4648      	mov	r0, r9
 8015bc0:	eeb0 0b48 	vmov.f64	d0, d8
 8015bc4:	f001 f9d2 	bl	8016f6c <__d2b>
 8015bc8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8015bcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015bce:	9001      	str	r0, [sp, #4]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d045      	beq.n	8015c60 <_dtoa_r+0x168>
 8015bd4:	eeb0 7b48 	vmov.f64	d7, d8
 8015bd8:	ee18 1a90 	vmov	r1, s17
 8015bdc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015be0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8015be4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8015be8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8015bec:	2500      	movs	r5, #0
 8015bee:	ee07 1a90 	vmov	s15, r1
 8015bf2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8015bf6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015d90 <_dtoa_r+0x298>
 8015bfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015bfe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015d98 <_dtoa_r+0x2a0>
 8015c02:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015c06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015da0 <_dtoa_r+0x2a8>
 8015c0a:	ee07 3a90 	vmov	s15, r3
 8015c0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015c12:	eeb0 7b46 	vmov.f64	d7, d6
 8015c16:	eea4 7b05 	vfma.f64	d7, d4, d5
 8015c1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015c1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c26:	ee16 8a90 	vmov	r8, s13
 8015c2a:	d508      	bpl.n	8015c3e <_dtoa_r+0x146>
 8015c2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015c30:	eeb4 6b47 	vcmp.f64	d6, d7
 8015c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c38:	bf18      	it	ne
 8015c3a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8015c3e:	f1b8 0f16 	cmp.w	r8, #22
 8015c42:	d82b      	bhi.n	8015c9c <_dtoa_r+0x1a4>
 8015c44:	495e      	ldr	r1, [pc, #376]	@ (8015dc0 <_dtoa_r+0x2c8>)
 8015c46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8015c4a:	ed91 7b00 	vldr	d7, [r1]
 8015c4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c56:	d501      	bpl.n	8015c5c <_dtoa_r+0x164>
 8015c58:	f108 38ff 	add.w	r8, r8, #4294967295
 8015c5c:	2100      	movs	r1, #0
 8015c5e:	e01e      	b.n	8015c9e <_dtoa_r+0x1a6>
 8015c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c62:	4413      	add	r3, r2
 8015c64:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8015c68:	2920      	cmp	r1, #32
 8015c6a:	bfc1      	itttt	gt
 8015c6c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8015c70:	408e      	lslgt	r6, r1
 8015c72:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8015c76:	fa24 f101 	lsrgt.w	r1, r4, r1
 8015c7a:	bfd6      	itet	le
 8015c7c:	f1c1 0120 	rsble	r1, r1, #32
 8015c80:	4331      	orrgt	r1, r6
 8015c82:	fa04 f101 	lslle.w	r1, r4, r1
 8015c86:	ee07 1a90 	vmov	s15, r1
 8015c8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015c8e:	3b01      	subs	r3, #1
 8015c90:	ee17 1a90 	vmov	r1, s15
 8015c94:	2501      	movs	r5, #1
 8015c96:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8015c9a:	e7a8      	b.n	8015bee <_dtoa_r+0xf6>
 8015c9c:	2101      	movs	r1, #1
 8015c9e:	1ad2      	subs	r2, r2, r3
 8015ca0:	1e53      	subs	r3, r2, #1
 8015ca2:	9306      	str	r3, [sp, #24]
 8015ca4:	bf45      	ittet	mi
 8015ca6:	f1c2 0301 	rsbmi	r3, r2, #1
 8015caa:	9304      	strmi	r3, [sp, #16]
 8015cac:	2300      	movpl	r3, #0
 8015cae:	2300      	movmi	r3, #0
 8015cb0:	bf4c      	ite	mi
 8015cb2:	9306      	strmi	r3, [sp, #24]
 8015cb4:	9304      	strpl	r3, [sp, #16]
 8015cb6:	f1b8 0f00 	cmp.w	r8, #0
 8015cba:	910c      	str	r1, [sp, #48]	@ 0x30
 8015cbc:	db18      	blt.n	8015cf0 <_dtoa_r+0x1f8>
 8015cbe:	9b06      	ldr	r3, [sp, #24]
 8015cc0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8015cc4:	4443      	add	r3, r8
 8015cc6:	9306      	str	r3, [sp, #24]
 8015cc8:	2300      	movs	r3, #0
 8015cca:	9a07      	ldr	r2, [sp, #28]
 8015ccc:	2a09      	cmp	r2, #9
 8015cce:	d845      	bhi.n	8015d5c <_dtoa_r+0x264>
 8015cd0:	2a05      	cmp	r2, #5
 8015cd2:	bfc4      	itt	gt
 8015cd4:	3a04      	subgt	r2, #4
 8015cd6:	9207      	strgt	r2, [sp, #28]
 8015cd8:	9a07      	ldr	r2, [sp, #28]
 8015cda:	f1a2 0202 	sub.w	r2, r2, #2
 8015cde:	bfcc      	ite	gt
 8015ce0:	2400      	movgt	r4, #0
 8015ce2:	2401      	movle	r4, #1
 8015ce4:	2a03      	cmp	r2, #3
 8015ce6:	d844      	bhi.n	8015d72 <_dtoa_r+0x27a>
 8015ce8:	e8df f002 	tbb	[pc, r2]
 8015cec:	0b173634 	.word	0x0b173634
 8015cf0:	9b04      	ldr	r3, [sp, #16]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	eba3 0308 	sub.w	r3, r3, r8
 8015cf8:	9304      	str	r3, [sp, #16]
 8015cfa:	920a      	str	r2, [sp, #40]	@ 0x28
 8015cfc:	f1c8 0300 	rsb	r3, r8, #0
 8015d00:	e7e3      	b.n	8015cca <_dtoa_r+0x1d2>
 8015d02:	2201      	movs	r2, #1
 8015d04:	9208      	str	r2, [sp, #32]
 8015d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d08:	eb08 0b02 	add.w	fp, r8, r2
 8015d0c:	f10b 0a01 	add.w	sl, fp, #1
 8015d10:	4652      	mov	r2, sl
 8015d12:	2a01      	cmp	r2, #1
 8015d14:	bfb8      	it	lt
 8015d16:	2201      	movlt	r2, #1
 8015d18:	e006      	b.n	8015d28 <_dtoa_r+0x230>
 8015d1a:	2201      	movs	r2, #1
 8015d1c:	9208      	str	r2, [sp, #32]
 8015d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d20:	2a00      	cmp	r2, #0
 8015d22:	dd29      	ble.n	8015d78 <_dtoa_r+0x280>
 8015d24:	4693      	mov	fp, r2
 8015d26:	4692      	mov	sl, r2
 8015d28:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8015d2c:	2100      	movs	r1, #0
 8015d2e:	2004      	movs	r0, #4
 8015d30:	f100 0614 	add.w	r6, r0, #20
 8015d34:	4296      	cmp	r6, r2
 8015d36:	d926      	bls.n	8015d86 <_dtoa_r+0x28e>
 8015d38:	6079      	str	r1, [r7, #4]
 8015d3a:	4648      	mov	r0, r9
 8015d3c:	9305      	str	r3, [sp, #20]
 8015d3e:	f000 fd39 	bl	80167b4 <_Balloc>
 8015d42:	9b05      	ldr	r3, [sp, #20]
 8015d44:	4607      	mov	r7, r0
 8015d46:	2800      	cmp	r0, #0
 8015d48:	d13e      	bne.n	8015dc8 <_dtoa_r+0x2d0>
 8015d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8015dc4 <_dtoa_r+0x2cc>)
 8015d4c:	4602      	mov	r2, r0
 8015d4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015d52:	e6ea      	b.n	8015b2a <_dtoa_r+0x32>
 8015d54:	2200      	movs	r2, #0
 8015d56:	e7e1      	b.n	8015d1c <_dtoa_r+0x224>
 8015d58:	2200      	movs	r2, #0
 8015d5a:	e7d3      	b.n	8015d04 <_dtoa_r+0x20c>
 8015d5c:	2401      	movs	r4, #1
 8015d5e:	2200      	movs	r2, #0
 8015d60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8015d64:	f04f 3bff 	mov.w	fp, #4294967295
 8015d68:	2100      	movs	r1, #0
 8015d6a:	46da      	mov	sl, fp
 8015d6c:	2212      	movs	r2, #18
 8015d6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8015d70:	e7da      	b.n	8015d28 <_dtoa_r+0x230>
 8015d72:	2201      	movs	r2, #1
 8015d74:	9208      	str	r2, [sp, #32]
 8015d76:	e7f5      	b.n	8015d64 <_dtoa_r+0x26c>
 8015d78:	f04f 0b01 	mov.w	fp, #1
 8015d7c:	46da      	mov	sl, fp
 8015d7e:	465a      	mov	r2, fp
 8015d80:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015d84:	e7d0      	b.n	8015d28 <_dtoa_r+0x230>
 8015d86:	3101      	adds	r1, #1
 8015d88:	0040      	lsls	r0, r0, #1
 8015d8a:	e7d1      	b.n	8015d30 <_dtoa_r+0x238>
 8015d8c:	f3af 8000 	nop.w
 8015d90:	636f4361 	.word	0x636f4361
 8015d94:	3fd287a7 	.word	0x3fd287a7
 8015d98:	8b60c8b3 	.word	0x8b60c8b3
 8015d9c:	3fc68a28 	.word	0x3fc68a28
 8015da0:	509f79fb 	.word	0x509f79fb
 8015da4:	3fd34413 	.word	0x3fd34413
 8015da8:	0801965e 	.word	0x0801965e
 8015dac:	08019675 	.word	0x08019675
 8015db0:	7ff00000 	.word	0x7ff00000
 8015db4:	0801965a 	.word	0x0801965a
 8015db8:	08019629 	.word	0x08019629
 8015dbc:	08019628 	.word	0x08019628
 8015dc0:	08019828 	.word	0x08019828
 8015dc4:	080196cd 	.word	0x080196cd
 8015dc8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8015dcc:	f1ba 0f0e 	cmp.w	sl, #14
 8015dd0:	6010      	str	r0, [r2, #0]
 8015dd2:	d86e      	bhi.n	8015eb2 <_dtoa_r+0x3ba>
 8015dd4:	2c00      	cmp	r4, #0
 8015dd6:	d06c      	beq.n	8015eb2 <_dtoa_r+0x3ba>
 8015dd8:	f1b8 0f00 	cmp.w	r8, #0
 8015ddc:	f340 80b4 	ble.w	8015f48 <_dtoa_r+0x450>
 8015de0:	4ac8      	ldr	r2, [pc, #800]	@ (8016104 <_dtoa_r+0x60c>)
 8015de2:	f008 010f 	and.w	r1, r8, #15
 8015de6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015dea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8015dee:	ed92 7b00 	vldr	d7, [r2]
 8015df2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8015df6:	f000 809b 	beq.w	8015f30 <_dtoa_r+0x438>
 8015dfa:	4ac3      	ldr	r2, [pc, #780]	@ (8016108 <_dtoa_r+0x610>)
 8015dfc:	ed92 6b08 	vldr	d6, [r2, #32]
 8015e00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015e04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015e08:	f001 010f 	and.w	r1, r1, #15
 8015e0c:	2203      	movs	r2, #3
 8015e0e:	48be      	ldr	r0, [pc, #760]	@ (8016108 <_dtoa_r+0x610>)
 8015e10:	2900      	cmp	r1, #0
 8015e12:	f040 808f 	bne.w	8015f34 <_dtoa_r+0x43c>
 8015e16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015e1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015e1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015e22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015e24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e28:	2900      	cmp	r1, #0
 8015e2a:	f000 80b3 	beq.w	8015f94 <_dtoa_r+0x49c>
 8015e2e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015e32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3a:	f140 80ab 	bpl.w	8015f94 <_dtoa_r+0x49c>
 8015e3e:	f1ba 0f00 	cmp.w	sl, #0
 8015e42:	f000 80a7 	beq.w	8015f94 <_dtoa_r+0x49c>
 8015e46:	f1bb 0f00 	cmp.w	fp, #0
 8015e4a:	dd30      	ble.n	8015eae <_dtoa_r+0x3b6>
 8015e4c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015e58:	f108 31ff 	add.w	r1, r8, #4294967295
 8015e5c:	9105      	str	r1, [sp, #20]
 8015e5e:	3201      	adds	r2, #1
 8015e60:	465c      	mov	r4, fp
 8015e62:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015e66:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8015e6a:	ee07 2a90 	vmov	s15, r2
 8015e6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015e72:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015e76:	ee15 2a90 	vmov	r2, s11
 8015e7a:	ec51 0b15 	vmov	r0, r1, d5
 8015e7e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8015e82:	2c00      	cmp	r4, #0
 8015e84:	f040 808a 	bne.w	8015f9c <_dtoa_r+0x4a4>
 8015e88:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8015e8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015e90:	ec41 0b17 	vmov	d7, r0, r1
 8015e94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9c:	f300 826a 	bgt.w	8016374 <_dtoa_r+0x87c>
 8015ea0:	eeb1 7b47 	vneg.f64	d7, d7
 8015ea4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eac:	d423      	bmi.n	8015ef6 <_dtoa_r+0x3fe>
 8015eae:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015eb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015eb4:	2a00      	cmp	r2, #0
 8015eb6:	f2c0 8129 	blt.w	801610c <_dtoa_r+0x614>
 8015eba:	f1b8 0f0e 	cmp.w	r8, #14
 8015ebe:	f300 8125 	bgt.w	801610c <_dtoa_r+0x614>
 8015ec2:	4b90      	ldr	r3, [pc, #576]	@ (8016104 <_dtoa_r+0x60c>)
 8015ec4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015ec8:	ed93 6b00 	vldr	d6, [r3]
 8015ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	f280 80c8 	bge.w	8016064 <_dtoa_r+0x56c>
 8015ed4:	f1ba 0f00 	cmp.w	sl, #0
 8015ed8:	f300 80c4 	bgt.w	8016064 <_dtoa_r+0x56c>
 8015edc:	d10b      	bne.n	8015ef6 <_dtoa_r+0x3fe>
 8015ede:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8015ee2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015ee6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015eea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef2:	f2c0 823c 	blt.w	801636e <_dtoa_r+0x876>
 8015ef6:	2400      	movs	r4, #0
 8015ef8:	4625      	mov	r5, r4
 8015efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015efc:	43db      	mvns	r3, r3
 8015efe:	9305      	str	r3, [sp, #20]
 8015f00:	463e      	mov	r6, r7
 8015f02:	f04f 0800 	mov.w	r8, #0
 8015f06:	4621      	mov	r1, r4
 8015f08:	4648      	mov	r0, r9
 8015f0a:	f000 fc93 	bl	8016834 <_Bfree>
 8015f0e:	2d00      	cmp	r5, #0
 8015f10:	f000 80a2 	beq.w	8016058 <_dtoa_r+0x560>
 8015f14:	f1b8 0f00 	cmp.w	r8, #0
 8015f18:	d005      	beq.n	8015f26 <_dtoa_r+0x42e>
 8015f1a:	45a8      	cmp	r8, r5
 8015f1c:	d003      	beq.n	8015f26 <_dtoa_r+0x42e>
 8015f1e:	4641      	mov	r1, r8
 8015f20:	4648      	mov	r0, r9
 8015f22:	f000 fc87 	bl	8016834 <_Bfree>
 8015f26:	4629      	mov	r1, r5
 8015f28:	4648      	mov	r0, r9
 8015f2a:	f000 fc83 	bl	8016834 <_Bfree>
 8015f2e:	e093      	b.n	8016058 <_dtoa_r+0x560>
 8015f30:	2202      	movs	r2, #2
 8015f32:	e76c      	b.n	8015e0e <_dtoa_r+0x316>
 8015f34:	07cc      	lsls	r4, r1, #31
 8015f36:	d504      	bpl.n	8015f42 <_dtoa_r+0x44a>
 8015f38:	ed90 6b00 	vldr	d6, [r0]
 8015f3c:	3201      	adds	r2, #1
 8015f3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f42:	1049      	asrs	r1, r1, #1
 8015f44:	3008      	adds	r0, #8
 8015f46:	e763      	b.n	8015e10 <_dtoa_r+0x318>
 8015f48:	d022      	beq.n	8015f90 <_dtoa_r+0x498>
 8015f4a:	f1c8 0100 	rsb	r1, r8, #0
 8015f4e:	4a6d      	ldr	r2, [pc, #436]	@ (8016104 <_dtoa_r+0x60c>)
 8015f50:	f001 000f 	and.w	r0, r1, #15
 8015f54:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015f58:	ed92 7b00 	vldr	d7, [r2]
 8015f5c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015f60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015f64:	4868      	ldr	r0, [pc, #416]	@ (8016108 <_dtoa_r+0x610>)
 8015f66:	1109      	asrs	r1, r1, #4
 8015f68:	2400      	movs	r4, #0
 8015f6a:	2202      	movs	r2, #2
 8015f6c:	b929      	cbnz	r1, 8015f7a <_dtoa_r+0x482>
 8015f6e:	2c00      	cmp	r4, #0
 8015f70:	f43f af57 	beq.w	8015e22 <_dtoa_r+0x32a>
 8015f74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015f78:	e753      	b.n	8015e22 <_dtoa_r+0x32a>
 8015f7a:	07ce      	lsls	r6, r1, #31
 8015f7c:	d505      	bpl.n	8015f8a <_dtoa_r+0x492>
 8015f7e:	ed90 6b00 	vldr	d6, [r0]
 8015f82:	3201      	adds	r2, #1
 8015f84:	2401      	movs	r4, #1
 8015f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f8a:	1049      	asrs	r1, r1, #1
 8015f8c:	3008      	adds	r0, #8
 8015f8e:	e7ed      	b.n	8015f6c <_dtoa_r+0x474>
 8015f90:	2202      	movs	r2, #2
 8015f92:	e746      	b.n	8015e22 <_dtoa_r+0x32a>
 8015f94:	f8cd 8014 	str.w	r8, [sp, #20]
 8015f98:	4654      	mov	r4, sl
 8015f9a:	e762      	b.n	8015e62 <_dtoa_r+0x36a>
 8015f9c:	4a59      	ldr	r2, [pc, #356]	@ (8016104 <_dtoa_r+0x60c>)
 8015f9e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8015fa2:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015fa6:	9a08      	ldr	r2, [sp, #32]
 8015fa8:	ec41 0b17 	vmov	d7, r0, r1
 8015fac:	443c      	add	r4, r7
 8015fae:	b34a      	cbz	r2, 8016004 <_dtoa_r+0x50c>
 8015fb0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8015fb4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8015fb8:	463e      	mov	r6, r7
 8015fba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015fbe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015fc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015fc6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015fca:	ee14 2a90 	vmov	r2, s9
 8015fce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015fd2:	3230      	adds	r2, #48	@ 0x30
 8015fd4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015fd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe0:	f806 2b01 	strb.w	r2, [r6], #1
 8015fe4:	d438      	bmi.n	8016058 <_dtoa_r+0x560>
 8015fe6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015fea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff2:	d46e      	bmi.n	80160d2 <_dtoa_r+0x5da>
 8015ff4:	42a6      	cmp	r6, r4
 8015ff6:	f43f af5a 	beq.w	8015eae <_dtoa_r+0x3b6>
 8015ffa:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015ffe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016002:	e7e0      	b.n	8015fc6 <_dtoa_r+0x4ce>
 8016004:	4621      	mov	r1, r4
 8016006:	463e      	mov	r6, r7
 8016008:	ee27 7b04 	vmul.f64	d7, d7, d4
 801600c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016010:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016014:	ee14 2a90 	vmov	r2, s9
 8016018:	3230      	adds	r2, #48	@ 0x30
 801601a:	f806 2b01 	strb.w	r2, [r6], #1
 801601e:	42a6      	cmp	r6, r4
 8016020:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016024:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016028:	d119      	bne.n	801605e <_dtoa_r+0x566>
 801602a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801602e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016032:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801603a:	dc4a      	bgt.n	80160d2 <_dtoa_r+0x5da>
 801603c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016040:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016048:	f57f af31 	bpl.w	8015eae <_dtoa_r+0x3b6>
 801604c:	460e      	mov	r6, r1
 801604e:	3901      	subs	r1, #1
 8016050:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016054:	2b30      	cmp	r3, #48	@ 0x30
 8016056:	d0f9      	beq.n	801604c <_dtoa_r+0x554>
 8016058:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801605c:	e027      	b.n	80160ae <_dtoa_r+0x5b6>
 801605e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016062:	e7d5      	b.n	8016010 <_dtoa_r+0x518>
 8016064:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016068:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801606c:	463e      	mov	r6, r7
 801606e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8016072:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016076:	ee15 3a10 	vmov	r3, s10
 801607a:	3330      	adds	r3, #48	@ 0x30
 801607c:	f806 3b01 	strb.w	r3, [r6], #1
 8016080:	1bf3      	subs	r3, r6, r7
 8016082:	459a      	cmp	sl, r3
 8016084:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016088:	eea3 7b46 	vfms.f64	d7, d3, d6
 801608c:	d132      	bne.n	80160f4 <_dtoa_r+0x5fc>
 801608e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016092:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801609a:	dc18      	bgt.n	80160ce <_dtoa_r+0x5d6>
 801609c:	eeb4 7b46 	vcmp.f64	d7, d6
 80160a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a4:	d103      	bne.n	80160ae <_dtoa_r+0x5b6>
 80160a6:	ee15 3a10 	vmov	r3, s10
 80160aa:	07db      	lsls	r3, r3, #31
 80160ac:	d40f      	bmi.n	80160ce <_dtoa_r+0x5d6>
 80160ae:	9901      	ldr	r1, [sp, #4]
 80160b0:	4648      	mov	r0, r9
 80160b2:	f000 fbbf 	bl	8016834 <_Bfree>
 80160b6:	2300      	movs	r3, #0
 80160b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80160ba:	7033      	strb	r3, [r6, #0]
 80160bc:	f108 0301 	add.w	r3, r8, #1
 80160c0:	6013      	str	r3, [r2, #0]
 80160c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	f000 824b 	beq.w	8016560 <_dtoa_r+0xa68>
 80160ca:	601e      	str	r6, [r3, #0]
 80160cc:	e248      	b.n	8016560 <_dtoa_r+0xa68>
 80160ce:	f8cd 8014 	str.w	r8, [sp, #20]
 80160d2:	4633      	mov	r3, r6
 80160d4:	461e      	mov	r6, r3
 80160d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80160da:	2a39      	cmp	r2, #57	@ 0x39
 80160dc:	d106      	bne.n	80160ec <_dtoa_r+0x5f4>
 80160de:	429f      	cmp	r7, r3
 80160e0:	d1f8      	bne.n	80160d4 <_dtoa_r+0x5dc>
 80160e2:	9a05      	ldr	r2, [sp, #20]
 80160e4:	3201      	adds	r2, #1
 80160e6:	9205      	str	r2, [sp, #20]
 80160e8:	2230      	movs	r2, #48	@ 0x30
 80160ea:	703a      	strb	r2, [r7, #0]
 80160ec:	781a      	ldrb	r2, [r3, #0]
 80160ee:	3201      	adds	r2, #1
 80160f0:	701a      	strb	r2, [r3, #0]
 80160f2:	e7b1      	b.n	8016058 <_dtoa_r+0x560>
 80160f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80160f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80160fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016100:	d1b5      	bne.n	801606e <_dtoa_r+0x576>
 8016102:	e7d4      	b.n	80160ae <_dtoa_r+0x5b6>
 8016104:	08019828 	.word	0x08019828
 8016108:	08019800 	.word	0x08019800
 801610c:	9908      	ldr	r1, [sp, #32]
 801610e:	2900      	cmp	r1, #0
 8016110:	f000 80e9 	beq.w	80162e6 <_dtoa_r+0x7ee>
 8016114:	9907      	ldr	r1, [sp, #28]
 8016116:	2901      	cmp	r1, #1
 8016118:	f300 80cb 	bgt.w	80162b2 <_dtoa_r+0x7ba>
 801611c:	2d00      	cmp	r5, #0
 801611e:	f000 80c4 	beq.w	80162aa <_dtoa_r+0x7b2>
 8016122:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016126:	9e04      	ldr	r6, [sp, #16]
 8016128:	461c      	mov	r4, r3
 801612a:	9305      	str	r3, [sp, #20]
 801612c:	9b04      	ldr	r3, [sp, #16]
 801612e:	4413      	add	r3, r2
 8016130:	9304      	str	r3, [sp, #16]
 8016132:	9b06      	ldr	r3, [sp, #24]
 8016134:	2101      	movs	r1, #1
 8016136:	4413      	add	r3, r2
 8016138:	4648      	mov	r0, r9
 801613a:	9306      	str	r3, [sp, #24]
 801613c:	f000 fc78 	bl	8016a30 <__i2b>
 8016140:	9b05      	ldr	r3, [sp, #20]
 8016142:	4605      	mov	r5, r0
 8016144:	b166      	cbz	r6, 8016160 <_dtoa_r+0x668>
 8016146:	9a06      	ldr	r2, [sp, #24]
 8016148:	2a00      	cmp	r2, #0
 801614a:	dd09      	ble.n	8016160 <_dtoa_r+0x668>
 801614c:	42b2      	cmp	r2, r6
 801614e:	9904      	ldr	r1, [sp, #16]
 8016150:	bfa8      	it	ge
 8016152:	4632      	movge	r2, r6
 8016154:	1a89      	subs	r1, r1, r2
 8016156:	9104      	str	r1, [sp, #16]
 8016158:	9906      	ldr	r1, [sp, #24]
 801615a:	1ab6      	subs	r6, r6, r2
 801615c:	1a8a      	subs	r2, r1, r2
 801615e:	9206      	str	r2, [sp, #24]
 8016160:	b30b      	cbz	r3, 80161a6 <_dtoa_r+0x6ae>
 8016162:	9a08      	ldr	r2, [sp, #32]
 8016164:	2a00      	cmp	r2, #0
 8016166:	f000 80c5 	beq.w	80162f4 <_dtoa_r+0x7fc>
 801616a:	2c00      	cmp	r4, #0
 801616c:	f000 80bf 	beq.w	80162ee <_dtoa_r+0x7f6>
 8016170:	4629      	mov	r1, r5
 8016172:	4622      	mov	r2, r4
 8016174:	4648      	mov	r0, r9
 8016176:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016178:	f000 fd12 	bl	8016ba0 <__pow5mult>
 801617c:	9a01      	ldr	r2, [sp, #4]
 801617e:	4601      	mov	r1, r0
 8016180:	4605      	mov	r5, r0
 8016182:	4648      	mov	r0, r9
 8016184:	f000 fc6a 	bl	8016a5c <__multiply>
 8016188:	9901      	ldr	r1, [sp, #4]
 801618a:	9005      	str	r0, [sp, #20]
 801618c:	4648      	mov	r0, r9
 801618e:	f000 fb51 	bl	8016834 <_Bfree>
 8016192:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016194:	1b1b      	subs	r3, r3, r4
 8016196:	f000 80b0 	beq.w	80162fa <_dtoa_r+0x802>
 801619a:	9905      	ldr	r1, [sp, #20]
 801619c:	461a      	mov	r2, r3
 801619e:	4648      	mov	r0, r9
 80161a0:	f000 fcfe 	bl	8016ba0 <__pow5mult>
 80161a4:	9001      	str	r0, [sp, #4]
 80161a6:	2101      	movs	r1, #1
 80161a8:	4648      	mov	r0, r9
 80161aa:	f000 fc41 	bl	8016a30 <__i2b>
 80161ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80161b0:	4604      	mov	r4, r0
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	f000 81da 	beq.w	801656c <_dtoa_r+0xa74>
 80161b8:	461a      	mov	r2, r3
 80161ba:	4601      	mov	r1, r0
 80161bc:	4648      	mov	r0, r9
 80161be:	f000 fcef 	bl	8016ba0 <__pow5mult>
 80161c2:	9b07      	ldr	r3, [sp, #28]
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	4604      	mov	r4, r0
 80161c8:	f300 80a0 	bgt.w	801630c <_dtoa_r+0x814>
 80161cc:	9b02      	ldr	r3, [sp, #8]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	f040 8096 	bne.w	8016300 <_dtoa_r+0x808>
 80161d4:	9b03      	ldr	r3, [sp, #12]
 80161d6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80161da:	2a00      	cmp	r2, #0
 80161dc:	f040 8092 	bne.w	8016304 <_dtoa_r+0x80c>
 80161e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80161e4:	0d12      	lsrs	r2, r2, #20
 80161e6:	0512      	lsls	r2, r2, #20
 80161e8:	2a00      	cmp	r2, #0
 80161ea:	f000 808d 	beq.w	8016308 <_dtoa_r+0x810>
 80161ee:	9b04      	ldr	r3, [sp, #16]
 80161f0:	3301      	adds	r3, #1
 80161f2:	9304      	str	r3, [sp, #16]
 80161f4:	9b06      	ldr	r3, [sp, #24]
 80161f6:	3301      	adds	r3, #1
 80161f8:	9306      	str	r3, [sp, #24]
 80161fa:	2301      	movs	r3, #1
 80161fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80161fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016200:	2b00      	cmp	r3, #0
 8016202:	f000 81b9 	beq.w	8016578 <_dtoa_r+0xa80>
 8016206:	6922      	ldr	r2, [r4, #16]
 8016208:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801620c:	6910      	ldr	r0, [r2, #16]
 801620e:	f000 fbc3 	bl	8016998 <__hi0bits>
 8016212:	f1c0 0020 	rsb	r0, r0, #32
 8016216:	9b06      	ldr	r3, [sp, #24]
 8016218:	4418      	add	r0, r3
 801621a:	f010 001f 	ands.w	r0, r0, #31
 801621e:	f000 8081 	beq.w	8016324 <_dtoa_r+0x82c>
 8016222:	f1c0 0220 	rsb	r2, r0, #32
 8016226:	2a04      	cmp	r2, #4
 8016228:	dd73      	ble.n	8016312 <_dtoa_r+0x81a>
 801622a:	9b04      	ldr	r3, [sp, #16]
 801622c:	f1c0 001c 	rsb	r0, r0, #28
 8016230:	4403      	add	r3, r0
 8016232:	9304      	str	r3, [sp, #16]
 8016234:	9b06      	ldr	r3, [sp, #24]
 8016236:	4406      	add	r6, r0
 8016238:	4403      	add	r3, r0
 801623a:	9306      	str	r3, [sp, #24]
 801623c:	9b04      	ldr	r3, [sp, #16]
 801623e:	2b00      	cmp	r3, #0
 8016240:	dd05      	ble.n	801624e <_dtoa_r+0x756>
 8016242:	9901      	ldr	r1, [sp, #4]
 8016244:	461a      	mov	r2, r3
 8016246:	4648      	mov	r0, r9
 8016248:	f000 fd04 	bl	8016c54 <__lshift>
 801624c:	9001      	str	r0, [sp, #4]
 801624e:	9b06      	ldr	r3, [sp, #24]
 8016250:	2b00      	cmp	r3, #0
 8016252:	dd05      	ble.n	8016260 <_dtoa_r+0x768>
 8016254:	4621      	mov	r1, r4
 8016256:	461a      	mov	r2, r3
 8016258:	4648      	mov	r0, r9
 801625a:	f000 fcfb 	bl	8016c54 <__lshift>
 801625e:	4604      	mov	r4, r0
 8016260:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016262:	2b00      	cmp	r3, #0
 8016264:	d060      	beq.n	8016328 <_dtoa_r+0x830>
 8016266:	9801      	ldr	r0, [sp, #4]
 8016268:	4621      	mov	r1, r4
 801626a:	f000 fd5f 	bl	8016d2c <__mcmp>
 801626e:	2800      	cmp	r0, #0
 8016270:	da5a      	bge.n	8016328 <_dtoa_r+0x830>
 8016272:	f108 33ff 	add.w	r3, r8, #4294967295
 8016276:	9305      	str	r3, [sp, #20]
 8016278:	9901      	ldr	r1, [sp, #4]
 801627a:	2300      	movs	r3, #0
 801627c:	220a      	movs	r2, #10
 801627e:	4648      	mov	r0, r9
 8016280:	f000 fafa 	bl	8016878 <__multadd>
 8016284:	9b08      	ldr	r3, [sp, #32]
 8016286:	9001      	str	r0, [sp, #4]
 8016288:	2b00      	cmp	r3, #0
 801628a:	f000 8177 	beq.w	801657c <_dtoa_r+0xa84>
 801628e:	4629      	mov	r1, r5
 8016290:	2300      	movs	r3, #0
 8016292:	220a      	movs	r2, #10
 8016294:	4648      	mov	r0, r9
 8016296:	f000 faef 	bl	8016878 <__multadd>
 801629a:	f1bb 0f00 	cmp.w	fp, #0
 801629e:	4605      	mov	r5, r0
 80162a0:	dc6e      	bgt.n	8016380 <_dtoa_r+0x888>
 80162a2:	9b07      	ldr	r3, [sp, #28]
 80162a4:	2b02      	cmp	r3, #2
 80162a6:	dc48      	bgt.n	801633a <_dtoa_r+0x842>
 80162a8:	e06a      	b.n	8016380 <_dtoa_r+0x888>
 80162aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80162ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80162b0:	e739      	b.n	8016126 <_dtoa_r+0x62e>
 80162b2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80162b6:	42a3      	cmp	r3, r4
 80162b8:	db07      	blt.n	80162ca <_dtoa_r+0x7d2>
 80162ba:	f1ba 0f00 	cmp.w	sl, #0
 80162be:	eba3 0404 	sub.w	r4, r3, r4
 80162c2:	db0b      	blt.n	80162dc <_dtoa_r+0x7e4>
 80162c4:	9e04      	ldr	r6, [sp, #16]
 80162c6:	4652      	mov	r2, sl
 80162c8:	e72f      	b.n	801612a <_dtoa_r+0x632>
 80162ca:	1ae2      	subs	r2, r4, r3
 80162cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80162ce:	9e04      	ldr	r6, [sp, #16]
 80162d0:	4413      	add	r3, r2
 80162d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80162d4:	4652      	mov	r2, sl
 80162d6:	4623      	mov	r3, r4
 80162d8:	2400      	movs	r4, #0
 80162da:	e726      	b.n	801612a <_dtoa_r+0x632>
 80162dc:	9a04      	ldr	r2, [sp, #16]
 80162de:	eba2 060a 	sub.w	r6, r2, sl
 80162e2:	2200      	movs	r2, #0
 80162e4:	e721      	b.n	801612a <_dtoa_r+0x632>
 80162e6:	9e04      	ldr	r6, [sp, #16]
 80162e8:	9d08      	ldr	r5, [sp, #32]
 80162ea:	461c      	mov	r4, r3
 80162ec:	e72a      	b.n	8016144 <_dtoa_r+0x64c>
 80162ee:	9a01      	ldr	r2, [sp, #4]
 80162f0:	9205      	str	r2, [sp, #20]
 80162f2:	e752      	b.n	801619a <_dtoa_r+0x6a2>
 80162f4:	9901      	ldr	r1, [sp, #4]
 80162f6:	461a      	mov	r2, r3
 80162f8:	e751      	b.n	801619e <_dtoa_r+0x6a6>
 80162fa:	9b05      	ldr	r3, [sp, #20]
 80162fc:	9301      	str	r3, [sp, #4]
 80162fe:	e752      	b.n	80161a6 <_dtoa_r+0x6ae>
 8016300:	2300      	movs	r3, #0
 8016302:	e77b      	b.n	80161fc <_dtoa_r+0x704>
 8016304:	9b02      	ldr	r3, [sp, #8]
 8016306:	e779      	b.n	80161fc <_dtoa_r+0x704>
 8016308:	920b      	str	r2, [sp, #44]	@ 0x2c
 801630a:	e778      	b.n	80161fe <_dtoa_r+0x706>
 801630c:	2300      	movs	r3, #0
 801630e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016310:	e779      	b.n	8016206 <_dtoa_r+0x70e>
 8016312:	d093      	beq.n	801623c <_dtoa_r+0x744>
 8016314:	9b04      	ldr	r3, [sp, #16]
 8016316:	321c      	adds	r2, #28
 8016318:	4413      	add	r3, r2
 801631a:	9304      	str	r3, [sp, #16]
 801631c:	9b06      	ldr	r3, [sp, #24]
 801631e:	4416      	add	r6, r2
 8016320:	4413      	add	r3, r2
 8016322:	e78a      	b.n	801623a <_dtoa_r+0x742>
 8016324:	4602      	mov	r2, r0
 8016326:	e7f5      	b.n	8016314 <_dtoa_r+0x81c>
 8016328:	f1ba 0f00 	cmp.w	sl, #0
 801632c:	f8cd 8014 	str.w	r8, [sp, #20]
 8016330:	46d3      	mov	fp, sl
 8016332:	dc21      	bgt.n	8016378 <_dtoa_r+0x880>
 8016334:	9b07      	ldr	r3, [sp, #28]
 8016336:	2b02      	cmp	r3, #2
 8016338:	dd1e      	ble.n	8016378 <_dtoa_r+0x880>
 801633a:	f1bb 0f00 	cmp.w	fp, #0
 801633e:	f47f addc 	bne.w	8015efa <_dtoa_r+0x402>
 8016342:	4621      	mov	r1, r4
 8016344:	465b      	mov	r3, fp
 8016346:	2205      	movs	r2, #5
 8016348:	4648      	mov	r0, r9
 801634a:	f000 fa95 	bl	8016878 <__multadd>
 801634e:	4601      	mov	r1, r0
 8016350:	4604      	mov	r4, r0
 8016352:	9801      	ldr	r0, [sp, #4]
 8016354:	f000 fcea 	bl	8016d2c <__mcmp>
 8016358:	2800      	cmp	r0, #0
 801635a:	f77f adce 	ble.w	8015efa <_dtoa_r+0x402>
 801635e:	463e      	mov	r6, r7
 8016360:	2331      	movs	r3, #49	@ 0x31
 8016362:	f806 3b01 	strb.w	r3, [r6], #1
 8016366:	9b05      	ldr	r3, [sp, #20]
 8016368:	3301      	adds	r3, #1
 801636a:	9305      	str	r3, [sp, #20]
 801636c:	e5c9      	b.n	8015f02 <_dtoa_r+0x40a>
 801636e:	f8cd 8014 	str.w	r8, [sp, #20]
 8016372:	4654      	mov	r4, sl
 8016374:	4625      	mov	r5, r4
 8016376:	e7f2      	b.n	801635e <_dtoa_r+0x866>
 8016378:	9b08      	ldr	r3, [sp, #32]
 801637a:	2b00      	cmp	r3, #0
 801637c:	f000 8102 	beq.w	8016584 <_dtoa_r+0xa8c>
 8016380:	2e00      	cmp	r6, #0
 8016382:	dd05      	ble.n	8016390 <_dtoa_r+0x898>
 8016384:	4629      	mov	r1, r5
 8016386:	4632      	mov	r2, r6
 8016388:	4648      	mov	r0, r9
 801638a:	f000 fc63 	bl	8016c54 <__lshift>
 801638e:	4605      	mov	r5, r0
 8016390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016392:	2b00      	cmp	r3, #0
 8016394:	d058      	beq.n	8016448 <_dtoa_r+0x950>
 8016396:	6869      	ldr	r1, [r5, #4]
 8016398:	4648      	mov	r0, r9
 801639a:	f000 fa0b 	bl	80167b4 <_Balloc>
 801639e:	4606      	mov	r6, r0
 80163a0:	b928      	cbnz	r0, 80163ae <_dtoa_r+0x8b6>
 80163a2:	4b82      	ldr	r3, [pc, #520]	@ (80165ac <_dtoa_r+0xab4>)
 80163a4:	4602      	mov	r2, r0
 80163a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80163aa:	f7ff bbbe 	b.w	8015b2a <_dtoa_r+0x32>
 80163ae:	692a      	ldr	r2, [r5, #16]
 80163b0:	3202      	adds	r2, #2
 80163b2:	0092      	lsls	r2, r2, #2
 80163b4:	f105 010c 	add.w	r1, r5, #12
 80163b8:	300c      	adds	r0, #12
 80163ba:	f7ff fafe 	bl	80159ba <memcpy>
 80163be:	2201      	movs	r2, #1
 80163c0:	4631      	mov	r1, r6
 80163c2:	4648      	mov	r0, r9
 80163c4:	f000 fc46 	bl	8016c54 <__lshift>
 80163c8:	1c7b      	adds	r3, r7, #1
 80163ca:	9304      	str	r3, [sp, #16]
 80163cc:	eb07 030b 	add.w	r3, r7, fp
 80163d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80163d2:	9b02      	ldr	r3, [sp, #8]
 80163d4:	f003 0301 	and.w	r3, r3, #1
 80163d8:	46a8      	mov	r8, r5
 80163da:	9308      	str	r3, [sp, #32]
 80163dc:	4605      	mov	r5, r0
 80163de:	9b04      	ldr	r3, [sp, #16]
 80163e0:	9801      	ldr	r0, [sp, #4]
 80163e2:	4621      	mov	r1, r4
 80163e4:	f103 3bff 	add.w	fp, r3, #4294967295
 80163e8:	f7ff fafc 	bl	80159e4 <quorem>
 80163ec:	4641      	mov	r1, r8
 80163ee:	9002      	str	r0, [sp, #8]
 80163f0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80163f4:	9801      	ldr	r0, [sp, #4]
 80163f6:	f000 fc99 	bl	8016d2c <__mcmp>
 80163fa:	462a      	mov	r2, r5
 80163fc:	9006      	str	r0, [sp, #24]
 80163fe:	4621      	mov	r1, r4
 8016400:	4648      	mov	r0, r9
 8016402:	f000 fcaf 	bl	8016d64 <__mdiff>
 8016406:	68c2      	ldr	r2, [r0, #12]
 8016408:	4606      	mov	r6, r0
 801640a:	b9fa      	cbnz	r2, 801644c <_dtoa_r+0x954>
 801640c:	4601      	mov	r1, r0
 801640e:	9801      	ldr	r0, [sp, #4]
 8016410:	f000 fc8c 	bl	8016d2c <__mcmp>
 8016414:	4602      	mov	r2, r0
 8016416:	4631      	mov	r1, r6
 8016418:	4648      	mov	r0, r9
 801641a:	920a      	str	r2, [sp, #40]	@ 0x28
 801641c:	f000 fa0a 	bl	8016834 <_Bfree>
 8016420:	9b07      	ldr	r3, [sp, #28]
 8016422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016424:	9e04      	ldr	r6, [sp, #16]
 8016426:	ea42 0103 	orr.w	r1, r2, r3
 801642a:	9b08      	ldr	r3, [sp, #32]
 801642c:	4319      	orrs	r1, r3
 801642e:	d10f      	bne.n	8016450 <_dtoa_r+0x958>
 8016430:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016434:	d028      	beq.n	8016488 <_dtoa_r+0x990>
 8016436:	9b06      	ldr	r3, [sp, #24]
 8016438:	2b00      	cmp	r3, #0
 801643a:	dd02      	ble.n	8016442 <_dtoa_r+0x94a>
 801643c:	9b02      	ldr	r3, [sp, #8]
 801643e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8016442:	f88b a000 	strb.w	sl, [fp]
 8016446:	e55e      	b.n	8015f06 <_dtoa_r+0x40e>
 8016448:	4628      	mov	r0, r5
 801644a:	e7bd      	b.n	80163c8 <_dtoa_r+0x8d0>
 801644c:	2201      	movs	r2, #1
 801644e:	e7e2      	b.n	8016416 <_dtoa_r+0x91e>
 8016450:	9b06      	ldr	r3, [sp, #24]
 8016452:	2b00      	cmp	r3, #0
 8016454:	db04      	blt.n	8016460 <_dtoa_r+0x968>
 8016456:	9907      	ldr	r1, [sp, #28]
 8016458:	430b      	orrs	r3, r1
 801645a:	9908      	ldr	r1, [sp, #32]
 801645c:	430b      	orrs	r3, r1
 801645e:	d120      	bne.n	80164a2 <_dtoa_r+0x9aa>
 8016460:	2a00      	cmp	r2, #0
 8016462:	ddee      	ble.n	8016442 <_dtoa_r+0x94a>
 8016464:	9901      	ldr	r1, [sp, #4]
 8016466:	2201      	movs	r2, #1
 8016468:	4648      	mov	r0, r9
 801646a:	f000 fbf3 	bl	8016c54 <__lshift>
 801646e:	4621      	mov	r1, r4
 8016470:	9001      	str	r0, [sp, #4]
 8016472:	f000 fc5b 	bl	8016d2c <__mcmp>
 8016476:	2800      	cmp	r0, #0
 8016478:	dc03      	bgt.n	8016482 <_dtoa_r+0x98a>
 801647a:	d1e2      	bne.n	8016442 <_dtoa_r+0x94a>
 801647c:	f01a 0f01 	tst.w	sl, #1
 8016480:	d0df      	beq.n	8016442 <_dtoa_r+0x94a>
 8016482:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016486:	d1d9      	bne.n	801643c <_dtoa_r+0x944>
 8016488:	2339      	movs	r3, #57	@ 0x39
 801648a:	f88b 3000 	strb.w	r3, [fp]
 801648e:	4633      	mov	r3, r6
 8016490:	461e      	mov	r6, r3
 8016492:	3b01      	subs	r3, #1
 8016494:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016498:	2a39      	cmp	r2, #57	@ 0x39
 801649a:	d052      	beq.n	8016542 <_dtoa_r+0xa4a>
 801649c:	3201      	adds	r2, #1
 801649e:	701a      	strb	r2, [r3, #0]
 80164a0:	e531      	b.n	8015f06 <_dtoa_r+0x40e>
 80164a2:	2a00      	cmp	r2, #0
 80164a4:	dd07      	ble.n	80164b6 <_dtoa_r+0x9be>
 80164a6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80164aa:	d0ed      	beq.n	8016488 <_dtoa_r+0x990>
 80164ac:	f10a 0301 	add.w	r3, sl, #1
 80164b0:	f88b 3000 	strb.w	r3, [fp]
 80164b4:	e527      	b.n	8015f06 <_dtoa_r+0x40e>
 80164b6:	9b04      	ldr	r3, [sp, #16]
 80164b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80164ba:	f803 ac01 	strb.w	sl, [r3, #-1]
 80164be:	4293      	cmp	r3, r2
 80164c0:	d029      	beq.n	8016516 <_dtoa_r+0xa1e>
 80164c2:	9901      	ldr	r1, [sp, #4]
 80164c4:	2300      	movs	r3, #0
 80164c6:	220a      	movs	r2, #10
 80164c8:	4648      	mov	r0, r9
 80164ca:	f000 f9d5 	bl	8016878 <__multadd>
 80164ce:	45a8      	cmp	r8, r5
 80164d0:	9001      	str	r0, [sp, #4]
 80164d2:	f04f 0300 	mov.w	r3, #0
 80164d6:	f04f 020a 	mov.w	r2, #10
 80164da:	4641      	mov	r1, r8
 80164dc:	4648      	mov	r0, r9
 80164de:	d107      	bne.n	80164f0 <_dtoa_r+0x9f8>
 80164e0:	f000 f9ca 	bl	8016878 <__multadd>
 80164e4:	4680      	mov	r8, r0
 80164e6:	4605      	mov	r5, r0
 80164e8:	9b04      	ldr	r3, [sp, #16]
 80164ea:	3301      	adds	r3, #1
 80164ec:	9304      	str	r3, [sp, #16]
 80164ee:	e776      	b.n	80163de <_dtoa_r+0x8e6>
 80164f0:	f000 f9c2 	bl	8016878 <__multadd>
 80164f4:	4629      	mov	r1, r5
 80164f6:	4680      	mov	r8, r0
 80164f8:	2300      	movs	r3, #0
 80164fa:	220a      	movs	r2, #10
 80164fc:	4648      	mov	r0, r9
 80164fe:	f000 f9bb 	bl	8016878 <__multadd>
 8016502:	4605      	mov	r5, r0
 8016504:	e7f0      	b.n	80164e8 <_dtoa_r+0x9f0>
 8016506:	f1bb 0f00 	cmp.w	fp, #0
 801650a:	bfcc      	ite	gt
 801650c:	465e      	movgt	r6, fp
 801650e:	2601      	movle	r6, #1
 8016510:	443e      	add	r6, r7
 8016512:	f04f 0800 	mov.w	r8, #0
 8016516:	9901      	ldr	r1, [sp, #4]
 8016518:	2201      	movs	r2, #1
 801651a:	4648      	mov	r0, r9
 801651c:	f000 fb9a 	bl	8016c54 <__lshift>
 8016520:	4621      	mov	r1, r4
 8016522:	9001      	str	r0, [sp, #4]
 8016524:	f000 fc02 	bl	8016d2c <__mcmp>
 8016528:	2800      	cmp	r0, #0
 801652a:	dcb0      	bgt.n	801648e <_dtoa_r+0x996>
 801652c:	d102      	bne.n	8016534 <_dtoa_r+0xa3c>
 801652e:	f01a 0f01 	tst.w	sl, #1
 8016532:	d1ac      	bne.n	801648e <_dtoa_r+0x996>
 8016534:	4633      	mov	r3, r6
 8016536:	461e      	mov	r6, r3
 8016538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801653c:	2a30      	cmp	r2, #48	@ 0x30
 801653e:	d0fa      	beq.n	8016536 <_dtoa_r+0xa3e>
 8016540:	e4e1      	b.n	8015f06 <_dtoa_r+0x40e>
 8016542:	429f      	cmp	r7, r3
 8016544:	d1a4      	bne.n	8016490 <_dtoa_r+0x998>
 8016546:	9b05      	ldr	r3, [sp, #20]
 8016548:	3301      	adds	r3, #1
 801654a:	9305      	str	r3, [sp, #20]
 801654c:	2331      	movs	r3, #49	@ 0x31
 801654e:	703b      	strb	r3, [r7, #0]
 8016550:	e4d9      	b.n	8015f06 <_dtoa_r+0x40e>
 8016552:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016554:	4f16      	ldr	r7, [pc, #88]	@ (80165b0 <_dtoa_r+0xab8>)
 8016556:	b11b      	cbz	r3, 8016560 <_dtoa_r+0xa68>
 8016558:	f107 0308 	add.w	r3, r7, #8
 801655c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801655e:	6013      	str	r3, [r2, #0]
 8016560:	4638      	mov	r0, r7
 8016562:	b011      	add	sp, #68	@ 0x44
 8016564:	ecbd 8b02 	vpop	{d8}
 8016568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801656c:	9b07      	ldr	r3, [sp, #28]
 801656e:	2b01      	cmp	r3, #1
 8016570:	f77f ae2c 	ble.w	80161cc <_dtoa_r+0x6d4>
 8016574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016576:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016578:	2001      	movs	r0, #1
 801657a:	e64c      	b.n	8016216 <_dtoa_r+0x71e>
 801657c:	f1bb 0f00 	cmp.w	fp, #0
 8016580:	f77f aed8 	ble.w	8016334 <_dtoa_r+0x83c>
 8016584:	463e      	mov	r6, r7
 8016586:	9801      	ldr	r0, [sp, #4]
 8016588:	4621      	mov	r1, r4
 801658a:	f7ff fa2b 	bl	80159e4 <quorem>
 801658e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016592:	f806 ab01 	strb.w	sl, [r6], #1
 8016596:	1bf2      	subs	r2, r6, r7
 8016598:	4593      	cmp	fp, r2
 801659a:	ddb4      	ble.n	8016506 <_dtoa_r+0xa0e>
 801659c:	9901      	ldr	r1, [sp, #4]
 801659e:	2300      	movs	r3, #0
 80165a0:	220a      	movs	r2, #10
 80165a2:	4648      	mov	r0, r9
 80165a4:	f000 f968 	bl	8016878 <__multadd>
 80165a8:	9001      	str	r0, [sp, #4]
 80165aa:	e7ec      	b.n	8016586 <_dtoa_r+0xa8e>
 80165ac:	080196cd 	.word	0x080196cd
 80165b0:	08019651 	.word	0x08019651

080165b4 <_free_r>:
 80165b4:	b538      	push	{r3, r4, r5, lr}
 80165b6:	4605      	mov	r5, r0
 80165b8:	2900      	cmp	r1, #0
 80165ba:	d041      	beq.n	8016640 <_free_r+0x8c>
 80165bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80165c0:	1f0c      	subs	r4, r1, #4
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	bfb8      	it	lt
 80165c6:	18e4      	addlt	r4, r4, r3
 80165c8:	f000 f8e8 	bl	801679c <__malloc_lock>
 80165cc:	4a1d      	ldr	r2, [pc, #116]	@ (8016644 <_free_r+0x90>)
 80165ce:	6813      	ldr	r3, [r2, #0]
 80165d0:	b933      	cbnz	r3, 80165e0 <_free_r+0x2c>
 80165d2:	6063      	str	r3, [r4, #4]
 80165d4:	6014      	str	r4, [r2, #0]
 80165d6:	4628      	mov	r0, r5
 80165d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165dc:	f000 b8e4 	b.w	80167a8 <__malloc_unlock>
 80165e0:	42a3      	cmp	r3, r4
 80165e2:	d908      	bls.n	80165f6 <_free_r+0x42>
 80165e4:	6820      	ldr	r0, [r4, #0]
 80165e6:	1821      	adds	r1, r4, r0
 80165e8:	428b      	cmp	r3, r1
 80165ea:	bf01      	itttt	eq
 80165ec:	6819      	ldreq	r1, [r3, #0]
 80165ee:	685b      	ldreq	r3, [r3, #4]
 80165f0:	1809      	addeq	r1, r1, r0
 80165f2:	6021      	streq	r1, [r4, #0]
 80165f4:	e7ed      	b.n	80165d2 <_free_r+0x1e>
 80165f6:	461a      	mov	r2, r3
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	b10b      	cbz	r3, 8016600 <_free_r+0x4c>
 80165fc:	42a3      	cmp	r3, r4
 80165fe:	d9fa      	bls.n	80165f6 <_free_r+0x42>
 8016600:	6811      	ldr	r1, [r2, #0]
 8016602:	1850      	adds	r0, r2, r1
 8016604:	42a0      	cmp	r0, r4
 8016606:	d10b      	bne.n	8016620 <_free_r+0x6c>
 8016608:	6820      	ldr	r0, [r4, #0]
 801660a:	4401      	add	r1, r0
 801660c:	1850      	adds	r0, r2, r1
 801660e:	4283      	cmp	r3, r0
 8016610:	6011      	str	r1, [r2, #0]
 8016612:	d1e0      	bne.n	80165d6 <_free_r+0x22>
 8016614:	6818      	ldr	r0, [r3, #0]
 8016616:	685b      	ldr	r3, [r3, #4]
 8016618:	6053      	str	r3, [r2, #4]
 801661a:	4408      	add	r0, r1
 801661c:	6010      	str	r0, [r2, #0]
 801661e:	e7da      	b.n	80165d6 <_free_r+0x22>
 8016620:	d902      	bls.n	8016628 <_free_r+0x74>
 8016622:	230c      	movs	r3, #12
 8016624:	602b      	str	r3, [r5, #0]
 8016626:	e7d6      	b.n	80165d6 <_free_r+0x22>
 8016628:	6820      	ldr	r0, [r4, #0]
 801662a:	1821      	adds	r1, r4, r0
 801662c:	428b      	cmp	r3, r1
 801662e:	bf04      	itt	eq
 8016630:	6819      	ldreq	r1, [r3, #0]
 8016632:	685b      	ldreq	r3, [r3, #4]
 8016634:	6063      	str	r3, [r4, #4]
 8016636:	bf04      	itt	eq
 8016638:	1809      	addeq	r1, r1, r0
 801663a:	6021      	streq	r1, [r4, #0]
 801663c:	6054      	str	r4, [r2, #4]
 801663e:	e7ca      	b.n	80165d6 <_free_r+0x22>
 8016640:	bd38      	pop	{r3, r4, r5, pc}
 8016642:	bf00      	nop
 8016644:	24000c40 	.word	0x24000c40

08016648 <malloc>:
 8016648:	4b02      	ldr	r3, [pc, #8]	@ (8016654 <malloc+0xc>)
 801664a:	4601      	mov	r1, r0
 801664c:	6818      	ldr	r0, [r3, #0]
 801664e:	f000 b825 	b.w	801669c <_malloc_r>
 8016652:	bf00      	nop
 8016654:	24000030 	.word	0x24000030

08016658 <sbrk_aligned>:
 8016658:	b570      	push	{r4, r5, r6, lr}
 801665a:	4e0f      	ldr	r6, [pc, #60]	@ (8016698 <sbrk_aligned+0x40>)
 801665c:	460c      	mov	r4, r1
 801665e:	6831      	ldr	r1, [r6, #0]
 8016660:	4605      	mov	r5, r0
 8016662:	b911      	cbnz	r1, 801666a <sbrk_aligned+0x12>
 8016664:	f001 fe38 	bl	80182d8 <_sbrk_r>
 8016668:	6030      	str	r0, [r6, #0]
 801666a:	4621      	mov	r1, r4
 801666c:	4628      	mov	r0, r5
 801666e:	f001 fe33 	bl	80182d8 <_sbrk_r>
 8016672:	1c43      	adds	r3, r0, #1
 8016674:	d103      	bne.n	801667e <sbrk_aligned+0x26>
 8016676:	f04f 34ff 	mov.w	r4, #4294967295
 801667a:	4620      	mov	r0, r4
 801667c:	bd70      	pop	{r4, r5, r6, pc}
 801667e:	1cc4      	adds	r4, r0, #3
 8016680:	f024 0403 	bic.w	r4, r4, #3
 8016684:	42a0      	cmp	r0, r4
 8016686:	d0f8      	beq.n	801667a <sbrk_aligned+0x22>
 8016688:	1a21      	subs	r1, r4, r0
 801668a:	4628      	mov	r0, r5
 801668c:	f001 fe24 	bl	80182d8 <_sbrk_r>
 8016690:	3001      	adds	r0, #1
 8016692:	d1f2      	bne.n	801667a <sbrk_aligned+0x22>
 8016694:	e7ef      	b.n	8016676 <sbrk_aligned+0x1e>
 8016696:	bf00      	nop
 8016698:	24000c3c 	.word	0x24000c3c

0801669c <_malloc_r>:
 801669c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166a0:	1ccd      	adds	r5, r1, #3
 80166a2:	f025 0503 	bic.w	r5, r5, #3
 80166a6:	3508      	adds	r5, #8
 80166a8:	2d0c      	cmp	r5, #12
 80166aa:	bf38      	it	cc
 80166ac:	250c      	movcc	r5, #12
 80166ae:	2d00      	cmp	r5, #0
 80166b0:	4606      	mov	r6, r0
 80166b2:	db01      	blt.n	80166b8 <_malloc_r+0x1c>
 80166b4:	42a9      	cmp	r1, r5
 80166b6:	d904      	bls.n	80166c2 <_malloc_r+0x26>
 80166b8:	230c      	movs	r3, #12
 80166ba:	6033      	str	r3, [r6, #0]
 80166bc:	2000      	movs	r0, #0
 80166be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016798 <_malloc_r+0xfc>
 80166c6:	f000 f869 	bl	801679c <__malloc_lock>
 80166ca:	f8d8 3000 	ldr.w	r3, [r8]
 80166ce:	461c      	mov	r4, r3
 80166d0:	bb44      	cbnz	r4, 8016724 <_malloc_r+0x88>
 80166d2:	4629      	mov	r1, r5
 80166d4:	4630      	mov	r0, r6
 80166d6:	f7ff ffbf 	bl	8016658 <sbrk_aligned>
 80166da:	1c43      	adds	r3, r0, #1
 80166dc:	4604      	mov	r4, r0
 80166de:	d158      	bne.n	8016792 <_malloc_r+0xf6>
 80166e0:	f8d8 4000 	ldr.w	r4, [r8]
 80166e4:	4627      	mov	r7, r4
 80166e6:	2f00      	cmp	r7, #0
 80166e8:	d143      	bne.n	8016772 <_malloc_r+0xd6>
 80166ea:	2c00      	cmp	r4, #0
 80166ec:	d04b      	beq.n	8016786 <_malloc_r+0xea>
 80166ee:	6823      	ldr	r3, [r4, #0]
 80166f0:	4639      	mov	r1, r7
 80166f2:	4630      	mov	r0, r6
 80166f4:	eb04 0903 	add.w	r9, r4, r3
 80166f8:	f001 fdee 	bl	80182d8 <_sbrk_r>
 80166fc:	4581      	cmp	r9, r0
 80166fe:	d142      	bne.n	8016786 <_malloc_r+0xea>
 8016700:	6821      	ldr	r1, [r4, #0]
 8016702:	1a6d      	subs	r5, r5, r1
 8016704:	4629      	mov	r1, r5
 8016706:	4630      	mov	r0, r6
 8016708:	f7ff ffa6 	bl	8016658 <sbrk_aligned>
 801670c:	3001      	adds	r0, #1
 801670e:	d03a      	beq.n	8016786 <_malloc_r+0xea>
 8016710:	6823      	ldr	r3, [r4, #0]
 8016712:	442b      	add	r3, r5
 8016714:	6023      	str	r3, [r4, #0]
 8016716:	f8d8 3000 	ldr.w	r3, [r8]
 801671a:	685a      	ldr	r2, [r3, #4]
 801671c:	bb62      	cbnz	r2, 8016778 <_malloc_r+0xdc>
 801671e:	f8c8 7000 	str.w	r7, [r8]
 8016722:	e00f      	b.n	8016744 <_malloc_r+0xa8>
 8016724:	6822      	ldr	r2, [r4, #0]
 8016726:	1b52      	subs	r2, r2, r5
 8016728:	d420      	bmi.n	801676c <_malloc_r+0xd0>
 801672a:	2a0b      	cmp	r2, #11
 801672c:	d917      	bls.n	801675e <_malloc_r+0xc2>
 801672e:	1961      	adds	r1, r4, r5
 8016730:	42a3      	cmp	r3, r4
 8016732:	6025      	str	r5, [r4, #0]
 8016734:	bf18      	it	ne
 8016736:	6059      	strne	r1, [r3, #4]
 8016738:	6863      	ldr	r3, [r4, #4]
 801673a:	bf08      	it	eq
 801673c:	f8c8 1000 	streq.w	r1, [r8]
 8016740:	5162      	str	r2, [r4, r5]
 8016742:	604b      	str	r3, [r1, #4]
 8016744:	4630      	mov	r0, r6
 8016746:	f000 f82f 	bl	80167a8 <__malloc_unlock>
 801674a:	f104 000b 	add.w	r0, r4, #11
 801674e:	1d23      	adds	r3, r4, #4
 8016750:	f020 0007 	bic.w	r0, r0, #7
 8016754:	1ac2      	subs	r2, r0, r3
 8016756:	bf1c      	itt	ne
 8016758:	1a1b      	subne	r3, r3, r0
 801675a:	50a3      	strne	r3, [r4, r2]
 801675c:	e7af      	b.n	80166be <_malloc_r+0x22>
 801675e:	6862      	ldr	r2, [r4, #4]
 8016760:	42a3      	cmp	r3, r4
 8016762:	bf0c      	ite	eq
 8016764:	f8c8 2000 	streq.w	r2, [r8]
 8016768:	605a      	strne	r2, [r3, #4]
 801676a:	e7eb      	b.n	8016744 <_malloc_r+0xa8>
 801676c:	4623      	mov	r3, r4
 801676e:	6864      	ldr	r4, [r4, #4]
 8016770:	e7ae      	b.n	80166d0 <_malloc_r+0x34>
 8016772:	463c      	mov	r4, r7
 8016774:	687f      	ldr	r7, [r7, #4]
 8016776:	e7b6      	b.n	80166e6 <_malloc_r+0x4a>
 8016778:	461a      	mov	r2, r3
 801677a:	685b      	ldr	r3, [r3, #4]
 801677c:	42a3      	cmp	r3, r4
 801677e:	d1fb      	bne.n	8016778 <_malloc_r+0xdc>
 8016780:	2300      	movs	r3, #0
 8016782:	6053      	str	r3, [r2, #4]
 8016784:	e7de      	b.n	8016744 <_malloc_r+0xa8>
 8016786:	230c      	movs	r3, #12
 8016788:	6033      	str	r3, [r6, #0]
 801678a:	4630      	mov	r0, r6
 801678c:	f000 f80c 	bl	80167a8 <__malloc_unlock>
 8016790:	e794      	b.n	80166bc <_malloc_r+0x20>
 8016792:	6005      	str	r5, [r0, #0]
 8016794:	e7d6      	b.n	8016744 <_malloc_r+0xa8>
 8016796:	bf00      	nop
 8016798:	24000c40 	.word	0x24000c40

0801679c <__malloc_lock>:
 801679c:	4801      	ldr	r0, [pc, #4]	@ (80167a4 <__malloc_lock+0x8>)
 801679e:	f7ff b90a 	b.w	80159b6 <__retarget_lock_acquire_recursive>
 80167a2:	bf00      	nop
 80167a4:	24000c38 	.word	0x24000c38

080167a8 <__malloc_unlock>:
 80167a8:	4801      	ldr	r0, [pc, #4]	@ (80167b0 <__malloc_unlock+0x8>)
 80167aa:	f7ff b905 	b.w	80159b8 <__retarget_lock_release_recursive>
 80167ae:	bf00      	nop
 80167b0:	24000c38 	.word	0x24000c38

080167b4 <_Balloc>:
 80167b4:	b570      	push	{r4, r5, r6, lr}
 80167b6:	69c6      	ldr	r6, [r0, #28]
 80167b8:	4604      	mov	r4, r0
 80167ba:	460d      	mov	r5, r1
 80167bc:	b976      	cbnz	r6, 80167dc <_Balloc+0x28>
 80167be:	2010      	movs	r0, #16
 80167c0:	f7ff ff42 	bl	8016648 <malloc>
 80167c4:	4602      	mov	r2, r0
 80167c6:	61e0      	str	r0, [r4, #28]
 80167c8:	b920      	cbnz	r0, 80167d4 <_Balloc+0x20>
 80167ca:	4b18      	ldr	r3, [pc, #96]	@ (801682c <_Balloc+0x78>)
 80167cc:	4818      	ldr	r0, [pc, #96]	@ (8016830 <_Balloc+0x7c>)
 80167ce:	216b      	movs	r1, #107	@ 0x6b
 80167d0:	f001 fd9a 	bl	8018308 <__assert_func>
 80167d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80167d8:	6006      	str	r6, [r0, #0]
 80167da:	60c6      	str	r6, [r0, #12]
 80167dc:	69e6      	ldr	r6, [r4, #28]
 80167de:	68f3      	ldr	r3, [r6, #12]
 80167e0:	b183      	cbz	r3, 8016804 <_Balloc+0x50>
 80167e2:	69e3      	ldr	r3, [r4, #28]
 80167e4:	68db      	ldr	r3, [r3, #12]
 80167e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80167ea:	b9b8      	cbnz	r0, 801681c <_Balloc+0x68>
 80167ec:	2101      	movs	r1, #1
 80167ee:	fa01 f605 	lsl.w	r6, r1, r5
 80167f2:	1d72      	adds	r2, r6, #5
 80167f4:	0092      	lsls	r2, r2, #2
 80167f6:	4620      	mov	r0, r4
 80167f8:	f001 fda4 	bl	8018344 <_calloc_r>
 80167fc:	b160      	cbz	r0, 8016818 <_Balloc+0x64>
 80167fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016802:	e00e      	b.n	8016822 <_Balloc+0x6e>
 8016804:	2221      	movs	r2, #33	@ 0x21
 8016806:	2104      	movs	r1, #4
 8016808:	4620      	mov	r0, r4
 801680a:	f001 fd9b 	bl	8018344 <_calloc_r>
 801680e:	69e3      	ldr	r3, [r4, #28]
 8016810:	60f0      	str	r0, [r6, #12]
 8016812:	68db      	ldr	r3, [r3, #12]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d1e4      	bne.n	80167e2 <_Balloc+0x2e>
 8016818:	2000      	movs	r0, #0
 801681a:	bd70      	pop	{r4, r5, r6, pc}
 801681c:	6802      	ldr	r2, [r0, #0]
 801681e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016822:	2300      	movs	r3, #0
 8016824:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016828:	e7f7      	b.n	801681a <_Balloc+0x66>
 801682a:	bf00      	nop
 801682c:	0801965e 	.word	0x0801965e
 8016830:	080196de 	.word	0x080196de

08016834 <_Bfree>:
 8016834:	b570      	push	{r4, r5, r6, lr}
 8016836:	69c6      	ldr	r6, [r0, #28]
 8016838:	4605      	mov	r5, r0
 801683a:	460c      	mov	r4, r1
 801683c:	b976      	cbnz	r6, 801685c <_Bfree+0x28>
 801683e:	2010      	movs	r0, #16
 8016840:	f7ff ff02 	bl	8016648 <malloc>
 8016844:	4602      	mov	r2, r0
 8016846:	61e8      	str	r0, [r5, #28]
 8016848:	b920      	cbnz	r0, 8016854 <_Bfree+0x20>
 801684a:	4b09      	ldr	r3, [pc, #36]	@ (8016870 <_Bfree+0x3c>)
 801684c:	4809      	ldr	r0, [pc, #36]	@ (8016874 <_Bfree+0x40>)
 801684e:	218f      	movs	r1, #143	@ 0x8f
 8016850:	f001 fd5a 	bl	8018308 <__assert_func>
 8016854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016858:	6006      	str	r6, [r0, #0]
 801685a:	60c6      	str	r6, [r0, #12]
 801685c:	b13c      	cbz	r4, 801686e <_Bfree+0x3a>
 801685e:	69eb      	ldr	r3, [r5, #28]
 8016860:	6862      	ldr	r2, [r4, #4]
 8016862:	68db      	ldr	r3, [r3, #12]
 8016864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016868:	6021      	str	r1, [r4, #0]
 801686a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801686e:	bd70      	pop	{r4, r5, r6, pc}
 8016870:	0801965e 	.word	0x0801965e
 8016874:	080196de 	.word	0x080196de

08016878 <__multadd>:
 8016878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801687c:	690d      	ldr	r5, [r1, #16]
 801687e:	4607      	mov	r7, r0
 8016880:	460c      	mov	r4, r1
 8016882:	461e      	mov	r6, r3
 8016884:	f101 0c14 	add.w	ip, r1, #20
 8016888:	2000      	movs	r0, #0
 801688a:	f8dc 3000 	ldr.w	r3, [ip]
 801688e:	b299      	uxth	r1, r3
 8016890:	fb02 6101 	mla	r1, r2, r1, r6
 8016894:	0c1e      	lsrs	r6, r3, #16
 8016896:	0c0b      	lsrs	r3, r1, #16
 8016898:	fb02 3306 	mla	r3, r2, r6, r3
 801689c:	b289      	uxth	r1, r1
 801689e:	3001      	adds	r0, #1
 80168a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80168a4:	4285      	cmp	r5, r0
 80168a6:	f84c 1b04 	str.w	r1, [ip], #4
 80168aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80168ae:	dcec      	bgt.n	801688a <__multadd+0x12>
 80168b0:	b30e      	cbz	r6, 80168f6 <__multadd+0x7e>
 80168b2:	68a3      	ldr	r3, [r4, #8]
 80168b4:	42ab      	cmp	r3, r5
 80168b6:	dc19      	bgt.n	80168ec <__multadd+0x74>
 80168b8:	6861      	ldr	r1, [r4, #4]
 80168ba:	4638      	mov	r0, r7
 80168bc:	3101      	adds	r1, #1
 80168be:	f7ff ff79 	bl	80167b4 <_Balloc>
 80168c2:	4680      	mov	r8, r0
 80168c4:	b928      	cbnz	r0, 80168d2 <__multadd+0x5a>
 80168c6:	4602      	mov	r2, r0
 80168c8:	4b0c      	ldr	r3, [pc, #48]	@ (80168fc <__multadd+0x84>)
 80168ca:	480d      	ldr	r0, [pc, #52]	@ (8016900 <__multadd+0x88>)
 80168cc:	21ba      	movs	r1, #186	@ 0xba
 80168ce:	f001 fd1b 	bl	8018308 <__assert_func>
 80168d2:	6922      	ldr	r2, [r4, #16]
 80168d4:	3202      	adds	r2, #2
 80168d6:	f104 010c 	add.w	r1, r4, #12
 80168da:	0092      	lsls	r2, r2, #2
 80168dc:	300c      	adds	r0, #12
 80168de:	f7ff f86c 	bl	80159ba <memcpy>
 80168e2:	4621      	mov	r1, r4
 80168e4:	4638      	mov	r0, r7
 80168e6:	f7ff ffa5 	bl	8016834 <_Bfree>
 80168ea:	4644      	mov	r4, r8
 80168ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80168f0:	3501      	adds	r5, #1
 80168f2:	615e      	str	r6, [r3, #20]
 80168f4:	6125      	str	r5, [r4, #16]
 80168f6:	4620      	mov	r0, r4
 80168f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168fc:	080196cd 	.word	0x080196cd
 8016900:	080196de 	.word	0x080196de

08016904 <__s2b>:
 8016904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016908:	460c      	mov	r4, r1
 801690a:	4615      	mov	r5, r2
 801690c:	461f      	mov	r7, r3
 801690e:	2209      	movs	r2, #9
 8016910:	3308      	adds	r3, #8
 8016912:	4606      	mov	r6, r0
 8016914:	fb93 f3f2 	sdiv	r3, r3, r2
 8016918:	2100      	movs	r1, #0
 801691a:	2201      	movs	r2, #1
 801691c:	429a      	cmp	r2, r3
 801691e:	db09      	blt.n	8016934 <__s2b+0x30>
 8016920:	4630      	mov	r0, r6
 8016922:	f7ff ff47 	bl	80167b4 <_Balloc>
 8016926:	b940      	cbnz	r0, 801693a <__s2b+0x36>
 8016928:	4602      	mov	r2, r0
 801692a:	4b19      	ldr	r3, [pc, #100]	@ (8016990 <__s2b+0x8c>)
 801692c:	4819      	ldr	r0, [pc, #100]	@ (8016994 <__s2b+0x90>)
 801692e:	21d3      	movs	r1, #211	@ 0xd3
 8016930:	f001 fcea 	bl	8018308 <__assert_func>
 8016934:	0052      	lsls	r2, r2, #1
 8016936:	3101      	adds	r1, #1
 8016938:	e7f0      	b.n	801691c <__s2b+0x18>
 801693a:	9b08      	ldr	r3, [sp, #32]
 801693c:	6143      	str	r3, [r0, #20]
 801693e:	2d09      	cmp	r5, #9
 8016940:	f04f 0301 	mov.w	r3, #1
 8016944:	6103      	str	r3, [r0, #16]
 8016946:	dd16      	ble.n	8016976 <__s2b+0x72>
 8016948:	f104 0909 	add.w	r9, r4, #9
 801694c:	46c8      	mov	r8, r9
 801694e:	442c      	add	r4, r5
 8016950:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016954:	4601      	mov	r1, r0
 8016956:	3b30      	subs	r3, #48	@ 0x30
 8016958:	220a      	movs	r2, #10
 801695a:	4630      	mov	r0, r6
 801695c:	f7ff ff8c 	bl	8016878 <__multadd>
 8016960:	45a0      	cmp	r8, r4
 8016962:	d1f5      	bne.n	8016950 <__s2b+0x4c>
 8016964:	f1a5 0408 	sub.w	r4, r5, #8
 8016968:	444c      	add	r4, r9
 801696a:	1b2d      	subs	r5, r5, r4
 801696c:	1963      	adds	r3, r4, r5
 801696e:	42bb      	cmp	r3, r7
 8016970:	db04      	blt.n	801697c <__s2b+0x78>
 8016972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016976:	340a      	adds	r4, #10
 8016978:	2509      	movs	r5, #9
 801697a:	e7f6      	b.n	801696a <__s2b+0x66>
 801697c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016980:	4601      	mov	r1, r0
 8016982:	3b30      	subs	r3, #48	@ 0x30
 8016984:	220a      	movs	r2, #10
 8016986:	4630      	mov	r0, r6
 8016988:	f7ff ff76 	bl	8016878 <__multadd>
 801698c:	e7ee      	b.n	801696c <__s2b+0x68>
 801698e:	bf00      	nop
 8016990:	080196cd 	.word	0x080196cd
 8016994:	080196de 	.word	0x080196de

08016998 <__hi0bits>:
 8016998:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801699c:	4603      	mov	r3, r0
 801699e:	bf36      	itet	cc
 80169a0:	0403      	lslcc	r3, r0, #16
 80169a2:	2000      	movcs	r0, #0
 80169a4:	2010      	movcc	r0, #16
 80169a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80169aa:	bf3c      	itt	cc
 80169ac:	021b      	lslcc	r3, r3, #8
 80169ae:	3008      	addcc	r0, #8
 80169b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80169b4:	bf3c      	itt	cc
 80169b6:	011b      	lslcc	r3, r3, #4
 80169b8:	3004      	addcc	r0, #4
 80169ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80169be:	bf3c      	itt	cc
 80169c0:	009b      	lslcc	r3, r3, #2
 80169c2:	3002      	addcc	r0, #2
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	db05      	blt.n	80169d4 <__hi0bits+0x3c>
 80169c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80169cc:	f100 0001 	add.w	r0, r0, #1
 80169d0:	bf08      	it	eq
 80169d2:	2020      	moveq	r0, #32
 80169d4:	4770      	bx	lr

080169d6 <__lo0bits>:
 80169d6:	6803      	ldr	r3, [r0, #0]
 80169d8:	4602      	mov	r2, r0
 80169da:	f013 0007 	ands.w	r0, r3, #7
 80169de:	d00b      	beq.n	80169f8 <__lo0bits+0x22>
 80169e0:	07d9      	lsls	r1, r3, #31
 80169e2:	d421      	bmi.n	8016a28 <__lo0bits+0x52>
 80169e4:	0798      	lsls	r0, r3, #30
 80169e6:	bf49      	itett	mi
 80169e8:	085b      	lsrmi	r3, r3, #1
 80169ea:	089b      	lsrpl	r3, r3, #2
 80169ec:	2001      	movmi	r0, #1
 80169ee:	6013      	strmi	r3, [r2, #0]
 80169f0:	bf5c      	itt	pl
 80169f2:	6013      	strpl	r3, [r2, #0]
 80169f4:	2002      	movpl	r0, #2
 80169f6:	4770      	bx	lr
 80169f8:	b299      	uxth	r1, r3
 80169fa:	b909      	cbnz	r1, 8016a00 <__lo0bits+0x2a>
 80169fc:	0c1b      	lsrs	r3, r3, #16
 80169fe:	2010      	movs	r0, #16
 8016a00:	b2d9      	uxtb	r1, r3
 8016a02:	b909      	cbnz	r1, 8016a08 <__lo0bits+0x32>
 8016a04:	3008      	adds	r0, #8
 8016a06:	0a1b      	lsrs	r3, r3, #8
 8016a08:	0719      	lsls	r1, r3, #28
 8016a0a:	bf04      	itt	eq
 8016a0c:	091b      	lsreq	r3, r3, #4
 8016a0e:	3004      	addeq	r0, #4
 8016a10:	0799      	lsls	r1, r3, #30
 8016a12:	bf04      	itt	eq
 8016a14:	089b      	lsreq	r3, r3, #2
 8016a16:	3002      	addeq	r0, #2
 8016a18:	07d9      	lsls	r1, r3, #31
 8016a1a:	d403      	bmi.n	8016a24 <__lo0bits+0x4e>
 8016a1c:	085b      	lsrs	r3, r3, #1
 8016a1e:	f100 0001 	add.w	r0, r0, #1
 8016a22:	d003      	beq.n	8016a2c <__lo0bits+0x56>
 8016a24:	6013      	str	r3, [r2, #0]
 8016a26:	4770      	bx	lr
 8016a28:	2000      	movs	r0, #0
 8016a2a:	4770      	bx	lr
 8016a2c:	2020      	movs	r0, #32
 8016a2e:	4770      	bx	lr

08016a30 <__i2b>:
 8016a30:	b510      	push	{r4, lr}
 8016a32:	460c      	mov	r4, r1
 8016a34:	2101      	movs	r1, #1
 8016a36:	f7ff febd 	bl	80167b4 <_Balloc>
 8016a3a:	4602      	mov	r2, r0
 8016a3c:	b928      	cbnz	r0, 8016a4a <__i2b+0x1a>
 8016a3e:	4b05      	ldr	r3, [pc, #20]	@ (8016a54 <__i2b+0x24>)
 8016a40:	4805      	ldr	r0, [pc, #20]	@ (8016a58 <__i2b+0x28>)
 8016a42:	f240 1145 	movw	r1, #325	@ 0x145
 8016a46:	f001 fc5f 	bl	8018308 <__assert_func>
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	6144      	str	r4, [r0, #20]
 8016a4e:	6103      	str	r3, [r0, #16]
 8016a50:	bd10      	pop	{r4, pc}
 8016a52:	bf00      	nop
 8016a54:	080196cd 	.word	0x080196cd
 8016a58:	080196de 	.word	0x080196de

08016a5c <__multiply>:
 8016a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a60:	4617      	mov	r7, r2
 8016a62:	690a      	ldr	r2, [r1, #16]
 8016a64:	693b      	ldr	r3, [r7, #16]
 8016a66:	429a      	cmp	r2, r3
 8016a68:	bfa8      	it	ge
 8016a6a:	463b      	movge	r3, r7
 8016a6c:	4689      	mov	r9, r1
 8016a6e:	bfa4      	itt	ge
 8016a70:	460f      	movge	r7, r1
 8016a72:	4699      	movge	r9, r3
 8016a74:	693d      	ldr	r5, [r7, #16]
 8016a76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016a7a:	68bb      	ldr	r3, [r7, #8]
 8016a7c:	6879      	ldr	r1, [r7, #4]
 8016a7e:	eb05 060a 	add.w	r6, r5, sl
 8016a82:	42b3      	cmp	r3, r6
 8016a84:	b085      	sub	sp, #20
 8016a86:	bfb8      	it	lt
 8016a88:	3101      	addlt	r1, #1
 8016a8a:	f7ff fe93 	bl	80167b4 <_Balloc>
 8016a8e:	b930      	cbnz	r0, 8016a9e <__multiply+0x42>
 8016a90:	4602      	mov	r2, r0
 8016a92:	4b41      	ldr	r3, [pc, #260]	@ (8016b98 <__multiply+0x13c>)
 8016a94:	4841      	ldr	r0, [pc, #260]	@ (8016b9c <__multiply+0x140>)
 8016a96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016a9a:	f001 fc35 	bl	8018308 <__assert_func>
 8016a9e:	f100 0414 	add.w	r4, r0, #20
 8016aa2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016aa6:	4623      	mov	r3, r4
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	4573      	cmp	r3, lr
 8016aac:	d320      	bcc.n	8016af0 <__multiply+0x94>
 8016aae:	f107 0814 	add.w	r8, r7, #20
 8016ab2:	f109 0114 	add.w	r1, r9, #20
 8016ab6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016aba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016abe:	9302      	str	r3, [sp, #8]
 8016ac0:	1beb      	subs	r3, r5, r7
 8016ac2:	3b15      	subs	r3, #21
 8016ac4:	f023 0303 	bic.w	r3, r3, #3
 8016ac8:	3304      	adds	r3, #4
 8016aca:	3715      	adds	r7, #21
 8016acc:	42bd      	cmp	r5, r7
 8016ace:	bf38      	it	cc
 8016ad0:	2304      	movcc	r3, #4
 8016ad2:	9301      	str	r3, [sp, #4]
 8016ad4:	9b02      	ldr	r3, [sp, #8]
 8016ad6:	9103      	str	r1, [sp, #12]
 8016ad8:	428b      	cmp	r3, r1
 8016ada:	d80c      	bhi.n	8016af6 <__multiply+0x9a>
 8016adc:	2e00      	cmp	r6, #0
 8016ade:	dd03      	ble.n	8016ae8 <__multiply+0x8c>
 8016ae0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d055      	beq.n	8016b94 <__multiply+0x138>
 8016ae8:	6106      	str	r6, [r0, #16]
 8016aea:	b005      	add	sp, #20
 8016aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016af0:	f843 2b04 	str.w	r2, [r3], #4
 8016af4:	e7d9      	b.n	8016aaa <__multiply+0x4e>
 8016af6:	f8b1 a000 	ldrh.w	sl, [r1]
 8016afa:	f1ba 0f00 	cmp.w	sl, #0
 8016afe:	d01f      	beq.n	8016b40 <__multiply+0xe4>
 8016b00:	46c4      	mov	ip, r8
 8016b02:	46a1      	mov	r9, r4
 8016b04:	2700      	movs	r7, #0
 8016b06:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016b0a:	f8d9 3000 	ldr.w	r3, [r9]
 8016b0e:	fa1f fb82 	uxth.w	fp, r2
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	fb0a 330b 	mla	r3, sl, fp, r3
 8016b18:	443b      	add	r3, r7
 8016b1a:	f8d9 7000 	ldr.w	r7, [r9]
 8016b1e:	0c12      	lsrs	r2, r2, #16
 8016b20:	0c3f      	lsrs	r7, r7, #16
 8016b22:	fb0a 7202 	mla	r2, sl, r2, r7
 8016b26:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b30:	4565      	cmp	r5, ip
 8016b32:	f849 3b04 	str.w	r3, [r9], #4
 8016b36:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016b3a:	d8e4      	bhi.n	8016b06 <__multiply+0xaa>
 8016b3c:	9b01      	ldr	r3, [sp, #4]
 8016b3e:	50e7      	str	r7, [r4, r3]
 8016b40:	9b03      	ldr	r3, [sp, #12]
 8016b42:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016b46:	3104      	adds	r1, #4
 8016b48:	f1b9 0f00 	cmp.w	r9, #0
 8016b4c:	d020      	beq.n	8016b90 <__multiply+0x134>
 8016b4e:	6823      	ldr	r3, [r4, #0]
 8016b50:	4647      	mov	r7, r8
 8016b52:	46a4      	mov	ip, r4
 8016b54:	f04f 0a00 	mov.w	sl, #0
 8016b58:	f8b7 b000 	ldrh.w	fp, [r7]
 8016b5c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016b60:	fb09 220b 	mla	r2, r9, fp, r2
 8016b64:	4452      	add	r2, sl
 8016b66:	b29b      	uxth	r3, r3
 8016b68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b6c:	f84c 3b04 	str.w	r3, [ip], #4
 8016b70:	f857 3b04 	ldr.w	r3, [r7], #4
 8016b74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016b78:	f8bc 3000 	ldrh.w	r3, [ip]
 8016b7c:	fb09 330a 	mla	r3, r9, sl, r3
 8016b80:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016b84:	42bd      	cmp	r5, r7
 8016b86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016b8a:	d8e5      	bhi.n	8016b58 <__multiply+0xfc>
 8016b8c:	9a01      	ldr	r2, [sp, #4]
 8016b8e:	50a3      	str	r3, [r4, r2]
 8016b90:	3404      	adds	r4, #4
 8016b92:	e79f      	b.n	8016ad4 <__multiply+0x78>
 8016b94:	3e01      	subs	r6, #1
 8016b96:	e7a1      	b.n	8016adc <__multiply+0x80>
 8016b98:	080196cd 	.word	0x080196cd
 8016b9c:	080196de 	.word	0x080196de

08016ba0 <__pow5mult>:
 8016ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ba4:	4615      	mov	r5, r2
 8016ba6:	f012 0203 	ands.w	r2, r2, #3
 8016baa:	4607      	mov	r7, r0
 8016bac:	460e      	mov	r6, r1
 8016bae:	d007      	beq.n	8016bc0 <__pow5mult+0x20>
 8016bb0:	4c25      	ldr	r4, [pc, #148]	@ (8016c48 <__pow5mult+0xa8>)
 8016bb2:	3a01      	subs	r2, #1
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016bba:	f7ff fe5d 	bl	8016878 <__multadd>
 8016bbe:	4606      	mov	r6, r0
 8016bc0:	10ad      	asrs	r5, r5, #2
 8016bc2:	d03d      	beq.n	8016c40 <__pow5mult+0xa0>
 8016bc4:	69fc      	ldr	r4, [r7, #28]
 8016bc6:	b97c      	cbnz	r4, 8016be8 <__pow5mult+0x48>
 8016bc8:	2010      	movs	r0, #16
 8016bca:	f7ff fd3d 	bl	8016648 <malloc>
 8016bce:	4602      	mov	r2, r0
 8016bd0:	61f8      	str	r0, [r7, #28]
 8016bd2:	b928      	cbnz	r0, 8016be0 <__pow5mult+0x40>
 8016bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8016c4c <__pow5mult+0xac>)
 8016bd6:	481e      	ldr	r0, [pc, #120]	@ (8016c50 <__pow5mult+0xb0>)
 8016bd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016bdc:	f001 fb94 	bl	8018308 <__assert_func>
 8016be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016be4:	6004      	str	r4, [r0, #0]
 8016be6:	60c4      	str	r4, [r0, #12]
 8016be8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016bf0:	b94c      	cbnz	r4, 8016c06 <__pow5mult+0x66>
 8016bf2:	f240 2171 	movw	r1, #625	@ 0x271
 8016bf6:	4638      	mov	r0, r7
 8016bf8:	f7ff ff1a 	bl	8016a30 <__i2b>
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8016c02:	4604      	mov	r4, r0
 8016c04:	6003      	str	r3, [r0, #0]
 8016c06:	f04f 0900 	mov.w	r9, #0
 8016c0a:	07eb      	lsls	r3, r5, #31
 8016c0c:	d50a      	bpl.n	8016c24 <__pow5mult+0x84>
 8016c0e:	4631      	mov	r1, r6
 8016c10:	4622      	mov	r2, r4
 8016c12:	4638      	mov	r0, r7
 8016c14:	f7ff ff22 	bl	8016a5c <__multiply>
 8016c18:	4631      	mov	r1, r6
 8016c1a:	4680      	mov	r8, r0
 8016c1c:	4638      	mov	r0, r7
 8016c1e:	f7ff fe09 	bl	8016834 <_Bfree>
 8016c22:	4646      	mov	r6, r8
 8016c24:	106d      	asrs	r5, r5, #1
 8016c26:	d00b      	beq.n	8016c40 <__pow5mult+0xa0>
 8016c28:	6820      	ldr	r0, [r4, #0]
 8016c2a:	b938      	cbnz	r0, 8016c3c <__pow5mult+0x9c>
 8016c2c:	4622      	mov	r2, r4
 8016c2e:	4621      	mov	r1, r4
 8016c30:	4638      	mov	r0, r7
 8016c32:	f7ff ff13 	bl	8016a5c <__multiply>
 8016c36:	6020      	str	r0, [r4, #0]
 8016c38:	f8c0 9000 	str.w	r9, [r0]
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	e7e4      	b.n	8016c0a <__pow5mult+0x6a>
 8016c40:	4630      	mov	r0, r6
 8016c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c46:	bf00      	nop
 8016c48:	080197f0 	.word	0x080197f0
 8016c4c:	0801965e 	.word	0x0801965e
 8016c50:	080196de 	.word	0x080196de

08016c54 <__lshift>:
 8016c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c58:	460c      	mov	r4, r1
 8016c5a:	6849      	ldr	r1, [r1, #4]
 8016c5c:	6923      	ldr	r3, [r4, #16]
 8016c5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016c62:	68a3      	ldr	r3, [r4, #8]
 8016c64:	4607      	mov	r7, r0
 8016c66:	4691      	mov	r9, r2
 8016c68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016c6c:	f108 0601 	add.w	r6, r8, #1
 8016c70:	42b3      	cmp	r3, r6
 8016c72:	db0b      	blt.n	8016c8c <__lshift+0x38>
 8016c74:	4638      	mov	r0, r7
 8016c76:	f7ff fd9d 	bl	80167b4 <_Balloc>
 8016c7a:	4605      	mov	r5, r0
 8016c7c:	b948      	cbnz	r0, 8016c92 <__lshift+0x3e>
 8016c7e:	4602      	mov	r2, r0
 8016c80:	4b28      	ldr	r3, [pc, #160]	@ (8016d24 <__lshift+0xd0>)
 8016c82:	4829      	ldr	r0, [pc, #164]	@ (8016d28 <__lshift+0xd4>)
 8016c84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016c88:	f001 fb3e 	bl	8018308 <__assert_func>
 8016c8c:	3101      	adds	r1, #1
 8016c8e:	005b      	lsls	r3, r3, #1
 8016c90:	e7ee      	b.n	8016c70 <__lshift+0x1c>
 8016c92:	2300      	movs	r3, #0
 8016c94:	f100 0114 	add.w	r1, r0, #20
 8016c98:	f100 0210 	add.w	r2, r0, #16
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	4553      	cmp	r3, sl
 8016ca0:	db33      	blt.n	8016d0a <__lshift+0xb6>
 8016ca2:	6920      	ldr	r0, [r4, #16]
 8016ca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016ca8:	f104 0314 	add.w	r3, r4, #20
 8016cac:	f019 091f 	ands.w	r9, r9, #31
 8016cb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016cb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016cb8:	d02b      	beq.n	8016d12 <__lshift+0xbe>
 8016cba:	f1c9 0e20 	rsb	lr, r9, #32
 8016cbe:	468a      	mov	sl, r1
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	6818      	ldr	r0, [r3, #0]
 8016cc4:	fa00 f009 	lsl.w	r0, r0, r9
 8016cc8:	4310      	orrs	r0, r2
 8016cca:	f84a 0b04 	str.w	r0, [sl], #4
 8016cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cd2:	459c      	cmp	ip, r3
 8016cd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8016cd8:	d8f3      	bhi.n	8016cc2 <__lshift+0x6e>
 8016cda:	ebac 0304 	sub.w	r3, ip, r4
 8016cde:	3b15      	subs	r3, #21
 8016ce0:	f023 0303 	bic.w	r3, r3, #3
 8016ce4:	3304      	adds	r3, #4
 8016ce6:	f104 0015 	add.w	r0, r4, #21
 8016cea:	4560      	cmp	r0, ip
 8016cec:	bf88      	it	hi
 8016cee:	2304      	movhi	r3, #4
 8016cf0:	50ca      	str	r2, [r1, r3]
 8016cf2:	b10a      	cbz	r2, 8016cf8 <__lshift+0xa4>
 8016cf4:	f108 0602 	add.w	r6, r8, #2
 8016cf8:	3e01      	subs	r6, #1
 8016cfa:	4638      	mov	r0, r7
 8016cfc:	612e      	str	r6, [r5, #16]
 8016cfe:	4621      	mov	r1, r4
 8016d00:	f7ff fd98 	bl	8016834 <_Bfree>
 8016d04:	4628      	mov	r0, r5
 8016d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8016d0e:	3301      	adds	r3, #1
 8016d10:	e7c5      	b.n	8016c9e <__lshift+0x4a>
 8016d12:	3904      	subs	r1, #4
 8016d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8016d1c:	459c      	cmp	ip, r3
 8016d1e:	d8f9      	bhi.n	8016d14 <__lshift+0xc0>
 8016d20:	e7ea      	b.n	8016cf8 <__lshift+0xa4>
 8016d22:	bf00      	nop
 8016d24:	080196cd 	.word	0x080196cd
 8016d28:	080196de 	.word	0x080196de

08016d2c <__mcmp>:
 8016d2c:	690a      	ldr	r2, [r1, #16]
 8016d2e:	4603      	mov	r3, r0
 8016d30:	6900      	ldr	r0, [r0, #16]
 8016d32:	1a80      	subs	r0, r0, r2
 8016d34:	b530      	push	{r4, r5, lr}
 8016d36:	d10e      	bne.n	8016d56 <__mcmp+0x2a>
 8016d38:	3314      	adds	r3, #20
 8016d3a:	3114      	adds	r1, #20
 8016d3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016d40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016d44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016d48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016d4c:	4295      	cmp	r5, r2
 8016d4e:	d003      	beq.n	8016d58 <__mcmp+0x2c>
 8016d50:	d205      	bcs.n	8016d5e <__mcmp+0x32>
 8016d52:	f04f 30ff 	mov.w	r0, #4294967295
 8016d56:	bd30      	pop	{r4, r5, pc}
 8016d58:	42a3      	cmp	r3, r4
 8016d5a:	d3f3      	bcc.n	8016d44 <__mcmp+0x18>
 8016d5c:	e7fb      	b.n	8016d56 <__mcmp+0x2a>
 8016d5e:	2001      	movs	r0, #1
 8016d60:	e7f9      	b.n	8016d56 <__mcmp+0x2a>
	...

08016d64 <__mdiff>:
 8016d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d68:	4689      	mov	r9, r1
 8016d6a:	4606      	mov	r6, r0
 8016d6c:	4611      	mov	r1, r2
 8016d6e:	4648      	mov	r0, r9
 8016d70:	4614      	mov	r4, r2
 8016d72:	f7ff ffdb 	bl	8016d2c <__mcmp>
 8016d76:	1e05      	subs	r5, r0, #0
 8016d78:	d112      	bne.n	8016da0 <__mdiff+0x3c>
 8016d7a:	4629      	mov	r1, r5
 8016d7c:	4630      	mov	r0, r6
 8016d7e:	f7ff fd19 	bl	80167b4 <_Balloc>
 8016d82:	4602      	mov	r2, r0
 8016d84:	b928      	cbnz	r0, 8016d92 <__mdiff+0x2e>
 8016d86:	4b3f      	ldr	r3, [pc, #252]	@ (8016e84 <__mdiff+0x120>)
 8016d88:	f240 2137 	movw	r1, #567	@ 0x237
 8016d8c:	483e      	ldr	r0, [pc, #248]	@ (8016e88 <__mdiff+0x124>)
 8016d8e:	f001 fabb 	bl	8018308 <__assert_func>
 8016d92:	2301      	movs	r3, #1
 8016d94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016d98:	4610      	mov	r0, r2
 8016d9a:	b003      	add	sp, #12
 8016d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016da0:	bfbc      	itt	lt
 8016da2:	464b      	movlt	r3, r9
 8016da4:	46a1      	movlt	r9, r4
 8016da6:	4630      	mov	r0, r6
 8016da8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016dac:	bfba      	itte	lt
 8016dae:	461c      	movlt	r4, r3
 8016db0:	2501      	movlt	r5, #1
 8016db2:	2500      	movge	r5, #0
 8016db4:	f7ff fcfe 	bl	80167b4 <_Balloc>
 8016db8:	4602      	mov	r2, r0
 8016dba:	b918      	cbnz	r0, 8016dc4 <__mdiff+0x60>
 8016dbc:	4b31      	ldr	r3, [pc, #196]	@ (8016e84 <__mdiff+0x120>)
 8016dbe:	f240 2145 	movw	r1, #581	@ 0x245
 8016dc2:	e7e3      	b.n	8016d8c <__mdiff+0x28>
 8016dc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016dc8:	6926      	ldr	r6, [r4, #16]
 8016dca:	60c5      	str	r5, [r0, #12]
 8016dcc:	f109 0310 	add.w	r3, r9, #16
 8016dd0:	f109 0514 	add.w	r5, r9, #20
 8016dd4:	f104 0e14 	add.w	lr, r4, #20
 8016dd8:	f100 0b14 	add.w	fp, r0, #20
 8016ddc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016de0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016de4:	9301      	str	r3, [sp, #4]
 8016de6:	46d9      	mov	r9, fp
 8016de8:	f04f 0c00 	mov.w	ip, #0
 8016dec:	9b01      	ldr	r3, [sp, #4]
 8016dee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016df2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016df6:	9301      	str	r3, [sp, #4]
 8016df8:	fa1f f38a 	uxth.w	r3, sl
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	b283      	uxth	r3, r0
 8016e00:	1acb      	subs	r3, r1, r3
 8016e02:	0c00      	lsrs	r0, r0, #16
 8016e04:	4463      	add	r3, ip
 8016e06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016e0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016e14:	4576      	cmp	r6, lr
 8016e16:	f849 3b04 	str.w	r3, [r9], #4
 8016e1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016e1e:	d8e5      	bhi.n	8016dec <__mdiff+0x88>
 8016e20:	1b33      	subs	r3, r6, r4
 8016e22:	3b15      	subs	r3, #21
 8016e24:	f023 0303 	bic.w	r3, r3, #3
 8016e28:	3415      	adds	r4, #21
 8016e2a:	3304      	adds	r3, #4
 8016e2c:	42a6      	cmp	r6, r4
 8016e2e:	bf38      	it	cc
 8016e30:	2304      	movcc	r3, #4
 8016e32:	441d      	add	r5, r3
 8016e34:	445b      	add	r3, fp
 8016e36:	461e      	mov	r6, r3
 8016e38:	462c      	mov	r4, r5
 8016e3a:	4544      	cmp	r4, r8
 8016e3c:	d30e      	bcc.n	8016e5c <__mdiff+0xf8>
 8016e3e:	f108 0103 	add.w	r1, r8, #3
 8016e42:	1b49      	subs	r1, r1, r5
 8016e44:	f021 0103 	bic.w	r1, r1, #3
 8016e48:	3d03      	subs	r5, #3
 8016e4a:	45a8      	cmp	r8, r5
 8016e4c:	bf38      	it	cc
 8016e4e:	2100      	movcc	r1, #0
 8016e50:	440b      	add	r3, r1
 8016e52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016e56:	b191      	cbz	r1, 8016e7e <__mdiff+0x11a>
 8016e58:	6117      	str	r7, [r2, #16]
 8016e5a:	e79d      	b.n	8016d98 <__mdiff+0x34>
 8016e5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016e60:	46e6      	mov	lr, ip
 8016e62:	0c08      	lsrs	r0, r1, #16
 8016e64:	fa1c fc81 	uxtah	ip, ip, r1
 8016e68:	4471      	add	r1, lr
 8016e6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016e6e:	b289      	uxth	r1, r1
 8016e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016e74:	f846 1b04 	str.w	r1, [r6], #4
 8016e78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016e7c:	e7dd      	b.n	8016e3a <__mdiff+0xd6>
 8016e7e:	3f01      	subs	r7, #1
 8016e80:	e7e7      	b.n	8016e52 <__mdiff+0xee>
 8016e82:	bf00      	nop
 8016e84:	080196cd 	.word	0x080196cd
 8016e88:	080196de 	.word	0x080196de

08016e8c <__ulp>:
 8016e8c:	b082      	sub	sp, #8
 8016e8e:	ed8d 0b00 	vstr	d0, [sp]
 8016e92:	9a01      	ldr	r2, [sp, #4]
 8016e94:	4b0f      	ldr	r3, [pc, #60]	@ (8016ed4 <__ulp+0x48>)
 8016e96:	4013      	ands	r3, r2
 8016e98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	dc08      	bgt.n	8016eb2 <__ulp+0x26>
 8016ea0:	425b      	negs	r3, r3
 8016ea2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016ea6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016eaa:	da04      	bge.n	8016eb6 <__ulp+0x2a>
 8016eac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016eb0:	4113      	asrs	r3, r2
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	e008      	b.n	8016ec8 <__ulp+0x3c>
 8016eb6:	f1a2 0314 	sub.w	r3, r2, #20
 8016eba:	2b1e      	cmp	r3, #30
 8016ebc:	bfda      	itte	le
 8016ebe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016ec2:	40da      	lsrle	r2, r3
 8016ec4:	2201      	movgt	r2, #1
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	4619      	mov	r1, r3
 8016eca:	4610      	mov	r0, r2
 8016ecc:	ec41 0b10 	vmov	d0, r0, r1
 8016ed0:	b002      	add	sp, #8
 8016ed2:	4770      	bx	lr
 8016ed4:	7ff00000 	.word	0x7ff00000

08016ed8 <__b2d>:
 8016ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016edc:	6906      	ldr	r6, [r0, #16]
 8016ede:	f100 0814 	add.w	r8, r0, #20
 8016ee2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016ee6:	1f37      	subs	r7, r6, #4
 8016ee8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016eec:	4610      	mov	r0, r2
 8016eee:	f7ff fd53 	bl	8016998 <__hi0bits>
 8016ef2:	f1c0 0320 	rsb	r3, r0, #32
 8016ef6:	280a      	cmp	r0, #10
 8016ef8:	600b      	str	r3, [r1, #0]
 8016efa:	491b      	ldr	r1, [pc, #108]	@ (8016f68 <__b2d+0x90>)
 8016efc:	dc15      	bgt.n	8016f2a <__b2d+0x52>
 8016efe:	f1c0 0c0b 	rsb	ip, r0, #11
 8016f02:	fa22 f30c 	lsr.w	r3, r2, ip
 8016f06:	45b8      	cmp	r8, r7
 8016f08:	ea43 0501 	orr.w	r5, r3, r1
 8016f0c:	bf34      	ite	cc
 8016f0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016f12:	2300      	movcs	r3, #0
 8016f14:	3015      	adds	r0, #21
 8016f16:	fa02 f000 	lsl.w	r0, r2, r0
 8016f1a:	fa23 f30c 	lsr.w	r3, r3, ip
 8016f1e:	4303      	orrs	r3, r0
 8016f20:	461c      	mov	r4, r3
 8016f22:	ec45 4b10 	vmov	d0, r4, r5
 8016f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f2a:	45b8      	cmp	r8, r7
 8016f2c:	bf3a      	itte	cc
 8016f2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016f32:	f1a6 0708 	subcc.w	r7, r6, #8
 8016f36:	2300      	movcs	r3, #0
 8016f38:	380b      	subs	r0, #11
 8016f3a:	d012      	beq.n	8016f62 <__b2d+0x8a>
 8016f3c:	f1c0 0120 	rsb	r1, r0, #32
 8016f40:	fa23 f401 	lsr.w	r4, r3, r1
 8016f44:	4082      	lsls	r2, r0
 8016f46:	4322      	orrs	r2, r4
 8016f48:	4547      	cmp	r7, r8
 8016f4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016f4e:	bf8c      	ite	hi
 8016f50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016f54:	2200      	movls	r2, #0
 8016f56:	4083      	lsls	r3, r0
 8016f58:	40ca      	lsrs	r2, r1
 8016f5a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016f5e:	4313      	orrs	r3, r2
 8016f60:	e7de      	b.n	8016f20 <__b2d+0x48>
 8016f62:	ea42 0501 	orr.w	r5, r2, r1
 8016f66:	e7db      	b.n	8016f20 <__b2d+0x48>
 8016f68:	3ff00000 	.word	0x3ff00000

08016f6c <__d2b>:
 8016f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016f70:	460f      	mov	r7, r1
 8016f72:	2101      	movs	r1, #1
 8016f74:	ec59 8b10 	vmov	r8, r9, d0
 8016f78:	4616      	mov	r6, r2
 8016f7a:	f7ff fc1b 	bl	80167b4 <_Balloc>
 8016f7e:	4604      	mov	r4, r0
 8016f80:	b930      	cbnz	r0, 8016f90 <__d2b+0x24>
 8016f82:	4602      	mov	r2, r0
 8016f84:	4b23      	ldr	r3, [pc, #140]	@ (8017014 <__d2b+0xa8>)
 8016f86:	4824      	ldr	r0, [pc, #144]	@ (8017018 <__d2b+0xac>)
 8016f88:	f240 310f 	movw	r1, #783	@ 0x30f
 8016f8c:	f001 f9bc 	bl	8018308 <__assert_func>
 8016f90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016f94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f98:	b10d      	cbz	r5, 8016f9e <__d2b+0x32>
 8016f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016f9e:	9301      	str	r3, [sp, #4]
 8016fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8016fa4:	d023      	beq.n	8016fee <__d2b+0x82>
 8016fa6:	4668      	mov	r0, sp
 8016fa8:	9300      	str	r3, [sp, #0]
 8016faa:	f7ff fd14 	bl	80169d6 <__lo0bits>
 8016fae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016fb2:	b1d0      	cbz	r0, 8016fea <__d2b+0x7e>
 8016fb4:	f1c0 0320 	rsb	r3, r0, #32
 8016fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8016fbc:	430b      	orrs	r3, r1
 8016fbe:	40c2      	lsrs	r2, r0
 8016fc0:	6163      	str	r3, [r4, #20]
 8016fc2:	9201      	str	r2, [sp, #4]
 8016fc4:	9b01      	ldr	r3, [sp, #4]
 8016fc6:	61a3      	str	r3, [r4, #24]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	bf0c      	ite	eq
 8016fcc:	2201      	moveq	r2, #1
 8016fce:	2202      	movne	r2, #2
 8016fd0:	6122      	str	r2, [r4, #16]
 8016fd2:	b1a5      	cbz	r5, 8016ffe <__d2b+0x92>
 8016fd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016fd8:	4405      	add	r5, r0
 8016fda:	603d      	str	r5, [r7, #0]
 8016fdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016fe0:	6030      	str	r0, [r6, #0]
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	b003      	add	sp, #12
 8016fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fea:	6161      	str	r1, [r4, #20]
 8016fec:	e7ea      	b.n	8016fc4 <__d2b+0x58>
 8016fee:	a801      	add	r0, sp, #4
 8016ff0:	f7ff fcf1 	bl	80169d6 <__lo0bits>
 8016ff4:	9b01      	ldr	r3, [sp, #4]
 8016ff6:	6163      	str	r3, [r4, #20]
 8016ff8:	3020      	adds	r0, #32
 8016ffa:	2201      	movs	r2, #1
 8016ffc:	e7e8      	b.n	8016fd0 <__d2b+0x64>
 8016ffe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017002:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017006:	6038      	str	r0, [r7, #0]
 8017008:	6918      	ldr	r0, [r3, #16]
 801700a:	f7ff fcc5 	bl	8016998 <__hi0bits>
 801700e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017012:	e7e5      	b.n	8016fe0 <__d2b+0x74>
 8017014:	080196cd 	.word	0x080196cd
 8017018:	080196de 	.word	0x080196de

0801701c <__ratio>:
 801701c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017020:	4688      	mov	r8, r1
 8017022:	4669      	mov	r1, sp
 8017024:	4681      	mov	r9, r0
 8017026:	f7ff ff57 	bl	8016ed8 <__b2d>
 801702a:	a901      	add	r1, sp, #4
 801702c:	4640      	mov	r0, r8
 801702e:	ec55 4b10 	vmov	r4, r5, d0
 8017032:	f7ff ff51 	bl	8016ed8 <__b2d>
 8017036:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801703a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801703e:	1ad2      	subs	r2, r2, r3
 8017040:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017044:	1a5b      	subs	r3, r3, r1
 8017046:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801704a:	ec57 6b10 	vmov	r6, r7, d0
 801704e:	2b00      	cmp	r3, #0
 8017050:	bfd6      	itet	le
 8017052:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017056:	462a      	movgt	r2, r5
 8017058:	463a      	movle	r2, r7
 801705a:	46ab      	mov	fp, r5
 801705c:	46a2      	mov	sl, r4
 801705e:	bfce      	itee	gt
 8017060:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017064:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017068:	ee00 3a90 	vmovle	s1, r3
 801706c:	ec4b ab17 	vmov	d7, sl, fp
 8017070:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017074:	b003      	add	sp, #12
 8017076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801707a <__copybits>:
 801707a:	3901      	subs	r1, #1
 801707c:	b570      	push	{r4, r5, r6, lr}
 801707e:	1149      	asrs	r1, r1, #5
 8017080:	6914      	ldr	r4, [r2, #16]
 8017082:	3101      	adds	r1, #1
 8017084:	f102 0314 	add.w	r3, r2, #20
 8017088:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801708c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017090:	1f05      	subs	r5, r0, #4
 8017092:	42a3      	cmp	r3, r4
 8017094:	d30c      	bcc.n	80170b0 <__copybits+0x36>
 8017096:	1aa3      	subs	r3, r4, r2
 8017098:	3b11      	subs	r3, #17
 801709a:	f023 0303 	bic.w	r3, r3, #3
 801709e:	3211      	adds	r2, #17
 80170a0:	42a2      	cmp	r2, r4
 80170a2:	bf88      	it	hi
 80170a4:	2300      	movhi	r3, #0
 80170a6:	4418      	add	r0, r3
 80170a8:	2300      	movs	r3, #0
 80170aa:	4288      	cmp	r0, r1
 80170ac:	d305      	bcc.n	80170ba <__copybits+0x40>
 80170ae:	bd70      	pop	{r4, r5, r6, pc}
 80170b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80170b4:	f845 6f04 	str.w	r6, [r5, #4]!
 80170b8:	e7eb      	b.n	8017092 <__copybits+0x18>
 80170ba:	f840 3b04 	str.w	r3, [r0], #4
 80170be:	e7f4      	b.n	80170aa <__copybits+0x30>

080170c0 <__any_on>:
 80170c0:	f100 0214 	add.w	r2, r0, #20
 80170c4:	6900      	ldr	r0, [r0, #16]
 80170c6:	114b      	asrs	r3, r1, #5
 80170c8:	4298      	cmp	r0, r3
 80170ca:	b510      	push	{r4, lr}
 80170cc:	db11      	blt.n	80170f2 <__any_on+0x32>
 80170ce:	dd0a      	ble.n	80170e6 <__any_on+0x26>
 80170d0:	f011 011f 	ands.w	r1, r1, #31
 80170d4:	d007      	beq.n	80170e6 <__any_on+0x26>
 80170d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80170da:	fa24 f001 	lsr.w	r0, r4, r1
 80170de:	fa00 f101 	lsl.w	r1, r0, r1
 80170e2:	428c      	cmp	r4, r1
 80170e4:	d10b      	bne.n	80170fe <__any_on+0x3e>
 80170e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d803      	bhi.n	80170f6 <__any_on+0x36>
 80170ee:	2000      	movs	r0, #0
 80170f0:	bd10      	pop	{r4, pc}
 80170f2:	4603      	mov	r3, r0
 80170f4:	e7f7      	b.n	80170e6 <__any_on+0x26>
 80170f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80170fa:	2900      	cmp	r1, #0
 80170fc:	d0f5      	beq.n	80170ea <__any_on+0x2a>
 80170fe:	2001      	movs	r0, #1
 8017100:	e7f6      	b.n	80170f0 <__any_on+0x30>

08017102 <sulp>:
 8017102:	b570      	push	{r4, r5, r6, lr}
 8017104:	4604      	mov	r4, r0
 8017106:	460d      	mov	r5, r1
 8017108:	4616      	mov	r6, r2
 801710a:	ec45 4b10 	vmov	d0, r4, r5
 801710e:	f7ff febd 	bl	8016e8c <__ulp>
 8017112:	b17e      	cbz	r6, 8017134 <sulp+0x32>
 8017114:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017118:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801711c:	2b00      	cmp	r3, #0
 801711e:	dd09      	ble.n	8017134 <sulp+0x32>
 8017120:	051b      	lsls	r3, r3, #20
 8017122:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8017126:	2000      	movs	r0, #0
 8017128:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801712c:	ec41 0b17 	vmov	d7, r0, r1
 8017130:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017134:	bd70      	pop	{r4, r5, r6, pc}
	...

08017138 <_strtod_l>:
 8017138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713c:	ed2d 8b0a 	vpush	{d8-d12}
 8017140:	b097      	sub	sp, #92	@ 0x5c
 8017142:	4688      	mov	r8, r1
 8017144:	920e      	str	r2, [sp, #56]	@ 0x38
 8017146:	2200      	movs	r2, #0
 8017148:	9212      	str	r2, [sp, #72]	@ 0x48
 801714a:	9005      	str	r0, [sp, #20]
 801714c:	f04f 0a00 	mov.w	sl, #0
 8017150:	f04f 0b00 	mov.w	fp, #0
 8017154:	460a      	mov	r2, r1
 8017156:	9211      	str	r2, [sp, #68]	@ 0x44
 8017158:	7811      	ldrb	r1, [r2, #0]
 801715a:	292b      	cmp	r1, #43	@ 0x2b
 801715c:	d04c      	beq.n	80171f8 <_strtod_l+0xc0>
 801715e:	d839      	bhi.n	80171d4 <_strtod_l+0x9c>
 8017160:	290d      	cmp	r1, #13
 8017162:	d833      	bhi.n	80171cc <_strtod_l+0x94>
 8017164:	2908      	cmp	r1, #8
 8017166:	d833      	bhi.n	80171d0 <_strtod_l+0x98>
 8017168:	2900      	cmp	r1, #0
 801716a:	d03c      	beq.n	80171e6 <_strtod_l+0xae>
 801716c:	2200      	movs	r2, #0
 801716e:	9208      	str	r2, [sp, #32]
 8017170:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8017172:	782a      	ldrb	r2, [r5, #0]
 8017174:	2a30      	cmp	r2, #48	@ 0x30
 8017176:	f040 80b7 	bne.w	80172e8 <_strtod_l+0x1b0>
 801717a:	786a      	ldrb	r2, [r5, #1]
 801717c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017180:	2a58      	cmp	r2, #88	@ 0x58
 8017182:	d170      	bne.n	8017266 <_strtod_l+0x12e>
 8017184:	9302      	str	r3, [sp, #8]
 8017186:	9b08      	ldr	r3, [sp, #32]
 8017188:	9301      	str	r3, [sp, #4]
 801718a:	ab12      	add	r3, sp, #72	@ 0x48
 801718c:	9300      	str	r3, [sp, #0]
 801718e:	4a90      	ldr	r2, [pc, #576]	@ (80173d0 <_strtod_l+0x298>)
 8017190:	9805      	ldr	r0, [sp, #20]
 8017192:	ab13      	add	r3, sp, #76	@ 0x4c
 8017194:	a911      	add	r1, sp, #68	@ 0x44
 8017196:	f001 f951 	bl	801843c <__gethex>
 801719a:	f010 060f 	ands.w	r6, r0, #15
 801719e:	4604      	mov	r4, r0
 80171a0:	d005      	beq.n	80171ae <_strtod_l+0x76>
 80171a2:	2e06      	cmp	r6, #6
 80171a4:	d12a      	bne.n	80171fc <_strtod_l+0xc4>
 80171a6:	3501      	adds	r5, #1
 80171a8:	2300      	movs	r3, #0
 80171aa:	9511      	str	r5, [sp, #68]	@ 0x44
 80171ac:	9308      	str	r3, [sp, #32]
 80171ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	f040 8537 	bne.w	8017c24 <_strtod_l+0xaec>
 80171b6:	9b08      	ldr	r3, [sp, #32]
 80171b8:	ec4b ab10 	vmov	d0, sl, fp
 80171bc:	b1cb      	cbz	r3, 80171f2 <_strtod_l+0xba>
 80171be:	eeb1 0b40 	vneg.f64	d0, d0
 80171c2:	b017      	add	sp, #92	@ 0x5c
 80171c4:	ecbd 8b0a 	vpop	{d8-d12}
 80171c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171cc:	2920      	cmp	r1, #32
 80171ce:	d1cd      	bne.n	801716c <_strtod_l+0x34>
 80171d0:	3201      	adds	r2, #1
 80171d2:	e7c0      	b.n	8017156 <_strtod_l+0x1e>
 80171d4:	292d      	cmp	r1, #45	@ 0x2d
 80171d6:	d1c9      	bne.n	801716c <_strtod_l+0x34>
 80171d8:	2101      	movs	r1, #1
 80171da:	9108      	str	r1, [sp, #32]
 80171dc:	1c51      	adds	r1, r2, #1
 80171de:	9111      	str	r1, [sp, #68]	@ 0x44
 80171e0:	7852      	ldrb	r2, [r2, #1]
 80171e2:	2a00      	cmp	r2, #0
 80171e4:	d1c4      	bne.n	8017170 <_strtod_l+0x38>
 80171e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80171e8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	f040 8517 	bne.w	8017c20 <_strtod_l+0xae8>
 80171f2:	ec4b ab10 	vmov	d0, sl, fp
 80171f6:	e7e4      	b.n	80171c2 <_strtod_l+0x8a>
 80171f8:	2100      	movs	r1, #0
 80171fa:	e7ee      	b.n	80171da <_strtod_l+0xa2>
 80171fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80171fe:	b13a      	cbz	r2, 8017210 <_strtod_l+0xd8>
 8017200:	2135      	movs	r1, #53	@ 0x35
 8017202:	a814      	add	r0, sp, #80	@ 0x50
 8017204:	f7ff ff39 	bl	801707a <__copybits>
 8017208:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801720a:	9805      	ldr	r0, [sp, #20]
 801720c:	f7ff fb12 	bl	8016834 <_Bfree>
 8017210:	1e73      	subs	r3, r6, #1
 8017212:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017214:	2b04      	cmp	r3, #4
 8017216:	d806      	bhi.n	8017226 <_strtod_l+0xee>
 8017218:	e8df f003 	tbb	[pc, r3]
 801721c:	201d0314 	.word	0x201d0314
 8017220:	14          	.byte	0x14
 8017221:	00          	.byte	0x00
 8017222:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8017226:	05e3      	lsls	r3, r4, #23
 8017228:	bf48      	it	mi
 801722a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801722e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017232:	0d1b      	lsrs	r3, r3, #20
 8017234:	051b      	lsls	r3, r3, #20
 8017236:	2b00      	cmp	r3, #0
 8017238:	d1b9      	bne.n	80171ae <_strtod_l+0x76>
 801723a:	f7fe fb91 	bl	8015960 <__errno>
 801723e:	2322      	movs	r3, #34	@ 0x22
 8017240:	6003      	str	r3, [r0, #0]
 8017242:	e7b4      	b.n	80171ae <_strtod_l+0x76>
 8017244:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8017248:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801724c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8017250:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017254:	e7e7      	b.n	8017226 <_strtod_l+0xee>
 8017256:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80173d8 <_strtod_l+0x2a0>
 801725a:	e7e4      	b.n	8017226 <_strtod_l+0xee>
 801725c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8017260:	f04f 3aff 	mov.w	sl, #4294967295
 8017264:	e7df      	b.n	8017226 <_strtod_l+0xee>
 8017266:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017268:	1c5a      	adds	r2, r3, #1
 801726a:	9211      	str	r2, [sp, #68]	@ 0x44
 801726c:	785b      	ldrb	r3, [r3, #1]
 801726e:	2b30      	cmp	r3, #48	@ 0x30
 8017270:	d0f9      	beq.n	8017266 <_strtod_l+0x12e>
 8017272:	2b00      	cmp	r3, #0
 8017274:	d09b      	beq.n	80171ae <_strtod_l+0x76>
 8017276:	2301      	movs	r3, #1
 8017278:	9307      	str	r3, [sp, #28]
 801727a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801727c:	930a      	str	r3, [sp, #40]	@ 0x28
 801727e:	2300      	movs	r3, #0
 8017280:	9306      	str	r3, [sp, #24]
 8017282:	4699      	mov	r9, r3
 8017284:	461d      	mov	r5, r3
 8017286:	220a      	movs	r2, #10
 8017288:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801728a:	7804      	ldrb	r4, [r0, #0]
 801728c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017290:	b2d9      	uxtb	r1, r3
 8017292:	2909      	cmp	r1, #9
 8017294:	d92a      	bls.n	80172ec <_strtod_l+0x1b4>
 8017296:	494f      	ldr	r1, [pc, #316]	@ (80173d4 <_strtod_l+0x29c>)
 8017298:	2201      	movs	r2, #1
 801729a:	f000 ffe9 	bl	8018270 <strncmp>
 801729e:	b398      	cbz	r0, 8017308 <_strtod_l+0x1d0>
 80172a0:	2000      	movs	r0, #0
 80172a2:	4622      	mov	r2, r4
 80172a4:	462b      	mov	r3, r5
 80172a6:	4607      	mov	r7, r0
 80172a8:	4601      	mov	r1, r0
 80172aa:	2a65      	cmp	r2, #101	@ 0x65
 80172ac:	d001      	beq.n	80172b2 <_strtod_l+0x17a>
 80172ae:	2a45      	cmp	r2, #69	@ 0x45
 80172b0:	d118      	bne.n	80172e4 <_strtod_l+0x1ac>
 80172b2:	b91b      	cbnz	r3, 80172bc <_strtod_l+0x184>
 80172b4:	9b07      	ldr	r3, [sp, #28]
 80172b6:	4303      	orrs	r3, r0
 80172b8:	d095      	beq.n	80171e6 <_strtod_l+0xae>
 80172ba:	2300      	movs	r3, #0
 80172bc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80172c0:	f108 0201 	add.w	r2, r8, #1
 80172c4:	9211      	str	r2, [sp, #68]	@ 0x44
 80172c6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80172ca:	2a2b      	cmp	r2, #43	@ 0x2b
 80172cc:	d074      	beq.n	80173b8 <_strtod_l+0x280>
 80172ce:	2a2d      	cmp	r2, #45	@ 0x2d
 80172d0:	d07a      	beq.n	80173c8 <_strtod_l+0x290>
 80172d2:	f04f 0e00 	mov.w	lr, #0
 80172d6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80172da:	2c09      	cmp	r4, #9
 80172dc:	f240 8082 	bls.w	80173e4 <_strtod_l+0x2ac>
 80172e0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80172e4:	2400      	movs	r4, #0
 80172e6:	e09d      	b.n	8017424 <_strtod_l+0x2ec>
 80172e8:	2300      	movs	r3, #0
 80172ea:	e7c5      	b.n	8017278 <_strtod_l+0x140>
 80172ec:	2d08      	cmp	r5, #8
 80172ee:	bfc8      	it	gt
 80172f0:	9906      	ldrgt	r1, [sp, #24]
 80172f2:	f100 0001 	add.w	r0, r0, #1
 80172f6:	bfca      	itet	gt
 80172f8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80172fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8017300:	9306      	strgt	r3, [sp, #24]
 8017302:	3501      	adds	r5, #1
 8017304:	9011      	str	r0, [sp, #68]	@ 0x44
 8017306:	e7bf      	b.n	8017288 <_strtod_l+0x150>
 8017308:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801730a:	1c5a      	adds	r2, r3, #1
 801730c:	9211      	str	r2, [sp, #68]	@ 0x44
 801730e:	785a      	ldrb	r2, [r3, #1]
 8017310:	b3bd      	cbz	r5, 8017382 <_strtod_l+0x24a>
 8017312:	4607      	mov	r7, r0
 8017314:	462b      	mov	r3, r5
 8017316:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801731a:	2909      	cmp	r1, #9
 801731c:	d912      	bls.n	8017344 <_strtod_l+0x20c>
 801731e:	2101      	movs	r1, #1
 8017320:	e7c3      	b.n	80172aa <_strtod_l+0x172>
 8017322:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017324:	1c5a      	adds	r2, r3, #1
 8017326:	9211      	str	r2, [sp, #68]	@ 0x44
 8017328:	785a      	ldrb	r2, [r3, #1]
 801732a:	3001      	adds	r0, #1
 801732c:	2a30      	cmp	r2, #48	@ 0x30
 801732e:	d0f8      	beq.n	8017322 <_strtod_l+0x1ea>
 8017330:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8017334:	2b08      	cmp	r3, #8
 8017336:	f200 847a 	bhi.w	8017c2e <_strtod_l+0xaf6>
 801733a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801733c:	930a      	str	r3, [sp, #40]	@ 0x28
 801733e:	4607      	mov	r7, r0
 8017340:	2000      	movs	r0, #0
 8017342:	4603      	mov	r3, r0
 8017344:	3a30      	subs	r2, #48	@ 0x30
 8017346:	f100 0101 	add.w	r1, r0, #1
 801734a:	d014      	beq.n	8017376 <_strtod_l+0x23e>
 801734c:	440f      	add	r7, r1
 801734e:	469c      	mov	ip, r3
 8017350:	f04f 0e0a 	mov.w	lr, #10
 8017354:	f10c 0401 	add.w	r4, ip, #1
 8017358:	1ae6      	subs	r6, r4, r3
 801735a:	42b1      	cmp	r1, r6
 801735c:	dc13      	bgt.n	8017386 <_strtod_l+0x24e>
 801735e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8017362:	1819      	adds	r1, r3, r0
 8017364:	2908      	cmp	r1, #8
 8017366:	f103 0301 	add.w	r3, r3, #1
 801736a:	4403      	add	r3, r0
 801736c:	dc19      	bgt.n	80173a2 <_strtod_l+0x26a>
 801736e:	210a      	movs	r1, #10
 8017370:	fb01 2909 	mla	r9, r1, r9, r2
 8017374:	2100      	movs	r1, #0
 8017376:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017378:	1c50      	adds	r0, r2, #1
 801737a:	9011      	str	r0, [sp, #68]	@ 0x44
 801737c:	7852      	ldrb	r2, [r2, #1]
 801737e:	4608      	mov	r0, r1
 8017380:	e7c9      	b.n	8017316 <_strtod_l+0x1de>
 8017382:	4628      	mov	r0, r5
 8017384:	e7d2      	b.n	801732c <_strtod_l+0x1f4>
 8017386:	f1bc 0f08 	cmp.w	ip, #8
 801738a:	dc03      	bgt.n	8017394 <_strtod_l+0x25c>
 801738c:	fb0e f909 	mul.w	r9, lr, r9
 8017390:	46a4      	mov	ip, r4
 8017392:	e7df      	b.n	8017354 <_strtod_l+0x21c>
 8017394:	2c10      	cmp	r4, #16
 8017396:	bfde      	ittt	le
 8017398:	9e06      	ldrle	r6, [sp, #24]
 801739a:	fb0e f606 	mulle.w	r6, lr, r6
 801739e:	9606      	strle	r6, [sp, #24]
 80173a0:	e7f6      	b.n	8017390 <_strtod_l+0x258>
 80173a2:	290f      	cmp	r1, #15
 80173a4:	bfdf      	itttt	le
 80173a6:	9806      	ldrle	r0, [sp, #24]
 80173a8:	210a      	movle	r1, #10
 80173aa:	fb01 2200 	mlale	r2, r1, r0, r2
 80173ae:	9206      	strle	r2, [sp, #24]
 80173b0:	e7e0      	b.n	8017374 <_strtod_l+0x23c>
 80173b2:	2700      	movs	r7, #0
 80173b4:	2101      	movs	r1, #1
 80173b6:	e77d      	b.n	80172b4 <_strtod_l+0x17c>
 80173b8:	f04f 0e00 	mov.w	lr, #0
 80173bc:	f108 0202 	add.w	r2, r8, #2
 80173c0:	9211      	str	r2, [sp, #68]	@ 0x44
 80173c2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80173c6:	e786      	b.n	80172d6 <_strtod_l+0x19e>
 80173c8:	f04f 0e01 	mov.w	lr, #1
 80173cc:	e7f6      	b.n	80173bc <_strtod_l+0x284>
 80173ce:	bf00      	nop
 80173d0:	08019904 	.word	0x08019904
 80173d4:	08019737 	.word	0x08019737
 80173d8:	7ff00000 	.word	0x7ff00000
 80173dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80173de:	1c54      	adds	r4, r2, #1
 80173e0:	9411      	str	r4, [sp, #68]	@ 0x44
 80173e2:	7852      	ldrb	r2, [r2, #1]
 80173e4:	2a30      	cmp	r2, #48	@ 0x30
 80173e6:	d0f9      	beq.n	80173dc <_strtod_l+0x2a4>
 80173e8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80173ec:	2c08      	cmp	r4, #8
 80173ee:	f63f af79 	bhi.w	80172e4 <_strtod_l+0x1ac>
 80173f2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80173f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80173f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80173fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80173fc:	1c54      	adds	r4, r2, #1
 80173fe:	9411      	str	r4, [sp, #68]	@ 0x44
 8017400:	7852      	ldrb	r2, [r2, #1]
 8017402:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8017406:	2e09      	cmp	r6, #9
 8017408:	d937      	bls.n	801747a <_strtod_l+0x342>
 801740a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801740c:	1ba4      	subs	r4, r4, r6
 801740e:	2c08      	cmp	r4, #8
 8017410:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8017414:	dc02      	bgt.n	801741c <_strtod_l+0x2e4>
 8017416:	4564      	cmp	r4, ip
 8017418:	bfa8      	it	ge
 801741a:	4664      	movge	r4, ip
 801741c:	f1be 0f00 	cmp.w	lr, #0
 8017420:	d000      	beq.n	8017424 <_strtod_l+0x2ec>
 8017422:	4264      	negs	r4, r4
 8017424:	2b00      	cmp	r3, #0
 8017426:	d14d      	bne.n	80174c4 <_strtod_l+0x38c>
 8017428:	9b07      	ldr	r3, [sp, #28]
 801742a:	4318      	orrs	r0, r3
 801742c:	f47f aebf 	bne.w	80171ae <_strtod_l+0x76>
 8017430:	2900      	cmp	r1, #0
 8017432:	f47f aed8 	bne.w	80171e6 <_strtod_l+0xae>
 8017436:	2a69      	cmp	r2, #105	@ 0x69
 8017438:	d027      	beq.n	801748a <_strtod_l+0x352>
 801743a:	dc24      	bgt.n	8017486 <_strtod_l+0x34e>
 801743c:	2a49      	cmp	r2, #73	@ 0x49
 801743e:	d024      	beq.n	801748a <_strtod_l+0x352>
 8017440:	2a4e      	cmp	r2, #78	@ 0x4e
 8017442:	f47f aed0 	bne.w	80171e6 <_strtod_l+0xae>
 8017446:	4997      	ldr	r1, [pc, #604]	@ (80176a4 <_strtod_l+0x56c>)
 8017448:	a811      	add	r0, sp, #68	@ 0x44
 801744a:	f001 fa19 	bl	8018880 <__match>
 801744e:	2800      	cmp	r0, #0
 8017450:	f43f aec9 	beq.w	80171e6 <_strtod_l+0xae>
 8017454:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	2b28      	cmp	r3, #40	@ 0x28
 801745a:	d12d      	bne.n	80174b8 <_strtod_l+0x380>
 801745c:	4992      	ldr	r1, [pc, #584]	@ (80176a8 <_strtod_l+0x570>)
 801745e:	aa14      	add	r2, sp, #80	@ 0x50
 8017460:	a811      	add	r0, sp, #68	@ 0x44
 8017462:	f001 fa21 	bl	80188a8 <__hexnan>
 8017466:	2805      	cmp	r0, #5
 8017468:	d126      	bne.n	80174b8 <_strtod_l+0x380>
 801746a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801746c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8017470:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017474:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8017478:	e699      	b.n	80171ae <_strtod_l+0x76>
 801747a:	240a      	movs	r4, #10
 801747c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8017480:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8017484:	e7b9      	b.n	80173fa <_strtod_l+0x2c2>
 8017486:	2a6e      	cmp	r2, #110	@ 0x6e
 8017488:	e7db      	b.n	8017442 <_strtod_l+0x30a>
 801748a:	4988      	ldr	r1, [pc, #544]	@ (80176ac <_strtod_l+0x574>)
 801748c:	a811      	add	r0, sp, #68	@ 0x44
 801748e:	f001 f9f7 	bl	8018880 <__match>
 8017492:	2800      	cmp	r0, #0
 8017494:	f43f aea7 	beq.w	80171e6 <_strtod_l+0xae>
 8017498:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801749a:	4985      	ldr	r1, [pc, #532]	@ (80176b0 <_strtod_l+0x578>)
 801749c:	3b01      	subs	r3, #1
 801749e:	a811      	add	r0, sp, #68	@ 0x44
 80174a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80174a2:	f001 f9ed 	bl	8018880 <__match>
 80174a6:	b910      	cbnz	r0, 80174ae <_strtod_l+0x376>
 80174a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80174aa:	3301      	adds	r3, #1
 80174ac:	9311      	str	r3, [sp, #68]	@ 0x44
 80174ae:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80176c4 <_strtod_l+0x58c>
 80174b2:	f04f 0a00 	mov.w	sl, #0
 80174b6:	e67a      	b.n	80171ae <_strtod_l+0x76>
 80174b8:	487e      	ldr	r0, [pc, #504]	@ (80176b4 <_strtod_l+0x57c>)
 80174ba:	f000 ff1d 	bl	80182f8 <nan>
 80174be:	ec5b ab10 	vmov	sl, fp, d0
 80174c2:	e674      	b.n	80171ae <_strtod_l+0x76>
 80174c4:	ee07 9a90 	vmov	s15, r9
 80174c8:	1be2      	subs	r2, r4, r7
 80174ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80174ce:	2d00      	cmp	r5, #0
 80174d0:	bf08      	it	eq
 80174d2:	461d      	moveq	r5, r3
 80174d4:	2b10      	cmp	r3, #16
 80174d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80174d8:	461a      	mov	r2, r3
 80174da:	bfa8      	it	ge
 80174dc:	2210      	movge	r2, #16
 80174de:	2b09      	cmp	r3, #9
 80174e0:	ec5b ab17 	vmov	sl, fp, d7
 80174e4:	dc15      	bgt.n	8017512 <_strtod_l+0x3da>
 80174e6:	1be1      	subs	r1, r4, r7
 80174e8:	2900      	cmp	r1, #0
 80174ea:	f43f ae60 	beq.w	80171ae <_strtod_l+0x76>
 80174ee:	eba4 0107 	sub.w	r1, r4, r7
 80174f2:	dd72      	ble.n	80175da <_strtod_l+0x4a2>
 80174f4:	2916      	cmp	r1, #22
 80174f6:	dc59      	bgt.n	80175ac <_strtod_l+0x474>
 80174f8:	4b6f      	ldr	r3, [pc, #444]	@ (80176b8 <_strtod_l+0x580>)
 80174fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80174fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017500:	ed93 7b00 	vldr	d7, [r3]
 8017504:	ec4b ab16 	vmov	d6, sl, fp
 8017508:	ee27 7b06 	vmul.f64	d7, d7, d6
 801750c:	ec5b ab17 	vmov	sl, fp, d7
 8017510:	e64d      	b.n	80171ae <_strtod_l+0x76>
 8017512:	4969      	ldr	r1, [pc, #420]	@ (80176b8 <_strtod_l+0x580>)
 8017514:	eddd 6a06 	vldr	s13, [sp, #24]
 8017518:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801751c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8017520:	2b0f      	cmp	r3, #15
 8017522:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8017526:	eea7 6b05 	vfma.f64	d6, d7, d5
 801752a:	ec5b ab16 	vmov	sl, fp, d6
 801752e:	ddda      	ble.n	80174e6 <_strtod_l+0x3ae>
 8017530:	1a9a      	subs	r2, r3, r2
 8017532:	1be1      	subs	r1, r4, r7
 8017534:	440a      	add	r2, r1
 8017536:	2a00      	cmp	r2, #0
 8017538:	f340 8094 	ble.w	8017664 <_strtod_l+0x52c>
 801753c:	f012 000f 	ands.w	r0, r2, #15
 8017540:	d00a      	beq.n	8017558 <_strtod_l+0x420>
 8017542:	495d      	ldr	r1, [pc, #372]	@ (80176b8 <_strtod_l+0x580>)
 8017544:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017548:	ed91 7b00 	vldr	d7, [r1]
 801754c:	ec4b ab16 	vmov	d6, sl, fp
 8017550:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017554:	ec5b ab17 	vmov	sl, fp, d7
 8017558:	f032 020f 	bics.w	r2, r2, #15
 801755c:	d073      	beq.n	8017646 <_strtod_l+0x50e>
 801755e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8017562:	dd47      	ble.n	80175f4 <_strtod_l+0x4bc>
 8017564:	2400      	movs	r4, #0
 8017566:	4625      	mov	r5, r4
 8017568:	9407      	str	r4, [sp, #28]
 801756a:	4626      	mov	r6, r4
 801756c:	9a05      	ldr	r2, [sp, #20]
 801756e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80176c4 <_strtod_l+0x58c>
 8017572:	2322      	movs	r3, #34	@ 0x22
 8017574:	6013      	str	r3, [r2, #0]
 8017576:	f04f 0a00 	mov.w	sl, #0
 801757a:	9b07      	ldr	r3, [sp, #28]
 801757c:	2b00      	cmp	r3, #0
 801757e:	f43f ae16 	beq.w	80171ae <_strtod_l+0x76>
 8017582:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017584:	9805      	ldr	r0, [sp, #20]
 8017586:	f7ff f955 	bl	8016834 <_Bfree>
 801758a:	9805      	ldr	r0, [sp, #20]
 801758c:	4631      	mov	r1, r6
 801758e:	f7ff f951 	bl	8016834 <_Bfree>
 8017592:	9805      	ldr	r0, [sp, #20]
 8017594:	4629      	mov	r1, r5
 8017596:	f7ff f94d 	bl	8016834 <_Bfree>
 801759a:	9907      	ldr	r1, [sp, #28]
 801759c:	9805      	ldr	r0, [sp, #20]
 801759e:	f7ff f949 	bl	8016834 <_Bfree>
 80175a2:	9805      	ldr	r0, [sp, #20]
 80175a4:	4621      	mov	r1, r4
 80175a6:	f7ff f945 	bl	8016834 <_Bfree>
 80175aa:	e600      	b.n	80171ae <_strtod_l+0x76>
 80175ac:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80175b0:	1be0      	subs	r0, r4, r7
 80175b2:	4281      	cmp	r1, r0
 80175b4:	dbbc      	blt.n	8017530 <_strtod_l+0x3f8>
 80175b6:	4a40      	ldr	r2, [pc, #256]	@ (80176b8 <_strtod_l+0x580>)
 80175b8:	f1c3 030f 	rsb	r3, r3, #15
 80175bc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80175c0:	ed91 7b00 	vldr	d7, [r1]
 80175c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80175c6:	ec4b ab16 	vmov	d6, sl, fp
 80175ca:	1acb      	subs	r3, r1, r3
 80175cc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80175d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80175d4:	ed92 6b00 	vldr	d6, [r2]
 80175d8:	e796      	b.n	8017508 <_strtod_l+0x3d0>
 80175da:	3116      	adds	r1, #22
 80175dc:	dba8      	blt.n	8017530 <_strtod_l+0x3f8>
 80175de:	4b36      	ldr	r3, [pc, #216]	@ (80176b8 <_strtod_l+0x580>)
 80175e0:	1b3c      	subs	r4, r7, r4
 80175e2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80175e6:	ed94 7b00 	vldr	d7, [r4]
 80175ea:	ec4b ab16 	vmov	d6, sl, fp
 80175ee:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80175f2:	e78b      	b.n	801750c <_strtod_l+0x3d4>
 80175f4:	2000      	movs	r0, #0
 80175f6:	ec4b ab17 	vmov	d7, sl, fp
 80175fa:	4e30      	ldr	r6, [pc, #192]	@ (80176bc <_strtod_l+0x584>)
 80175fc:	1112      	asrs	r2, r2, #4
 80175fe:	4601      	mov	r1, r0
 8017600:	2a01      	cmp	r2, #1
 8017602:	dc23      	bgt.n	801764c <_strtod_l+0x514>
 8017604:	b108      	cbz	r0, 801760a <_strtod_l+0x4d2>
 8017606:	ec5b ab17 	vmov	sl, fp, d7
 801760a:	4a2c      	ldr	r2, [pc, #176]	@ (80176bc <_strtod_l+0x584>)
 801760c:	482c      	ldr	r0, [pc, #176]	@ (80176c0 <_strtod_l+0x588>)
 801760e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017612:	ed92 7b00 	vldr	d7, [r2]
 8017616:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801761a:	ec4b ab16 	vmov	d6, sl, fp
 801761e:	4a29      	ldr	r2, [pc, #164]	@ (80176c4 <_strtod_l+0x58c>)
 8017620:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017624:	ee17 1a90 	vmov	r1, s15
 8017628:	400a      	ands	r2, r1
 801762a:	4282      	cmp	r2, r0
 801762c:	ec5b ab17 	vmov	sl, fp, d7
 8017630:	d898      	bhi.n	8017564 <_strtod_l+0x42c>
 8017632:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8017636:	4282      	cmp	r2, r0
 8017638:	bf86      	itte	hi
 801763a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80176c8 <_strtod_l+0x590>
 801763e:	f04f 3aff 	movhi.w	sl, #4294967295
 8017642:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8017646:	2200      	movs	r2, #0
 8017648:	9206      	str	r2, [sp, #24]
 801764a:	e076      	b.n	801773a <_strtod_l+0x602>
 801764c:	f012 0f01 	tst.w	r2, #1
 8017650:	d004      	beq.n	801765c <_strtod_l+0x524>
 8017652:	ed96 6b00 	vldr	d6, [r6]
 8017656:	2001      	movs	r0, #1
 8017658:	ee27 7b06 	vmul.f64	d7, d7, d6
 801765c:	3101      	adds	r1, #1
 801765e:	1052      	asrs	r2, r2, #1
 8017660:	3608      	adds	r6, #8
 8017662:	e7cd      	b.n	8017600 <_strtod_l+0x4c8>
 8017664:	d0ef      	beq.n	8017646 <_strtod_l+0x50e>
 8017666:	4252      	negs	r2, r2
 8017668:	f012 000f 	ands.w	r0, r2, #15
 801766c:	d00a      	beq.n	8017684 <_strtod_l+0x54c>
 801766e:	4912      	ldr	r1, [pc, #72]	@ (80176b8 <_strtod_l+0x580>)
 8017670:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017674:	ed91 7b00 	vldr	d7, [r1]
 8017678:	ec4b ab16 	vmov	d6, sl, fp
 801767c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017680:	ec5b ab17 	vmov	sl, fp, d7
 8017684:	1112      	asrs	r2, r2, #4
 8017686:	d0de      	beq.n	8017646 <_strtod_l+0x50e>
 8017688:	2a1f      	cmp	r2, #31
 801768a:	dd1f      	ble.n	80176cc <_strtod_l+0x594>
 801768c:	2400      	movs	r4, #0
 801768e:	4625      	mov	r5, r4
 8017690:	9407      	str	r4, [sp, #28]
 8017692:	4626      	mov	r6, r4
 8017694:	9a05      	ldr	r2, [sp, #20]
 8017696:	2322      	movs	r3, #34	@ 0x22
 8017698:	f04f 0a00 	mov.w	sl, #0
 801769c:	f04f 0b00 	mov.w	fp, #0
 80176a0:	6013      	str	r3, [r2, #0]
 80176a2:	e76a      	b.n	801757a <_strtod_l+0x442>
 80176a4:	08019625 	.word	0x08019625
 80176a8:	080198f0 	.word	0x080198f0
 80176ac:	0801961d 	.word	0x0801961d
 80176b0:	08019654 	.word	0x08019654
 80176b4:	0801978d 	.word	0x0801978d
 80176b8:	08019828 	.word	0x08019828
 80176bc:	08019800 	.word	0x08019800
 80176c0:	7ca00000 	.word	0x7ca00000
 80176c4:	7ff00000 	.word	0x7ff00000
 80176c8:	7fefffff 	.word	0x7fefffff
 80176cc:	f012 0110 	ands.w	r1, r2, #16
 80176d0:	bf18      	it	ne
 80176d2:	216a      	movne	r1, #106	@ 0x6a
 80176d4:	9106      	str	r1, [sp, #24]
 80176d6:	ec4b ab17 	vmov	d7, sl, fp
 80176da:	49af      	ldr	r1, [pc, #700]	@ (8017998 <_strtod_l+0x860>)
 80176dc:	2000      	movs	r0, #0
 80176de:	07d6      	lsls	r6, r2, #31
 80176e0:	d504      	bpl.n	80176ec <_strtod_l+0x5b4>
 80176e2:	ed91 6b00 	vldr	d6, [r1]
 80176e6:	2001      	movs	r0, #1
 80176e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80176ec:	1052      	asrs	r2, r2, #1
 80176ee:	f101 0108 	add.w	r1, r1, #8
 80176f2:	d1f4      	bne.n	80176de <_strtod_l+0x5a6>
 80176f4:	b108      	cbz	r0, 80176fa <_strtod_l+0x5c2>
 80176f6:	ec5b ab17 	vmov	sl, fp, d7
 80176fa:	9a06      	ldr	r2, [sp, #24]
 80176fc:	b1b2      	cbz	r2, 801772c <_strtod_l+0x5f4>
 80176fe:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8017702:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8017706:	2a00      	cmp	r2, #0
 8017708:	4658      	mov	r0, fp
 801770a:	dd0f      	ble.n	801772c <_strtod_l+0x5f4>
 801770c:	2a1f      	cmp	r2, #31
 801770e:	dd55      	ble.n	80177bc <_strtod_l+0x684>
 8017710:	2a34      	cmp	r2, #52	@ 0x34
 8017712:	bfde      	ittt	le
 8017714:	f04f 32ff 	movle.w	r2, #4294967295
 8017718:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801771c:	408a      	lslle	r2, r1
 801771e:	f04f 0a00 	mov.w	sl, #0
 8017722:	bfcc      	ite	gt
 8017724:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017728:	ea02 0b00 	andle.w	fp, r2, r0
 801772c:	ec4b ab17 	vmov	d7, sl, fp
 8017730:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017738:	d0a8      	beq.n	801768c <_strtod_l+0x554>
 801773a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801773c:	9805      	ldr	r0, [sp, #20]
 801773e:	f8cd 9000 	str.w	r9, [sp]
 8017742:	462a      	mov	r2, r5
 8017744:	f7ff f8de 	bl	8016904 <__s2b>
 8017748:	9007      	str	r0, [sp, #28]
 801774a:	2800      	cmp	r0, #0
 801774c:	f43f af0a 	beq.w	8017564 <_strtod_l+0x42c>
 8017750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017752:	1b3f      	subs	r7, r7, r4
 8017754:	2b00      	cmp	r3, #0
 8017756:	bfb4      	ite	lt
 8017758:	463b      	movlt	r3, r7
 801775a:	2300      	movge	r3, #0
 801775c:	930a      	str	r3, [sp, #40]	@ 0x28
 801775e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017760:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8017988 <_strtod_l+0x850>
 8017764:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017768:	2400      	movs	r4, #0
 801776a:	930d      	str	r3, [sp, #52]	@ 0x34
 801776c:	4625      	mov	r5, r4
 801776e:	9b07      	ldr	r3, [sp, #28]
 8017770:	9805      	ldr	r0, [sp, #20]
 8017772:	6859      	ldr	r1, [r3, #4]
 8017774:	f7ff f81e 	bl	80167b4 <_Balloc>
 8017778:	4606      	mov	r6, r0
 801777a:	2800      	cmp	r0, #0
 801777c:	f43f aef6 	beq.w	801756c <_strtod_l+0x434>
 8017780:	9b07      	ldr	r3, [sp, #28]
 8017782:	691a      	ldr	r2, [r3, #16]
 8017784:	ec4b ab19 	vmov	d9, sl, fp
 8017788:	3202      	adds	r2, #2
 801778a:	f103 010c 	add.w	r1, r3, #12
 801778e:	0092      	lsls	r2, r2, #2
 8017790:	300c      	adds	r0, #12
 8017792:	f7fe f912 	bl	80159ba <memcpy>
 8017796:	eeb0 0b49 	vmov.f64	d0, d9
 801779a:	9805      	ldr	r0, [sp, #20]
 801779c:	aa14      	add	r2, sp, #80	@ 0x50
 801779e:	a913      	add	r1, sp, #76	@ 0x4c
 80177a0:	f7ff fbe4 	bl	8016f6c <__d2b>
 80177a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80177a6:	2800      	cmp	r0, #0
 80177a8:	f43f aee0 	beq.w	801756c <_strtod_l+0x434>
 80177ac:	9805      	ldr	r0, [sp, #20]
 80177ae:	2101      	movs	r1, #1
 80177b0:	f7ff f93e 	bl	8016a30 <__i2b>
 80177b4:	4605      	mov	r5, r0
 80177b6:	b940      	cbnz	r0, 80177ca <_strtod_l+0x692>
 80177b8:	2500      	movs	r5, #0
 80177ba:	e6d7      	b.n	801756c <_strtod_l+0x434>
 80177bc:	f04f 31ff 	mov.w	r1, #4294967295
 80177c0:	fa01 f202 	lsl.w	r2, r1, r2
 80177c4:	ea02 0a0a 	and.w	sl, r2, sl
 80177c8:	e7b0      	b.n	801772c <_strtod_l+0x5f4>
 80177ca:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80177cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80177ce:	2f00      	cmp	r7, #0
 80177d0:	bfab      	itete	ge
 80177d2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80177d4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80177d6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80177da:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80177de:	bfac      	ite	ge
 80177e0:	eb07 0903 	addge.w	r9, r7, r3
 80177e4:	eba3 0807 	sublt.w	r8, r3, r7
 80177e8:	9b06      	ldr	r3, [sp, #24]
 80177ea:	1aff      	subs	r7, r7, r3
 80177ec:	4417      	add	r7, r2
 80177ee:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80177f2:	4a6a      	ldr	r2, [pc, #424]	@ (801799c <_strtod_l+0x864>)
 80177f4:	3f01      	subs	r7, #1
 80177f6:	4297      	cmp	r7, r2
 80177f8:	da51      	bge.n	801789e <_strtod_l+0x766>
 80177fa:	1bd1      	subs	r1, r2, r7
 80177fc:	291f      	cmp	r1, #31
 80177fe:	eba3 0301 	sub.w	r3, r3, r1
 8017802:	f04f 0201 	mov.w	r2, #1
 8017806:	dc3e      	bgt.n	8017886 <_strtod_l+0x74e>
 8017808:	408a      	lsls	r2, r1
 801780a:	920c      	str	r2, [sp, #48]	@ 0x30
 801780c:	2200      	movs	r2, #0
 801780e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017810:	eb09 0703 	add.w	r7, r9, r3
 8017814:	4498      	add	r8, r3
 8017816:	9b06      	ldr	r3, [sp, #24]
 8017818:	45b9      	cmp	r9, r7
 801781a:	4498      	add	r8, r3
 801781c:	464b      	mov	r3, r9
 801781e:	bfa8      	it	ge
 8017820:	463b      	movge	r3, r7
 8017822:	4543      	cmp	r3, r8
 8017824:	bfa8      	it	ge
 8017826:	4643      	movge	r3, r8
 8017828:	2b00      	cmp	r3, #0
 801782a:	bfc2      	ittt	gt
 801782c:	1aff      	subgt	r7, r7, r3
 801782e:	eba8 0803 	subgt.w	r8, r8, r3
 8017832:	eba9 0903 	subgt.w	r9, r9, r3
 8017836:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017838:	2b00      	cmp	r3, #0
 801783a:	dd16      	ble.n	801786a <_strtod_l+0x732>
 801783c:	4629      	mov	r1, r5
 801783e:	9805      	ldr	r0, [sp, #20]
 8017840:	461a      	mov	r2, r3
 8017842:	f7ff f9ad 	bl	8016ba0 <__pow5mult>
 8017846:	4605      	mov	r5, r0
 8017848:	2800      	cmp	r0, #0
 801784a:	d0b5      	beq.n	80177b8 <_strtod_l+0x680>
 801784c:	4601      	mov	r1, r0
 801784e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017850:	9805      	ldr	r0, [sp, #20]
 8017852:	f7ff f903 	bl	8016a5c <__multiply>
 8017856:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017858:	2800      	cmp	r0, #0
 801785a:	f43f ae87 	beq.w	801756c <_strtod_l+0x434>
 801785e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017860:	9805      	ldr	r0, [sp, #20]
 8017862:	f7fe ffe7 	bl	8016834 <_Bfree>
 8017866:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017868:	9312      	str	r3, [sp, #72]	@ 0x48
 801786a:	2f00      	cmp	r7, #0
 801786c:	dc1b      	bgt.n	80178a6 <_strtod_l+0x76e>
 801786e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017870:	2b00      	cmp	r3, #0
 8017872:	dd21      	ble.n	80178b8 <_strtod_l+0x780>
 8017874:	4631      	mov	r1, r6
 8017876:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017878:	9805      	ldr	r0, [sp, #20]
 801787a:	f7ff f991 	bl	8016ba0 <__pow5mult>
 801787e:	4606      	mov	r6, r0
 8017880:	b9d0      	cbnz	r0, 80178b8 <_strtod_l+0x780>
 8017882:	2600      	movs	r6, #0
 8017884:	e672      	b.n	801756c <_strtod_l+0x434>
 8017886:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801788a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801788e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8017892:	37e2      	adds	r7, #226	@ 0xe2
 8017894:	fa02 f107 	lsl.w	r1, r2, r7
 8017898:	910b      	str	r1, [sp, #44]	@ 0x2c
 801789a:	920c      	str	r2, [sp, #48]	@ 0x30
 801789c:	e7b8      	b.n	8017810 <_strtod_l+0x6d8>
 801789e:	2200      	movs	r2, #0
 80178a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80178a2:	2201      	movs	r2, #1
 80178a4:	e7f9      	b.n	801789a <_strtod_l+0x762>
 80178a6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80178a8:	9805      	ldr	r0, [sp, #20]
 80178aa:	463a      	mov	r2, r7
 80178ac:	f7ff f9d2 	bl	8016c54 <__lshift>
 80178b0:	9012      	str	r0, [sp, #72]	@ 0x48
 80178b2:	2800      	cmp	r0, #0
 80178b4:	d1db      	bne.n	801786e <_strtod_l+0x736>
 80178b6:	e659      	b.n	801756c <_strtod_l+0x434>
 80178b8:	f1b8 0f00 	cmp.w	r8, #0
 80178bc:	dd07      	ble.n	80178ce <_strtod_l+0x796>
 80178be:	4631      	mov	r1, r6
 80178c0:	9805      	ldr	r0, [sp, #20]
 80178c2:	4642      	mov	r2, r8
 80178c4:	f7ff f9c6 	bl	8016c54 <__lshift>
 80178c8:	4606      	mov	r6, r0
 80178ca:	2800      	cmp	r0, #0
 80178cc:	d0d9      	beq.n	8017882 <_strtod_l+0x74a>
 80178ce:	f1b9 0f00 	cmp.w	r9, #0
 80178d2:	dd08      	ble.n	80178e6 <_strtod_l+0x7ae>
 80178d4:	4629      	mov	r1, r5
 80178d6:	9805      	ldr	r0, [sp, #20]
 80178d8:	464a      	mov	r2, r9
 80178da:	f7ff f9bb 	bl	8016c54 <__lshift>
 80178de:	4605      	mov	r5, r0
 80178e0:	2800      	cmp	r0, #0
 80178e2:	f43f ae43 	beq.w	801756c <_strtod_l+0x434>
 80178e6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80178e8:	9805      	ldr	r0, [sp, #20]
 80178ea:	4632      	mov	r2, r6
 80178ec:	f7ff fa3a 	bl	8016d64 <__mdiff>
 80178f0:	4604      	mov	r4, r0
 80178f2:	2800      	cmp	r0, #0
 80178f4:	f43f ae3a 	beq.w	801756c <_strtod_l+0x434>
 80178f8:	2300      	movs	r3, #0
 80178fa:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80178fe:	60c3      	str	r3, [r0, #12]
 8017900:	4629      	mov	r1, r5
 8017902:	f7ff fa13 	bl	8016d2c <__mcmp>
 8017906:	2800      	cmp	r0, #0
 8017908:	da4c      	bge.n	80179a4 <_strtod_l+0x86c>
 801790a:	ea58 080a 	orrs.w	r8, r8, sl
 801790e:	d172      	bne.n	80179f6 <_strtod_l+0x8be>
 8017910:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017914:	2b00      	cmp	r3, #0
 8017916:	d16e      	bne.n	80179f6 <_strtod_l+0x8be>
 8017918:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801791c:	0d1b      	lsrs	r3, r3, #20
 801791e:	051b      	lsls	r3, r3, #20
 8017920:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017924:	d967      	bls.n	80179f6 <_strtod_l+0x8be>
 8017926:	6963      	ldr	r3, [r4, #20]
 8017928:	b913      	cbnz	r3, 8017930 <_strtod_l+0x7f8>
 801792a:	6923      	ldr	r3, [r4, #16]
 801792c:	2b01      	cmp	r3, #1
 801792e:	dd62      	ble.n	80179f6 <_strtod_l+0x8be>
 8017930:	4621      	mov	r1, r4
 8017932:	2201      	movs	r2, #1
 8017934:	9805      	ldr	r0, [sp, #20]
 8017936:	f7ff f98d 	bl	8016c54 <__lshift>
 801793a:	4629      	mov	r1, r5
 801793c:	4604      	mov	r4, r0
 801793e:	f7ff f9f5 	bl	8016d2c <__mcmp>
 8017942:	2800      	cmp	r0, #0
 8017944:	dd57      	ble.n	80179f6 <_strtod_l+0x8be>
 8017946:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801794a:	9a06      	ldr	r2, [sp, #24]
 801794c:	0d1b      	lsrs	r3, r3, #20
 801794e:	051b      	lsls	r3, r3, #20
 8017950:	2a00      	cmp	r2, #0
 8017952:	d06e      	beq.n	8017a32 <_strtod_l+0x8fa>
 8017954:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017958:	d86b      	bhi.n	8017a32 <_strtod_l+0x8fa>
 801795a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801795e:	f67f ae99 	bls.w	8017694 <_strtod_l+0x55c>
 8017962:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8017990 <_strtod_l+0x858>
 8017966:	ec4b ab16 	vmov	d6, sl, fp
 801796a:	4b0d      	ldr	r3, [pc, #52]	@ (80179a0 <_strtod_l+0x868>)
 801796c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017970:	ee17 2a90 	vmov	r2, s15
 8017974:	4013      	ands	r3, r2
 8017976:	ec5b ab17 	vmov	sl, fp, d7
 801797a:	2b00      	cmp	r3, #0
 801797c:	f47f ae01 	bne.w	8017582 <_strtod_l+0x44a>
 8017980:	9a05      	ldr	r2, [sp, #20]
 8017982:	2322      	movs	r3, #34	@ 0x22
 8017984:	6013      	str	r3, [r2, #0]
 8017986:	e5fc      	b.n	8017582 <_strtod_l+0x44a>
 8017988:	ffc00000 	.word	0xffc00000
 801798c:	41dfffff 	.word	0x41dfffff
 8017990:	00000000 	.word	0x00000000
 8017994:	39500000 	.word	0x39500000
 8017998:	08019918 	.word	0x08019918
 801799c:	fffffc02 	.word	0xfffffc02
 80179a0:	7ff00000 	.word	0x7ff00000
 80179a4:	46d9      	mov	r9, fp
 80179a6:	d15d      	bne.n	8017a64 <_strtod_l+0x92c>
 80179a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80179ac:	f1b8 0f00 	cmp.w	r8, #0
 80179b0:	d02a      	beq.n	8017a08 <_strtod_l+0x8d0>
 80179b2:	4aa9      	ldr	r2, [pc, #676]	@ (8017c58 <_strtod_l+0xb20>)
 80179b4:	4293      	cmp	r3, r2
 80179b6:	d12a      	bne.n	8017a0e <_strtod_l+0x8d6>
 80179b8:	9b06      	ldr	r3, [sp, #24]
 80179ba:	4652      	mov	r2, sl
 80179bc:	b1fb      	cbz	r3, 80179fe <_strtod_l+0x8c6>
 80179be:	4ba7      	ldr	r3, [pc, #668]	@ (8017c5c <_strtod_l+0xb24>)
 80179c0:	ea0b 0303 	and.w	r3, fp, r3
 80179c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80179c8:	f04f 31ff 	mov.w	r1, #4294967295
 80179cc:	d81a      	bhi.n	8017a04 <_strtod_l+0x8cc>
 80179ce:	0d1b      	lsrs	r3, r3, #20
 80179d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80179d4:	fa01 f303 	lsl.w	r3, r1, r3
 80179d8:	429a      	cmp	r2, r3
 80179da:	d118      	bne.n	8017a0e <_strtod_l+0x8d6>
 80179dc:	4ba0      	ldr	r3, [pc, #640]	@ (8017c60 <_strtod_l+0xb28>)
 80179de:	4599      	cmp	r9, r3
 80179e0:	d102      	bne.n	80179e8 <_strtod_l+0x8b0>
 80179e2:	3201      	adds	r2, #1
 80179e4:	f43f adc2 	beq.w	801756c <_strtod_l+0x434>
 80179e8:	4b9c      	ldr	r3, [pc, #624]	@ (8017c5c <_strtod_l+0xb24>)
 80179ea:	ea09 0303 	and.w	r3, r9, r3
 80179ee:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80179f2:	f04f 0a00 	mov.w	sl, #0
 80179f6:	9b06      	ldr	r3, [sp, #24]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d1b2      	bne.n	8017962 <_strtod_l+0x82a>
 80179fc:	e5c1      	b.n	8017582 <_strtod_l+0x44a>
 80179fe:	f04f 33ff 	mov.w	r3, #4294967295
 8017a02:	e7e9      	b.n	80179d8 <_strtod_l+0x8a0>
 8017a04:	460b      	mov	r3, r1
 8017a06:	e7e7      	b.n	80179d8 <_strtod_l+0x8a0>
 8017a08:	ea53 030a 	orrs.w	r3, r3, sl
 8017a0c:	d09b      	beq.n	8017946 <_strtod_l+0x80e>
 8017a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017a10:	b1c3      	cbz	r3, 8017a44 <_strtod_l+0x90c>
 8017a12:	ea13 0f09 	tst.w	r3, r9
 8017a16:	d0ee      	beq.n	80179f6 <_strtod_l+0x8be>
 8017a18:	9a06      	ldr	r2, [sp, #24]
 8017a1a:	4650      	mov	r0, sl
 8017a1c:	4659      	mov	r1, fp
 8017a1e:	f1b8 0f00 	cmp.w	r8, #0
 8017a22:	d013      	beq.n	8017a4c <_strtod_l+0x914>
 8017a24:	f7ff fb6d 	bl	8017102 <sulp>
 8017a28:	ee39 7b00 	vadd.f64	d7, d9, d0
 8017a2c:	ec5b ab17 	vmov	sl, fp, d7
 8017a30:	e7e1      	b.n	80179f6 <_strtod_l+0x8be>
 8017a32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017a36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017a3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017a3e:	f04f 3aff 	mov.w	sl, #4294967295
 8017a42:	e7d8      	b.n	80179f6 <_strtod_l+0x8be>
 8017a44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a46:	ea13 0f0a 	tst.w	r3, sl
 8017a4a:	e7e4      	b.n	8017a16 <_strtod_l+0x8de>
 8017a4c:	f7ff fb59 	bl	8017102 <sulp>
 8017a50:	ee39 0b40 	vsub.f64	d0, d9, d0
 8017a54:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a5c:	ec5b ab10 	vmov	sl, fp, d0
 8017a60:	d1c9      	bne.n	80179f6 <_strtod_l+0x8be>
 8017a62:	e617      	b.n	8017694 <_strtod_l+0x55c>
 8017a64:	4629      	mov	r1, r5
 8017a66:	4620      	mov	r0, r4
 8017a68:	f7ff fad8 	bl	801701c <__ratio>
 8017a6c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017a70:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a78:	d85d      	bhi.n	8017b36 <_strtod_l+0x9fe>
 8017a7a:	f1b8 0f00 	cmp.w	r8, #0
 8017a7e:	d164      	bne.n	8017b4a <_strtod_l+0xa12>
 8017a80:	f1ba 0f00 	cmp.w	sl, #0
 8017a84:	d14b      	bne.n	8017b1e <_strtod_l+0x9e6>
 8017a86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017a8a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d160      	bne.n	8017b54 <_strtod_l+0xa1c>
 8017a92:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8017a96:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a9e:	d401      	bmi.n	8017aa4 <_strtod_l+0x96c>
 8017aa0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017aa4:	eeb1 ab48 	vneg.f64	d10, d8
 8017aa8:	486c      	ldr	r0, [pc, #432]	@ (8017c5c <_strtod_l+0xb24>)
 8017aaa:	496e      	ldr	r1, [pc, #440]	@ (8017c64 <_strtod_l+0xb2c>)
 8017aac:	ea09 0700 	and.w	r7, r9, r0
 8017ab0:	428f      	cmp	r7, r1
 8017ab2:	ec53 2b1a 	vmov	r2, r3, d10
 8017ab6:	d17d      	bne.n	8017bb4 <_strtod_l+0xa7c>
 8017ab8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8017abc:	ec4b ab1c 	vmov	d12, sl, fp
 8017ac0:	eeb0 0b4c 	vmov.f64	d0, d12
 8017ac4:	f7ff f9e2 	bl	8016e8c <__ulp>
 8017ac8:	4864      	ldr	r0, [pc, #400]	@ (8017c5c <_strtod_l+0xb24>)
 8017aca:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8017ace:	ee1c 3a90 	vmov	r3, s25
 8017ad2:	4a65      	ldr	r2, [pc, #404]	@ (8017c68 <_strtod_l+0xb30>)
 8017ad4:	ea03 0100 	and.w	r1, r3, r0
 8017ad8:	4291      	cmp	r1, r2
 8017ada:	ec5b ab1c 	vmov	sl, fp, d12
 8017ade:	d93c      	bls.n	8017b5a <_strtod_l+0xa22>
 8017ae0:	ee19 2a90 	vmov	r2, s19
 8017ae4:	4b5e      	ldr	r3, [pc, #376]	@ (8017c60 <_strtod_l+0xb28>)
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	d104      	bne.n	8017af4 <_strtod_l+0x9bc>
 8017aea:	ee19 3a10 	vmov	r3, s18
 8017aee:	3301      	adds	r3, #1
 8017af0:	f43f ad3c 	beq.w	801756c <_strtod_l+0x434>
 8017af4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8017c60 <_strtod_l+0xb28>
 8017af8:	f04f 3aff 	mov.w	sl, #4294967295
 8017afc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017afe:	9805      	ldr	r0, [sp, #20]
 8017b00:	f7fe fe98 	bl	8016834 <_Bfree>
 8017b04:	9805      	ldr	r0, [sp, #20]
 8017b06:	4631      	mov	r1, r6
 8017b08:	f7fe fe94 	bl	8016834 <_Bfree>
 8017b0c:	9805      	ldr	r0, [sp, #20]
 8017b0e:	4629      	mov	r1, r5
 8017b10:	f7fe fe90 	bl	8016834 <_Bfree>
 8017b14:	9805      	ldr	r0, [sp, #20]
 8017b16:	4621      	mov	r1, r4
 8017b18:	f7fe fe8c 	bl	8016834 <_Bfree>
 8017b1c:	e627      	b.n	801776e <_strtod_l+0x636>
 8017b1e:	f1ba 0f01 	cmp.w	sl, #1
 8017b22:	d103      	bne.n	8017b2c <_strtod_l+0x9f4>
 8017b24:	f1bb 0f00 	cmp.w	fp, #0
 8017b28:	f43f adb4 	beq.w	8017694 <_strtod_l+0x55c>
 8017b2c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017b30:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017b34:	e7b8      	b.n	8017aa8 <_strtod_l+0x970>
 8017b36:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017b3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017b3e:	f1b8 0f00 	cmp.w	r8, #0
 8017b42:	d0af      	beq.n	8017aa4 <_strtod_l+0x96c>
 8017b44:	eeb0 ab48 	vmov.f64	d10, d8
 8017b48:	e7ae      	b.n	8017aa8 <_strtod_l+0x970>
 8017b4a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8017b4e:	eeb0 8b4a 	vmov.f64	d8, d10
 8017b52:	e7a9      	b.n	8017aa8 <_strtod_l+0x970>
 8017b54:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017b58:	e7a6      	b.n	8017aa8 <_strtod_l+0x970>
 8017b5a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017b5e:	9b06      	ldr	r3, [sp, #24]
 8017b60:	46d9      	mov	r9, fp
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d1ca      	bne.n	8017afc <_strtod_l+0x9c4>
 8017b66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017b6a:	0d1b      	lsrs	r3, r3, #20
 8017b6c:	051b      	lsls	r3, r3, #20
 8017b6e:	429f      	cmp	r7, r3
 8017b70:	d1c4      	bne.n	8017afc <_strtod_l+0x9c4>
 8017b72:	ec51 0b18 	vmov	r0, r1, d8
 8017b76:	f7e8 fdf7 	bl	8000768 <__aeabi_d2lz>
 8017b7a:	f7e8 fdaf 	bl	80006dc <__aeabi_l2d>
 8017b7e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8017b82:	ec41 0b17 	vmov	d7, r0, r1
 8017b86:	ea49 090a 	orr.w	r9, r9, sl
 8017b8a:	ea59 0908 	orrs.w	r9, r9, r8
 8017b8e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017b92:	d03c      	beq.n	8017c0e <_strtod_l+0xad6>
 8017b94:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8017c40 <_strtod_l+0xb08>
 8017b98:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ba0:	f53f acef 	bmi.w	8017582 <_strtod_l+0x44a>
 8017ba4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8017c48 <_strtod_l+0xb10>
 8017ba8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bb0:	dda4      	ble.n	8017afc <_strtod_l+0x9c4>
 8017bb2:	e4e6      	b.n	8017582 <_strtod_l+0x44a>
 8017bb4:	9906      	ldr	r1, [sp, #24]
 8017bb6:	b1e1      	cbz	r1, 8017bf2 <_strtod_l+0xaba>
 8017bb8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8017bbc:	d819      	bhi.n	8017bf2 <_strtod_l+0xaba>
 8017bbe:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8017bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bc6:	d811      	bhi.n	8017bec <_strtod_l+0xab4>
 8017bc8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8017bcc:	ee18 3a10 	vmov	r3, s16
 8017bd0:	2b01      	cmp	r3, #1
 8017bd2:	bf38      	it	cc
 8017bd4:	2301      	movcc	r3, #1
 8017bd6:	ee08 3a10 	vmov	s16, r3
 8017bda:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8017bde:	f1b8 0f00 	cmp.w	r8, #0
 8017be2:	d111      	bne.n	8017c08 <_strtod_l+0xad0>
 8017be4:	eeb1 7b48 	vneg.f64	d7, d8
 8017be8:	ec53 2b17 	vmov	r2, r3, d7
 8017bec:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8017bf0:	1bcb      	subs	r3, r1, r7
 8017bf2:	eeb0 0b49 	vmov.f64	d0, d9
 8017bf6:	ec43 2b1a 	vmov	d10, r2, r3
 8017bfa:	f7ff f947 	bl	8016e8c <__ulp>
 8017bfe:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8017c02:	ec5b ab19 	vmov	sl, fp, d9
 8017c06:	e7aa      	b.n	8017b5e <_strtod_l+0xa26>
 8017c08:	eeb0 7b48 	vmov.f64	d7, d8
 8017c0c:	e7ec      	b.n	8017be8 <_strtod_l+0xab0>
 8017c0e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8017c50 <_strtod_l+0xb18>
 8017c12:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c1a:	f57f af6f 	bpl.w	8017afc <_strtod_l+0x9c4>
 8017c1e:	e4b0      	b.n	8017582 <_strtod_l+0x44a>
 8017c20:	2300      	movs	r3, #0
 8017c22:	9308      	str	r3, [sp, #32]
 8017c24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017c26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017c28:	6013      	str	r3, [r2, #0]
 8017c2a:	f7ff bac4 	b.w	80171b6 <_strtod_l+0x7e>
 8017c2e:	2a65      	cmp	r2, #101	@ 0x65
 8017c30:	f43f abbf 	beq.w	80173b2 <_strtod_l+0x27a>
 8017c34:	2a45      	cmp	r2, #69	@ 0x45
 8017c36:	f43f abbc 	beq.w	80173b2 <_strtod_l+0x27a>
 8017c3a:	2101      	movs	r1, #1
 8017c3c:	f7ff bbf4 	b.w	8017428 <_strtod_l+0x2f0>
 8017c40:	94a03595 	.word	0x94a03595
 8017c44:	3fdfffff 	.word	0x3fdfffff
 8017c48:	35afe535 	.word	0x35afe535
 8017c4c:	3fe00000 	.word	0x3fe00000
 8017c50:	94a03595 	.word	0x94a03595
 8017c54:	3fcfffff 	.word	0x3fcfffff
 8017c58:	000fffff 	.word	0x000fffff
 8017c5c:	7ff00000 	.word	0x7ff00000
 8017c60:	7fefffff 	.word	0x7fefffff
 8017c64:	7fe00000 	.word	0x7fe00000
 8017c68:	7c9fffff 	.word	0x7c9fffff

08017c6c <_strtod_r>:
 8017c6c:	4b01      	ldr	r3, [pc, #4]	@ (8017c74 <_strtod_r+0x8>)
 8017c6e:	f7ff ba63 	b.w	8017138 <_strtod_l>
 8017c72:	bf00      	nop
 8017c74:	24000080 	.word	0x24000080

08017c78 <_strtol_l.isra.0>:
 8017c78:	2b24      	cmp	r3, #36	@ 0x24
 8017c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c7e:	4686      	mov	lr, r0
 8017c80:	4690      	mov	r8, r2
 8017c82:	d801      	bhi.n	8017c88 <_strtol_l.isra.0+0x10>
 8017c84:	2b01      	cmp	r3, #1
 8017c86:	d106      	bne.n	8017c96 <_strtol_l.isra.0+0x1e>
 8017c88:	f7fd fe6a 	bl	8015960 <__errno>
 8017c8c:	2316      	movs	r3, #22
 8017c8e:	6003      	str	r3, [r0, #0]
 8017c90:	2000      	movs	r0, #0
 8017c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c96:	4834      	ldr	r0, [pc, #208]	@ (8017d68 <_strtol_l.isra.0+0xf0>)
 8017c98:	460d      	mov	r5, r1
 8017c9a:	462a      	mov	r2, r5
 8017c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ca0:	5d06      	ldrb	r6, [r0, r4]
 8017ca2:	f016 0608 	ands.w	r6, r6, #8
 8017ca6:	d1f8      	bne.n	8017c9a <_strtol_l.isra.0+0x22>
 8017ca8:	2c2d      	cmp	r4, #45	@ 0x2d
 8017caa:	d110      	bne.n	8017cce <_strtol_l.isra.0+0x56>
 8017cac:	782c      	ldrb	r4, [r5, #0]
 8017cae:	2601      	movs	r6, #1
 8017cb0:	1c95      	adds	r5, r2, #2
 8017cb2:	f033 0210 	bics.w	r2, r3, #16
 8017cb6:	d115      	bne.n	8017ce4 <_strtol_l.isra.0+0x6c>
 8017cb8:	2c30      	cmp	r4, #48	@ 0x30
 8017cba:	d10d      	bne.n	8017cd8 <_strtol_l.isra.0+0x60>
 8017cbc:	782a      	ldrb	r2, [r5, #0]
 8017cbe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017cc2:	2a58      	cmp	r2, #88	@ 0x58
 8017cc4:	d108      	bne.n	8017cd8 <_strtol_l.isra.0+0x60>
 8017cc6:	786c      	ldrb	r4, [r5, #1]
 8017cc8:	3502      	adds	r5, #2
 8017cca:	2310      	movs	r3, #16
 8017ccc:	e00a      	b.n	8017ce4 <_strtol_l.isra.0+0x6c>
 8017cce:	2c2b      	cmp	r4, #43	@ 0x2b
 8017cd0:	bf04      	itt	eq
 8017cd2:	782c      	ldrbeq	r4, [r5, #0]
 8017cd4:	1c95      	addeq	r5, r2, #2
 8017cd6:	e7ec      	b.n	8017cb2 <_strtol_l.isra.0+0x3a>
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d1f6      	bne.n	8017cca <_strtol_l.isra.0+0x52>
 8017cdc:	2c30      	cmp	r4, #48	@ 0x30
 8017cde:	bf14      	ite	ne
 8017ce0:	230a      	movne	r3, #10
 8017ce2:	2308      	moveq	r3, #8
 8017ce4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017ce8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017cec:	2200      	movs	r2, #0
 8017cee:	fbbc f9f3 	udiv	r9, ip, r3
 8017cf2:	4610      	mov	r0, r2
 8017cf4:	fb03 ca19 	mls	sl, r3, r9, ip
 8017cf8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017cfc:	2f09      	cmp	r7, #9
 8017cfe:	d80f      	bhi.n	8017d20 <_strtol_l.isra.0+0xa8>
 8017d00:	463c      	mov	r4, r7
 8017d02:	42a3      	cmp	r3, r4
 8017d04:	dd1b      	ble.n	8017d3e <_strtol_l.isra.0+0xc6>
 8017d06:	1c57      	adds	r7, r2, #1
 8017d08:	d007      	beq.n	8017d1a <_strtol_l.isra.0+0xa2>
 8017d0a:	4581      	cmp	r9, r0
 8017d0c:	d314      	bcc.n	8017d38 <_strtol_l.isra.0+0xc0>
 8017d0e:	d101      	bne.n	8017d14 <_strtol_l.isra.0+0x9c>
 8017d10:	45a2      	cmp	sl, r4
 8017d12:	db11      	blt.n	8017d38 <_strtol_l.isra.0+0xc0>
 8017d14:	fb00 4003 	mla	r0, r0, r3, r4
 8017d18:	2201      	movs	r2, #1
 8017d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d1e:	e7eb      	b.n	8017cf8 <_strtol_l.isra.0+0x80>
 8017d20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017d24:	2f19      	cmp	r7, #25
 8017d26:	d801      	bhi.n	8017d2c <_strtol_l.isra.0+0xb4>
 8017d28:	3c37      	subs	r4, #55	@ 0x37
 8017d2a:	e7ea      	b.n	8017d02 <_strtol_l.isra.0+0x8a>
 8017d2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017d30:	2f19      	cmp	r7, #25
 8017d32:	d804      	bhi.n	8017d3e <_strtol_l.isra.0+0xc6>
 8017d34:	3c57      	subs	r4, #87	@ 0x57
 8017d36:	e7e4      	b.n	8017d02 <_strtol_l.isra.0+0x8a>
 8017d38:	f04f 32ff 	mov.w	r2, #4294967295
 8017d3c:	e7ed      	b.n	8017d1a <_strtol_l.isra.0+0xa2>
 8017d3e:	1c53      	adds	r3, r2, #1
 8017d40:	d108      	bne.n	8017d54 <_strtol_l.isra.0+0xdc>
 8017d42:	2322      	movs	r3, #34	@ 0x22
 8017d44:	f8ce 3000 	str.w	r3, [lr]
 8017d48:	4660      	mov	r0, ip
 8017d4a:	f1b8 0f00 	cmp.w	r8, #0
 8017d4e:	d0a0      	beq.n	8017c92 <_strtol_l.isra.0+0x1a>
 8017d50:	1e69      	subs	r1, r5, #1
 8017d52:	e006      	b.n	8017d62 <_strtol_l.isra.0+0xea>
 8017d54:	b106      	cbz	r6, 8017d58 <_strtol_l.isra.0+0xe0>
 8017d56:	4240      	negs	r0, r0
 8017d58:	f1b8 0f00 	cmp.w	r8, #0
 8017d5c:	d099      	beq.n	8017c92 <_strtol_l.isra.0+0x1a>
 8017d5e:	2a00      	cmp	r2, #0
 8017d60:	d1f6      	bne.n	8017d50 <_strtol_l.isra.0+0xd8>
 8017d62:	f8c8 1000 	str.w	r1, [r8]
 8017d66:	e794      	b.n	8017c92 <_strtol_l.isra.0+0x1a>
 8017d68:	08019941 	.word	0x08019941

08017d6c <_strtol_r>:
 8017d6c:	f7ff bf84 	b.w	8017c78 <_strtol_l.isra.0>

08017d70 <__ssputs_r>:
 8017d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d74:	688e      	ldr	r6, [r1, #8]
 8017d76:	461f      	mov	r7, r3
 8017d78:	42be      	cmp	r6, r7
 8017d7a:	680b      	ldr	r3, [r1, #0]
 8017d7c:	4682      	mov	sl, r0
 8017d7e:	460c      	mov	r4, r1
 8017d80:	4690      	mov	r8, r2
 8017d82:	d82d      	bhi.n	8017de0 <__ssputs_r+0x70>
 8017d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017d8c:	d026      	beq.n	8017ddc <__ssputs_r+0x6c>
 8017d8e:	6965      	ldr	r5, [r4, #20]
 8017d90:	6909      	ldr	r1, [r1, #16]
 8017d92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d96:	eba3 0901 	sub.w	r9, r3, r1
 8017d9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d9e:	1c7b      	adds	r3, r7, #1
 8017da0:	444b      	add	r3, r9
 8017da2:	106d      	asrs	r5, r5, #1
 8017da4:	429d      	cmp	r5, r3
 8017da6:	bf38      	it	cc
 8017da8:	461d      	movcc	r5, r3
 8017daa:	0553      	lsls	r3, r2, #21
 8017dac:	d527      	bpl.n	8017dfe <__ssputs_r+0x8e>
 8017dae:	4629      	mov	r1, r5
 8017db0:	f7fe fc74 	bl	801669c <_malloc_r>
 8017db4:	4606      	mov	r6, r0
 8017db6:	b360      	cbz	r0, 8017e12 <__ssputs_r+0xa2>
 8017db8:	6921      	ldr	r1, [r4, #16]
 8017dba:	464a      	mov	r2, r9
 8017dbc:	f7fd fdfd 	bl	80159ba <memcpy>
 8017dc0:	89a3      	ldrh	r3, [r4, #12]
 8017dc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017dca:	81a3      	strh	r3, [r4, #12]
 8017dcc:	6126      	str	r6, [r4, #16]
 8017dce:	6165      	str	r5, [r4, #20]
 8017dd0:	444e      	add	r6, r9
 8017dd2:	eba5 0509 	sub.w	r5, r5, r9
 8017dd6:	6026      	str	r6, [r4, #0]
 8017dd8:	60a5      	str	r5, [r4, #8]
 8017dda:	463e      	mov	r6, r7
 8017ddc:	42be      	cmp	r6, r7
 8017dde:	d900      	bls.n	8017de2 <__ssputs_r+0x72>
 8017de0:	463e      	mov	r6, r7
 8017de2:	6820      	ldr	r0, [r4, #0]
 8017de4:	4632      	mov	r2, r6
 8017de6:	4641      	mov	r1, r8
 8017de8:	f000 fa28 	bl	801823c <memmove>
 8017dec:	68a3      	ldr	r3, [r4, #8]
 8017dee:	1b9b      	subs	r3, r3, r6
 8017df0:	60a3      	str	r3, [r4, #8]
 8017df2:	6823      	ldr	r3, [r4, #0]
 8017df4:	4433      	add	r3, r6
 8017df6:	6023      	str	r3, [r4, #0]
 8017df8:	2000      	movs	r0, #0
 8017dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dfe:	462a      	mov	r2, r5
 8017e00:	f000 fdff 	bl	8018a02 <_realloc_r>
 8017e04:	4606      	mov	r6, r0
 8017e06:	2800      	cmp	r0, #0
 8017e08:	d1e0      	bne.n	8017dcc <__ssputs_r+0x5c>
 8017e0a:	6921      	ldr	r1, [r4, #16]
 8017e0c:	4650      	mov	r0, sl
 8017e0e:	f7fe fbd1 	bl	80165b4 <_free_r>
 8017e12:	230c      	movs	r3, #12
 8017e14:	f8ca 3000 	str.w	r3, [sl]
 8017e18:	89a3      	ldrh	r3, [r4, #12]
 8017e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e1e:	81a3      	strh	r3, [r4, #12]
 8017e20:	f04f 30ff 	mov.w	r0, #4294967295
 8017e24:	e7e9      	b.n	8017dfa <__ssputs_r+0x8a>
	...

08017e28 <_svfiprintf_r>:
 8017e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e2c:	4698      	mov	r8, r3
 8017e2e:	898b      	ldrh	r3, [r1, #12]
 8017e30:	061b      	lsls	r3, r3, #24
 8017e32:	b09d      	sub	sp, #116	@ 0x74
 8017e34:	4607      	mov	r7, r0
 8017e36:	460d      	mov	r5, r1
 8017e38:	4614      	mov	r4, r2
 8017e3a:	d510      	bpl.n	8017e5e <_svfiprintf_r+0x36>
 8017e3c:	690b      	ldr	r3, [r1, #16]
 8017e3e:	b973      	cbnz	r3, 8017e5e <_svfiprintf_r+0x36>
 8017e40:	2140      	movs	r1, #64	@ 0x40
 8017e42:	f7fe fc2b 	bl	801669c <_malloc_r>
 8017e46:	6028      	str	r0, [r5, #0]
 8017e48:	6128      	str	r0, [r5, #16]
 8017e4a:	b930      	cbnz	r0, 8017e5a <_svfiprintf_r+0x32>
 8017e4c:	230c      	movs	r3, #12
 8017e4e:	603b      	str	r3, [r7, #0]
 8017e50:	f04f 30ff 	mov.w	r0, #4294967295
 8017e54:	b01d      	add	sp, #116	@ 0x74
 8017e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e5a:	2340      	movs	r3, #64	@ 0x40
 8017e5c:	616b      	str	r3, [r5, #20]
 8017e5e:	2300      	movs	r3, #0
 8017e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e62:	2320      	movs	r3, #32
 8017e64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e6c:	2330      	movs	r3, #48	@ 0x30
 8017e6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801800c <_svfiprintf_r+0x1e4>
 8017e72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017e76:	f04f 0901 	mov.w	r9, #1
 8017e7a:	4623      	mov	r3, r4
 8017e7c:	469a      	mov	sl, r3
 8017e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e82:	b10a      	cbz	r2, 8017e88 <_svfiprintf_r+0x60>
 8017e84:	2a25      	cmp	r2, #37	@ 0x25
 8017e86:	d1f9      	bne.n	8017e7c <_svfiprintf_r+0x54>
 8017e88:	ebba 0b04 	subs.w	fp, sl, r4
 8017e8c:	d00b      	beq.n	8017ea6 <_svfiprintf_r+0x7e>
 8017e8e:	465b      	mov	r3, fp
 8017e90:	4622      	mov	r2, r4
 8017e92:	4629      	mov	r1, r5
 8017e94:	4638      	mov	r0, r7
 8017e96:	f7ff ff6b 	bl	8017d70 <__ssputs_r>
 8017e9a:	3001      	adds	r0, #1
 8017e9c:	f000 80a7 	beq.w	8017fee <_svfiprintf_r+0x1c6>
 8017ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ea2:	445a      	add	r2, fp
 8017ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	f000 809f 	beq.w	8017fee <_svfiprintf_r+0x1c6>
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8017eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017eba:	f10a 0a01 	add.w	sl, sl, #1
 8017ebe:	9304      	str	r3, [sp, #16]
 8017ec0:	9307      	str	r3, [sp, #28]
 8017ec2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017ec6:	931a      	str	r3, [sp, #104]	@ 0x68
 8017ec8:	4654      	mov	r4, sl
 8017eca:	2205      	movs	r2, #5
 8017ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ed0:	484e      	ldr	r0, [pc, #312]	@ (801800c <_svfiprintf_r+0x1e4>)
 8017ed2:	f7e8 fa1d 	bl	8000310 <memchr>
 8017ed6:	9a04      	ldr	r2, [sp, #16]
 8017ed8:	b9d8      	cbnz	r0, 8017f12 <_svfiprintf_r+0xea>
 8017eda:	06d0      	lsls	r0, r2, #27
 8017edc:	bf44      	itt	mi
 8017ede:	2320      	movmi	r3, #32
 8017ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ee4:	0711      	lsls	r1, r2, #28
 8017ee6:	bf44      	itt	mi
 8017ee8:	232b      	movmi	r3, #43	@ 0x2b
 8017eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017eee:	f89a 3000 	ldrb.w	r3, [sl]
 8017ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ef4:	d015      	beq.n	8017f22 <_svfiprintf_r+0xfa>
 8017ef6:	9a07      	ldr	r2, [sp, #28]
 8017ef8:	4654      	mov	r4, sl
 8017efa:	2000      	movs	r0, #0
 8017efc:	f04f 0c0a 	mov.w	ip, #10
 8017f00:	4621      	mov	r1, r4
 8017f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f06:	3b30      	subs	r3, #48	@ 0x30
 8017f08:	2b09      	cmp	r3, #9
 8017f0a:	d94b      	bls.n	8017fa4 <_svfiprintf_r+0x17c>
 8017f0c:	b1b0      	cbz	r0, 8017f3c <_svfiprintf_r+0x114>
 8017f0e:	9207      	str	r2, [sp, #28]
 8017f10:	e014      	b.n	8017f3c <_svfiprintf_r+0x114>
 8017f12:	eba0 0308 	sub.w	r3, r0, r8
 8017f16:	fa09 f303 	lsl.w	r3, r9, r3
 8017f1a:	4313      	orrs	r3, r2
 8017f1c:	9304      	str	r3, [sp, #16]
 8017f1e:	46a2      	mov	sl, r4
 8017f20:	e7d2      	b.n	8017ec8 <_svfiprintf_r+0xa0>
 8017f22:	9b03      	ldr	r3, [sp, #12]
 8017f24:	1d19      	adds	r1, r3, #4
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	9103      	str	r1, [sp, #12]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	bfbb      	ittet	lt
 8017f2e:	425b      	neglt	r3, r3
 8017f30:	f042 0202 	orrlt.w	r2, r2, #2
 8017f34:	9307      	strge	r3, [sp, #28]
 8017f36:	9307      	strlt	r3, [sp, #28]
 8017f38:	bfb8      	it	lt
 8017f3a:	9204      	strlt	r2, [sp, #16]
 8017f3c:	7823      	ldrb	r3, [r4, #0]
 8017f3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017f40:	d10a      	bne.n	8017f58 <_svfiprintf_r+0x130>
 8017f42:	7863      	ldrb	r3, [r4, #1]
 8017f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f46:	d132      	bne.n	8017fae <_svfiprintf_r+0x186>
 8017f48:	9b03      	ldr	r3, [sp, #12]
 8017f4a:	1d1a      	adds	r2, r3, #4
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	9203      	str	r2, [sp, #12]
 8017f50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017f54:	3402      	adds	r4, #2
 8017f56:	9305      	str	r3, [sp, #20]
 8017f58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801801c <_svfiprintf_r+0x1f4>
 8017f5c:	7821      	ldrb	r1, [r4, #0]
 8017f5e:	2203      	movs	r2, #3
 8017f60:	4650      	mov	r0, sl
 8017f62:	f7e8 f9d5 	bl	8000310 <memchr>
 8017f66:	b138      	cbz	r0, 8017f78 <_svfiprintf_r+0x150>
 8017f68:	9b04      	ldr	r3, [sp, #16]
 8017f6a:	eba0 000a 	sub.w	r0, r0, sl
 8017f6e:	2240      	movs	r2, #64	@ 0x40
 8017f70:	4082      	lsls	r2, r0
 8017f72:	4313      	orrs	r3, r2
 8017f74:	3401      	adds	r4, #1
 8017f76:	9304      	str	r3, [sp, #16]
 8017f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f7c:	4824      	ldr	r0, [pc, #144]	@ (8018010 <_svfiprintf_r+0x1e8>)
 8017f7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017f82:	2206      	movs	r2, #6
 8017f84:	f7e8 f9c4 	bl	8000310 <memchr>
 8017f88:	2800      	cmp	r0, #0
 8017f8a:	d036      	beq.n	8017ffa <_svfiprintf_r+0x1d2>
 8017f8c:	4b21      	ldr	r3, [pc, #132]	@ (8018014 <_svfiprintf_r+0x1ec>)
 8017f8e:	bb1b      	cbnz	r3, 8017fd8 <_svfiprintf_r+0x1b0>
 8017f90:	9b03      	ldr	r3, [sp, #12]
 8017f92:	3307      	adds	r3, #7
 8017f94:	f023 0307 	bic.w	r3, r3, #7
 8017f98:	3308      	adds	r3, #8
 8017f9a:	9303      	str	r3, [sp, #12]
 8017f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f9e:	4433      	add	r3, r6
 8017fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fa2:	e76a      	b.n	8017e7a <_svfiprintf_r+0x52>
 8017fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fa8:	460c      	mov	r4, r1
 8017faa:	2001      	movs	r0, #1
 8017fac:	e7a8      	b.n	8017f00 <_svfiprintf_r+0xd8>
 8017fae:	2300      	movs	r3, #0
 8017fb0:	3401      	adds	r4, #1
 8017fb2:	9305      	str	r3, [sp, #20]
 8017fb4:	4619      	mov	r1, r3
 8017fb6:	f04f 0c0a 	mov.w	ip, #10
 8017fba:	4620      	mov	r0, r4
 8017fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fc0:	3a30      	subs	r2, #48	@ 0x30
 8017fc2:	2a09      	cmp	r2, #9
 8017fc4:	d903      	bls.n	8017fce <_svfiprintf_r+0x1a6>
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d0c6      	beq.n	8017f58 <_svfiprintf_r+0x130>
 8017fca:	9105      	str	r1, [sp, #20]
 8017fcc:	e7c4      	b.n	8017f58 <_svfiprintf_r+0x130>
 8017fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8017fd2:	4604      	mov	r4, r0
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	e7f0      	b.n	8017fba <_svfiprintf_r+0x192>
 8017fd8:	ab03      	add	r3, sp, #12
 8017fda:	9300      	str	r3, [sp, #0]
 8017fdc:	462a      	mov	r2, r5
 8017fde:	4b0e      	ldr	r3, [pc, #56]	@ (8018018 <_svfiprintf_r+0x1f0>)
 8017fe0:	a904      	add	r1, sp, #16
 8017fe2:	4638      	mov	r0, r7
 8017fe4:	f7fc fcac 	bl	8014940 <_printf_float>
 8017fe8:	1c42      	adds	r2, r0, #1
 8017fea:	4606      	mov	r6, r0
 8017fec:	d1d6      	bne.n	8017f9c <_svfiprintf_r+0x174>
 8017fee:	89ab      	ldrh	r3, [r5, #12]
 8017ff0:	065b      	lsls	r3, r3, #25
 8017ff2:	f53f af2d 	bmi.w	8017e50 <_svfiprintf_r+0x28>
 8017ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ff8:	e72c      	b.n	8017e54 <_svfiprintf_r+0x2c>
 8017ffa:	ab03      	add	r3, sp, #12
 8017ffc:	9300      	str	r3, [sp, #0]
 8017ffe:	462a      	mov	r2, r5
 8018000:	4b05      	ldr	r3, [pc, #20]	@ (8018018 <_svfiprintf_r+0x1f0>)
 8018002:	a904      	add	r1, sp, #16
 8018004:	4638      	mov	r0, r7
 8018006:	f7fc ff23 	bl	8014e50 <_printf_i>
 801800a:	e7ed      	b.n	8017fe8 <_svfiprintf_r+0x1c0>
 801800c:	08019739 	.word	0x08019739
 8018010:	08019743 	.word	0x08019743
 8018014:	08014941 	.word	0x08014941
 8018018:	08017d71 	.word	0x08017d71
 801801c:	0801973f 	.word	0x0801973f

08018020 <__sflush_r>:
 8018020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018028:	0716      	lsls	r6, r2, #28
 801802a:	4605      	mov	r5, r0
 801802c:	460c      	mov	r4, r1
 801802e:	d454      	bmi.n	80180da <__sflush_r+0xba>
 8018030:	684b      	ldr	r3, [r1, #4]
 8018032:	2b00      	cmp	r3, #0
 8018034:	dc02      	bgt.n	801803c <__sflush_r+0x1c>
 8018036:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018038:	2b00      	cmp	r3, #0
 801803a:	dd48      	ble.n	80180ce <__sflush_r+0xae>
 801803c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801803e:	2e00      	cmp	r6, #0
 8018040:	d045      	beq.n	80180ce <__sflush_r+0xae>
 8018042:	2300      	movs	r3, #0
 8018044:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018048:	682f      	ldr	r7, [r5, #0]
 801804a:	6a21      	ldr	r1, [r4, #32]
 801804c:	602b      	str	r3, [r5, #0]
 801804e:	d030      	beq.n	80180b2 <__sflush_r+0x92>
 8018050:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018052:	89a3      	ldrh	r3, [r4, #12]
 8018054:	0759      	lsls	r1, r3, #29
 8018056:	d505      	bpl.n	8018064 <__sflush_r+0x44>
 8018058:	6863      	ldr	r3, [r4, #4]
 801805a:	1ad2      	subs	r2, r2, r3
 801805c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801805e:	b10b      	cbz	r3, 8018064 <__sflush_r+0x44>
 8018060:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018062:	1ad2      	subs	r2, r2, r3
 8018064:	2300      	movs	r3, #0
 8018066:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018068:	6a21      	ldr	r1, [r4, #32]
 801806a:	4628      	mov	r0, r5
 801806c:	47b0      	blx	r6
 801806e:	1c43      	adds	r3, r0, #1
 8018070:	89a3      	ldrh	r3, [r4, #12]
 8018072:	d106      	bne.n	8018082 <__sflush_r+0x62>
 8018074:	6829      	ldr	r1, [r5, #0]
 8018076:	291d      	cmp	r1, #29
 8018078:	d82b      	bhi.n	80180d2 <__sflush_r+0xb2>
 801807a:	4a2a      	ldr	r2, [pc, #168]	@ (8018124 <__sflush_r+0x104>)
 801807c:	40ca      	lsrs	r2, r1
 801807e:	07d6      	lsls	r6, r2, #31
 8018080:	d527      	bpl.n	80180d2 <__sflush_r+0xb2>
 8018082:	2200      	movs	r2, #0
 8018084:	6062      	str	r2, [r4, #4]
 8018086:	04d9      	lsls	r1, r3, #19
 8018088:	6922      	ldr	r2, [r4, #16]
 801808a:	6022      	str	r2, [r4, #0]
 801808c:	d504      	bpl.n	8018098 <__sflush_r+0x78>
 801808e:	1c42      	adds	r2, r0, #1
 8018090:	d101      	bne.n	8018096 <__sflush_r+0x76>
 8018092:	682b      	ldr	r3, [r5, #0]
 8018094:	b903      	cbnz	r3, 8018098 <__sflush_r+0x78>
 8018096:	6560      	str	r0, [r4, #84]	@ 0x54
 8018098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801809a:	602f      	str	r7, [r5, #0]
 801809c:	b1b9      	cbz	r1, 80180ce <__sflush_r+0xae>
 801809e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80180a2:	4299      	cmp	r1, r3
 80180a4:	d002      	beq.n	80180ac <__sflush_r+0x8c>
 80180a6:	4628      	mov	r0, r5
 80180a8:	f7fe fa84 	bl	80165b4 <_free_r>
 80180ac:	2300      	movs	r3, #0
 80180ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80180b0:	e00d      	b.n	80180ce <__sflush_r+0xae>
 80180b2:	2301      	movs	r3, #1
 80180b4:	4628      	mov	r0, r5
 80180b6:	47b0      	blx	r6
 80180b8:	4602      	mov	r2, r0
 80180ba:	1c50      	adds	r0, r2, #1
 80180bc:	d1c9      	bne.n	8018052 <__sflush_r+0x32>
 80180be:	682b      	ldr	r3, [r5, #0]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d0c6      	beq.n	8018052 <__sflush_r+0x32>
 80180c4:	2b1d      	cmp	r3, #29
 80180c6:	d001      	beq.n	80180cc <__sflush_r+0xac>
 80180c8:	2b16      	cmp	r3, #22
 80180ca:	d11e      	bne.n	801810a <__sflush_r+0xea>
 80180cc:	602f      	str	r7, [r5, #0]
 80180ce:	2000      	movs	r0, #0
 80180d0:	e022      	b.n	8018118 <__sflush_r+0xf8>
 80180d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80180d6:	b21b      	sxth	r3, r3
 80180d8:	e01b      	b.n	8018112 <__sflush_r+0xf2>
 80180da:	690f      	ldr	r7, [r1, #16]
 80180dc:	2f00      	cmp	r7, #0
 80180de:	d0f6      	beq.n	80180ce <__sflush_r+0xae>
 80180e0:	0793      	lsls	r3, r2, #30
 80180e2:	680e      	ldr	r6, [r1, #0]
 80180e4:	bf08      	it	eq
 80180e6:	694b      	ldreq	r3, [r1, #20]
 80180e8:	600f      	str	r7, [r1, #0]
 80180ea:	bf18      	it	ne
 80180ec:	2300      	movne	r3, #0
 80180ee:	eba6 0807 	sub.w	r8, r6, r7
 80180f2:	608b      	str	r3, [r1, #8]
 80180f4:	f1b8 0f00 	cmp.w	r8, #0
 80180f8:	dde9      	ble.n	80180ce <__sflush_r+0xae>
 80180fa:	6a21      	ldr	r1, [r4, #32]
 80180fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80180fe:	4643      	mov	r3, r8
 8018100:	463a      	mov	r2, r7
 8018102:	4628      	mov	r0, r5
 8018104:	47b0      	blx	r6
 8018106:	2800      	cmp	r0, #0
 8018108:	dc08      	bgt.n	801811c <__sflush_r+0xfc>
 801810a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801810e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018112:	81a3      	strh	r3, [r4, #12]
 8018114:	f04f 30ff 	mov.w	r0, #4294967295
 8018118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801811c:	4407      	add	r7, r0
 801811e:	eba8 0800 	sub.w	r8, r8, r0
 8018122:	e7e7      	b.n	80180f4 <__sflush_r+0xd4>
 8018124:	20400001 	.word	0x20400001

08018128 <_fflush_r>:
 8018128:	b538      	push	{r3, r4, r5, lr}
 801812a:	690b      	ldr	r3, [r1, #16]
 801812c:	4605      	mov	r5, r0
 801812e:	460c      	mov	r4, r1
 8018130:	b913      	cbnz	r3, 8018138 <_fflush_r+0x10>
 8018132:	2500      	movs	r5, #0
 8018134:	4628      	mov	r0, r5
 8018136:	bd38      	pop	{r3, r4, r5, pc}
 8018138:	b118      	cbz	r0, 8018142 <_fflush_r+0x1a>
 801813a:	6a03      	ldr	r3, [r0, #32]
 801813c:	b90b      	cbnz	r3, 8018142 <_fflush_r+0x1a>
 801813e:	f7fd fa37 	bl	80155b0 <__sinit>
 8018142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d0f3      	beq.n	8018132 <_fflush_r+0xa>
 801814a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801814c:	07d0      	lsls	r0, r2, #31
 801814e:	d404      	bmi.n	801815a <_fflush_r+0x32>
 8018150:	0599      	lsls	r1, r3, #22
 8018152:	d402      	bmi.n	801815a <_fflush_r+0x32>
 8018154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018156:	f7fd fc2e 	bl	80159b6 <__retarget_lock_acquire_recursive>
 801815a:	4628      	mov	r0, r5
 801815c:	4621      	mov	r1, r4
 801815e:	f7ff ff5f 	bl	8018020 <__sflush_r>
 8018162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018164:	07da      	lsls	r2, r3, #31
 8018166:	4605      	mov	r5, r0
 8018168:	d4e4      	bmi.n	8018134 <_fflush_r+0xc>
 801816a:	89a3      	ldrh	r3, [r4, #12]
 801816c:	059b      	lsls	r3, r3, #22
 801816e:	d4e1      	bmi.n	8018134 <_fflush_r+0xc>
 8018170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018172:	f7fd fc21 	bl	80159b8 <__retarget_lock_release_recursive>
 8018176:	e7dd      	b.n	8018134 <_fflush_r+0xc>

08018178 <__swhatbuf_r>:
 8018178:	b570      	push	{r4, r5, r6, lr}
 801817a:	460c      	mov	r4, r1
 801817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018180:	2900      	cmp	r1, #0
 8018182:	b096      	sub	sp, #88	@ 0x58
 8018184:	4615      	mov	r5, r2
 8018186:	461e      	mov	r6, r3
 8018188:	da0d      	bge.n	80181a6 <__swhatbuf_r+0x2e>
 801818a:	89a3      	ldrh	r3, [r4, #12]
 801818c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018190:	f04f 0100 	mov.w	r1, #0
 8018194:	bf14      	ite	ne
 8018196:	2340      	movne	r3, #64	@ 0x40
 8018198:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801819c:	2000      	movs	r0, #0
 801819e:	6031      	str	r1, [r6, #0]
 80181a0:	602b      	str	r3, [r5, #0]
 80181a2:	b016      	add	sp, #88	@ 0x58
 80181a4:	bd70      	pop	{r4, r5, r6, pc}
 80181a6:	466a      	mov	r2, sp
 80181a8:	f000 f874 	bl	8018294 <_fstat_r>
 80181ac:	2800      	cmp	r0, #0
 80181ae:	dbec      	blt.n	801818a <__swhatbuf_r+0x12>
 80181b0:	9901      	ldr	r1, [sp, #4]
 80181b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80181b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80181ba:	4259      	negs	r1, r3
 80181bc:	4159      	adcs	r1, r3
 80181be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80181c2:	e7eb      	b.n	801819c <__swhatbuf_r+0x24>

080181c4 <__smakebuf_r>:
 80181c4:	898b      	ldrh	r3, [r1, #12]
 80181c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181c8:	079d      	lsls	r5, r3, #30
 80181ca:	4606      	mov	r6, r0
 80181cc:	460c      	mov	r4, r1
 80181ce:	d507      	bpl.n	80181e0 <__smakebuf_r+0x1c>
 80181d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80181d4:	6023      	str	r3, [r4, #0]
 80181d6:	6123      	str	r3, [r4, #16]
 80181d8:	2301      	movs	r3, #1
 80181da:	6163      	str	r3, [r4, #20]
 80181dc:	b003      	add	sp, #12
 80181de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181e0:	ab01      	add	r3, sp, #4
 80181e2:	466a      	mov	r2, sp
 80181e4:	f7ff ffc8 	bl	8018178 <__swhatbuf_r>
 80181e8:	9f00      	ldr	r7, [sp, #0]
 80181ea:	4605      	mov	r5, r0
 80181ec:	4639      	mov	r1, r7
 80181ee:	4630      	mov	r0, r6
 80181f0:	f7fe fa54 	bl	801669c <_malloc_r>
 80181f4:	b948      	cbnz	r0, 801820a <__smakebuf_r+0x46>
 80181f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181fa:	059a      	lsls	r2, r3, #22
 80181fc:	d4ee      	bmi.n	80181dc <__smakebuf_r+0x18>
 80181fe:	f023 0303 	bic.w	r3, r3, #3
 8018202:	f043 0302 	orr.w	r3, r3, #2
 8018206:	81a3      	strh	r3, [r4, #12]
 8018208:	e7e2      	b.n	80181d0 <__smakebuf_r+0xc>
 801820a:	89a3      	ldrh	r3, [r4, #12]
 801820c:	6020      	str	r0, [r4, #0]
 801820e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018212:	81a3      	strh	r3, [r4, #12]
 8018214:	9b01      	ldr	r3, [sp, #4]
 8018216:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801821a:	b15b      	cbz	r3, 8018234 <__smakebuf_r+0x70>
 801821c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018220:	4630      	mov	r0, r6
 8018222:	f000 f849 	bl	80182b8 <_isatty_r>
 8018226:	b128      	cbz	r0, 8018234 <__smakebuf_r+0x70>
 8018228:	89a3      	ldrh	r3, [r4, #12]
 801822a:	f023 0303 	bic.w	r3, r3, #3
 801822e:	f043 0301 	orr.w	r3, r3, #1
 8018232:	81a3      	strh	r3, [r4, #12]
 8018234:	89a3      	ldrh	r3, [r4, #12]
 8018236:	431d      	orrs	r5, r3
 8018238:	81a5      	strh	r5, [r4, #12]
 801823a:	e7cf      	b.n	80181dc <__smakebuf_r+0x18>

0801823c <memmove>:
 801823c:	4288      	cmp	r0, r1
 801823e:	b510      	push	{r4, lr}
 8018240:	eb01 0402 	add.w	r4, r1, r2
 8018244:	d902      	bls.n	801824c <memmove+0x10>
 8018246:	4284      	cmp	r4, r0
 8018248:	4623      	mov	r3, r4
 801824a:	d807      	bhi.n	801825c <memmove+0x20>
 801824c:	1e43      	subs	r3, r0, #1
 801824e:	42a1      	cmp	r1, r4
 8018250:	d008      	beq.n	8018264 <memmove+0x28>
 8018252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018256:	f803 2f01 	strb.w	r2, [r3, #1]!
 801825a:	e7f8      	b.n	801824e <memmove+0x12>
 801825c:	4402      	add	r2, r0
 801825e:	4601      	mov	r1, r0
 8018260:	428a      	cmp	r2, r1
 8018262:	d100      	bne.n	8018266 <memmove+0x2a>
 8018264:	bd10      	pop	{r4, pc}
 8018266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801826a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801826e:	e7f7      	b.n	8018260 <memmove+0x24>

08018270 <strncmp>:
 8018270:	b510      	push	{r4, lr}
 8018272:	b16a      	cbz	r2, 8018290 <strncmp+0x20>
 8018274:	3901      	subs	r1, #1
 8018276:	1884      	adds	r4, r0, r2
 8018278:	f810 2b01 	ldrb.w	r2, [r0], #1
 801827c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018280:	429a      	cmp	r2, r3
 8018282:	d103      	bne.n	801828c <strncmp+0x1c>
 8018284:	42a0      	cmp	r0, r4
 8018286:	d001      	beq.n	801828c <strncmp+0x1c>
 8018288:	2a00      	cmp	r2, #0
 801828a:	d1f5      	bne.n	8018278 <strncmp+0x8>
 801828c:	1ad0      	subs	r0, r2, r3
 801828e:	bd10      	pop	{r4, pc}
 8018290:	4610      	mov	r0, r2
 8018292:	e7fc      	b.n	801828e <strncmp+0x1e>

08018294 <_fstat_r>:
 8018294:	b538      	push	{r3, r4, r5, lr}
 8018296:	4d07      	ldr	r5, [pc, #28]	@ (80182b4 <_fstat_r+0x20>)
 8018298:	2300      	movs	r3, #0
 801829a:	4604      	mov	r4, r0
 801829c:	4608      	mov	r0, r1
 801829e:	4611      	mov	r1, r2
 80182a0:	602b      	str	r3, [r5, #0]
 80182a2:	f7ec f8db 	bl	800445c <_fstat>
 80182a6:	1c43      	adds	r3, r0, #1
 80182a8:	d102      	bne.n	80182b0 <_fstat_r+0x1c>
 80182aa:	682b      	ldr	r3, [r5, #0]
 80182ac:	b103      	cbz	r3, 80182b0 <_fstat_r+0x1c>
 80182ae:	6023      	str	r3, [r4, #0]
 80182b0:	bd38      	pop	{r3, r4, r5, pc}
 80182b2:	bf00      	nop
 80182b4:	24000c34 	.word	0x24000c34

080182b8 <_isatty_r>:
 80182b8:	b538      	push	{r3, r4, r5, lr}
 80182ba:	4d06      	ldr	r5, [pc, #24]	@ (80182d4 <_isatty_r+0x1c>)
 80182bc:	2300      	movs	r3, #0
 80182be:	4604      	mov	r4, r0
 80182c0:	4608      	mov	r0, r1
 80182c2:	602b      	str	r3, [r5, #0]
 80182c4:	f7ec f8da 	bl	800447c <_isatty>
 80182c8:	1c43      	adds	r3, r0, #1
 80182ca:	d102      	bne.n	80182d2 <_isatty_r+0x1a>
 80182cc:	682b      	ldr	r3, [r5, #0]
 80182ce:	b103      	cbz	r3, 80182d2 <_isatty_r+0x1a>
 80182d0:	6023      	str	r3, [r4, #0]
 80182d2:	bd38      	pop	{r3, r4, r5, pc}
 80182d4:	24000c34 	.word	0x24000c34

080182d8 <_sbrk_r>:
 80182d8:	b538      	push	{r3, r4, r5, lr}
 80182da:	4d06      	ldr	r5, [pc, #24]	@ (80182f4 <_sbrk_r+0x1c>)
 80182dc:	2300      	movs	r3, #0
 80182de:	4604      	mov	r4, r0
 80182e0:	4608      	mov	r0, r1
 80182e2:	602b      	str	r3, [r5, #0]
 80182e4:	f7ec f8e2 	bl	80044ac <_sbrk>
 80182e8:	1c43      	adds	r3, r0, #1
 80182ea:	d102      	bne.n	80182f2 <_sbrk_r+0x1a>
 80182ec:	682b      	ldr	r3, [r5, #0]
 80182ee:	b103      	cbz	r3, 80182f2 <_sbrk_r+0x1a>
 80182f0:	6023      	str	r3, [r4, #0]
 80182f2:	bd38      	pop	{r3, r4, r5, pc}
 80182f4:	24000c34 	.word	0x24000c34

080182f8 <nan>:
 80182f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018300 <nan+0x8>
 80182fc:	4770      	bx	lr
 80182fe:	bf00      	nop
 8018300:	00000000 	.word	0x00000000
 8018304:	7ff80000 	.word	0x7ff80000

08018308 <__assert_func>:
 8018308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801830a:	4614      	mov	r4, r2
 801830c:	461a      	mov	r2, r3
 801830e:	4b09      	ldr	r3, [pc, #36]	@ (8018334 <__assert_func+0x2c>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	4605      	mov	r5, r0
 8018314:	68d8      	ldr	r0, [r3, #12]
 8018316:	b14c      	cbz	r4, 801832c <__assert_func+0x24>
 8018318:	4b07      	ldr	r3, [pc, #28]	@ (8018338 <__assert_func+0x30>)
 801831a:	9100      	str	r1, [sp, #0]
 801831c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018320:	4906      	ldr	r1, [pc, #24]	@ (801833c <__assert_func+0x34>)
 8018322:	462b      	mov	r3, r5
 8018324:	f000 fba8 	bl	8018a78 <fiprintf>
 8018328:	f000 fbb8 	bl	8018a9c <abort>
 801832c:	4b04      	ldr	r3, [pc, #16]	@ (8018340 <__assert_func+0x38>)
 801832e:	461c      	mov	r4, r3
 8018330:	e7f3      	b.n	801831a <__assert_func+0x12>
 8018332:	bf00      	nop
 8018334:	24000030 	.word	0x24000030
 8018338:	08019752 	.word	0x08019752
 801833c:	0801975f 	.word	0x0801975f
 8018340:	0801978d 	.word	0x0801978d

08018344 <_calloc_r>:
 8018344:	b570      	push	{r4, r5, r6, lr}
 8018346:	fba1 5402 	umull	r5, r4, r1, r2
 801834a:	b934      	cbnz	r4, 801835a <_calloc_r+0x16>
 801834c:	4629      	mov	r1, r5
 801834e:	f7fe f9a5 	bl	801669c <_malloc_r>
 8018352:	4606      	mov	r6, r0
 8018354:	b928      	cbnz	r0, 8018362 <_calloc_r+0x1e>
 8018356:	4630      	mov	r0, r6
 8018358:	bd70      	pop	{r4, r5, r6, pc}
 801835a:	220c      	movs	r2, #12
 801835c:	6002      	str	r2, [r0, #0]
 801835e:	2600      	movs	r6, #0
 8018360:	e7f9      	b.n	8018356 <_calloc_r+0x12>
 8018362:	462a      	mov	r2, r5
 8018364:	4621      	mov	r1, r4
 8018366:	f7fd faa8 	bl	80158ba <memset>
 801836a:	e7f4      	b.n	8018356 <_calloc_r+0x12>

0801836c <rshift>:
 801836c:	6903      	ldr	r3, [r0, #16]
 801836e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018376:	ea4f 1261 	mov.w	r2, r1, asr #5
 801837a:	f100 0414 	add.w	r4, r0, #20
 801837e:	dd45      	ble.n	801840c <rshift+0xa0>
 8018380:	f011 011f 	ands.w	r1, r1, #31
 8018384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801838c:	d10c      	bne.n	80183a8 <rshift+0x3c>
 801838e:	f100 0710 	add.w	r7, r0, #16
 8018392:	4629      	mov	r1, r5
 8018394:	42b1      	cmp	r1, r6
 8018396:	d334      	bcc.n	8018402 <rshift+0x96>
 8018398:	1a9b      	subs	r3, r3, r2
 801839a:	009b      	lsls	r3, r3, #2
 801839c:	1eea      	subs	r2, r5, #3
 801839e:	4296      	cmp	r6, r2
 80183a0:	bf38      	it	cc
 80183a2:	2300      	movcc	r3, #0
 80183a4:	4423      	add	r3, r4
 80183a6:	e015      	b.n	80183d4 <rshift+0x68>
 80183a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80183ac:	f1c1 0820 	rsb	r8, r1, #32
 80183b0:	40cf      	lsrs	r7, r1
 80183b2:	f105 0e04 	add.w	lr, r5, #4
 80183b6:	46a1      	mov	r9, r4
 80183b8:	4576      	cmp	r6, lr
 80183ba:	46f4      	mov	ip, lr
 80183bc:	d815      	bhi.n	80183ea <rshift+0x7e>
 80183be:	1a9a      	subs	r2, r3, r2
 80183c0:	0092      	lsls	r2, r2, #2
 80183c2:	3a04      	subs	r2, #4
 80183c4:	3501      	adds	r5, #1
 80183c6:	42ae      	cmp	r6, r5
 80183c8:	bf38      	it	cc
 80183ca:	2200      	movcc	r2, #0
 80183cc:	18a3      	adds	r3, r4, r2
 80183ce:	50a7      	str	r7, [r4, r2]
 80183d0:	b107      	cbz	r7, 80183d4 <rshift+0x68>
 80183d2:	3304      	adds	r3, #4
 80183d4:	1b1a      	subs	r2, r3, r4
 80183d6:	42a3      	cmp	r3, r4
 80183d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80183dc:	bf08      	it	eq
 80183de:	2300      	moveq	r3, #0
 80183e0:	6102      	str	r2, [r0, #16]
 80183e2:	bf08      	it	eq
 80183e4:	6143      	streq	r3, [r0, #20]
 80183e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183ea:	f8dc c000 	ldr.w	ip, [ip]
 80183ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80183f2:	ea4c 0707 	orr.w	r7, ip, r7
 80183f6:	f849 7b04 	str.w	r7, [r9], #4
 80183fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80183fe:	40cf      	lsrs	r7, r1
 8018400:	e7da      	b.n	80183b8 <rshift+0x4c>
 8018402:	f851 cb04 	ldr.w	ip, [r1], #4
 8018406:	f847 cf04 	str.w	ip, [r7, #4]!
 801840a:	e7c3      	b.n	8018394 <rshift+0x28>
 801840c:	4623      	mov	r3, r4
 801840e:	e7e1      	b.n	80183d4 <rshift+0x68>

08018410 <__hexdig_fun>:
 8018410:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8018414:	2b09      	cmp	r3, #9
 8018416:	d802      	bhi.n	801841e <__hexdig_fun+0xe>
 8018418:	3820      	subs	r0, #32
 801841a:	b2c0      	uxtb	r0, r0
 801841c:	4770      	bx	lr
 801841e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8018422:	2b05      	cmp	r3, #5
 8018424:	d801      	bhi.n	801842a <__hexdig_fun+0x1a>
 8018426:	3847      	subs	r0, #71	@ 0x47
 8018428:	e7f7      	b.n	801841a <__hexdig_fun+0xa>
 801842a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801842e:	2b05      	cmp	r3, #5
 8018430:	d801      	bhi.n	8018436 <__hexdig_fun+0x26>
 8018432:	3827      	subs	r0, #39	@ 0x27
 8018434:	e7f1      	b.n	801841a <__hexdig_fun+0xa>
 8018436:	2000      	movs	r0, #0
 8018438:	4770      	bx	lr
	...

0801843c <__gethex>:
 801843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018440:	b085      	sub	sp, #20
 8018442:	468a      	mov	sl, r1
 8018444:	9302      	str	r3, [sp, #8]
 8018446:	680b      	ldr	r3, [r1, #0]
 8018448:	9001      	str	r0, [sp, #4]
 801844a:	4690      	mov	r8, r2
 801844c:	1c9c      	adds	r4, r3, #2
 801844e:	46a1      	mov	r9, r4
 8018450:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018454:	2830      	cmp	r0, #48	@ 0x30
 8018456:	d0fa      	beq.n	801844e <__gethex+0x12>
 8018458:	eba9 0303 	sub.w	r3, r9, r3
 801845c:	f1a3 0b02 	sub.w	fp, r3, #2
 8018460:	f7ff ffd6 	bl	8018410 <__hexdig_fun>
 8018464:	4605      	mov	r5, r0
 8018466:	2800      	cmp	r0, #0
 8018468:	d168      	bne.n	801853c <__gethex+0x100>
 801846a:	49a0      	ldr	r1, [pc, #640]	@ (80186ec <__gethex+0x2b0>)
 801846c:	2201      	movs	r2, #1
 801846e:	4648      	mov	r0, r9
 8018470:	f7ff fefe 	bl	8018270 <strncmp>
 8018474:	4607      	mov	r7, r0
 8018476:	2800      	cmp	r0, #0
 8018478:	d167      	bne.n	801854a <__gethex+0x10e>
 801847a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801847e:	4626      	mov	r6, r4
 8018480:	f7ff ffc6 	bl	8018410 <__hexdig_fun>
 8018484:	2800      	cmp	r0, #0
 8018486:	d062      	beq.n	801854e <__gethex+0x112>
 8018488:	4623      	mov	r3, r4
 801848a:	7818      	ldrb	r0, [r3, #0]
 801848c:	2830      	cmp	r0, #48	@ 0x30
 801848e:	4699      	mov	r9, r3
 8018490:	f103 0301 	add.w	r3, r3, #1
 8018494:	d0f9      	beq.n	801848a <__gethex+0x4e>
 8018496:	f7ff ffbb 	bl	8018410 <__hexdig_fun>
 801849a:	fab0 f580 	clz	r5, r0
 801849e:	096d      	lsrs	r5, r5, #5
 80184a0:	f04f 0b01 	mov.w	fp, #1
 80184a4:	464a      	mov	r2, r9
 80184a6:	4616      	mov	r6, r2
 80184a8:	3201      	adds	r2, #1
 80184aa:	7830      	ldrb	r0, [r6, #0]
 80184ac:	f7ff ffb0 	bl	8018410 <__hexdig_fun>
 80184b0:	2800      	cmp	r0, #0
 80184b2:	d1f8      	bne.n	80184a6 <__gethex+0x6a>
 80184b4:	498d      	ldr	r1, [pc, #564]	@ (80186ec <__gethex+0x2b0>)
 80184b6:	2201      	movs	r2, #1
 80184b8:	4630      	mov	r0, r6
 80184ba:	f7ff fed9 	bl	8018270 <strncmp>
 80184be:	2800      	cmp	r0, #0
 80184c0:	d13f      	bne.n	8018542 <__gethex+0x106>
 80184c2:	b944      	cbnz	r4, 80184d6 <__gethex+0x9a>
 80184c4:	1c74      	adds	r4, r6, #1
 80184c6:	4622      	mov	r2, r4
 80184c8:	4616      	mov	r6, r2
 80184ca:	3201      	adds	r2, #1
 80184cc:	7830      	ldrb	r0, [r6, #0]
 80184ce:	f7ff ff9f 	bl	8018410 <__hexdig_fun>
 80184d2:	2800      	cmp	r0, #0
 80184d4:	d1f8      	bne.n	80184c8 <__gethex+0x8c>
 80184d6:	1ba4      	subs	r4, r4, r6
 80184d8:	00a7      	lsls	r7, r4, #2
 80184da:	7833      	ldrb	r3, [r6, #0]
 80184dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80184e0:	2b50      	cmp	r3, #80	@ 0x50
 80184e2:	d13e      	bne.n	8018562 <__gethex+0x126>
 80184e4:	7873      	ldrb	r3, [r6, #1]
 80184e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80184e8:	d033      	beq.n	8018552 <__gethex+0x116>
 80184ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80184ec:	d034      	beq.n	8018558 <__gethex+0x11c>
 80184ee:	1c71      	adds	r1, r6, #1
 80184f0:	2400      	movs	r4, #0
 80184f2:	7808      	ldrb	r0, [r1, #0]
 80184f4:	f7ff ff8c 	bl	8018410 <__hexdig_fun>
 80184f8:	1e43      	subs	r3, r0, #1
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	2b18      	cmp	r3, #24
 80184fe:	d830      	bhi.n	8018562 <__gethex+0x126>
 8018500:	f1a0 0210 	sub.w	r2, r0, #16
 8018504:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018508:	f7ff ff82 	bl	8018410 <__hexdig_fun>
 801850c:	f100 3cff 	add.w	ip, r0, #4294967295
 8018510:	fa5f fc8c 	uxtb.w	ip, ip
 8018514:	f1bc 0f18 	cmp.w	ip, #24
 8018518:	f04f 030a 	mov.w	r3, #10
 801851c:	d91e      	bls.n	801855c <__gethex+0x120>
 801851e:	b104      	cbz	r4, 8018522 <__gethex+0xe6>
 8018520:	4252      	negs	r2, r2
 8018522:	4417      	add	r7, r2
 8018524:	f8ca 1000 	str.w	r1, [sl]
 8018528:	b1ed      	cbz	r5, 8018566 <__gethex+0x12a>
 801852a:	f1bb 0f00 	cmp.w	fp, #0
 801852e:	bf0c      	ite	eq
 8018530:	2506      	moveq	r5, #6
 8018532:	2500      	movne	r5, #0
 8018534:	4628      	mov	r0, r5
 8018536:	b005      	add	sp, #20
 8018538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801853c:	2500      	movs	r5, #0
 801853e:	462c      	mov	r4, r5
 8018540:	e7b0      	b.n	80184a4 <__gethex+0x68>
 8018542:	2c00      	cmp	r4, #0
 8018544:	d1c7      	bne.n	80184d6 <__gethex+0x9a>
 8018546:	4627      	mov	r7, r4
 8018548:	e7c7      	b.n	80184da <__gethex+0x9e>
 801854a:	464e      	mov	r6, r9
 801854c:	462f      	mov	r7, r5
 801854e:	2501      	movs	r5, #1
 8018550:	e7c3      	b.n	80184da <__gethex+0x9e>
 8018552:	2400      	movs	r4, #0
 8018554:	1cb1      	adds	r1, r6, #2
 8018556:	e7cc      	b.n	80184f2 <__gethex+0xb6>
 8018558:	2401      	movs	r4, #1
 801855a:	e7fb      	b.n	8018554 <__gethex+0x118>
 801855c:	fb03 0002 	mla	r0, r3, r2, r0
 8018560:	e7ce      	b.n	8018500 <__gethex+0xc4>
 8018562:	4631      	mov	r1, r6
 8018564:	e7de      	b.n	8018524 <__gethex+0xe8>
 8018566:	eba6 0309 	sub.w	r3, r6, r9
 801856a:	3b01      	subs	r3, #1
 801856c:	4629      	mov	r1, r5
 801856e:	2b07      	cmp	r3, #7
 8018570:	dc0a      	bgt.n	8018588 <__gethex+0x14c>
 8018572:	9801      	ldr	r0, [sp, #4]
 8018574:	f7fe f91e 	bl	80167b4 <_Balloc>
 8018578:	4604      	mov	r4, r0
 801857a:	b940      	cbnz	r0, 801858e <__gethex+0x152>
 801857c:	4b5c      	ldr	r3, [pc, #368]	@ (80186f0 <__gethex+0x2b4>)
 801857e:	4602      	mov	r2, r0
 8018580:	21e4      	movs	r1, #228	@ 0xe4
 8018582:	485c      	ldr	r0, [pc, #368]	@ (80186f4 <__gethex+0x2b8>)
 8018584:	f7ff fec0 	bl	8018308 <__assert_func>
 8018588:	3101      	adds	r1, #1
 801858a:	105b      	asrs	r3, r3, #1
 801858c:	e7ef      	b.n	801856e <__gethex+0x132>
 801858e:	f100 0a14 	add.w	sl, r0, #20
 8018592:	2300      	movs	r3, #0
 8018594:	4655      	mov	r5, sl
 8018596:	469b      	mov	fp, r3
 8018598:	45b1      	cmp	r9, r6
 801859a:	d337      	bcc.n	801860c <__gethex+0x1d0>
 801859c:	f845 bb04 	str.w	fp, [r5], #4
 80185a0:	eba5 050a 	sub.w	r5, r5, sl
 80185a4:	10ad      	asrs	r5, r5, #2
 80185a6:	6125      	str	r5, [r4, #16]
 80185a8:	4658      	mov	r0, fp
 80185aa:	f7fe f9f5 	bl	8016998 <__hi0bits>
 80185ae:	016d      	lsls	r5, r5, #5
 80185b0:	f8d8 6000 	ldr.w	r6, [r8]
 80185b4:	1a2d      	subs	r5, r5, r0
 80185b6:	42b5      	cmp	r5, r6
 80185b8:	dd54      	ble.n	8018664 <__gethex+0x228>
 80185ba:	1bad      	subs	r5, r5, r6
 80185bc:	4629      	mov	r1, r5
 80185be:	4620      	mov	r0, r4
 80185c0:	f7fe fd7e 	bl	80170c0 <__any_on>
 80185c4:	4681      	mov	r9, r0
 80185c6:	b178      	cbz	r0, 80185e8 <__gethex+0x1ac>
 80185c8:	1e6b      	subs	r3, r5, #1
 80185ca:	1159      	asrs	r1, r3, #5
 80185cc:	f003 021f 	and.w	r2, r3, #31
 80185d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80185d4:	f04f 0901 	mov.w	r9, #1
 80185d8:	fa09 f202 	lsl.w	r2, r9, r2
 80185dc:	420a      	tst	r2, r1
 80185de:	d003      	beq.n	80185e8 <__gethex+0x1ac>
 80185e0:	454b      	cmp	r3, r9
 80185e2:	dc36      	bgt.n	8018652 <__gethex+0x216>
 80185e4:	f04f 0902 	mov.w	r9, #2
 80185e8:	4629      	mov	r1, r5
 80185ea:	4620      	mov	r0, r4
 80185ec:	f7ff febe 	bl	801836c <rshift>
 80185f0:	442f      	add	r7, r5
 80185f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80185f6:	42bb      	cmp	r3, r7
 80185f8:	da42      	bge.n	8018680 <__gethex+0x244>
 80185fa:	9801      	ldr	r0, [sp, #4]
 80185fc:	4621      	mov	r1, r4
 80185fe:	f7fe f919 	bl	8016834 <_Bfree>
 8018602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018604:	2300      	movs	r3, #0
 8018606:	6013      	str	r3, [r2, #0]
 8018608:	25a3      	movs	r5, #163	@ 0xa3
 801860a:	e793      	b.n	8018534 <__gethex+0xf8>
 801860c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018610:	2a2e      	cmp	r2, #46	@ 0x2e
 8018612:	d012      	beq.n	801863a <__gethex+0x1fe>
 8018614:	2b20      	cmp	r3, #32
 8018616:	d104      	bne.n	8018622 <__gethex+0x1e6>
 8018618:	f845 bb04 	str.w	fp, [r5], #4
 801861c:	f04f 0b00 	mov.w	fp, #0
 8018620:	465b      	mov	r3, fp
 8018622:	7830      	ldrb	r0, [r6, #0]
 8018624:	9303      	str	r3, [sp, #12]
 8018626:	f7ff fef3 	bl	8018410 <__hexdig_fun>
 801862a:	9b03      	ldr	r3, [sp, #12]
 801862c:	f000 000f 	and.w	r0, r0, #15
 8018630:	4098      	lsls	r0, r3
 8018632:	ea4b 0b00 	orr.w	fp, fp, r0
 8018636:	3304      	adds	r3, #4
 8018638:	e7ae      	b.n	8018598 <__gethex+0x15c>
 801863a:	45b1      	cmp	r9, r6
 801863c:	d8ea      	bhi.n	8018614 <__gethex+0x1d8>
 801863e:	492b      	ldr	r1, [pc, #172]	@ (80186ec <__gethex+0x2b0>)
 8018640:	9303      	str	r3, [sp, #12]
 8018642:	2201      	movs	r2, #1
 8018644:	4630      	mov	r0, r6
 8018646:	f7ff fe13 	bl	8018270 <strncmp>
 801864a:	9b03      	ldr	r3, [sp, #12]
 801864c:	2800      	cmp	r0, #0
 801864e:	d1e1      	bne.n	8018614 <__gethex+0x1d8>
 8018650:	e7a2      	b.n	8018598 <__gethex+0x15c>
 8018652:	1ea9      	subs	r1, r5, #2
 8018654:	4620      	mov	r0, r4
 8018656:	f7fe fd33 	bl	80170c0 <__any_on>
 801865a:	2800      	cmp	r0, #0
 801865c:	d0c2      	beq.n	80185e4 <__gethex+0x1a8>
 801865e:	f04f 0903 	mov.w	r9, #3
 8018662:	e7c1      	b.n	80185e8 <__gethex+0x1ac>
 8018664:	da09      	bge.n	801867a <__gethex+0x23e>
 8018666:	1b75      	subs	r5, r6, r5
 8018668:	4621      	mov	r1, r4
 801866a:	9801      	ldr	r0, [sp, #4]
 801866c:	462a      	mov	r2, r5
 801866e:	f7fe faf1 	bl	8016c54 <__lshift>
 8018672:	1b7f      	subs	r7, r7, r5
 8018674:	4604      	mov	r4, r0
 8018676:	f100 0a14 	add.w	sl, r0, #20
 801867a:	f04f 0900 	mov.w	r9, #0
 801867e:	e7b8      	b.n	80185f2 <__gethex+0x1b6>
 8018680:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018684:	42bd      	cmp	r5, r7
 8018686:	dd6f      	ble.n	8018768 <__gethex+0x32c>
 8018688:	1bed      	subs	r5, r5, r7
 801868a:	42ae      	cmp	r6, r5
 801868c:	dc34      	bgt.n	80186f8 <__gethex+0x2bc>
 801868e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018692:	2b02      	cmp	r3, #2
 8018694:	d022      	beq.n	80186dc <__gethex+0x2a0>
 8018696:	2b03      	cmp	r3, #3
 8018698:	d024      	beq.n	80186e4 <__gethex+0x2a8>
 801869a:	2b01      	cmp	r3, #1
 801869c:	d115      	bne.n	80186ca <__gethex+0x28e>
 801869e:	42ae      	cmp	r6, r5
 80186a0:	d113      	bne.n	80186ca <__gethex+0x28e>
 80186a2:	2e01      	cmp	r6, #1
 80186a4:	d10b      	bne.n	80186be <__gethex+0x282>
 80186a6:	9a02      	ldr	r2, [sp, #8]
 80186a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80186ac:	6013      	str	r3, [r2, #0]
 80186ae:	2301      	movs	r3, #1
 80186b0:	6123      	str	r3, [r4, #16]
 80186b2:	f8ca 3000 	str.w	r3, [sl]
 80186b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80186b8:	2562      	movs	r5, #98	@ 0x62
 80186ba:	601c      	str	r4, [r3, #0]
 80186bc:	e73a      	b.n	8018534 <__gethex+0xf8>
 80186be:	1e71      	subs	r1, r6, #1
 80186c0:	4620      	mov	r0, r4
 80186c2:	f7fe fcfd 	bl	80170c0 <__any_on>
 80186c6:	2800      	cmp	r0, #0
 80186c8:	d1ed      	bne.n	80186a6 <__gethex+0x26a>
 80186ca:	9801      	ldr	r0, [sp, #4]
 80186cc:	4621      	mov	r1, r4
 80186ce:	f7fe f8b1 	bl	8016834 <_Bfree>
 80186d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80186d4:	2300      	movs	r3, #0
 80186d6:	6013      	str	r3, [r2, #0]
 80186d8:	2550      	movs	r5, #80	@ 0x50
 80186da:	e72b      	b.n	8018534 <__gethex+0xf8>
 80186dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d1f3      	bne.n	80186ca <__gethex+0x28e>
 80186e2:	e7e0      	b.n	80186a6 <__gethex+0x26a>
 80186e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d1dd      	bne.n	80186a6 <__gethex+0x26a>
 80186ea:	e7ee      	b.n	80186ca <__gethex+0x28e>
 80186ec:	08019737 	.word	0x08019737
 80186f0:	080196cd 	.word	0x080196cd
 80186f4:	0801978e 	.word	0x0801978e
 80186f8:	1e6f      	subs	r7, r5, #1
 80186fa:	f1b9 0f00 	cmp.w	r9, #0
 80186fe:	d130      	bne.n	8018762 <__gethex+0x326>
 8018700:	b127      	cbz	r7, 801870c <__gethex+0x2d0>
 8018702:	4639      	mov	r1, r7
 8018704:	4620      	mov	r0, r4
 8018706:	f7fe fcdb 	bl	80170c0 <__any_on>
 801870a:	4681      	mov	r9, r0
 801870c:	117a      	asrs	r2, r7, #5
 801870e:	2301      	movs	r3, #1
 8018710:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018714:	f007 071f 	and.w	r7, r7, #31
 8018718:	40bb      	lsls	r3, r7
 801871a:	4213      	tst	r3, r2
 801871c:	4629      	mov	r1, r5
 801871e:	4620      	mov	r0, r4
 8018720:	bf18      	it	ne
 8018722:	f049 0902 	orrne.w	r9, r9, #2
 8018726:	f7ff fe21 	bl	801836c <rshift>
 801872a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801872e:	1b76      	subs	r6, r6, r5
 8018730:	2502      	movs	r5, #2
 8018732:	f1b9 0f00 	cmp.w	r9, #0
 8018736:	d047      	beq.n	80187c8 <__gethex+0x38c>
 8018738:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801873c:	2b02      	cmp	r3, #2
 801873e:	d015      	beq.n	801876c <__gethex+0x330>
 8018740:	2b03      	cmp	r3, #3
 8018742:	d017      	beq.n	8018774 <__gethex+0x338>
 8018744:	2b01      	cmp	r3, #1
 8018746:	d109      	bne.n	801875c <__gethex+0x320>
 8018748:	f019 0f02 	tst.w	r9, #2
 801874c:	d006      	beq.n	801875c <__gethex+0x320>
 801874e:	f8da 3000 	ldr.w	r3, [sl]
 8018752:	ea49 0903 	orr.w	r9, r9, r3
 8018756:	f019 0f01 	tst.w	r9, #1
 801875a:	d10e      	bne.n	801877a <__gethex+0x33e>
 801875c:	f045 0510 	orr.w	r5, r5, #16
 8018760:	e032      	b.n	80187c8 <__gethex+0x38c>
 8018762:	f04f 0901 	mov.w	r9, #1
 8018766:	e7d1      	b.n	801870c <__gethex+0x2d0>
 8018768:	2501      	movs	r5, #1
 801876a:	e7e2      	b.n	8018732 <__gethex+0x2f6>
 801876c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801876e:	f1c3 0301 	rsb	r3, r3, #1
 8018772:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018776:	2b00      	cmp	r3, #0
 8018778:	d0f0      	beq.n	801875c <__gethex+0x320>
 801877a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801877e:	f104 0314 	add.w	r3, r4, #20
 8018782:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018786:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801878a:	f04f 0c00 	mov.w	ip, #0
 801878e:	4618      	mov	r0, r3
 8018790:	f853 2b04 	ldr.w	r2, [r3], #4
 8018794:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018798:	d01b      	beq.n	80187d2 <__gethex+0x396>
 801879a:	3201      	adds	r2, #1
 801879c:	6002      	str	r2, [r0, #0]
 801879e:	2d02      	cmp	r5, #2
 80187a0:	f104 0314 	add.w	r3, r4, #20
 80187a4:	d13c      	bne.n	8018820 <__gethex+0x3e4>
 80187a6:	f8d8 2000 	ldr.w	r2, [r8]
 80187aa:	3a01      	subs	r2, #1
 80187ac:	42b2      	cmp	r2, r6
 80187ae:	d109      	bne.n	80187c4 <__gethex+0x388>
 80187b0:	1171      	asrs	r1, r6, #5
 80187b2:	2201      	movs	r2, #1
 80187b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80187b8:	f006 061f 	and.w	r6, r6, #31
 80187bc:	fa02 f606 	lsl.w	r6, r2, r6
 80187c0:	421e      	tst	r6, r3
 80187c2:	d13a      	bne.n	801883a <__gethex+0x3fe>
 80187c4:	f045 0520 	orr.w	r5, r5, #32
 80187c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80187ca:	601c      	str	r4, [r3, #0]
 80187cc:	9b02      	ldr	r3, [sp, #8]
 80187ce:	601f      	str	r7, [r3, #0]
 80187d0:	e6b0      	b.n	8018534 <__gethex+0xf8>
 80187d2:	4299      	cmp	r1, r3
 80187d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80187d8:	d8d9      	bhi.n	801878e <__gethex+0x352>
 80187da:	68a3      	ldr	r3, [r4, #8]
 80187dc:	459b      	cmp	fp, r3
 80187de:	db17      	blt.n	8018810 <__gethex+0x3d4>
 80187e0:	6861      	ldr	r1, [r4, #4]
 80187e2:	9801      	ldr	r0, [sp, #4]
 80187e4:	3101      	adds	r1, #1
 80187e6:	f7fd ffe5 	bl	80167b4 <_Balloc>
 80187ea:	4681      	mov	r9, r0
 80187ec:	b918      	cbnz	r0, 80187f6 <__gethex+0x3ba>
 80187ee:	4b1a      	ldr	r3, [pc, #104]	@ (8018858 <__gethex+0x41c>)
 80187f0:	4602      	mov	r2, r0
 80187f2:	2184      	movs	r1, #132	@ 0x84
 80187f4:	e6c5      	b.n	8018582 <__gethex+0x146>
 80187f6:	6922      	ldr	r2, [r4, #16]
 80187f8:	3202      	adds	r2, #2
 80187fa:	f104 010c 	add.w	r1, r4, #12
 80187fe:	0092      	lsls	r2, r2, #2
 8018800:	300c      	adds	r0, #12
 8018802:	f7fd f8da 	bl	80159ba <memcpy>
 8018806:	4621      	mov	r1, r4
 8018808:	9801      	ldr	r0, [sp, #4]
 801880a:	f7fe f813 	bl	8016834 <_Bfree>
 801880e:	464c      	mov	r4, r9
 8018810:	6923      	ldr	r3, [r4, #16]
 8018812:	1c5a      	adds	r2, r3, #1
 8018814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018818:	6122      	str	r2, [r4, #16]
 801881a:	2201      	movs	r2, #1
 801881c:	615a      	str	r2, [r3, #20]
 801881e:	e7be      	b.n	801879e <__gethex+0x362>
 8018820:	6922      	ldr	r2, [r4, #16]
 8018822:	455a      	cmp	r2, fp
 8018824:	dd0b      	ble.n	801883e <__gethex+0x402>
 8018826:	2101      	movs	r1, #1
 8018828:	4620      	mov	r0, r4
 801882a:	f7ff fd9f 	bl	801836c <rshift>
 801882e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018832:	3701      	adds	r7, #1
 8018834:	42bb      	cmp	r3, r7
 8018836:	f6ff aee0 	blt.w	80185fa <__gethex+0x1be>
 801883a:	2501      	movs	r5, #1
 801883c:	e7c2      	b.n	80187c4 <__gethex+0x388>
 801883e:	f016 061f 	ands.w	r6, r6, #31
 8018842:	d0fa      	beq.n	801883a <__gethex+0x3fe>
 8018844:	4453      	add	r3, sl
 8018846:	f1c6 0620 	rsb	r6, r6, #32
 801884a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801884e:	f7fe f8a3 	bl	8016998 <__hi0bits>
 8018852:	42b0      	cmp	r0, r6
 8018854:	dbe7      	blt.n	8018826 <__gethex+0x3ea>
 8018856:	e7f0      	b.n	801883a <__gethex+0x3fe>
 8018858:	080196cd 	.word	0x080196cd

0801885c <L_shift>:
 801885c:	f1c2 0208 	rsb	r2, r2, #8
 8018860:	0092      	lsls	r2, r2, #2
 8018862:	b570      	push	{r4, r5, r6, lr}
 8018864:	f1c2 0620 	rsb	r6, r2, #32
 8018868:	6843      	ldr	r3, [r0, #4]
 801886a:	6804      	ldr	r4, [r0, #0]
 801886c:	fa03 f506 	lsl.w	r5, r3, r6
 8018870:	432c      	orrs	r4, r5
 8018872:	40d3      	lsrs	r3, r2
 8018874:	6004      	str	r4, [r0, #0]
 8018876:	f840 3f04 	str.w	r3, [r0, #4]!
 801887a:	4288      	cmp	r0, r1
 801887c:	d3f4      	bcc.n	8018868 <L_shift+0xc>
 801887e:	bd70      	pop	{r4, r5, r6, pc}

08018880 <__match>:
 8018880:	b530      	push	{r4, r5, lr}
 8018882:	6803      	ldr	r3, [r0, #0]
 8018884:	3301      	adds	r3, #1
 8018886:	f811 4b01 	ldrb.w	r4, [r1], #1
 801888a:	b914      	cbnz	r4, 8018892 <__match+0x12>
 801888c:	6003      	str	r3, [r0, #0]
 801888e:	2001      	movs	r0, #1
 8018890:	bd30      	pop	{r4, r5, pc}
 8018892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018896:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801889a:	2d19      	cmp	r5, #25
 801889c:	bf98      	it	ls
 801889e:	3220      	addls	r2, #32
 80188a0:	42a2      	cmp	r2, r4
 80188a2:	d0f0      	beq.n	8018886 <__match+0x6>
 80188a4:	2000      	movs	r0, #0
 80188a6:	e7f3      	b.n	8018890 <__match+0x10>

080188a8 <__hexnan>:
 80188a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ac:	680b      	ldr	r3, [r1, #0]
 80188ae:	6801      	ldr	r1, [r0, #0]
 80188b0:	115e      	asrs	r6, r3, #5
 80188b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80188b6:	f013 031f 	ands.w	r3, r3, #31
 80188ba:	b087      	sub	sp, #28
 80188bc:	bf18      	it	ne
 80188be:	3604      	addne	r6, #4
 80188c0:	2500      	movs	r5, #0
 80188c2:	1f37      	subs	r7, r6, #4
 80188c4:	4682      	mov	sl, r0
 80188c6:	4690      	mov	r8, r2
 80188c8:	9301      	str	r3, [sp, #4]
 80188ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80188ce:	46b9      	mov	r9, r7
 80188d0:	463c      	mov	r4, r7
 80188d2:	9502      	str	r5, [sp, #8]
 80188d4:	46ab      	mov	fp, r5
 80188d6:	784a      	ldrb	r2, [r1, #1]
 80188d8:	1c4b      	adds	r3, r1, #1
 80188da:	9303      	str	r3, [sp, #12]
 80188dc:	b342      	cbz	r2, 8018930 <__hexnan+0x88>
 80188de:	4610      	mov	r0, r2
 80188e0:	9105      	str	r1, [sp, #20]
 80188e2:	9204      	str	r2, [sp, #16]
 80188e4:	f7ff fd94 	bl	8018410 <__hexdig_fun>
 80188e8:	2800      	cmp	r0, #0
 80188ea:	d151      	bne.n	8018990 <__hexnan+0xe8>
 80188ec:	9a04      	ldr	r2, [sp, #16]
 80188ee:	9905      	ldr	r1, [sp, #20]
 80188f0:	2a20      	cmp	r2, #32
 80188f2:	d818      	bhi.n	8018926 <__hexnan+0x7e>
 80188f4:	9b02      	ldr	r3, [sp, #8]
 80188f6:	459b      	cmp	fp, r3
 80188f8:	dd13      	ble.n	8018922 <__hexnan+0x7a>
 80188fa:	454c      	cmp	r4, r9
 80188fc:	d206      	bcs.n	801890c <__hexnan+0x64>
 80188fe:	2d07      	cmp	r5, #7
 8018900:	dc04      	bgt.n	801890c <__hexnan+0x64>
 8018902:	462a      	mov	r2, r5
 8018904:	4649      	mov	r1, r9
 8018906:	4620      	mov	r0, r4
 8018908:	f7ff ffa8 	bl	801885c <L_shift>
 801890c:	4544      	cmp	r4, r8
 801890e:	d952      	bls.n	80189b6 <__hexnan+0x10e>
 8018910:	2300      	movs	r3, #0
 8018912:	f1a4 0904 	sub.w	r9, r4, #4
 8018916:	f844 3c04 	str.w	r3, [r4, #-4]
 801891a:	f8cd b008 	str.w	fp, [sp, #8]
 801891e:	464c      	mov	r4, r9
 8018920:	461d      	mov	r5, r3
 8018922:	9903      	ldr	r1, [sp, #12]
 8018924:	e7d7      	b.n	80188d6 <__hexnan+0x2e>
 8018926:	2a29      	cmp	r2, #41	@ 0x29
 8018928:	d157      	bne.n	80189da <__hexnan+0x132>
 801892a:	3102      	adds	r1, #2
 801892c:	f8ca 1000 	str.w	r1, [sl]
 8018930:	f1bb 0f00 	cmp.w	fp, #0
 8018934:	d051      	beq.n	80189da <__hexnan+0x132>
 8018936:	454c      	cmp	r4, r9
 8018938:	d206      	bcs.n	8018948 <__hexnan+0xa0>
 801893a:	2d07      	cmp	r5, #7
 801893c:	dc04      	bgt.n	8018948 <__hexnan+0xa0>
 801893e:	462a      	mov	r2, r5
 8018940:	4649      	mov	r1, r9
 8018942:	4620      	mov	r0, r4
 8018944:	f7ff ff8a 	bl	801885c <L_shift>
 8018948:	4544      	cmp	r4, r8
 801894a:	d936      	bls.n	80189ba <__hexnan+0x112>
 801894c:	f1a8 0204 	sub.w	r2, r8, #4
 8018950:	4623      	mov	r3, r4
 8018952:	f853 1b04 	ldr.w	r1, [r3], #4
 8018956:	f842 1f04 	str.w	r1, [r2, #4]!
 801895a:	429f      	cmp	r7, r3
 801895c:	d2f9      	bcs.n	8018952 <__hexnan+0xaa>
 801895e:	1b3b      	subs	r3, r7, r4
 8018960:	f023 0303 	bic.w	r3, r3, #3
 8018964:	3304      	adds	r3, #4
 8018966:	3401      	adds	r4, #1
 8018968:	3e03      	subs	r6, #3
 801896a:	42b4      	cmp	r4, r6
 801896c:	bf88      	it	hi
 801896e:	2304      	movhi	r3, #4
 8018970:	4443      	add	r3, r8
 8018972:	2200      	movs	r2, #0
 8018974:	f843 2b04 	str.w	r2, [r3], #4
 8018978:	429f      	cmp	r7, r3
 801897a:	d2fb      	bcs.n	8018974 <__hexnan+0xcc>
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	b91b      	cbnz	r3, 8018988 <__hexnan+0xe0>
 8018980:	4547      	cmp	r7, r8
 8018982:	d128      	bne.n	80189d6 <__hexnan+0x12e>
 8018984:	2301      	movs	r3, #1
 8018986:	603b      	str	r3, [r7, #0]
 8018988:	2005      	movs	r0, #5
 801898a:	b007      	add	sp, #28
 801898c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018990:	3501      	adds	r5, #1
 8018992:	2d08      	cmp	r5, #8
 8018994:	f10b 0b01 	add.w	fp, fp, #1
 8018998:	dd06      	ble.n	80189a8 <__hexnan+0x100>
 801899a:	4544      	cmp	r4, r8
 801899c:	d9c1      	bls.n	8018922 <__hexnan+0x7a>
 801899e:	2300      	movs	r3, #0
 80189a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80189a4:	2501      	movs	r5, #1
 80189a6:	3c04      	subs	r4, #4
 80189a8:	6822      	ldr	r2, [r4, #0]
 80189aa:	f000 000f 	and.w	r0, r0, #15
 80189ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80189b2:	6020      	str	r0, [r4, #0]
 80189b4:	e7b5      	b.n	8018922 <__hexnan+0x7a>
 80189b6:	2508      	movs	r5, #8
 80189b8:	e7b3      	b.n	8018922 <__hexnan+0x7a>
 80189ba:	9b01      	ldr	r3, [sp, #4]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d0dd      	beq.n	801897c <__hexnan+0xd4>
 80189c0:	f1c3 0320 	rsb	r3, r3, #32
 80189c4:	f04f 32ff 	mov.w	r2, #4294967295
 80189c8:	40da      	lsrs	r2, r3
 80189ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80189ce:	4013      	ands	r3, r2
 80189d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80189d4:	e7d2      	b.n	801897c <__hexnan+0xd4>
 80189d6:	3f04      	subs	r7, #4
 80189d8:	e7d0      	b.n	801897c <__hexnan+0xd4>
 80189da:	2004      	movs	r0, #4
 80189dc:	e7d5      	b.n	801898a <__hexnan+0xe2>

080189de <__ascii_mbtowc>:
 80189de:	b082      	sub	sp, #8
 80189e0:	b901      	cbnz	r1, 80189e4 <__ascii_mbtowc+0x6>
 80189e2:	a901      	add	r1, sp, #4
 80189e4:	b142      	cbz	r2, 80189f8 <__ascii_mbtowc+0x1a>
 80189e6:	b14b      	cbz	r3, 80189fc <__ascii_mbtowc+0x1e>
 80189e8:	7813      	ldrb	r3, [r2, #0]
 80189ea:	600b      	str	r3, [r1, #0]
 80189ec:	7812      	ldrb	r2, [r2, #0]
 80189ee:	1e10      	subs	r0, r2, #0
 80189f0:	bf18      	it	ne
 80189f2:	2001      	movne	r0, #1
 80189f4:	b002      	add	sp, #8
 80189f6:	4770      	bx	lr
 80189f8:	4610      	mov	r0, r2
 80189fa:	e7fb      	b.n	80189f4 <__ascii_mbtowc+0x16>
 80189fc:	f06f 0001 	mvn.w	r0, #1
 8018a00:	e7f8      	b.n	80189f4 <__ascii_mbtowc+0x16>

08018a02 <_realloc_r>:
 8018a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a06:	4607      	mov	r7, r0
 8018a08:	4614      	mov	r4, r2
 8018a0a:	460d      	mov	r5, r1
 8018a0c:	b921      	cbnz	r1, 8018a18 <_realloc_r+0x16>
 8018a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a12:	4611      	mov	r1, r2
 8018a14:	f7fd be42 	b.w	801669c <_malloc_r>
 8018a18:	b92a      	cbnz	r2, 8018a26 <_realloc_r+0x24>
 8018a1a:	f7fd fdcb 	bl	80165b4 <_free_r>
 8018a1e:	4625      	mov	r5, r4
 8018a20:	4628      	mov	r0, r5
 8018a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a26:	f000 f840 	bl	8018aaa <_malloc_usable_size_r>
 8018a2a:	4284      	cmp	r4, r0
 8018a2c:	4606      	mov	r6, r0
 8018a2e:	d802      	bhi.n	8018a36 <_realloc_r+0x34>
 8018a30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018a34:	d8f4      	bhi.n	8018a20 <_realloc_r+0x1e>
 8018a36:	4621      	mov	r1, r4
 8018a38:	4638      	mov	r0, r7
 8018a3a:	f7fd fe2f 	bl	801669c <_malloc_r>
 8018a3e:	4680      	mov	r8, r0
 8018a40:	b908      	cbnz	r0, 8018a46 <_realloc_r+0x44>
 8018a42:	4645      	mov	r5, r8
 8018a44:	e7ec      	b.n	8018a20 <_realloc_r+0x1e>
 8018a46:	42b4      	cmp	r4, r6
 8018a48:	4622      	mov	r2, r4
 8018a4a:	4629      	mov	r1, r5
 8018a4c:	bf28      	it	cs
 8018a4e:	4632      	movcs	r2, r6
 8018a50:	f7fc ffb3 	bl	80159ba <memcpy>
 8018a54:	4629      	mov	r1, r5
 8018a56:	4638      	mov	r0, r7
 8018a58:	f7fd fdac 	bl	80165b4 <_free_r>
 8018a5c:	e7f1      	b.n	8018a42 <_realloc_r+0x40>

08018a5e <__ascii_wctomb>:
 8018a5e:	4603      	mov	r3, r0
 8018a60:	4608      	mov	r0, r1
 8018a62:	b141      	cbz	r1, 8018a76 <__ascii_wctomb+0x18>
 8018a64:	2aff      	cmp	r2, #255	@ 0xff
 8018a66:	d904      	bls.n	8018a72 <__ascii_wctomb+0x14>
 8018a68:	228a      	movs	r2, #138	@ 0x8a
 8018a6a:	601a      	str	r2, [r3, #0]
 8018a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8018a70:	4770      	bx	lr
 8018a72:	700a      	strb	r2, [r1, #0]
 8018a74:	2001      	movs	r0, #1
 8018a76:	4770      	bx	lr

08018a78 <fiprintf>:
 8018a78:	b40e      	push	{r1, r2, r3}
 8018a7a:	b503      	push	{r0, r1, lr}
 8018a7c:	4601      	mov	r1, r0
 8018a7e:	ab03      	add	r3, sp, #12
 8018a80:	4805      	ldr	r0, [pc, #20]	@ (8018a98 <fiprintf+0x20>)
 8018a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a86:	6800      	ldr	r0, [r0, #0]
 8018a88:	9301      	str	r3, [sp, #4]
 8018a8a:	f000 f83f 	bl	8018b0c <_vfiprintf_r>
 8018a8e:	b002      	add	sp, #8
 8018a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a94:	b003      	add	sp, #12
 8018a96:	4770      	bx	lr
 8018a98:	24000030 	.word	0x24000030

08018a9c <abort>:
 8018a9c:	b508      	push	{r3, lr}
 8018a9e:	2006      	movs	r0, #6
 8018aa0:	f000 fa08 	bl	8018eb4 <raise>
 8018aa4:	2001      	movs	r0, #1
 8018aa6:	f7eb fc89 	bl	80043bc <_exit>

08018aaa <_malloc_usable_size_r>:
 8018aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018aae:	1f18      	subs	r0, r3, #4
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	bfbc      	itt	lt
 8018ab4:	580b      	ldrlt	r3, [r1, r0]
 8018ab6:	18c0      	addlt	r0, r0, r3
 8018ab8:	4770      	bx	lr

08018aba <__sfputc_r>:
 8018aba:	6893      	ldr	r3, [r2, #8]
 8018abc:	3b01      	subs	r3, #1
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	b410      	push	{r4}
 8018ac2:	6093      	str	r3, [r2, #8]
 8018ac4:	da08      	bge.n	8018ad8 <__sfputc_r+0x1e>
 8018ac6:	6994      	ldr	r4, [r2, #24]
 8018ac8:	42a3      	cmp	r3, r4
 8018aca:	db01      	blt.n	8018ad0 <__sfputc_r+0x16>
 8018acc:	290a      	cmp	r1, #10
 8018ace:	d103      	bne.n	8018ad8 <__sfputc_r+0x1e>
 8018ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ad4:	f000 b932 	b.w	8018d3c <__swbuf_r>
 8018ad8:	6813      	ldr	r3, [r2, #0]
 8018ada:	1c58      	adds	r0, r3, #1
 8018adc:	6010      	str	r0, [r2, #0]
 8018ade:	7019      	strb	r1, [r3, #0]
 8018ae0:	4608      	mov	r0, r1
 8018ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ae6:	4770      	bx	lr

08018ae8 <__sfputs_r>:
 8018ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aea:	4606      	mov	r6, r0
 8018aec:	460f      	mov	r7, r1
 8018aee:	4614      	mov	r4, r2
 8018af0:	18d5      	adds	r5, r2, r3
 8018af2:	42ac      	cmp	r4, r5
 8018af4:	d101      	bne.n	8018afa <__sfputs_r+0x12>
 8018af6:	2000      	movs	r0, #0
 8018af8:	e007      	b.n	8018b0a <__sfputs_r+0x22>
 8018afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018afe:	463a      	mov	r2, r7
 8018b00:	4630      	mov	r0, r6
 8018b02:	f7ff ffda 	bl	8018aba <__sfputc_r>
 8018b06:	1c43      	adds	r3, r0, #1
 8018b08:	d1f3      	bne.n	8018af2 <__sfputs_r+0xa>
 8018b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018b0c <_vfiprintf_r>:
 8018b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b10:	460d      	mov	r5, r1
 8018b12:	b09d      	sub	sp, #116	@ 0x74
 8018b14:	4614      	mov	r4, r2
 8018b16:	4698      	mov	r8, r3
 8018b18:	4606      	mov	r6, r0
 8018b1a:	b118      	cbz	r0, 8018b24 <_vfiprintf_r+0x18>
 8018b1c:	6a03      	ldr	r3, [r0, #32]
 8018b1e:	b90b      	cbnz	r3, 8018b24 <_vfiprintf_r+0x18>
 8018b20:	f7fc fd46 	bl	80155b0 <__sinit>
 8018b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b26:	07d9      	lsls	r1, r3, #31
 8018b28:	d405      	bmi.n	8018b36 <_vfiprintf_r+0x2a>
 8018b2a:	89ab      	ldrh	r3, [r5, #12]
 8018b2c:	059a      	lsls	r2, r3, #22
 8018b2e:	d402      	bmi.n	8018b36 <_vfiprintf_r+0x2a>
 8018b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b32:	f7fc ff40 	bl	80159b6 <__retarget_lock_acquire_recursive>
 8018b36:	89ab      	ldrh	r3, [r5, #12]
 8018b38:	071b      	lsls	r3, r3, #28
 8018b3a:	d501      	bpl.n	8018b40 <_vfiprintf_r+0x34>
 8018b3c:	692b      	ldr	r3, [r5, #16]
 8018b3e:	b99b      	cbnz	r3, 8018b68 <_vfiprintf_r+0x5c>
 8018b40:	4629      	mov	r1, r5
 8018b42:	4630      	mov	r0, r6
 8018b44:	f000 f938 	bl	8018db8 <__swsetup_r>
 8018b48:	b170      	cbz	r0, 8018b68 <_vfiprintf_r+0x5c>
 8018b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b4c:	07dc      	lsls	r4, r3, #31
 8018b4e:	d504      	bpl.n	8018b5a <_vfiprintf_r+0x4e>
 8018b50:	f04f 30ff 	mov.w	r0, #4294967295
 8018b54:	b01d      	add	sp, #116	@ 0x74
 8018b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b5a:	89ab      	ldrh	r3, [r5, #12]
 8018b5c:	0598      	lsls	r0, r3, #22
 8018b5e:	d4f7      	bmi.n	8018b50 <_vfiprintf_r+0x44>
 8018b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b62:	f7fc ff29 	bl	80159b8 <__retarget_lock_release_recursive>
 8018b66:	e7f3      	b.n	8018b50 <_vfiprintf_r+0x44>
 8018b68:	2300      	movs	r3, #0
 8018b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b6c:	2320      	movs	r3, #32
 8018b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b76:	2330      	movs	r3, #48	@ 0x30
 8018b78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018d28 <_vfiprintf_r+0x21c>
 8018b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018b80:	f04f 0901 	mov.w	r9, #1
 8018b84:	4623      	mov	r3, r4
 8018b86:	469a      	mov	sl, r3
 8018b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b8c:	b10a      	cbz	r2, 8018b92 <_vfiprintf_r+0x86>
 8018b8e:	2a25      	cmp	r2, #37	@ 0x25
 8018b90:	d1f9      	bne.n	8018b86 <_vfiprintf_r+0x7a>
 8018b92:	ebba 0b04 	subs.w	fp, sl, r4
 8018b96:	d00b      	beq.n	8018bb0 <_vfiprintf_r+0xa4>
 8018b98:	465b      	mov	r3, fp
 8018b9a:	4622      	mov	r2, r4
 8018b9c:	4629      	mov	r1, r5
 8018b9e:	4630      	mov	r0, r6
 8018ba0:	f7ff ffa2 	bl	8018ae8 <__sfputs_r>
 8018ba4:	3001      	adds	r0, #1
 8018ba6:	f000 80a7 	beq.w	8018cf8 <_vfiprintf_r+0x1ec>
 8018baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018bac:	445a      	add	r2, fp
 8018bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8018bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	f000 809f 	beq.w	8018cf8 <_vfiprintf_r+0x1ec>
 8018bba:	2300      	movs	r3, #0
 8018bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8018bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018bc4:	f10a 0a01 	add.w	sl, sl, #1
 8018bc8:	9304      	str	r3, [sp, #16]
 8018bca:	9307      	str	r3, [sp, #28]
 8018bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8018bd2:	4654      	mov	r4, sl
 8018bd4:	2205      	movs	r2, #5
 8018bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bda:	4853      	ldr	r0, [pc, #332]	@ (8018d28 <_vfiprintf_r+0x21c>)
 8018bdc:	f7e7 fb98 	bl	8000310 <memchr>
 8018be0:	9a04      	ldr	r2, [sp, #16]
 8018be2:	b9d8      	cbnz	r0, 8018c1c <_vfiprintf_r+0x110>
 8018be4:	06d1      	lsls	r1, r2, #27
 8018be6:	bf44      	itt	mi
 8018be8:	2320      	movmi	r3, #32
 8018bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018bee:	0713      	lsls	r3, r2, #28
 8018bf0:	bf44      	itt	mi
 8018bf2:	232b      	movmi	r3, #43	@ 0x2b
 8018bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8018bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8018bfe:	d015      	beq.n	8018c2c <_vfiprintf_r+0x120>
 8018c00:	9a07      	ldr	r2, [sp, #28]
 8018c02:	4654      	mov	r4, sl
 8018c04:	2000      	movs	r0, #0
 8018c06:	f04f 0c0a 	mov.w	ip, #10
 8018c0a:	4621      	mov	r1, r4
 8018c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c10:	3b30      	subs	r3, #48	@ 0x30
 8018c12:	2b09      	cmp	r3, #9
 8018c14:	d94b      	bls.n	8018cae <_vfiprintf_r+0x1a2>
 8018c16:	b1b0      	cbz	r0, 8018c46 <_vfiprintf_r+0x13a>
 8018c18:	9207      	str	r2, [sp, #28]
 8018c1a:	e014      	b.n	8018c46 <_vfiprintf_r+0x13a>
 8018c1c:	eba0 0308 	sub.w	r3, r0, r8
 8018c20:	fa09 f303 	lsl.w	r3, r9, r3
 8018c24:	4313      	orrs	r3, r2
 8018c26:	9304      	str	r3, [sp, #16]
 8018c28:	46a2      	mov	sl, r4
 8018c2a:	e7d2      	b.n	8018bd2 <_vfiprintf_r+0xc6>
 8018c2c:	9b03      	ldr	r3, [sp, #12]
 8018c2e:	1d19      	adds	r1, r3, #4
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	9103      	str	r1, [sp, #12]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	bfbb      	ittet	lt
 8018c38:	425b      	neglt	r3, r3
 8018c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8018c3e:	9307      	strge	r3, [sp, #28]
 8018c40:	9307      	strlt	r3, [sp, #28]
 8018c42:	bfb8      	it	lt
 8018c44:	9204      	strlt	r2, [sp, #16]
 8018c46:	7823      	ldrb	r3, [r4, #0]
 8018c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8018c4a:	d10a      	bne.n	8018c62 <_vfiprintf_r+0x156>
 8018c4c:	7863      	ldrb	r3, [r4, #1]
 8018c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c50:	d132      	bne.n	8018cb8 <_vfiprintf_r+0x1ac>
 8018c52:	9b03      	ldr	r3, [sp, #12]
 8018c54:	1d1a      	adds	r2, r3, #4
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	9203      	str	r2, [sp, #12]
 8018c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018c5e:	3402      	adds	r4, #2
 8018c60:	9305      	str	r3, [sp, #20]
 8018c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018d38 <_vfiprintf_r+0x22c>
 8018c66:	7821      	ldrb	r1, [r4, #0]
 8018c68:	2203      	movs	r2, #3
 8018c6a:	4650      	mov	r0, sl
 8018c6c:	f7e7 fb50 	bl	8000310 <memchr>
 8018c70:	b138      	cbz	r0, 8018c82 <_vfiprintf_r+0x176>
 8018c72:	9b04      	ldr	r3, [sp, #16]
 8018c74:	eba0 000a 	sub.w	r0, r0, sl
 8018c78:	2240      	movs	r2, #64	@ 0x40
 8018c7a:	4082      	lsls	r2, r0
 8018c7c:	4313      	orrs	r3, r2
 8018c7e:	3401      	adds	r4, #1
 8018c80:	9304      	str	r3, [sp, #16]
 8018c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c86:	4829      	ldr	r0, [pc, #164]	@ (8018d2c <_vfiprintf_r+0x220>)
 8018c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018c8c:	2206      	movs	r2, #6
 8018c8e:	f7e7 fb3f 	bl	8000310 <memchr>
 8018c92:	2800      	cmp	r0, #0
 8018c94:	d03f      	beq.n	8018d16 <_vfiprintf_r+0x20a>
 8018c96:	4b26      	ldr	r3, [pc, #152]	@ (8018d30 <_vfiprintf_r+0x224>)
 8018c98:	bb1b      	cbnz	r3, 8018ce2 <_vfiprintf_r+0x1d6>
 8018c9a:	9b03      	ldr	r3, [sp, #12]
 8018c9c:	3307      	adds	r3, #7
 8018c9e:	f023 0307 	bic.w	r3, r3, #7
 8018ca2:	3308      	adds	r3, #8
 8018ca4:	9303      	str	r3, [sp, #12]
 8018ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ca8:	443b      	add	r3, r7
 8018caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8018cac:	e76a      	b.n	8018b84 <_vfiprintf_r+0x78>
 8018cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8018cb2:	460c      	mov	r4, r1
 8018cb4:	2001      	movs	r0, #1
 8018cb6:	e7a8      	b.n	8018c0a <_vfiprintf_r+0xfe>
 8018cb8:	2300      	movs	r3, #0
 8018cba:	3401      	adds	r4, #1
 8018cbc:	9305      	str	r3, [sp, #20]
 8018cbe:	4619      	mov	r1, r3
 8018cc0:	f04f 0c0a 	mov.w	ip, #10
 8018cc4:	4620      	mov	r0, r4
 8018cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cca:	3a30      	subs	r2, #48	@ 0x30
 8018ccc:	2a09      	cmp	r2, #9
 8018cce:	d903      	bls.n	8018cd8 <_vfiprintf_r+0x1cc>
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d0c6      	beq.n	8018c62 <_vfiprintf_r+0x156>
 8018cd4:	9105      	str	r1, [sp, #20]
 8018cd6:	e7c4      	b.n	8018c62 <_vfiprintf_r+0x156>
 8018cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8018cdc:	4604      	mov	r4, r0
 8018cde:	2301      	movs	r3, #1
 8018ce0:	e7f0      	b.n	8018cc4 <_vfiprintf_r+0x1b8>
 8018ce2:	ab03      	add	r3, sp, #12
 8018ce4:	9300      	str	r3, [sp, #0]
 8018ce6:	462a      	mov	r2, r5
 8018ce8:	4b12      	ldr	r3, [pc, #72]	@ (8018d34 <_vfiprintf_r+0x228>)
 8018cea:	a904      	add	r1, sp, #16
 8018cec:	4630      	mov	r0, r6
 8018cee:	f7fb fe27 	bl	8014940 <_printf_float>
 8018cf2:	4607      	mov	r7, r0
 8018cf4:	1c78      	adds	r0, r7, #1
 8018cf6:	d1d6      	bne.n	8018ca6 <_vfiprintf_r+0x19a>
 8018cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018cfa:	07d9      	lsls	r1, r3, #31
 8018cfc:	d405      	bmi.n	8018d0a <_vfiprintf_r+0x1fe>
 8018cfe:	89ab      	ldrh	r3, [r5, #12]
 8018d00:	059a      	lsls	r2, r3, #22
 8018d02:	d402      	bmi.n	8018d0a <_vfiprintf_r+0x1fe>
 8018d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d06:	f7fc fe57 	bl	80159b8 <__retarget_lock_release_recursive>
 8018d0a:	89ab      	ldrh	r3, [r5, #12]
 8018d0c:	065b      	lsls	r3, r3, #25
 8018d0e:	f53f af1f 	bmi.w	8018b50 <_vfiprintf_r+0x44>
 8018d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d14:	e71e      	b.n	8018b54 <_vfiprintf_r+0x48>
 8018d16:	ab03      	add	r3, sp, #12
 8018d18:	9300      	str	r3, [sp, #0]
 8018d1a:	462a      	mov	r2, r5
 8018d1c:	4b05      	ldr	r3, [pc, #20]	@ (8018d34 <_vfiprintf_r+0x228>)
 8018d1e:	a904      	add	r1, sp, #16
 8018d20:	4630      	mov	r0, r6
 8018d22:	f7fc f895 	bl	8014e50 <_printf_i>
 8018d26:	e7e4      	b.n	8018cf2 <_vfiprintf_r+0x1e6>
 8018d28:	08019739 	.word	0x08019739
 8018d2c:	08019743 	.word	0x08019743
 8018d30:	08014941 	.word	0x08014941
 8018d34:	08018ae9 	.word	0x08018ae9
 8018d38:	0801973f 	.word	0x0801973f

08018d3c <__swbuf_r>:
 8018d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d3e:	460e      	mov	r6, r1
 8018d40:	4614      	mov	r4, r2
 8018d42:	4605      	mov	r5, r0
 8018d44:	b118      	cbz	r0, 8018d4e <__swbuf_r+0x12>
 8018d46:	6a03      	ldr	r3, [r0, #32]
 8018d48:	b90b      	cbnz	r3, 8018d4e <__swbuf_r+0x12>
 8018d4a:	f7fc fc31 	bl	80155b0 <__sinit>
 8018d4e:	69a3      	ldr	r3, [r4, #24]
 8018d50:	60a3      	str	r3, [r4, #8]
 8018d52:	89a3      	ldrh	r3, [r4, #12]
 8018d54:	071a      	lsls	r2, r3, #28
 8018d56:	d501      	bpl.n	8018d5c <__swbuf_r+0x20>
 8018d58:	6923      	ldr	r3, [r4, #16]
 8018d5a:	b943      	cbnz	r3, 8018d6e <__swbuf_r+0x32>
 8018d5c:	4621      	mov	r1, r4
 8018d5e:	4628      	mov	r0, r5
 8018d60:	f000 f82a 	bl	8018db8 <__swsetup_r>
 8018d64:	b118      	cbz	r0, 8018d6e <__swbuf_r+0x32>
 8018d66:	f04f 37ff 	mov.w	r7, #4294967295
 8018d6a:	4638      	mov	r0, r7
 8018d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d6e:	6823      	ldr	r3, [r4, #0]
 8018d70:	6922      	ldr	r2, [r4, #16]
 8018d72:	1a98      	subs	r0, r3, r2
 8018d74:	6963      	ldr	r3, [r4, #20]
 8018d76:	b2f6      	uxtb	r6, r6
 8018d78:	4283      	cmp	r3, r0
 8018d7a:	4637      	mov	r7, r6
 8018d7c:	dc05      	bgt.n	8018d8a <__swbuf_r+0x4e>
 8018d7e:	4621      	mov	r1, r4
 8018d80:	4628      	mov	r0, r5
 8018d82:	f7ff f9d1 	bl	8018128 <_fflush_r>
 8018d86:	2800      	cmp	r0, #0
 8018d88:	d1ed      	bne.n	8018d66 <__swbuf_r+0x2a>
 8018d8a:	68a3      	ldr	r3, [r4, #8]
 8018d8c:	3b01      	subs	r3, #1
 8018d8e:	60a3      	str	r3, [r4, #8]
 8018d90:	6823      	ldr	r3, [r4, #0]
 8018d92:	1c5a      	adds	r2, r3, #1
 8018d94:	6022      	str	r2, [r4, #0]
 8018d96:	701e      	strb	r6, [r3, #0]
 8018d98:	6962      	ldr	r2, [r4, #20]
 8018d9a:	1c43      	adds	r3, r0, #1
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	d004      	beq.n	8018daa <__swbuf_r+0x6e>
 8018da0:	89a3      	ldrh	r3, [r4, #12]
 8018da2:	07db      	lsls	r3, r3, #31
 8018da4:	d5e1      	bpl.n	8018d6a <__swbuf_r+0x2e>
 8018da6:	2e0a      	cmp	r6, #10
 8018da8:	d1df      	bne.n	8018d6a <__swbuf_r+0x2e>
 8018daa:	4621      	mov	r1, r4
 8018dac:	4628      	mov	r0, r5
 8018dae:	f7ff f9bb 	bl	8018128 <_fflush_r>
 8018db2:	2800      	cmp	r0, #0
 8018db4:	d0d9      	beq.n	8018d6a <__swbuf_r+0x2e>
 8018db6:	e7d6      	b.n	8018d66 <__swbuf_r+0x2a>

08018db8 <__swsetup_r>:
 8018db8:	b538      	push	{r3, r4, r5, lr}
 8018dba:	4b29      	ldr	r3, [pc, #164]	@ (8018e60 <__swsetup_r+0xa8>)
 8018dbc:	4605      	mov	r5, r0
 8018dbe:	6818      	ldr	r0, [r3, #0]
 8018dc0:	460c      	mov	r4, r1
 8018dc2:	b118      	cbz	r0, 8018dcc <__swsetup_r+0x14>
 8018dc4:	6a03      	ldr	r3, [r0, #32]
 8018dc6:	b90b      	cbnz	r3, 8018dcc <__swsetup_r+0x14>
 8018dc8:	f7fc fbf2 	bl	80155b0 <__sinit>
 8018dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dd0:	0719      	lsls	r1, r3, #28
 8018dd2:	d422      	bmi.n	8018e1a <__swsetup_r+0x62>
 8018dd4:	06da      	lsls	r2, r3, #27
 8018dd6:	d407      	bmi.n	8018de8 <__swsetup_r+0x30>
 8018dd8:	2209      	movs	r2, #9
 8018dda:	602a      	str	r2, [r5, #0]
 8018ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018de0:	81a3      	strh	r3, [r4, #12]
 8018de2:	f04f 30ff 	mov.w	r0, #4294967295
 8018de6:	e033      	b.n	8018e50 <__swsetup_r+0x98>
 8018de8:	0758      	lsls	r0, r3, #29
 8018dea:	d512      	bpl.n	8018e12 <__swsetup_r+0x5a>
 8018dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018dee:	b141      	cbz	r1, 8018e02 <__swsetup_r+0x4a>
 8018df0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018df4:	4299      	cmp	r1, r3
 8018df6:	d002      	beq.n	8018dfe <__swsetup_r+0x46>
 8018df8:	4628      	mov	r0, r5
 8018dfa:	f7fd fbdb 	bl	80165b4 <_free_r>
 8018dfe:	2300      	movs	r3, #0
 8018e00:	6363      	str	r3, [r4, #52]	@ 0x34
 8018e02:	89a3      	ldrh	r3, [r4, #12]
 8018e04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018e08:	81a3      	strh	r3, [r4, #12]
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	6063      	str	r3, [r4, #4]
 8018e0e:	6923      	ldr	r3, [r4, #16]
 8018e10:	6023      	str	r3, [r4, #0]
 8018e12:	89a3      	ldrh	r3, [r4, #12]
 8018e14:	f043 0308 	orr.w	r3, r3, #8
 8018e18:	81a3      	strh	r3, [r4, #12]
 8018e1a:	6923      	ldr	r3, [r4, #16]
 8018e1c:	b94b      	cbnz	r3, 8018e32 <__swsetup_r+0x7a>
 8018e1e:	89a3      	ldrh	r3, [r4, #12]
 8018e20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018e28:	d003      	beq.n	8018e32 <__swsetup_r+0x7a>
 8018e2a:	4621      	mov	r1, r4
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	f7ff f9c9 	bl	80181c4 <__smakebuf_r>
 8018e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e36:	f013 0201 	ands.w	r2, r3, #1
 8018e3a:	d00a      	beq.n	8018e52 <__swsetup_r+0x9a>
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	60a2      	str	r2, [r4, #8]
 8018e40:	6962      	ldr	r2, [r4, #20]
 8018e42:	4252      	negs	r2, r2
 8018e44:	61a2      	str	r2, [r4, #24]
 8018e46:	6922      	ldr	r2, [r4, #16]
 8018e48:	b942      	cbnz	r2, 8018e5c <__swsetup_r+0xa4>
 8018e4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018e4e:	d1c5      	bne.n	8018ddc <__swsetup_r+0x24>
 8018e50:	bd38      	pop	{r3, r4, r5, pc}
 8018e52:	0799      	lsls	r1, r3, #30
 8018e54:	bf58      	it	pl
 8018e56:	6962      	ldrpl	r2, [r4, #20]
 8018e58:	60a2      	str	r2, [r4, #8]
 8018e5a:	e7f4      	b.n	8018e46 <__swsetup_r+0x8e>
 8018e5c:	2000      	movs	r0, #0
 8018e5e:	e7f7      	b.n	8018e50 <__swsetup_r+0x98>
 8018e60:	24000030 	.word	0x24000030

08018e64 <_raise_r>:
 8018e64:	291f      	cmp	r1, #31
 8018e66:	b538      	push	{r3, r4, r5, lr}
 8018e68:	4605      	mov	r5, r0
 8018e6a:	460c      	mov	r4, r1
 8018e6c:	d904      	bls.n	8018e78 <_raise_r+0x14>
 8018e6e:	2316      	movs	r3, #22
 8018e70:	6003      	str	r3, [r0, #0]
 8018e72:	f04f 30ff 	mov.w	r0, #4294967295
 8018e76:	bd38      	pop	{r3, r4, r5, pc}
 8018e78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018e7a:	b112      	cbz	r2, 8018e82 <_raise_r+0x1e>
 8018e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018e80:	b94b      	cbnz	r3, 8018e96 <_raise_r+0x32>
 8018e82:	4628      	mov	r0, r5
 8018e84:	f000 f830 	bl	8018ee8 <_getpid_r>
 8018e88:	4622      	mov	r2, r4
 8018e8a:	4601      	mov	r1, r0
 8018e8c:	4628      	mov	r0, r5
 8018e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e92:	f000 b817 	b.w	8018ec4 <_kill_r>
 8018e96:	2b01      	cmp	r3, #1
 8018e98:	d00a      	beq.n	8018eb0 <_raise_r+0x4c>
 8018e9a:	1c59      	adds	r1, r3, #1
 8018e9c:	d103      	bne.n	8018ea6 <_raise_r+0x42>
 8018e9e:	2316      	movs	r3, #22
 8018ea0:	6003      	str	r3, [r0, #0]
 8018ea2:	2001      	movs	r0, #1
 8018ea4:	e7e7      	b.n	8018e76 <_raise_r+0x12>
 8018ea6:	2100      	movs	r1, #0
 8018ea8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018eac:	4620      	mov	r0, r4
 8018eae:	4798      	blx	r3
 8018eb0:	2000      	movs	r0, #0
 8018eb2:	e7e0      	b.n	8018e76 <_raise_r+0x12>

08018eb4 <raise>:
 8018eb4:	4b02      	ldr	r3, [pc, #8]	@ (8018ec0 <raise+0xc>)
 8018eb6:	4601      	mov	r1, r0
 8018eb8:	6818      	ldr	r0, [r3, #0]
 8018eba:	f7ff bfd3 	b.w	8018e64 <_raise_r>
 8018ebe:	bf00      	nop
 8018ec0:	24000030 	.word	0x24000030

08018ec4 <_kill_r>:
 8018ec4:	b538      	push	{r3, r4, r5, lr}
 8018ec6:	4d07      	ldr	r5, [pc, #28]	@ (8018ee4 <_kill_r+0x20>)
 8018ec8:	2300      	movs	r3, #0
 8018eca:	4604      	mov	r4, r0
 8018ecc:	4608      	mov	r0, r1
 8018ece:	4611      	mov	r1, r2
 8018ed0:	602b      	str	r3, [r5, #0]
 8018ed2:	f7eb fa63 	bl	800439c <_kill>
 8018ed6:	1c43      	adds	r3, r0, #1
 8018ed8:	d102      	bne.n	8018ee0 <_kill_r+0x1c>
 8018eda:	682b      	ldr	r3, [r5, #0]
 8018edc:	b103      	cbz	r3, 8018ee0 <_kill_r+0x1c>
 8018ede:	6023      	str	r3, [r4, #0]
 8018ee0:	bd38      	pop	{r3, r4, r5, pc}
 8018ee2:	bf00      	nop
 8018ee4:	24000c34 	.word	0x24000c34

08018ee8 <_getpid_r>:
 8018ee8:	f7eb ba50 	b.w	800438c <_getpid>

08018eec <_init>:
 8018eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eee:	bf00      	nop
 8018ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ef2:	bc08      	pop	{r3}
 8018ef4:	469e      	mov	lr, r3
 8018ef6:	4770      	bx	lr

08018ef8 <_fini>:
 8018ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018efa:	bf00      	nop
 8018efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018efe:	bc08      	pop	{r3}
 8018f00:	469e      	mov	lr, r3
 8018f02:	4770      	bx	lr
